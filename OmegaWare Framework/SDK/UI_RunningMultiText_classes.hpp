#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_RunningMultiText

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Basic_Label_classes.hpp"


namespace CG
{

// WidgetBlueprintGeneratedClass UI_RunningMultiText.UI_RunningMultiText_C
// 0x0050 (0x0378 - 0x0328)
class UUI_RunningMultiText_C final : public UBasic_Label_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_UI_RunningMultiText_C;              // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class FText>                           Texts;                                             // 0x0330(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	float                                         DelayBetweenText;                                  // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextDuration;                                      // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomizeText;                                     // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2B[0x3];                                     // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RunnerProgress;                                    // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          RunnerActive;                                      // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2C[0x3];                                     // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextIndex;                                         // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CurrentLine;                                       // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class USoundCue*                              AudioBeginLine;                                    // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              AudioEndLine;                                      // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UI_RunningMultiText(int32 EntryPoint);
	void Destruct();
	void DoRun();
	void PreConstruct(bool IsDesignTime);
	void Completed_B06C42A944ABEA2C4BF8E7AF24421023(float DeltaTime, float NormalizedTime);
	void OnTick_B06C42A944ABEA2C4BF8E7AF24421023(float DeltaTime, float NormalizedTime);
	void SetTexts(TArray<class FText>& InTexts);
	void SetTextRunnerActive(bool Inactive);
	void SetRunnerProgress(float InProgress, bool* Finished);
	void SetNextLine();
	void InitRun();
	void PlayCue(class USoundCue* InSound);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_RunningMultiText_C">();
	}
	static class UUI_RunningMultiText_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_RunningMultiText_C>();
	}
};
static_assert(alignof(UUI_RunningMultiText_C) == 0x000008, "Wrong alignment on UUI_RunningMultiText_C");
static_assert(sizeof(UUI_RunningMultiText_C) == 0x000378, "Wrong size on UUI_RunningMultiText_C");
static_assert(offsetof(UUI_RunningMultiText_C, UberGraphFrame_UI_RunningMultiText_C) == 0x000328, "Member 'UUI_RunningMultiText_C::UberGraphFrame_UI_RunningMultiText_C' has a wrong offset!");
static_assert(offsetof(UUI_RunningMultiText_C, Texts) == 0x000330, "Member 'UUI_RunningMultiText_C::Texts' has a wrong offset!");
static_assert(offsetof(UUI_RunningMultiText_C, DelayBetweenText) == 0x000340, "Member 'UUI_RunningMultiText_C::DelayBetweenText' has a wrong offset!");
static_assert(offsetof(UUI_RunningMultiText_C, TextDuration) == 0x000344, "Member 'UUI_RunningMultiText_C::TextDuration' has a wrong offset!");
static_assert(offsetof(UUI_RunningMultiText_C, RandomizeText) == 0x000348, "Member 'UUI_RunningMultiText_C::RandomizeText' has a wrong offset!");
static_assert(offsetof(UUI_RunningMultiText_C, RunnerProgress) == 0x00034C, "Member 'UUI_RunningMultiText_C::RunnerProgress' has a wrong offset!");
static_assert(offsetof(UUI_RunningMultiText_C, RunnerActive) == 0x000350, "Member 'UUI_RunningMultiText_C::RunnerActive' has a wrong offset!");
static_assert(offsetof(UUI_RunningMultiText_C, NextIndex) == 0x000354, "Member 'UUI_RunningMultiText_C::NextIndex' has a wrong offset!");
static_assert(offsetof(UUI_RunningMultiText_C, CurrentLine) == 0x000358, "Member 'UUI_RunningMultiText_C::CurrentLine' has a wrong offset!");
static_assert(offsetof(UUI_RunningMultiText_C, AudioBeginLine) == 0x000368, "Member 'UUI_RunningMultiText_C::AudioBeginLine' has a wrong offset!");
static_assert(offsetof(UUI_RunningMultiText_C, AudioEndLine) == 0x000370, "Member 'UUI_RunningMultiText_C::AudioEndLine' has a wrong offset!");

}

