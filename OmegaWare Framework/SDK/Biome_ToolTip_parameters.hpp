#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Biome_ToolTip

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace CG::Params
{

// Function Biome_ToolTip.Biome_ToolTip_C.ExecuteUbergraph_Biome_ToolTip
// 0x0018 (0x0018 - 0x0000)
struct Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DCA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_CustomEvent_Owner;                          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip) == 0x000008, "Wrong alignment on Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip");
static_assert(sizeof(Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip) == 0x000018, "Wrong size on Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip");
static_assert(offsetof(Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip, EntryPoint) == 0x000000, "Member 'Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip::EntryPoint' has a wrong offset!");
static_assert(offsetof(Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip, K2Node_CustomEvent_Owner) == 0x000008, "Member 'Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip::K2Node_CustomEvent_Owner' has a wrong offset!");
static_assert(offsetof(Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip, K2Node_Event_IsDesignTime) == 0x000011, "Member 'Biome_ToolTip_C_ExecuteUbergraph_Biome_ToolTip::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function Biome_ToolTip.Biome_ToolTip_C.Set Tool Tip Owner
// 0x0008 (0x0008 - 0x0000)
struct Biome_ToolTip_C_Set_Tool_Tip_Owner final
{
public:
	class UWidget*                                Param_Owner;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Biome_ToolTip_C_Set_Tool_Tip_Owner) == 0x000008, "Wrong alignment on Biome_ToolTip_C_Set_Tool_Tip_Owner");
static_assert(sizeof(Biome_ToolTip_C_Set_Tool_Tip_Owner) == 0x000008, "Wrong size on Biome_ToolTip_C_Set_Tool_Tip_Owner");
static_assert(offsetof(Biome_ToolTip_C_Set_Tool_Tip_Owner, Param_Owner) == 0x000000, "Member 'Biome_ToolTip_C_Set_Tool_Tip_Owner::Param_Owner' has a wrong offset!");

// Function Biome_ToolTip.Biome_ToolTip_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct Biome_ToolTip_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Biome_ToolTip_C_PreConstruct) == 0x000001, "Wrong alignment on Biome_ToolTip_C_PreConstruct");
static_assert(sizeof(Biome_ToolTip_C_PreConstruct) == 0x000001, "Wrong size on Biome_ToolTip_C_PreConstruct");
static_assert(offsetof(Biome_ToolTip_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'Biome_ToolTip_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function Biome_ToolTip.Biome_ToolTip_C.SetTarget
// 0x0010 (0x0010 - 0x0000)
struct Biome_ToolTip_C_SetTarget final
{
public:
	class UWidget*                                Target_Widget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Biome_ToolTip_C_SetTarget) == 0x000008, "Wrong alignment on Biome_ToolTip_C_SetTarget");
static_assert(sizeof(Biome_ToolTip_C_SetTarget) == 0x000010, "Wrong size on Biome_ToolTip_C_SetTarget");
static_assert(offsetof(Biome_ToolTip_C_SetTarget, Target_Widget) == 0x000000, "Member 'Biome_ToolTip_C_SetTarget::Target_Widget' has a wrong offset!");
static_assert(offsetof(Biome_ToolTip_C_SetTarget, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'Biome_ToolTip_C_SetTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Biome_ToolTip.Biome_ToolTip_C.SetPostionAndAlignment
// 0x0020 (0x0020 - 0x0000)
struct Biome_ToolTip_C_SetPostionAndAlignment final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InAlignment;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CanvasSlot;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Biome_ToolTip_C_SetPostionAndAlignment) == 0x000008, "Wrong alignment on Biome_ToolTip_C_SetPostionAndAlignment");
static_assert(sizeof(Biome_ToolTip_C_SetPostionAndAlignment) == 0x000020, "Wrong size on Biome_ToolTip_C_SetPostionAndAlignment");
static_assert(offsetof(Biome_ToolTip_C_SetPostionAndAlignment, InPosition) == 0x000000, "Member 'Biome_ToolTip_C_SetPostionAndAlignment::InPosition' has a wrong offset!");
static_assert(offsetof(Biome_ToolTip_C_SetPostionAndAlignment, InAlignment) == 0x000008, "Member 'Biome_ToolTip_C_SetPostionAndAlignment::InAlignment' has a wrong offset!");
static_assert(offsetof(Biome_ToolTip_C_SetPostionAndAlignment, CanvasSlot) == 0x000010, "Member 'Biome_ToolTip_C_SetPostionAndAlignment::CanvasSlot' has a wrong offset!");
static_assert(offsetof(Biome_ToolTip_C_SetPostionAndAlignment, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000018, "Member 'Biome_ToolTip_C_SetPostionAndAlignment::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");

// Function Biome_ToolTip.Biome_ToolTip_C.SetData
// 0x0010 (0x0010 - 0x0000)
struct Biome_ToolTip_C_SetData final
{
public:
	class UResourceData*                          ResourceA;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UResourceData*                          ResourceB;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Biome_ToolTip_C_SetData) == 0x000008, "Wrong alignment on Biome_ToolTip_C_SetData");
static_assert(sizeof(Biome_ToolTip_C_SetData) == 0x000010, "Wrong size on Biome_ToolTip_C_SetData");
static_assert(offsetof(Biome_ToolTip_C_SetData, ResourceA) == 0x000000, "Member 'Biome_ToolTip_C_SetData::ResourceA' has a wrong offset!");
static_assert(offsetof(Biome_ToolTip_C_SetData, ResourceB) == 0x000008, "Member 'Biome_ToolTip_C_SetData::ResourceB' has a wrong offset!");

}

