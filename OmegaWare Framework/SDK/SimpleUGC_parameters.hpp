#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleUGC

#include "Basic.hpp"

#include "SimpleUGC_structs.hpp"
#include "Engine_structs.hpp"


namespace CG::Params
{

// Function SimpleUGC.UGCBlueprintLibrary.GetUGCLatentActionManager
// 0x0010 (0x0010 - 0x0000)
struct UGCBlueprintLibrary_GetUGCLatentActionManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUGCLatentActionManager*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBlueprintLibrary_GetUGCLatentActionManager) == 0x000008, "Wrong alignment on UGCBlueprintLibrary_GetUGCLatentActionManager");
static_assert(sizeof(UGCBlueprintLibrary_GetUGCLatentActionManager) == 0x000010, "Wrong size on UGCBlueprintLibrary_GetUGCLatentActionManager");
static_assert(offsetof(UGCBlueprintLibrary_GetUGCLatentActionManager, WorldContextObject) == 0x000000, "Member 'UGCBlueprintLibrary_GetUGCLatentActionManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UGCBlueprintLibrary_GetUGCLatentActionManager, ReturnValue) == 0x000008, "Member 'UGCBlueprintLibrary_GetUGCLatentActionManager::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCBlueprintLibrary.GetUGCRegistry
// 0x0010 (0x0010 - 0x0000)
struct UGCBlueprintLibrary_GetUGCRegistry final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUGCRegistry*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBlueprintLibrary_GetUGCRegistry) == 0x000008, "Wrong alignment on UGCBlueprintLibrary_GetUGCRegistry");
static_assert(sizeof(UGCBlueprintLibrary_GetUGCRegistry) == 0x000010, "Wrong size on UGCBlueprintLibrary_GetUGCRegistry");
static_assert(offsetof(UGCBlueprintLibrary_GetUGCRegistry, WorldContextObject) == 0x000000, "Member 'UGCBlueprintLibrary_GetUGCRegistry::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UGCBlueprintLibrary_GetUGCRegistry, ReturnValue) == 0x000008, "Member 'UGCBlueprintLibrary_GetUGCRegistry::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCBlueprintLibrary.GetUGCSettings
// 0x0010 (0x0010 - 0x0000)
struct UGCBlueprintLibrary_GetUGCSettings final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUGCSettings*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBlueprintLibrary_GetUGCSettings) == 0x000008, "Wrong alignment on UGCBlueprintLibrary_GetUGCSettings");
static_assert(sizeof(UGCBlueprintLibrary_GetUGCSettings) == 0x000010, "Wrong size on UGCBlueprintLibrary_GetUGCSettings");
static_assert(offsetof(UGCBlueprintLibrary_GetUGCSettings, WorldContextObject) == 0x000000, "Member 'UGCBlueprintLibrary_GetUGCSettings::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UGCBlueprintLibrary_GetUGCSettings, ReturnValue) == 0x000008, "Member 'UGCBlueprintLibrary_GetUGCSettings::ReturnValue' has a wrong offset!");

// Function SimpleUGC.ModioModInfoWrapper.IsModIdInvalid
// 0x0001 (0x0001 - 0x0000)
struct ModioModInfoWrapper_IsModIdInvalid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioModInfoWrapper_IsModIdInvalid) == 0x000001, "Wrong alignment on ModioModInfoWrapper_IsModIdInvalid");
static_assert(sizeof(ModioModInfoWrapper_IsModIdInvalid) == 0x000001, "Wrong size on ModioModInfoWrapper_IsModIdInvalid");
static_assert(offsetof(ModioModInfoWrapper_IsModIdInvalid, ReturnValue) == 0x000000, "Member 'ModioModInfoWrapper_IsModIdInvalid::ReturnValue' has a wrong offset!");

// Function SimpleUGC.ModioTermsWrapper.isEmpty
// 0x0001 (0x0001 - 0x0000)
struct ModioTermsWrapper_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioTermsWrapper_IsEmpty) == 0x000001, "Wrong alignment on ModioTermsWrapper_IsEmpty");
static_assert(sizeof(ModioTermsWrapper_IsEmpty) == 0x000001, "Wrong size on ModioTermsWrapper_IsEmpty");
static_assert(offsetof(ModioTermsWrapper_IsEmpty, ReturnValue) == 0x000000, "Member 'ModioTermsWrapper_IsEmpty::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCLatentActionManager.GetCachedModioModMetaData
// 0x0010 (0x0010 - 0x0000)
struct UGCLatentActionManager_GetCachedModioModMetaData final
{
public:
	int64                                         ModId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModioModInfoWrapper*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCLatentActionManager_GetCachedModioModMetaData) == 0x000008, "Wrong alignment on UGCLatentActionManager_GetCachedModioModMetaData");
static_assert(sizeof(UGCLatentActionManager_GetCachedModioModMetaData) == 0x000010, "Wrong size on UGCLatentActionManager_GetCachedModioModMetaData");
static_assert(offsetof(UGCLatentActionManager_GetCachedModioModMetaData, ModId) == 0x000000, "Member 'UGCLatentActionManager_GetCachedModioModMetaData::ModId' has a wrong offset!");
static_assert(offsetof(UGCLatentActionManager_GetCachedModioModMetaData, ReturnValue) == 0x000008, "Member 'UGCLatentActionManager_GetCachedModioModMetaData::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCPackage.GetIdAsInt
// 0x0008 (0x0008 - 0x0000)
struct UGCPackage_GetIdAsInt final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCPackage_GetIdAsInt) == 0x000008, "Wrong alignment on UGCPackage_GetIdAsInt");
static_assert(sizeof(UGCPackage_GetIdAsInt) == 0x000008, "Wrong size on UGCPackage_GetIdAsInt");
static_assert(offsetof(UGCPackage_GetIdAsInt, ReturnValue) == 0x000000, "Member 'UGCPackage_GetIdAsInt::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCPackage.GetIdAsString
// 0x0010 (0x0010 - 0x0000)
struct UGCPackage_GetIdAsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCPackage_GetIdAsString) == 0x000008, "Wrong alignment on UGCPackage_GetIdAsString");
static_assert(sizeof(UGCPackage_GetIdAsString) == 0x000010, "Wrong size on UGCPackage_GetIdAsString");
static_assert(offsetof(UGCPackage_GetIdAsString, ReturnValue) == 0x000000, "Member 'UGCPackage_GetIdAsString::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.AreDeprecatedModsInstalled
// 0x0001 (0x0001 - 0x0000)
struct UGCRegistry_AreDeprecatedModsInstalled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCRegistry_AreDeprecatedModsInstalled) == 0x000001, "Wrong alignment on UGCRegistry_AreDeprecatedModsInstalled");
static_assert(sizeof(UGCRegistry_AreDeprecatedModsInstalled) == 0x000001, "Wrong size on UGCRegistry_AreDeprecatedModsInstalled");
static_assert(offsetof(UGCRegistry_AreDeprecatedModsInstalled, ReturnValue) == 0x000000, "Member 'UGCRegistry_AreDeprecatedModsInstalled::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.AreModsInstalled
// 0x0002 (0x0002 - 0x0000)
struct UGCRegistry_AreModsInstalled final
{
public:
	EUGCApprovalStatus                            ApprovalStatus;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCRegistry_AreModsInstalled) == 0x000001, "Wrong alignment on UGCRegistry_AreModsInstalled");
static_assert(sizeof(UGCRegistry_AreModsInstalled) == 0x000002, "Wrong size on UGCRegistry_AreModsInstalled");
static_assert(offsetof(UGCRegistry_AreModsInstalled, ApprovalStatus) == 0x000000, "Member 'UGCRegistry_AreModsInstalled::ApprovalStatus' has a wrong offset!");
static_assert(offsetof(UGCRegistry_AreModsInstalled, ReturnValue) == 0x000001, "Member 'UGCRegistry_AreModsInstalled::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.GetAllClassesInPackage
// 0x0020 (0x0020 - 0x0000)
struct UGCRegistry_GetAllClassesInPackage final
{
public:
	class UUGCPackage*                            Package;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClass*>                         Classes;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D6[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCRegistry_GetAllClassesInPackage) == 0x000008, "Wrong alignment on UGCRegistry_GetAllClassesInPackage");
static_assert(sizeof(UGCRegistry_GetAllClassesInPackage) == 0x000020, "Wrong size on UGCRegistry_GetAllClassesInPackage");
static_assert(offsetof(UGCRegistry_GetAllClassesInPackage, Package) == 0x000000, "Member 'UGCRegistry_GetAllClassesInPackage::Package' has a wrong offset!");
static_assert(offsetof(UGCRegistry_GetAllClassesInPackage, Classes) == 0x000008, "Member 'UGCRegistry_GetAllClassesInPackage::Classes' has a wrong offset!");
static_assert(offsetof(UGCRegistry_GetAllClassesInPackage, ReturnValue) == 0x000018, "Member 'UGCRegistry_GetAllClassesInPackage::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.GetMapsInPackage
// 0x0020 (0x0020 - 0x0000)
struct UGCRegistry_GetMapsInPackage final
{
public:
	class UUGCPackage*                            Package;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Maps;                                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D7[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCRegistry_GetMapsInPackage) == 0x000008, "Wrong alignment on UGCRegistry_GetMapsInPackage");
static_assert(sizeof(UGCRegistry_GetMapsInPackage) == 0x000020, "Wrong size on UGCRegistry_GetMapsInPackage");
static_assert(offsetof(UGCRegistry_GetMapsInPackage, Package) == 0x000000, "Member 'UGCRegistry_GetMapsInPackage::Package' has a wrong offset!");
static_assert(offsetof(UGCRegistry_GetMapsInPackage, Maps) == 0x000008, "Member 'UGCRegistry_GetMapsInPackage::Maps' has a wrong offset!");
static_assert(offsetof(UGCRegistry_GetMapsInPackage, ReturnValue) == 0x000018, "Member 'UGCRegistry_GetMapsInPackage::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.GetPackagesWhichDependsOnPackage
// 0x0018 (0x0018 - 0x0000)
struct UGCRegistry_GetPackagesWhichDependsOnPackage final
{
public:
	class UUGCPackage*                            Package;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUGCPackage*>                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCRegistry_GetPackagesWhichDependsOnPackage) == 0x000008, "Wrong alignment on UGCRegistry_GetPackagesWhichDependsOnPackage");
static_assert(sizeof(UGCRegistry_GetPackagesWhichDependsOnPackage) == 0x000018, "Wrong size on UGCRegistry_GetPackagesWhichDependsOnPackage");
static_assert(offsetof(UGCRegistry_GetPackagesWhichDependsOnPackage, Package) == 0x000000, "Member 'UGCRegistry_GetPackagesWhichDependsOnPackage::Package' has a wrong offset!");
static_assert(offsetof(UGCRegistry_GetPackagesWhichDependsOnPackage, ReturnValue) == 0x000008, "Member 'UGCRegistry_GetPackagesWhichDependsOnPackage::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.MountUGCPackage
// 0x0010 (0x0010 - 0x0000)
struct UGCRegistry_MountUGCPackage final
{
public:
	class UUGCPackage*                            Package;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromJoining;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D8[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCRegistry_MountUGCPackage) == 0x000008, "Wrong alignment on UGCRegistry_MountUGCPackage");
static_assert(sizeof(UGCRegistry_MountUGCPackage) == 0x000010, "Wrong size on UGCRegistry_MountUGCPackage");
static_assert(offsetof(UGCRegistry_MountUGCPackage, Package) == 0x000000, "Member 'UGCRegistry_MountUGCPackage::Package' has a wrong offset!");
static_assert(offsetof(UGCRegistry_MountUGCPackage, FromJoining) == 0x000008, "Member 'UGCRegistry_MountUGCPackage::FromJoining' has a wrong offset!");
static_assert(offsetof(UGCRegistry_MountUGCPackage, ReturnValue) == 0x000009, "Member 'UGCRegistry_MountUGCPackage::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.NumberOfModsInstalled
// 0x0008 (0x0008 - 0x0000)
struct UGCRegistry_NumberOfModsInstalled final
{
public:
	EUGCApprovalStatus                            ApprovalStatus;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCRegistry_NumberOfModsInstalled) == 0x000004, "Wrong alignment on UGCRegistry_NumberOfModsInstalled");
static_assert(sizeof(UGCRegistry_NumberOfModsInstalled) == 0x000008, "Wrong size on UGCRegistry_NumberOfModsInstalled");
static_assert(offsetof(UGCRegistry_NumberOfModsInstalled, ApprovalStatus) == 0x000000, "Member 'UGCRegistry_NumberOfModsInstalled::ApprovalStatus' has a wrong offset!");
static_assert(offsetof(UGCRegistry_NumberOfModsInstalled, ReturnValue) == 0x000004, "Member 'UGCRegistry_NumberOfModsInstalled::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.RegisterAssetFromPackage
// 0x0008 (0x0008 - 0x0000)
struct UGCRegistry_RegisterAssetFromPackage final
{
public:
	class UUGCPackage*                            Package;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCRegistry_RegisterAssetFromPackage) == 0x000008, "Wrong alignment on UGCRegistry_RegisterAssetFromPackage");
static_assert(sizeof(UGCRegistry_RegisterAssetFromPackage) == 0x000008, "Wrong size on UGCRegistry_RegisterAssetFromPackage");
static_assert(offsetof(UGCRegistry_RegisterAssetFromPackage, Package) == 0x000000, "Member 'UGCRegistry_RegisterAssetFromPackage::Package' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.TryGetPackageFromId
// 0x0018 (0x0018 - 0x0000)
struct UGCRegistry_TryGetPackageFromId final
{
public:
	class FString                                 ModId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUGCPackage*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCRegistry_TryGetPackageFromId) == 0x000008, "Wrong alignment on UGCRegistry_TryGetPackageFromId");
static_assert(sizeof(UGCRegistry_TryGetPackageFromId) == 0x000018, "Wrong size on UGCRegistry_TryGetPackageFromId");
static_assert(offsetof(UGCRegistry_TryGetPackageFromId, ModId) == 0x000000, "Member 'UGCRegistry_TryGetPackageFromId::ModId' has a wrong offset!");
static_assert(offsetof(UGCRegistry_TryGetPackageFromId, ReturnValue) == 0x000010, "Member 'UGCRegistry_TryGetPackageFromId::ReturnValue' has a wrong offset!");

// DelegateFunction SimpleUGC.UGCRegistry.UGCBlueprintsSpawned__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct UGCRegistry_UGCBlueprintsSpawned__DelegateSignature final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCRegistry_UGCBlueprintsSpawned__DelegateSignature) == 0x000004, "Wrong alignment on UGCRegistry_UGCBlueprintsSpawned__DelegateSignature");
static_assert(sizeof(UGCRegistry_UGCBlueprintsSpawned__DelegateSignature) == 0x000004, "Wrong size on UGCRegistry_UGCBlueprintsSpawned__DelegateSignature");
static_assert(offsetof(UGCRegistry_UGCBlueprintsSpawned__DelegateSignature, Count) == 0x000000, "Member 'UGCRegistry_UGCBlueprintsSpawned__DelegateSignature::Count' has a wrong offset!");

// DelegateFunction SimpleUGC.UGCRegistry.UGCPackageMounted__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct UGCRegistry_UGCPackageMounted__DelegateSignature final
{
public:
	bool                                          Sandbox;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCRegistry_UGCPackageMounted__DelegateSignature) == 0x000001, "Wrong alignment on UGCRegistry_UGCPackageMounted__DelegateSignature");
static_assert(sizeof(UGCRegistry_UGCPackageMounted__DelegateSignature) == 0x000001, "Wrong size on UGCRegistry_UGCPackageMounted__DelegateSignature");
static_assert(offsetof(UGCRegistry_UGCPackageMounted__DelegateSignature, Sandbox) == 0x000000, "Member 'UGCRegistry_UGCPackageMounted__DelegateSignature::Sandbox' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.UnmountUGCPackage
// 0x0010 (0x0010 - 0x0000)
struct UGCRegistry_UnmountUGCPackage final
{
public:
	class UUGCPackage*                            Package;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveFromUserSettings;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveFromDisk;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14DA[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCRegistry_UnmountUGCPackage) == 0x000008, "Wrong alignment on UGCRegistry_UnmountUGCPackage");
static_assert(sizeof(UGCRegistry_UnmountUGCPackage) == 0x000010, "Wrong size on UGCRegistry_UnmountUGCPackage");
static_assert(offsetof(UGCRegistry_UnmountUGCPackage, Package) == 0x000000, "Member 'UGCRegistry_UnmountUGCPackage::Package' has a wrong offset!");
static_assert(offsetof(UGCRegistry_UnmountUGCPackage, RemoveFromUserSettings) == 0x000008, "Member 'UGCRegistry_UnmountUGCPackage::RemoveFromUserSettings' has a wrong offset!");
static_assert(offsetof(UGCRegistry_UnmountUGCPackage, RemoveFromDisk) == 0x000009, "Member 'UGCRegistry_UnmountUGCPackage::RemoveFromDisk' has a wrong offset!");
static_assert(offsetof(UGCRegistry_UnmountUGCPackage, ReturnValue) == 0x00000A, "Member 'UGCRegistry_UnmountUGCPackage::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.UnmountUGCPackages
// 0x0010 (0x0010 - 0x0000)
struct UGCRegistry_UnmountUGCPackages final
{
public:
	TArray<class FString>                         ExcludingModIds;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCRegistry_UnmountUGCPackages) == 0x000008, "Wrong alignment on UGCRegistry_UnmountUGCPackages");
static_assert(sizeof(UGCRegistry_UnmountUGCPackages) == 0x000010, "Wrong size on UGCRegistry_UnmountUGCPackages");
static_assert(offsetof(UGCRegistry_UnmountUGCPackages, ExcludingModIds) == 0x000000, "Member 'UGCRegistry_UnmountUGCPackages::ExcludingModIds' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.GetPackagesSorted
// 0x0018 (0x0018 - 0x0000)
struct UGCRegistry_GetPackagesSorted final
{
public:
	EPackageSortField                             ByField;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ascending;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14DB[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUGCPackage*>                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCRegistry_GetPackagesSorted) == 0x000008, "Wrong alignment on UGCRegistry_GetPackagesSorted");
static_assert(sizeof(UGCRegistry_GetPackagesSorted) == 0x000018, "Wrong size on UGCRegistry_GetPackagesSorted");
static_assert(offsetof(UGCRegistry_GetPackagesSorted, ByField) == 0x000000, "Member 'UGCRegistry_GetPackagesSorted::ByField' has a wrong offset!");
static_assert(offsetof(UGCRegistry_GetPackagesSorted, Ascending) == 0x000001, "Member 'UGCRegistry_GetPackagesSorted::Ascending' has a wrong offset!");
static_assert(offsetof(UGCRegistry_GetPackagesSorted, ReturnValue) == 0x000008, "Member 'UGCRegistry_GetPackagesSorted::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.IsModEnabled
// 0x0018 (0x0018 - 0x0000)
struct UGCRegistry_IsModEnabled final
{
public:
	class FString                                 ModId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14DC[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCRegistry_IsModEnabled) == 0x000008, "Wrong alignment on UGCRegistry_IsModEnabled");
static_assert(sizeof(UGCRegistry_IsModEnabled) == 0x000018, "Wrong size on UGCRegistry_IsModEnabled");
static_assert(offsetof(UGCRegistry_IsModEnabled, ModId) == 0x000000, "Member 'UGCRegistry_IsModEnabled::ModId' has a wrong offset!");
static_assert(offsetof(UGCRegistry_IsModEnabled, ReturnValue) == 0x000010, "Member 'UGCRegistry_IsModEnabled::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.IsModInstalled
// 0x0018 (0x0018 - 0x0000)
struct UGCRegistry_IsModInstalled final
{
public:
	class FString                                 ModId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14DD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCRegistry_IsModInstalled) == 0x000008, "Wrong alignment on UGCRegistry_IsModInstalled");
static_assert(sizeof(UGCRegistry_IsModInstalled) == 0x000018, "Wrong size on UGCRegistry_IsModInstalled");
static_assert(offsetof(UGCRegistry_IsModInstalled, ModId) == 0x000000, "Member 'UGCRegistry_IsModInstalled::ModId' has a wrong offset!");
static_assert(offsetof(UGCRegistry_IsModInstalled, ReturnValue) == 0x000010, "Member 'UGCRegistry_IsModInstalled::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.IsModInstalledByIdOrName
// 0x0018 (0x0018 - 0x0000)
struct UGCRegistry_IsModInstalledByIdOrName final
{
public:
	class FString                                 ModIdOrName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeDeprecatedLocation;                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14DE[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCRegistry_IsModInstalledByIdOrName) == 0x000008, "Wrong alignment on UGCRegistry_IsModInstalledByIdOrName");
static_assert(sizeof(UGCRegistry_IsModInstalledByIdOrName) == 0x000018, "Wrong size on UGCRegistry_IsModInstalledByIdOrName");
static_assert(offsetof(UGCRegistry_IsModInstalledByIdOrName, ModIdOrName) == 0x000000, "Member 'UGCRegistry_IsModInstalledByIdOrName::ModIdOrName' has a wrong offset!");
static_assert(offsetof(UGCRegistry_IsModInstalledByIdOrName, IncludeDeprecatedLocation) == 0x000010, "Member 'UGCRegistry_IsModInstalledByIdOrName::IncludeDeprecatedLocation' has a wrong offset!");
static_assert(offsetof(UGCRegistry_IsModInstalledByIdOrName, ReturnValue) == 0x000011, "Member 'UGCRegistry_IsModInstalledByIdOrName::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.IsModInstalledImprecise
// 0x0018 (0x0018 - 0x0000)
struct UGCRegistry_IsModInstalledImprecise final
{
public:
	class FString                                 ModName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeDeprecatedLocation;                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14DF[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCRegistry_IsModInstalledImprecise) == 0x000008, "Wrong alignment on UGCRegistry_IsModInstalledImprecise");
static_assert(sizeof(UGCRegistry_IsModInstalledImprecise) == 0x000018, "Wrong size on UGCRegistry_IsModInstalledImprecise");
static_assert(offsetof(UGCRegistry_IsModInstalledImprecise, ModName) == 0x000000, "Member 'UGCRegistry_IsModInstalledImprecise::ModName' has a wrong offset!");
static_assert(offsetof(UGCRegistry_IsModInstalledImprecise, IncludeDeprecatedLocation) == 0x000010, "Member 'UGCRegistry_IsModInstalledImprecise::IncludeDeprecatedLocation' has a wrong offset!");
static_assert(offsetof(UGCRegistry_IsModInstalledImprecise, ReturnValue) == 0x000011, "Member 'UGCRegistry_IsModInstalledImprecise::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCRegistry.IsModToBeEnabled
// 0x0010 (0x0010 - 0x0000)
struct UGCRegistry_IsModToBeEnabled final
{
public:
	int64                                         ModId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCRegistry_IsModToBeEnabled) == 0x000008, "Wrong alignment on UGCRegistry_IsModToBeEnabled");
static_assert(sizeof(UGCRegistry_IsModToBeEnabled) == 0x000010, "Wrong size on UGCRegistry_IsModToBeEnabled");
static_assert(offsetof(UGCRegistry_IsModToBeEnabled, ModId) == 0x000000, "Member 'UGCRegistry_IsModToBeEnabled::ModId' has a wrong offset!");
static_assert(offsetof(UGCRegistry_IsModToBeEnabled, ReturnValue) == 0x000008, "Member 'UGCRegistry_IsModToBeEnabled::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSettings.ClearSlot
// 0x0004 (0x0004 - 0x0000)
struct UGCSettings_ClearSlot final
{
public:
	int32                                         SlotNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSettings_ClearSlot) == 0x000004, "Wrong alignment on UGCSettings_ClearSlot");
static_assert(sizeof(UGCSettings_ClearSlot) == 0x000004, "Wrong size on UGCSettings_ClearSlot");
static_assert(offsetof(UGCSettings_ClearSlot, SlotNumber) == 0x000000, "Member 'UGCSettings_ClearSlot::SlotNumber' has a wrong offset!");

// Function SimpleUGC.UGCSettings.DoesSlotContainMods
// 0x0008 (0x0008 - 0x0000)
struct UGCSettings_DoesSlotContainMods final
{
public:
	int32                                         SlotNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E6[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCSettings_DoesSlotContainMods) == 0x000004, "Wrong alignment on UGCSettings_DoesSlotContainMods");
static_assert(sizeof(UGCSettings_DoesSlotContainMods) == 0x000008, "Wrong size on UGCSettings_DoesSlotContainMods");
static_assert(offsetof(UGCSettings_DoesSlotContainMods, SlotNumber) == 0x000000, "Member 'UGCSettings_DoesSlotContainMods::SlotNumber' has a wrong offset!");
static_assert(offsetof(UGCSettings_DoesSlotContainMods, ReturnValue) == 0x000004, "Member 'UGCSettings_DoesSlotContainMods::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSettings.GetIconIndexOfSlot
// 0x0008 (0x0008 - 0x0000)
struct UGCSettings_GetIconIndexOfSlot final
{
public:
	int32                                         SlotNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSettings_GetIconIndexOfSlot) == 0x000004, "Wrong alignment on UGCSettings_GetIconIndexOfSlot");
static_assert(sizeof(UGCSettings_GetIconIndexOfSlot) == 0x000008, "Wrong size on UGCSettings_GetIconIndexOfSlot");
static_assert(offsetof(UGCSettings_GetIconIndexOfSlot, SlotNumber) == 0x000000, "Member 'UGCSettings_GetIconIndexOfSlot::SlotNumber' has a wrong offset!");
static_assert(offsetof(UGCSettings_GetIconIndexOfSlot, ReturnValue) == 0x000004, "Member 'UGCSettings_GetIconIndexOfSlot::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSettings.GetModIdsOfSlot
// 0x0018 (0x0018 - 0x0000)
struct UGCSettings_GetModIdsOfSlot final
{
public:
	int32                                         SlotNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSettings_GetModIdsOfSlot) == 0x000008, "Wrong alignment on UGCSettings_GetModIdsOfSlot");
static_assert(sizeof(UGCSettings_GetModIdsOfSlot) == 0x000018, "Wrong size on UGCSettings_GetModIdsOfSlot");
static_assert(offsetof(UGCSettings_GetModIdsOfSlot, SlotNumber) == 0x000000, "Member 'UGCSettings_GetModIdsOfSlot::SlotNumber' has a wrong offset!");
static_assert(offsetof(UGCSettings_GetModIdsOfSlot, ReturnValue) == 0x000008, "Member 'UGCSettings_GetModIdsOfSlot::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSettings.GetModNamesOfSlot
// 0x0018 (0x0018 - 0x0000)
struct UGCSettings_GetModNamesOfSlot final
{
public:
	int32                                         SlotNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNumberOfUnknown;                                // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSettings_GetModNamesOfSlot) == 0x000008, "Wrong alignment on UGCSettings_GetModNamesOfSlot");
static_assert(sizeof(UGCSettings_GetModNamesOfSlot) == 0x000018, "Wrong size on UGCSettings_GetModNamesOfSlot");
static_assert(offsetof(UGCSettings_GetModNamesOfSlot, SlotNumber) == 0x000000, "Member 'UGCSettings_GetModNamesOfSlot::SlotNumber' has a wrong offset!");
static_assert(offsetof(UGCSettings_GetModNamesOfSlot, OutNumberOfUnknown) == 0x000004, "Member 'UGCSettings_GetModNamesOfSlot::OutNumberOfUnknown' has a wrong offset!");
static_assert(offsetof(UGCSettings_GetModNamesOfSlot, ReturnValue) == 0x000008, "Member 'UGCSettings_GetModNamesOfSlot::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSettings.LoadSlot
// 0x0008 (0x0008 - 0x0000)
struct UGCSettings_LoadSlot final
{
public:
	int32                                         SlotNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E8[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCSettings_LoadSlot) == 0x000004, "Wrong alignment on UGCSettings_LoadSlot");
static_assert(sizeof(UGCSettings_LoadSlot) == 0x000008, "Wrong size on UGCSettings_LoadSlot");
static_assert(offsetof(UGCSettings_LoadSlot, SlotNumber) == 0x000000, "Member 'UGCSettings_LoadSlot::SlotNumber' has a wrong offset!");
static_assert(offsetof(UGCSettings_LoadSlot, ReturnValue) == 0x000004, "Member 'UGCSettings_LoadSlot::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSettings.ReadFromPlainText
// 0x0028 (0x0028 - 0x0000)
struct UGCSettings_ReadFromPlainText final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutTextContent;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E9[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCSettings_ReadFromPlainText) == 0x000008, "Wrong alignment on UGCSettings_ReadFromPlainText");
static_assert(sizeof(UGCSettings_ReadFromPlainText) == 0x000028, "Wrong size on UGCSettings_ReadFromPlainText");
static_assert(offsetof(UGCSettings_ReadFromPlainText, Filename) == 0x000000, "Member 'UGCSettings_ReadFromPlainText::Filename' has a wrong offset!");
static_assert(offsetof(UGCSettings_ReadFromPlainText, OutTextContent) == 0x000010, "Member 'UGCSettings_ReadFromPlainText::OutTextContent' has a wrong offset!");
static_assert(offsetof(UGCSettings_ReadFromPlainText, ReturnValue) == 0x000020, "Member 'UGCSettings_ReadFromPlainText::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSettings.SaveToSlot
// 0x0004 (0x0004 - 0x0000)
struct UGCSettings_SaveToSlot final
{
public:
	int32                                         SlotNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSettings_SaveToSlot) == 0x000004, "Wrong alignment on UGCSettings_SaveToSlot");
static_assert(sizeof(UGCSettings_SaveToSlot) == 0x000004, "Wrong size on UGCSettings_SaveToSlot");
static_assert(offsetof(UGCSettings_SaveToSlot, SlotNumber) == 0x000000, "Member 'UGCSettings_SaveToSlot::SlotNumber' has a wrong offset!");

// Function SimpleUGC.UGCSettings.SetIconIndexOfSlot
// 0x0008 (0x0008 - 0x0000)
struct UGCSettings_SetIconIndexOfSlot final
{
public:
	int32                                         SlotNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSettings_SetIconIndexOfSlot) == 0x000004, "Wrong alignment on UGCSettings_SetIconIndexOfSlot");
static_assert(sizeof(UGCSettings_SetIconIndexOfSlot) == 0x000008, "Wrong size on UGCSettings_SetIconIndexOfSlot");
static_assert(offsetof(UGCSettings_SetIconIndexOfSlot, SlotNumber) == 0x000000, "Member 'UGCSettings_SetIconIndexOfSlot::SlotNumber' has a wrong offset!");
static_assert(offsetof(UGCSettings_SetIconIndexOfSlot, IconIndex) == 0x000004, "Member 'UGCSettings_SetIconIndexOfSlot::IconIndex' has a wrong offset!");

// Function SimpleUGC.UGCSettings.WriteToPlainText
// 0x0040 (0x0040 - 0x0000)
struct UGCSettings_WriteToPlainText final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextContent;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutError;                                          // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          Append;                                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14EA[0x6];                                     // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCSettings_WriteToPlainText) == 0x000008, "Wrong alignment on UGCSettings_WriteToPlainText");
static_assert(sizeof(UGCSettings_WriteToPlainText) == 0x000040, "Wrong size on UGCSettings_WriteToPlainText");
static_assert(offsetof(UGCSettings_WriteToPlainText, Filename) == 0x000000, "Member 'UGCSettings_WriteToPlainText::Filename' has a wrong offset!");
static_assert(offsetof(UGCSettings_WriteToPlainText, TextContent) == 0x000010, "Member 'UGCSettings_WriteToPlainText::TextContent' has a wrong offset!");
static_assert(offsetof(UGCSettings_WriteToPlainText, OutError) == 0x000020, "Member 'UGCSettings_WriteToPlainText::OutError' has a wrong offset!");
static_assert(offsetof(UGCSettings_WriteToPlainText, Append) == 0x000038, "Member 'UGCSettings_WriteToPlainText::Append' has a wrong offset!");
static_assert(offsetof(UGCSettings_WriteToPlainText, ReturnValue) == 0x000039, "Member 'UGCSettings_WriteToPlainText::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.ApplyPendingMods
// 0x0001 (0x0001 - 0x0000)
struct UGCSubsystem_ApplyPendingMods final
{
public:
	bool                                          FromJoining;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_ApplyPendingMods) == 0x000001, "Wrong alignment on UGCSubsystem_ApplyPendingMods");
static_assert(sizeof(UGCSubsystem_ApplyPendingMods) == 0x000001, "Wrong size on UGCSubsystem_ApplyPendingMods");
static_assert(offsetof(UGCSubsystem_ApplyPendingMods, FromJoining) == 0x000000, "Member 'UGCSubsystem_ApplyPendingMods::FromJoining' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.FetchModsForSession
// 0x0028 (0x0028 - 0x0000)
struct UGCSubsystem_FetchModsForSession final
{
public:
	TArray<class FString>                         HostMods;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(TArray<class FString>& ModsToEnable, TArray<class FString>& ModsToInstall)> OnModsFetched;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F3[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCSubsystem_FetchModsForSession) == 0x000008, "Wrong alignment on UGCSubsystem_FetchModsForSession");
static_assert(sizeof(UGCSubsystem_FetchModsForSession) == 0x000028, "Wrong size on UGCSubsystem_FetchModsForSession");
static_assert(offsetof(UGCSubsystem_FetchModsForSession, HostMods) == 0x000000, "Member 'UGCSubsystem_FetchModsForSession::HostMods' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_FetchModsForSession, OnModsFetched) == 0x000010, "Member 'UGCSubsystem_FetchModsForSession::OnModsFetched' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_FetchModsForSession, ReturnValue) == 0x000020, "Member 'UGCSubsystem_FetchModsForSession::ReturnValue' has a wrong offset!");

// DelegateFunction SimpleUGC.UGCSubsystem.UGRequiredModsFetched__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct UGCSubsystem_UGRequiredModsFetched__DelegateSignature final
{
public:
	TArray<class FString>                         ModsToEnable;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ModsToInstall;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_UGRequiredModsFetched__DelegateSignature) == 0x000008, "Wrong alignment on UGCSubsystem_UGRequiredModsFetched__DelegateSignature");
static_assert(sizeof(UGCSubsystem_UGRequiredModsFetched__DelegateSignature) == 0x000020, "Wrong size on UGCSubsystem_UGRequiredModsFetched__DelegateSignature");
static_assert(offsetof(UGCSubsystem_UGRequiredModsFetched__DelegateSignature, ModsToEnable) == 0x000000, "Member 'UGCSubsystem_UGRequiredModsFetched__DelegateSignature::ModsToEnable' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_UGRequiredModsFetched__DelegateSignature, ModsToInstall) == 0x000010, "Member 'UGCSubsystem_UGRequiredModsFetched__DelegateSignature::ModsToInstall' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.GetCheckGameVersion
// 0x0001 (0x0001 - 0x0000)
struct UGCSubsystem_GetCheckGameVersion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_GetCheckGameVersion) == 0x000001, "Wrong alignment on UGCSubsystem_GetCheckGameVersion");
static_assert(sizeof(UGCSubsystem_GetCheckGameVersion) == 0x000001, "Wrong size on UGCSubsystem_GetCheckGameVersion");
static_assert(offsetof(UGCSubsystem_GetCheckGameVersion, ReturnValue) == 0x000000, "Member 'UGCSubsystem_GetCheckGameVersion::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.GetModdingSettingsMenuEnabled
// 0x0001 (0x0001 - 0x0000)
struct UGCSubsystem_GetModdingSettingsMenuEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_GetModdingSettingsMenuEnabled) == 0x000001, "Wrong alignment on UGCSubsystem_GetModdingSettingsMenuEnabled");
static_assert(sizeof(UGCSubsystem_GetModdingSettingsMenuEnabled) == 0x000001, "Wrong size on UGCSubsystem_GetModdingSettingsMenuEnabled");
static_assert(offsetof(UGCSubsystem_GetModdingSettingsMenuEnabled, ReturnValue) == 0x000000, "Member 'UGCSubsystem_GetModdingSettingsMenuEnabled::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.GetNamesOfModsPendingInstall
// 0x0010 (0x0010 - 0x0000)
struct UGCSubsystem_GetNamesOfModsPendingInstall final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_GetNamesOfModsPendingInstall) == 0x000008, "Wrong alignment on UGCSubsystem_GetNamesOfModsPendingInstall");
static_assert(sizeof(UGCSubsystem_GetNamesOfModsPendingInstall) == 0x000010, "Wrong size on UGCSubsystem_GetNamesOfModsPendingInstall");
static_assert(offsetof(UGCSubsystem_GetNamesOfModsPendingInstall, ReturnValue) == 0x000000, "Member 'UGCSubsystem_GetNamesOfModsPendingInstall::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.GetNamesOfModsPendingUninstall
// 0x0010 (0x0010 - 0x0000)
struct UGCSubsystem_GetNamesOfModsPendingUninstall final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_GetNamesOfModsPendingUninstall) == 0x000008, "Wrong alignment on UGCSubsystem_GetNamesOfModsPendingUninstall");
static_assert(sizeof(UGCSubsystem_GetNamesOfModsPendingUninstall) == 0x000010, "Wrong size on UGCSubsystem_GetNamesOfModsPendingUninstall");
static_assert(offsetof(UGCSubsystem_GetNamesOfModsPendingUninstall, ReturnValue) == 0x000000, "Member 'UGCSubsystem_GetNamesOfModsPendingUninstall::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.GetNamesOfModsPendingUpdate
// 0x0010 (0x0010 - 0x0000)
struct UGCSubsystem_GetNamesOfModsPendingUpdate final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_GetNamesOfModsPendingUpdate) == 0x000008, "Wrong alignment on UGCSubsystem_GetNamesOfModsPendingUpdate");
static_assert(sizeof(UGCSubsystem_GetNamesOfModsPendingUpdate) == 0x000010, "Wrong size on UGCSubsystem_GetNamesOfModsPendingUpdate");
static_assert(offsetof(UGCSubsystem_GetNamesOfModsPendingUpdate, ReturnValue) == 0x000000, "Member 'UGCSubsystem_GetNamesOfModsPendingUpdate::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.GetQueuedModioRequests
// 0x0010 (0x0010 - 0x0000)
struct UGCSubsystem_GetQueuedModioRequests final
{
public:
	TArray<EModioRequestType>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_GetQueuedModioRequests) == 0x000008, "Wrong alignment on UGCSubsystem_GetQueuedModioRequests");
static_assert(sizeof(UGCSubsystem_GetQueuedModioRequests) == 0x000010, "Wrong size on UGCSubsystem_GetQueuedModioRequests");
static_assert(offsetof(UGCSubsystem_GetQueuedModioRequests, ReturnValue) == 0x000000, "Member 'UGCSubsystem_GetQueuedModioRequests::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.HasOutstadingRequestOfType
// 0x0002 (0x0002 - 0x0000)
struct UGCSubsystem_HasOutstadingRequestOfType final
{
public:
	EModioRequestType                             RequestType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_HasOutstadingRequestOfType) == 0x000001, "Wrong alignment on UGCSubsystem_HasOutstadingRequestOfType");
static_assert(sizeof(UGCSubsystem_HasOutstadingRequestOfType) == 0x000002, "Wrong size on UGCSubsystem_HasOutstadingRequestOfType");
static_assert(offsetof(UGCSubsystem_HasOutstadingRequestOfType, RequestType) == 0x000000, "Member 'UGCSubsystem_HasOutstadingRequestOfType::RequestType' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_HasOutstadingRequestOfType, ReturnValue) == 0x000001, "Member 'UGCSubsystem_HasOutstadingRequestOfType::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.K2_RequestModDependencyList
// 0x0050 (0x0050 - 0x0000)
struct UGCSubsystem_K2_RequestModDependencyList final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ModId;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutParentId;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutModIds;                                         // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_K2_RequestModDependencyList) == 0x000008, "Wrong alignment on UGCSubsystem_K2_RequestModDependencyList");
static_assert(sizeof(UGCSubsystem_K2_RequestModDependencyList) == 0x000050, "Wrong size on UGCSubsystem_K2_RequestModDependencyList");
static_assert(offsetof(UGCSubsystem_K2_RequestModDependencyList, WorldContext) == 0x000000, "Member 'UGCSubsystem_K2_RequestModDependencyList::WorldContext' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestModDependencyList, LatentInfo) == 0x000008, "Member 'UGCSubsystem_K2_RequestModDependencyList::LatentInfo' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestModDependencyList, ModId) == 0x000020, "Member 'UGCSubsystem_K2_RequestModDependencyList::ModId' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestModDependencyList, OutParentId) == 0x000030, "Member 'UGCSubsystem_K2_RequestModDependencyList::OutParentId' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestModDependencyList, OutModIds) == 0x000040, "Member 'UGCSubsystem_K2_RequestModDependencyList::OutModIds' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.K2_RequestModMetaData
// 0x0038 (0x0038 - 0x0000)
struct UGCSubsystem_K2_RequestModMetaData final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ModioStringID;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ModId;                                             // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_K2_RequestModMetaData) == 0x000008, "Wrong alignment on UGCSubsystem_K2_RequestModMetaData");
static_assert(sizeof(UGCSubsystem_K2_RequestModMetaData) == 0x000038, "Wrong size on UGCSubsystem_K2_RequestModMetaData");
static_assert(offsetof(UGCSubsystem_K2_RequestModMetaData, WorldContext) == 0x000000, "Member 'UGCSubsystem_K2_RequestModMetaData::WorldContext' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestModMetaData, LatentInfo) == 0x000008, "Member 'UGCSubsystem_K2_RequestModMetaData::LatentInfo' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestModMetaData, ModioStringID) == 0x000020, "Member 'UGCSubsystem_K2_RequestModMetaData::ModioStringID' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestModMetaData, ModId) == 0x000030, "Member 'UGCSubsystem_K2_RequestModMetaData::ModId' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.K2_RequestModThumbnail
// 0x0028 (0x0028 - 0x0000)
struct UGCSubsystem_K2_RequestModThumbnail final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UUGCPackage*                            Package;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_K2_RequestModThumbnail) == 0x000008, "Wrong alignment on UGCSubsystem_K2_RequestModThumbnail");
static_assert(sizeof(UGCSubsystem_K2_RequestModThumbnail) == 0x000028, "Wrong size on UGCSubsystem_K2_RequestModThumbnail");
static_assert(offsetof(UGCSubsystem_K2_RequestModThumbnail, WorldContext) == 0x000000, "Member 'UGCSubsystem_K2_RequestModThumbnail::WorldContext' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestModThumbnail, LatentInfo) == 0x000008, "Member 'UGCSubsystem_K2_RequestModThumbnail::LatentInfo' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestModThumbnail, Package) == 0x000020, "Member 'UGCSubsystem_K2_RequestModThumbnail::Package' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.K2_RequestModThumbnailById
// 0x0030 (0x0030 - 0x0000)
struct UGCSubsystem_K2_RequestModThumbnailById final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ModId;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_K2_RequestModThumbnailById) == 0x000008, "Wrong alignment on UGCSubsystem_K2_RequestModThumbnailById");
static_assert(sizeof(UGCSubsystem_K2_RequestModThumbnailById) == 0x000030, "Wrong size on UGCSubsystem_K2_RequestModThumbnailById");
static_assert(offsetof(UGCSubsystem_K2_RequestModThumbnailById, WorldContext) == 0x000000, "Member 'UGCSubsystem_K2_RequestModThumbnailById::WorldContext' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestModThumbnailById, LatentInfo) == 0x000008, "Member 'UGCSubsystem_K2_RequestModThumbnailById::LatentInfo' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestModThumbnailById, ModId) == 0x000020, "Member 'UGCSubsystem_K2_RequestModThumbnailById::ModId' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.K2_RequestSubscribe
// 0x0018 (0x0018 - 0x0000)
struct UGCSubsystem_K2_RequestSubscribe final
{
public:
	class FString                                 ModId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F4[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCSubsystem_K2_RequestSubscribe) == 0x000008, "Wrong alignment on UGCSubsystem_K2_RequestSubscribe");
static_assert(sizeof(UGCSubsystem_K2_RequestSubscribe) == 0x000018, "Wrong size on UGCSubsystem_K2_RequestSubscribe");
static_assert(offsetof(UGCSubsystem_K2_RequestSubscribe, ModId) == 0x000000, "Member 'UGCSubsystem_K2_RequestSubscribe::ModId' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestSubscribe, ReturnValue) == 0x000010, "Member 'UGCSubsystem_K2_RequestSubscribe::ReturnValue' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.K2_RequestTermsOfUse
// 0x0020 (0x0020 - 0x0000)
struct UGCSubsystem_K2_RequestTermsOfUse final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_K2_RequestTermsOfUse) == 0x000008, "Wrong alignment on UGCSubsystem_K2_RequestTermsOfUse");
static_assert(sizeof(UGCSubsystem_K2_RequestTermsOfUse) == 0x000020, "Wrong size on UGCSubsystem_K2_RequestTermsOfUse");
static_assert(offsetof(UGCSubsystem_K2_RequestTermsOfUse, WorldContext) == 0x000000, "Member 'UGCSubsystem_K2_RequestTermsOfUse::WorldContext' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_K2_RequestTermsOfUse, LatentInfo) == 0x000008, "Member 'UGCSubsystem_K2_RequestTermsOfUse::LatentInfo' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.RemoveRequestOfType
// 0x0001 (0x0001 - 0x0000)
struct UGCSubsystem_RemoveRequestOfType final
{
public:
	EModioRequestType                             RequestType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_RemoveRequestOfType) == 0x000001, "Wrong alignment on UGCSubsystem_RemoveRequestOfType");
static_assert(sizeof(UGCSubsystem_RemoveRequestOfType) == 0x000001, "Wrong size on UGCSubsystem_RemoveRequestOfType");
static_assert(offsetof(UGCSubsystem_RemoveRequestOfType, RequestType) == 0x000000, "Member 'UGCSubsystem_RemoveRequestOfType::RequestType' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.SetCheckGameVersion
// 0x0001 (0x0001 - 0x0000)
struct UGCSubsystem_SetCheckGameVersion final
{
public:
	bool                                          ShouldCheck;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_SetCheckGameVersion) == 0x000001, "Wrong alignment on UGCSubsystem_SetCheckGameVersion");
static_assert(sizeof(UGCSubsystem_SetCheckGameVersion) == 0x000001, "Wrong size on UGCSubsystem_SetCheckGameVersion");
static_assert(offsetof(UGCSubsystem_SetCheckGameVersion, ShouldCheck) == 0x000000, "Member 'UGCSubsystem_SetCheckGameVersion::ShouldCheck' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.SetModidngSettingsMenuEnabled
// 0x0001 (0x0001 - 0x0000)
struct UGCSubsystem_SetModidngSettingsMenuEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_SetModidngSettingsMenuEnabled) == 0x000001, "Wrong alignment on UGCSubsystem_SetModidngSettingsMenuEnabled");
static_assert(sizeof(UGCSubsystem_SetModidngSettingsMenuEnabled) == 0x000001, "Wrong size on UGCSubsystem_SetModidngSettingsMenuEnabled");
static_assert(offsetof(UGCSubsystem_SetModidngSettingsMenuEnabled, bEnabled) == 0x000000, "Member 'UGCSubsystem_SetModidngSettingsMenuEnabled::bEnabled' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.SetModsAsRecentlyInstalled
// 0x0010 (0x0010 - 0x0000)
struct UGCSubsystem_SetModsAsRecentlyInstalled final
{
public:
	TArray<class FString>                         RecentMods;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_SetModsAsRecentlyInstalled) == 0x000008, "Wrong alignment on UGCSubsystem_SetModsAsRecentlyInstalled");
static_assert(sizeof(UGCSubsystem_SetModsAsRecentlyInstalled) == 0x000010, "Wrong size on UGCSubsystem_SetModsAsRecentlyInstalled");
static_assert(offsetof(UGCSubsystem_SetModsAsRecentlyInstalled, RecentMods) == 0x000000, "Member 'UGCSubsystem_SetModsAsRecentlyInstalled::RecentMods' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.SetPackagesAsRecentlyInstalled
// 0x0010 (0x0010 - 0x0000)
struct UGCSubsystem_SetPackagesAsRecentlyInstalled final
{
public:
	TArray<class UUGCPackage*>                    RecentMods;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_SetPackagesAsRecentlyInstalled) == 0x000008, "Wrong alignment on UGCSubsystem_SetPackagesAsRecentlyInstalled");
static_assert(sizeof(UGCSubsystem_SetPackagesAsRecentlyInstalled) == 0x000010, "Wrong size on UGCSubsystem_SetPackagesAsRecentlyInstalled");
static_assert(offsetof(UGCSubsystem_SetPackagesAsRecentlyInstalled, RecentMods) == 0x000000, "Member 'UGCSubsystem_SetPackagesAsRecentlyInstalled::RecentMods' has a wrong offset!");

// DelegateFunction SimpleUGC.UGCSubsystem.UGCAuthenticatedModioUser__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct UGCSubsystem_UGCAuthenticatedModioUser__DelegateSignature final
{
public:
	bool                                          Authenticated;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_UGCAuthenticatedModioUser__DelegateSignature) == 0x000001, "Wrong alignment on UGCSubsystem_UGCAuthenticatedModioUser__DelegateSignature");
static_assert(sizeof(UGCSubsystem_UGCAuthenticatedModioUser__DelegateSignature) == 0x000001, "Wrong size on UGCSubsystem_UGCAuthenticatedModioUser__DelegateSignature");
static_assert(offsetof(UGCSubsystem_UGCAuthenticatedModioUser__DelegateSignature, Authenticated) == 0x000000, "Member 'UGCSubsystem_UGCAuthenticatedModioUser__DelegateSignature::Authenticated' has a wrong offset!");

// DelegateFunction SimpleUGC.UGCSubsystem.UGCModManagementStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct UGCSubsystem_UGCModManagementStateChanged__DelegateSignature final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_UGCModManagementStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on UGCSubsystem_UGCModManagementStateChanged__DelegateSignature");
static_assert(sizeof(UGCSubsystem_UGCModManagementStateChanged__DelegateSignature) == 0x000001, "Wrong size on UGCSubsystem_UGCModManagementStateChanged__DelegateSignature");
static_assert(offsetof(UGCSubsystem_UGCModManagementStateChanged__DelegateSignature, Enabled) == 0x000000, "Member 'UGCSubsystem_UGCModManagementStateChanged__DelegateSignature::Enabled' has a wrong offset!");

// DelegateFunction SimpleUGC.UGCSubsystem.UGCModProgress__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct UGCSubsystem_UGCModProgress__DelegateSignature final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ModsPendingDownload;                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Downloading;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F5[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Progress;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F6[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCSubsystem_UGCModProgress__DelegateSignature) == 0x000008, "Wrong alignment on UGCSubsystem_UGCModProgress__DelegateSignature");
static_assert(sizeof(UGCSubsystem_UGCModProgress__DelegateSignature) == 0x000030, "Wrong size on UGCSubsystem_UGCModProgress__DelegateSignature");
static_assert(offsetof(UGCSubsystem_UGCModProgress__DelegateSignature, Param_Name) == 0x000000, "Member 'UGCSubsystem_UGCModProgress__DelegateSignature::Param_Name' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_UGCModProgress__DelegateSignature, ModsPendingDownload) == 0x000010, "Member 'UGCSubsystem_UGCModProgress__DelegateSignature::ModsPendingDownload' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_UGCModProgress__DelegateSignature, Downloading) == 0x000020, "Member 'UGCSubsystem_UGCModProgress__DelegateSignature::Downloading' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_UGCModProgress__DelegateSignature, Progress) == 0x000024, "Member 'UGCSubsystem_UGCModProgress__DelegateSignature::Progress' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_UGCModProgress__DelegateSignature, Total) == 0x000028, "Member 'UGCSubsystem_UGCModProgress__DelegateSignature::Total' has a wrong offset!");

// DelegateFunction SimpleUGC.UGCSubsystem.UGCRequestHandled__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct UGCSubsystem_UGCRequestHandled__DelegateSignature final
{
public:
	EModioRequestType                             RequestType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_UGCRequestHandled__DelegateSignature) == 0x000001, "Wrong alignment on UGCSubsystem_UGCRequestHandled__DelegateSignature");
static_assert(sizeof(UGCSubsystem_UGCRequestHandled__DelegateSignature) == 0x000001, "Wrong size on UGCSubsystem_UGCRequestHandled__DelegateSignature");
static_assert(offsetof(UGCSubsystem_UGCRequestHandled__DelegateSignature, RequestType) == 0x000000, "Member 'UGCSubsystem_UGCRequestHandled__DelegateSignature::RequestType' has a wrong offset!");

// DelegateFunction SimpleUGC.UGCSubsystem.UGInstallError__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct UGCSubsystem_UGInstallError__DelegateSignature final
{
public:
	class FString                                 ModName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUGCPackageError                              ErrorType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F7[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCSubsystem_UGInstallError__DelegateSignature) == 0x000008, "Wrong alignment on UGCSubsystem_UGInstallError__DelegateSignature");
static_assert(sizeof(UGCSubsystem_UGInstallError__DelegateSignature) == 0x000018, "Wrong size on UGCSubsystem_UGInstallError__DelegateSignature");
static_assert(offsetof(UGCSubsystem_UGInstallError__DelegateSignature, ModName) == 0x000000, "Member 'UGCSubsystem_UGInstallError__DelegateSignature::ModName' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_UGInstallError__DelegateSignature, ErrorType) == 0x000010, "Member 'UGCSubsystem_UGInstallError__DelegateSignature::ErrorType' has a wrong offset!");

// DelegateFunction SimpleUGC.UGCSubsystem.UGModProgressDone__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct UGCSubsystem_UGModProgressDone__DelegateSignature final
{
public:
	class FString                                 ModName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModId;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCSubsystem_UGModProgressDone__DelegateSignature) == 0x000008, "Wrong alignment on UGCSubsystem_UGModProgressDone__DelegateSignature");
static_assert(sizeof(UGCSubsystem_UGModProgressDone__DelegateSignature) == 0x000020, "Wrong size on UGCSubsystem_UGModProgressDone__DelegateSignature");
static_assert(offsetof(UGCSubsystem_UGModProgressDone__DelegateSignature, ModName) == 0x000000, "Member 'UGCSubsystem_UGModProgressDone__DelegateSignature::ModName' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_UGModProgressDone__DelegateSignature, ModId) == 0x000010, "Member 'UGCSubsystem_UGModProgressDone__DelegateSignature::ModId' has a wrong offset!");

// Function SimpleUGC.UGCSubsystem.IsModPendingUninstall
// 0x0010 (0x0010 - 0x0000)
struct UGCSubsystem_IsModPendingUninstall final
{
public:
	class UUGCPackage*                            InMod;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCSubsystem_IsModPendingUninstall) == 0x000008, "Wrong alignment on UGCSubsystem_IsModPendingUninstall");
static_assert(sizeof(UGCSubsystem_IsModPendingUninstall) == 0x000010, "Wrong size on UGCSubsystem_IsModPendingUninstall");
static_assert(offsetof(UGCSubsystem_IsModPendingUninstall, InMod) == 0x000000, "Member 'UGCSubsystem_IsModPendingUninstall::InMod' has a wrong offset!");
static_assert(offsetof(UGCSubsystem_IsModPendingUninstall, ReturnValue) == 0x000008, "Member 'UGCSubsystem_IsModPendingUninstall::ReturnValue' has a wrong offset!");

}

