#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamVRInputDevice

#include "Basic.hpp"

#include "SteamVRInputDevice_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace CG::Params
{

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.FindSteamVR_Action
// 0x0058 (0x0058 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResult;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E6[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamVRAction                         FoundAction;                                       // 0x0010(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSteamVRActionSet                      FoundActionSet;                                    // 0x0038(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FName                                   ActionSet;                                         // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action) == 0x000008, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action) == 0x000058, "Wrong size on SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action, ActionName) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action::ActionName' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action, bResult) == 0x000008, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action::bResult' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action, FoundAction) == 0x000010, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action::FoundAction' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action, FoundActionSet) == 0x000038, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action::FoundActionSet' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action, ActionSet) == 0x000050, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_Action::ActionSet' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.FindSteamVR_ActionOrigin
// 0x0014 (0x0014 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_FindSteamVR_ActionOrigin final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionSet;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E7[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_ActionOrigin) == 0x000004, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_FindSteamVR_ActionOrigin");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_ActionOrigin) == 0x000014, "Wrong size on SteamVRInputDeviceFunctionLibrary_FindSteamVR_ActionOrigin");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_ActionOrigin, ActionName) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_ActionOrigin::ActionName' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_ActionOrigin, ActionSet) == 0x000008, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_ActionOrigin::ActionSet' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_ActionOrigin, ReturnValue) == 0x000010, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_ActionOrigin::ReturnValue' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.FindSteamVR_InputBindingInfo
// 0x0020 (0x0020 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_FindSteamVR_InputBindingInfo final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionSet;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSteamVRInputBindingInfo>       ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_InputBindingInfo) == 0x000008, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_FindSteamVR_InputBindingInfo");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_InputBindingInfo) == 0x000020, "Wrong size on SteamVRInputDeviceFunctionLibrary_FindSteamVR_InputBindingInfo");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_InputBindingInfo, ActionName) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_InputBindingInfo::ActionName' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_InputBindingInfo, ActionSet) == 0x000008, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_InputBindingInfo::ActionSet' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_InputBindingInfo, ReturnValue) == 0x000010, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_InputBindingInfo::ReturnValue' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.FindSteamVR_OriginTrackedDeviceInfo
// 0x0040 (0x0040 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResult;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E8[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamVRInputOriginInfo                InputOriginInfo;                                   // 0x0010(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FName                                   ActionSet;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo) == 0x000008, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo) == 0x000040, "Wrong size on SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo, ActionName) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo::ActionName' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo, bResult) == 0x000008, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo::bResult' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo, InputOriginInfo) == 0x000010, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo::InputOriginInfo' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo, ActionSet) == 0x000038, "Member 'SteamVRInputDeviceFunctionLibrary_FindSteamVR_OriginTrackedDeviceInfo::ActionSet' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetControllerFidelity
// 0x0002 (0x0002 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetControllerFidelity final
{
public:
	EControllerFidelity                           LeftControllerFidelity;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControllerFidelity                           RightControllerFidelity;                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetControllerFidelity) == 0x000001, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetControllerFidelity");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetControllerFidelity) == 0x000002, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetControllerFidelity");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetControllerFidelity, LeftControllerFidelity) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetControllerFidelity::LeftControllerFidelity' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetControllerFidelity, RightControllerFidelity) == 0x000001, "Member 'SteamVRInputDeviceFunctionLibrary_GetControllerFidelity::RightControllerFidelity' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetCurlsAndSplaysState
// 0x0002 (0x0002 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetCurlsAndSplaysState final
{
public:
	bool                                          LeftHandState;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightHandState;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetCurlsAndSplaysState) == 0x000001, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetCurlsAndSplaysState");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetCurlsAndSplaysState) == 0x000002, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetCurlsAndSplaysState");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetCurlsAndSplaysState, LeftHandState) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetCurlsAndSplaysState::LeftHandState' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetCurlsAndSplaysState, RightHandState) == 0x000001, "Member 'SteamVRInputDeviceFunctionLibrary_GetCurlsAndSplaysState::RightHandState' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetFingerCurlsAndSplays
// 0x002C (0x002C - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays final
{
public:
	EHand                                         Hand;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamVRFingerCurls                    FingerCurls;                                       // 0x0004(0x0014)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamVRFingerSplays                   FingerSplays;                                      // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	ESkeletalSummaryDataType                      SummaryDataType;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EA[0x3];                                     // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays) == 0x000004, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays) == 0x00002C, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays, Hand) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays::Hand' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays, FingerCurls) == 0x000004, "Member 'SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays::FingerCurls' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays, FingerSplays) == 0x000018, "Member 'SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays::FingerSplays' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays, SummaryDataType) == 0x000028, "Member 'SteamVRInputDeviceFunctionLibrary_GetFingerCurlsAndSplays::SummaryDataType' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetLeftHandPoseData
// 0x0030 (0x0030 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData) == 0x000004, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData) == 0x000030, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData, Position) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData::Position' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData, Orientation) == 0x00000C, "Member 'SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData::Orientation' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData, AngularVelocity) == 0x000018, "Member 'SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData::AngularVelocity' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData, Velocity) == 0x000024, "Member 'SteamVRInputDeviceFunctionLibrary_GetLeftHandPoseData::Velocity' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetPoseSource
// 0x0001 (0x0001 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetPoseSource final
{
public:
	bool                                          bUsingSkeletonPose;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetPoseSource) == 0x000001, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetPoseSource");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetPoseSource) == 0x000001, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetPoseSource");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetPoseSource, bUsingSkeletonPose) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetPoseSource::bUsingSkeletonPose' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetRightHandPoseData
// 0x0030 (0x0030 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData) == 0x000004, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData) == 0x000030, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData, Position) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData::Position' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData, Orientation) == 0x00000C, "Member 'SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData::Orientation' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData, AngularVelocity) == 0x000018, "Member 'SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData::AngularVelocity' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData, Velocity) == 0x000024, "Member 'SteamVRInputDeviceFunctionLibrary_GetRightHandPoseData::Velocity' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetSkeletalState
// 0x0002 (0x0002 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetSkeletalState final
{
public:
	bool                                          LeftHandState;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightHandState;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetSkeletalState) == 0x000001, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetSkeletalState");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetSkeletalState) == 0x000002, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetSkeletalState");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSkeletalState, LeftHandState) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetSkeletalState::LeftHandState' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSkeletalState, RightHandState) == 0x000001, "Member 'SteamVRInputDeviceFunctionLibrary_GetSkeletalState::RightHandState' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetSkeletalTransform
// 0x0BB0 (0x0BB0 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetSkeletalTransform final
{
public:
	struct FSteamVRSkeletonTransform              LeftHand;                                          // 0x0000(0x05D0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamVRSkeletonTransform              RightHand;                                         // 0x05D0(0x05D0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWithController;                                   // 0x0BA0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EB[0xF];                                     // 0x0BA1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetSkeletalTransform) == 0x000010, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetSkeletalTransform");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetSkeletalTransform) == 0x000BB0, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetSkeletalTransform");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSkeletalTransform, LeftHand) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetSkeletalTransform::LeftHand' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSkeletalTransform, RightHand) == 0x0005D0, "Member 'SteamVRInputDeviceFunctionLibrary_GetSkeletalTransform::RightHand' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSkeletalTransform, bWithController) == 0x000BA0, "Member 'SteamVRInputDeviceFunctionLibrary_GetSkeletalTransform::bWithController' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetSteamVR_ActionArray
// 0x0010 (0x0010 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionArray final
{
public:
	TArray<struct FSteamVRAction>                 SteamVRActions;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionArray) == 0x000008, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionArray");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionArray) == 0x000010, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionArray");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionArray, SteamVRActions) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionArray::SteamVRActions' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetSteamVR_ActionSetArray
// 0x0010 (0x0010 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionSetArray final
{
public:
	TArray<struct FSteamVRActionSet>              SteamVRActionSets;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionSetArray) == 0x000008, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionSetArray");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionSetArray) == 0x000010, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionSetArray");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionSetArray, SteamVRActionSets) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_ActionSetArray::SteamVRActionSets' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetSteamVR_GlobalPredictedSecondsFromNow
// 0x0004 (0x0004 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetSteamVR_GlobalPredictedSecondsFromNow final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_GlobalPredictedSecondsFromNow) == 0x000004, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetSteamVR_GlobalPredictedSecondsFromNow");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_GlobalPredictedSecondsFromNow) == 0x000004, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetSteamVR_GlobalPredictedSecondsFromNow");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_GlobalPredictedSecondsFromNow, ReturnValue) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_GlobalPredictedSecondsFromNow::ReturnValue' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetSteamVR_HandPoseRelativeToNow
// 0x0024 (0x0024 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESteamVRHand                                  Hand;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EC[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PredictedSecondsFromNow;                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10ED[0x3];                                     // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow) == 0x000004, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow) == 0x000024, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow, Position) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow::Position' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow, Orientation) == 0x00000C, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow::Orientation' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow, Hand) == 0x000018, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow::Hand' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow, PredictedSecondsFromNow) == 0x00001C, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow::PredictedSecondsFromNow' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow, ReturnValue) == 0x000020, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_HandPoseRelativeToNow::ReturnValue' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetSteamVR_InputBindingInfo
// 0x0038 (0x0038 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetSteamVR_InputBindingInfo final
{
public:
	struct FSteamVRAction                         SteamVRActionHandle;                               // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FSteamVRInputBindingInfo>       ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_InputBindingInfo) == 0x000008, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetSteamVR_InputBindingInfo");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_InputBindingInfo) == 0x000038, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetSteamVR_InputBindingInfo");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_InputBindingInfo, SteamVRActionHandle) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_InputBindingInfo::SteamVRActionHandle' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_InputBindingInfo, ReturnValue) == 0x000028, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_InputBindingInfo::ReturnValue' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetSteamVR_OriginLocalizedName
// 0x0048 (0x0048 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginLocalizedName final
{
public:
	struct FSteamVRAction                         SteamVRAction;                                     // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	TArray<ESteamVRInputStringBits>               LocalizedParts;                                    // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OriginLocalizedName;                               // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginLocalizedName) == 0x000008, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginLocalizedName");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginLocalizedName) == 0x000048, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginLocalizedName");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginLocalizedName, SteamVRAction) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginLocalizedName::SteamVRAction' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginLocalizedName, LocalizedParts) == 0x000028, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginLocalizedName::LocalizedParts' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginLocalizedName, OriginLocalizedName) == 0x000038, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginLocalizedName::OriginLocalizedName' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetSteamVR_OriginTrackedDeviceInfo
// 0x0058 (0x0058 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginTrackedDeviceInfo final
{
public:
	struct FSteamVRAction                         SteamVRAction;                                     // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	struct FSteamVRInputOriginInfo                InputOriginInfo;                                   // 0x0028(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EE[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginTrackedDeviceInfo) == 0x000008, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginTrackedDeviceInfo");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginTrackedDeviceInfo) == 0x000058, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginTrackedDeviceInfo");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginTrackedDeviceInfo, SteamVRAction) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginTrackedDeviceInfo::SteamVRAction' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginTrackedDeviceInfo, InputOriginInfo) == 0x000028, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginTrackedDeviceInfo::InputOriginInfo' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginTrackedDeviceInfo, ReturnValue) == 0x000050, "Member 'SteamVRInputDeviceFunctionLibrary_GetSteamVR_OriginTrackedDeviceInfo::ReturnValue' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.GetUserIPD
// 0x0004 (0x0004 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_GetUserIPD final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_GetUserIPD) == 0x000004, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_GetUserIPD");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_GetUserIPD) == 0x000004, "Wrong size on SteamVRInputDeviceFunctionLibrary_GetUserIPD");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_GetUserIPD, ReturnValue) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_GetUserIPD::ReturnValue' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.PlaySteamVR_HapticFeedback
// 0x0014 (0x0014 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback final
{
public:
	ESteamVRHand                                  Hand;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartSecondsFromNow;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSeconds;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frequency;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amplitude;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback) == 0x000004, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback) == 0x000014, "Wrong size on SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback, Hand) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback::Hand' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback, StartSecondsFromNow) == 0x000004, "Member 'SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback::StartSecondsFromNow' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback, DurationSeconds) == 0x000008, "Member 'SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback::DurationSeconds' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback, Frequency) == 0x00000C, "Member 'SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback::Frequency' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback, Amplitude) == 0x000010, "Member 'SteamVRInputDeviceFunctionLibrary_PlaySteamVR_HapticFeedback::Amplitude' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.ResetSeatedPosition
// 0x0001 (0x0001 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_ResetSeatedPosition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_ResetSeatedPosition) == 0x000001, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_ResetSeatedPosition");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_ResetSeatedPosition) == 0x000001, "Wrong size on SteamVRInputDeviceFunctionLibrary_ResetSeatedPosition");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_ResetSeatedPosition, ReturnValue) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_ResetSeatedPosition::ReturnValue' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.SetCurlsAndSplaysState
// 0x0002 (0x0002 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_SetCurlsAndSplaysState final
{
public:
	bool                                          NewLeftHandState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewRightHandState;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_SetCurlsAndSplaysState) == 0x000001, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_SetCurlsAndSplaysState");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_SetCurlsAndSplaysState) == 0x000002, "Wrong size on SteamVRInputDeviceFunctionLibrary_SetCurlsAndSplaysState");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_SetCurlsAndSplaysState, NewLeftHandState) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_SetCurlsAndSplaysState::NewLeftHandState' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_SetCurlsAndSplaysState, NewRightHandState) == 0x000001, "Member 'SteamVRInputDeviceFunctionLibrary_SetCurlsAndSplaysState::NewRightHandState' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.SetPoseSource
// 0x0001 (0x0001 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_SetPoseSource final
{
public:
	bool                                          bUseSkeletonPose;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_SetPoseSource) == 0x000001, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_SetPoseSource");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_SetPoseSource) == 0x000001, "Wrong size on SteamVRInputDeviceFunctionLibrary_SetPoseSource");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_SetPoseSource, bUseSkeletonPose) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_SetPoseSource::bUseSkeletonPose' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.SetSteamVR_GlobalPredictedSecondsFromNow
// 0x0008 (0x0008 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_SetSteamVR_GlobalPredictedSecondsFromNow final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_SetSteamVR_GlobalPredictedSecondsFromNow) == 0x000004, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_SetSteamVR_GlobalPredictedSecondsFromNow");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_SetSteamVR_GlobalPredictedSecondsFromNow) == 0x000008, "Wrong size on SteamVRInputDeviceFunctionLibrary_SetSteamVR_GlobalPredictedSecondsFromNow");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_SetSteamVR_GlobalPredictedSecondsFromNow, NewValue) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_SetSteamVR_GlobalPredictedSecondsFromNow::NewValue' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_SetSteamVR_GlobalPredictedSecondsFromNow, ReturnValue) == 0x000004, "Member 'SteamVRInputDeviceFunctionLibrary_SetSteamVR_GlobalPredictedSecondsFromNow::ReturnValue' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary.ShowSteamVR_ActionOrigin
// 0x0040 (0x0040 - 0x0000)
struct SteamVRInputDeviceFunctionLibrary_ShowSteamVR_ActionOrigin final
{
public:
	struct FSteamVRAction                         SteamVRAction;                                     // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	struct FSteamVRActionSet                      SteamVRActionSet;                                  // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRInputDeviceFunctionLibrary_ShowSteamVR_ActionOrigin) == 0x000008, "Wrong alignment on SteamVRInputDeviceFunctionLibrary_ShowSteamVR_ActionOrigin");
static_assert(sizeof(SteamVRInputDeviceFunctionLibrary_ShowSteamVR_ActionOrigin) == 0x000040, "Wrong size on SteamVRInputDeviceFunctionLibrary_ShowSteamVR_ActionOrigin");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_ShowSteamVR_ActionOrigin, SteamVRAction) == 0x000000, "Member 'SteamVRInputDeviceFunctionLibrary_ShowSteamVR_ActionOrigin::SteamVRAction' has a wrong offset!");
static_assert(offsetof(SteamVRInputDeviceFunctionLibrary_ShowSteamVR_ActionOrigin, SteamVRActionSet) == 0x000028, "Member 'SteamVRInputDeviceFunctionLibrary_ShowSteamVR_ActionOrigin::SteamVRActionSet' has a wrong offset!");

// Function SteamVRInputDevice.SteamVRTrackingReferences.ShowTrackingReferences
// 0x0010 (0x0010 - 0x0000)
struct SteamVRTrackingReferences_ShowTrackingReferences final
{
public:
	class UStaticMesh*                            TrackingReferenceMesh;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamVRTrackingReferences_ShowTrackingReferences) == 0x000008, "Wrong alignment on SteamVRTrackingReferences_ShowTrackingReferences");
static_assert(sizeof(SteamVRTrackingReferences_ShowTrackingReferences) == 0x000010, "Wrong size on SteamVRTrackingReferences_ShowTrackingReferences");
static_assert(offsetof(SteamVRTrackingReferences_ShowTrackingReferences, TrackingReferenceMesh) == 0x000000, "Member 'SteamVRTrackingReferences_ShowTrackingReferences::TrackingReferenceMesh' has a wrong offset!");
static_assert(offsetof(SteamVRTrackingReferences_ShowTrackingReferences, ReturnValue) == 0x000008, "Member 'SteamVRTrackingReferences_ShowTrackingReferences::ReturnValue' has a wrong offset!");

}

