#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LIB_Text

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ENU_TextCase_structs.hpp"
#include "FSD_structs.hpp"


namespace CG
{

// BlueprintGeneratedClass LIB_Text.LIB_Text_C
// 0x0000 (0x0028 - 0x0028)
class ULIB_Text_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetDisconnectReasonText(EDisconnectReason DisconnectReason, class UObject* __WorldContext, class FText* Text);
	static void GetDisconnectReasonCaption(EDisconnectReason DisconnectReason, class UObject* __WorldContext, class FText* Text);
	static void SetTextUpperCased(class UTextBlock* Target, const class FText& InText, class UObject* __WorldContext);
	static void SetFontSize(class UTextBlock*& Label, int32 NewSize, class UObject* __WorldContext);
	static void GetFontSize(class UTextBlock*& Label, class UObject* __WorldContext, int32* Size);
	static void SetTextCased(class UTextBlock*& Target, const class FText& InText, ENU_TextCase Text_Case, class UObject* __WorldContext);
	static void GetTimeText(float Dividend, class UObject* __WorldContext, class FText* Text);

	static void Select_Character_ID_Text(class UPlayerCharacterID* CharacterID, const class FText& DrillerText, const class FText& GunnerText, const class FText& ScoutText, const class FText& EngineerText, const class FText& BoscoText, const class FText& NoneText, class UObject* __WorldContext, class FText* OutText);
	static void Select_Character_Class_Text(class UPlayerCharacterID* CharacterClass, const class FText& DrillerText, const class FText& GunnerText, const class FText& ScoutText, const class FText& EngineerText, const class FText& BoscoText, const class FText& NoneText, class UObject* __WorldContext, class FText* OutText);
	static void Select_CharacterText(class APlayerCharacter* Character, const class FText& DrillerText, const class FText& GunnerText, const class FText& ScoutText, const class FText& EngineerText, const class FText& BoscoText, const class FText& NoneText, class UObject* __WorldContext, class FText* OutText);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LIB_Text_C">();
	}
	static class ULIB_Text_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULIB_Text_C>();
	}
};
static_assert(alignof(ULIB_Text_C) == 0x000008, "Wrong alignment on ULIB_Text_C");
static_assert(sizeof(ULIB_Text_C) == 0x000028, "Wrong size on ULIB_Text_C");

}

