#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUD_Countdown_Extraction

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace CG::Params
{

// Function HUD_Countdown_Extraction.HUD_Countdown_Extraction_C.ExecuteUbergraph_HUD_Countdown_Extraction
// 0x00B8 (0x00B8 - 0x0000)
struct HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MenuColors_OutputColor;                   // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3686[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0018(0x0028)()
	TDelegate<void(class FText& CountdownText)>   K2Node_CreateDelegate_OutputDelegate;              // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(int32 SecondsLeft)>            K2Node_CreateDelegate_OutputDelegate_1;            // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0060(0x0010)(ZeroConstructor, NoDestructor)
	class FText                                   K2Node_CustomEvent_countdownText;                  // 0x0070(0x0018)(ConstParm)
	int32                                         K2Node_CustomEvent_SecondsLeft;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3687[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FormatTime_Text;                          // 0x0090(0x0018)()
	class AFSDGameState*                          CallFunc_GetFSDGameState_ReturnValue;              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction) == 0x000008, "Wrong alignment on HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction");
static_assert(sizeof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction) == 0x0000B8, "Wrong size on HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction");
static_assert(offsetof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction, EntryPoint) == 0x000000, "Member 'HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction::EntryPoint' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction, CallFunc_MenuColors_OutputColor) == 0x000004, "Member 'HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction::CallFunc_MenuColors_OutputColor' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction, K2Node_MakeStruct_SlateColor) == 0x000018, "Member 'HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction, K2Node_CreateDelegate_OutputDelegate) == 0x000040, "Member 'HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction, K2Node_CreateDelegate_OutputDelegate_1) == 0x000050, "Member 'HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction, K2Node_CreateDelegate_OutputDelegate_2) == 0x000060, "Member 'HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction, K2Node_CustomEvent_countdownText) == 0x000070, "Member 'HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction::K2Node_CustomEvent_countdownText' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction, K2Node_CustomEvent_SecondsLeft) == 0x000088, "Member 'HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction::K2Node_CustomEvent_SecondsLeft' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction, CallFunc_FormatTime_Text) == 0x000090, "Member 'HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction::CallFunc_FormatTime_Text' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction, CallFunc_GetFSDGameState_ReturnValue) == 0x0000A8, "Member 'HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction::CallFunc_GetFSDGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction, K2Node_Event_IsDesignTime) == 0x0000B0, "Member 'HUD_Countdown_Extraction_C_ExecuteUbergraph_HUD_Countdown_Extraction::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function HUD_Countdown_Extraction.HUD_Countdown_Extraction_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct HUD_Countdown_Extraction_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_Countdown_Extraction_C_PreConstruct) == 0x000001, "Wrong alignment on HUD_Countdown_Extraction_C_PreConstruct");
static_assert(sizeof(HUD_Countdown_Extraction_C_PreConstruct) == 0x000001, "Wrong size on HUD_Countdown_Extraction_C_PreConstruct");
static_assert(offsetof(HUD_Countdown_Extraction_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'HUD_Countdown_Extraction_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function HUD_Countdown_Extraction.HUD_Countdown_Extraction_C.OnCountdownTimeChanged
// 0x0004 (0x0004 - 0x0000)
struct HUD_Countdown_Extraction_C_OnCountdownTimeChanged final
{
public:
	int32                                         SecondsLeft;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Countdown_Extraction_C_OnCountdownTimeChanged) == 0x000004, "Wrong alignment on HUD_Countdown_Extraction_C_OnCountdownTimeChanged");
static_assert(sizeof(HUD_Countdown_Extraction_C_OnCountdownTimeChanged) == 0x000004, "Wrong size on HUD_Countdown_Extraction_C_OnCountdownTimeChanged");
static_assert(offsetof(HUD_Countdown_Extraction_C_OnCountdownTimeChanged, SecondsLeft) == 0x000000, "Member 'HUD_Countdown_Extraction_C_OnCountdownTimeChanged::SecondsLeft' has a wrong offset!");

// Function HUD_Countdown_Extraction.HUD_Countdown_Extraction_C.CountdownStarted
// 0x0018 (0x0018 - 0x0000)
struct HUD_Countdown_Extraction_C_CountdownStarted final
{
public:
	class FText                                   CountdownText;                                     // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(HUD_Countdown_Extraction_C_CountdownStarted) == 0x000008, "Wrong alignment on HUD_Countdown_Extraction_C_CountdownStarted");
static_assert(sizeof(HUD_Countdown_Extraction_C_CountdownStarted) == 0x000018, "Wrong size on HUD_Countdown_Extraction_C_CountdownStarted");
static_assert(offsetof(HUD_Countdown_Extraction_C_CountdownStarted, CountdownText) == 0x000000, "Member 'HUD_Countdown_Extraction_C_CountdownStarted::CountdownText' has a wrong offset!");

// Function HUD_Countdown_Extraction.HUD_Countdown_Extraction_C.FormatTime
// 0x0100 (0x0100 - 0x0000)
struct HUD_Countdown_Extraction_C_FormatTime final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3688[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0018)(Parm, OutParm)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0028(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0040(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0058(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0098(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00E8(0x0018)()
};
static_assert(alignof(HUD_Countdown_Extraction_C_FormatTime) == 0x000008, "Wrong alignment on HUD_Countdown_Extraction_C_FormatTime");
static_assert(sizeof(HUD_Countdown_Extraction_C_FormatTime) == 0x000100, "Wrong size on HUD_Countdown_Extraction_C_FormatTime");
static_assert(offsetof(HUD_Countdown_Extraction_C_FormatTime, Time) == 0x000000, "Member 'HUD_Countdown_Extraction_C_FormatTime::Time' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_FormatTime, Text) == 0x000008, "Member 'HUD_Countdown_Extraction_C_FormatTime::Text' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_FormatTime, CallFunc_Divide_IntInt_ReturnValue) == 0x000020, "Member 'HUD_Countdown_Extraction_C_FormatTime::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_FormatTime, CallFunc_Percent_IntInt_ReturnValue) == 0x000024, "Member 'HUD_Countdown_Extraction_C_FormatTime::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_FormatTime, CallFunc_Conv_IntToText_ReturnValue) == 0x000028, "Member 'HUD_Countdown_Extraction_C_FormatTime::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_FormatTime, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000040, "Member 'HUD_Countdown_Extraction_C_FormatTime::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_FormatTime, K2Node_MakeStruct_FormatArgumentData) == 0x000058, "Member 'HUD_Countdown_Extraction_C_FormatTime::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_FormatTime, K2Node_MakeStruct_FormatArgumentData_1) == 0x000098, "Member 'HUD_Countdown_Extraction_C_FormatTime::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_FormatTime, K2Node_MakeArray_Array) == 0x0000D8, "Member 'HUD_Countdown_Extraction_C_FormatTime::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(HUD_Countdown_Extraction_C_FormatTime, CallFunc_Format_ReturnValue) == 0x0000E8, "Member 'HUD_Countdown_Extraction_C_FormatTime::CallFunc_Format_ReturnValue' has a wrong offset!");

}

