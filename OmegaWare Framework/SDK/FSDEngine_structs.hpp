#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FSDEngine

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace CG
{

// Enum FSDEngine.ECSGModifiers
// NumValues: 0x0003
enum class ECSGModifiers : uint8
{
	AddMaterialLayers                        = 0,
	HasCachedTree                            = 1,
	ECSGModifiers_MAX                        = 2,
};

// Enum FSDEngine.EGeneralComb
// NumValues: 0x0005
enum class EGeneralComb : uint8
{
	Empty                                    = 0,
	KeepSrc                                  = 1,
	KeepDest                                 = 2,
	Replace                                  = 3,
	EGeneralComb_MAX                         = 4,
};

// Enum FSDEngine.EGeneralCombEmpty
// NumValues: 0x0003
enum class EGeneralCombEmpty : uint8
{
	Empty                                    = 0,
	Replace                                  = 1,
	EGeneralCombEmpty_MAX                    = 2,
};

// Enum FSDEngine.EGeneralPattern
// NumValues: 0x0003
enum class EGeneralPattern : uint8
{
	SrcSpecific                              = 0,
	DestSpecific                             = 1,
	EGeneralPattern_MAX                      = 2,
};

// Enum FSDEngine.EPattern
// NumValues: 0x0003
enum class EPattern : uint8
{
	Specific                                 = 0,
	Precious                                 = 1,
	EPattern_MAX                             = 2,
};

// Enum FSDEngine.EBinaryComb
// NumValues: 0x0006
enum class EBinaryComb : uint8
{
	Empty                                    = 0,
	Unchanged                                = 1,
	Replace                                  = 2,
	Burn                                     = 3,
	BiomeRock                                = 4,
	EBinaryComb_MAX                          = 5,
};

// Enum FSDEngine.EEmptyBinaryComb
// NumValues: 0x0004
enum class EEmptyBinaryComb : uint8
{
	Unchanged                                = 0,
	Replace                                  = 1,
	BiomeRock                                = 2,
	EEmptyBinaryComb_MAX                     = 3,
};

// Enum FSDEngine.EPreviewCellSize
// NumValues: 0x0006
enum class EPreviewCellSize : uint8
{
	PRV_CELL_SIZE_12_5                       = 0,
	PRV_CELL_SIZE_25                         = 1,
	PRV_CELL_SIZE_50                         = 2,
	PRV_CELL_SIZE_100                        = 3,
	PRV_CELL_SIZE_200                        = 4,
	PRV_CELL_SIZE_MAX                        = 5,
};

// Enum FSDEngine.ESplineWarpType
// NumValues: 0x0004
enum class ESplineWarpType : uint8
{
	Normal                                   = 0,
	ForceZUp                                 = 1,
	StairLike                                = 2,
	ESplineWarpType_MAX                      = 3,
};

// Enum FSDEngine.ESDFModulateMode
// NumValues: 0x0004
enum class ESDFModulateMode : uint8
{
	MM_Disabled                              = 0,
	MM_Single                                = 1,
	MM_Loop                                  = 2,
	MM_MAX_0                                 = 3,
};

// Enum FSDEngine.CarveOptionsCellSize
// NumValues: 0x0005
enum class ECarveOptionsCellSize : uint8
{
	CARVE_CELL_SIZE_25                       = 0,
	CARVE_CELL_SIZE_50                       = 1,
	CARVE_CELL_SIZE_100                      = 2,
	CARVE_CELL_SIZE_200                      = 3,
	CARVE_CELL_SIZE_MAX                      = 4,
};

// Enum FSDEngine.EPreciousMaterialOptions
// NumValues: 0x0004
enum class EPreciousMaterialOptions : uint8
{
	TurnIntoGems                             = 0,
	LeaveUntouched                           = 1,
	Ignore                                   = 2,
	EPreciousMaterialOptions_MAX             = 3,
};

// Enum FSDEngine.ECarveFilterType
// NumValues: 0x0004
enum class ECarveFilterType : uint8
{
	ReplaceAll                               = 0,
	ReplaceEmpty                             = 1,
	ReplaceSolid                             = 2,
	ECarveFilterType_MAX                     = 3,
};

// Enum FSDEngine.EPathfinderResult
// NumValues: 0x0008
enum class EPathfinderResult : uint8
{
	Success                                  = 0,
	Failed_StartingPointNotFound             = 1,
	Failed_EndPointNotFound                  = 2,
	Failed_PointsNotConnected                = 3,
	Failed_UsedTooManyNodes                  = 4,
	Failed_NotReady                          = 5,
	Failed_UnknownError                      = 6,
	EPathfinderResult_MAX                    = 7,
};

// Enum FSDEngine.PFCollisionType
// NumValues: 0x0004
enum class EPFCollisionType : uint8
{
	SolidWalkable                            = 0,
	Block                                    = 1,
	Danger                                   = 2,
	PFCollisionType_MAX                      = 3,
};

// Enum FSDEngine.DeepPathFinderPreference
// NumValues: 0x0005
enum class EDeepPathFinderPreference : uint8
{
	None                                     = 0,
	Floor                                    = 1,
	Walls                                    = 2,
	Ceiling                                  = 3,
	DeepPathFinderPreference_MAX             = 4,
};

// Enum FSDEngine.DeepPathFinderSize
// NumValues: 0x0005
enum class EDeepPathFinderSize : uint8
{
	Invalid                                  = 0,
	Small                                    = 3,
	Medium                                   = 2,
	Large                                    = 1,
	DeepPathFinderSize_MAX                   = 4,
};

// Enum FSDEngine.DeepPathFinderType
// NumValues: 0x0003
enum class EDeepPathFinderType : uint8
{
	Walk                                     = 0,
	Fly                                      = 1,
	MAX                                      = 2,
};

// Enum FSDEngine.EFNDomainWarpType
// NumValues: 0x0004
enum class EFNDomainWarpType : uint8
{
	OPENSIMPLEX2                             = 0,
	OPENSIMPLEX2_REDUCED                     = 1,
	BASICGRID                                = 2,
	EFNDomainWarpType_MAX                    = 3,
};

// Enum FSDEngine.EFNCellularReturnType
// NumValues: 0x0008
enum class EFNCellularReturnType : uint8
{
	CELLVALUE                                = 0,
	DISTANCE                                 = 1,
	DISTANCE2                                = 2,
	DISTANCE2ADD                             = 3,
	DISTANCE2SUB                             = 4,
	DISTANCE2MUL                             = 5,
	DISTANCE2DIV                             = 6,
	EFNCellularReturnType_MAX                = 7,
};

// Enum FSDEngine.EFNCellularDistanceFunc
// NumValues: 0x0005
enum class EFNCellularDistanceFunc : uint8
{
	EUCLIDEAN                                = 0,
	EUCLIDEANSQ                              = 1,
	MANHATTAN                                = 2,
	HYBRID                                   = 3,
	EFNCellularDistanceFunc_MAX              = 4,
};

// Enum FSDEngine.EFNFractalType
// NumValues: 0x0007
enum class EFNFractalType : uint8
{
	NONE                                     = 0,
	FBM                                      = 1,
	RIDGED                                   = 2,
	PINGPONG                                 = 3,
	DOMAIN_WARP_PROGRESSIVE                  = 4,
	DOMAIN_WARP_INDEPENDENT                  = 5,
	EFNFractalType_MAX                       = 6,
};

// Enum FSDEngine.EFNRotationType3D
// NumValues: 0x0004
enum class EFNRotationType3D : uint8
{
	NONE                                     = 0,
	IMPROVE_XY_PLANES                        = 1,
	IMPROVE_XZ_PLANES                        = 2,
	EFNRotationType3D_MAX                    = 3,
};

// Enum FSDEngine.EFNNoiseType
// NumValues: 0x0007
enum class EFNNoiseType : uint8
{
	OPENSIMPLEX2                             = 0,
	OPENSIMPLEX2S                            = 1,
	CELLULAR                                 = 2,
	PERLIN                                   = 3,
	VALUE_CUBIC                              = 4,
	VALUE                                    = 5,
	EFNNoiseType_MAX                         = 6,
};

// ScriptStruct FSDEngine.GeneralMatPropertiesEmpty
// 0x0010 (0x0010 - 0x0000)
struct FGeneralMatPropertiesEmpty final
{
public:
	EGeneralCombEmpty                             Result;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27A7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTerrainMaterialCore*                   Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralMatPropertiesEmpty) == 0x000008, "Wrong alignment on FGeneralMatPropertiesEmpty");
static_assert(sizeof(FGeneralMatPropertiesEmpty) == 0x000010, "Wrong size on FGeneralMatPropertiesEmpty");
static_assert(offsetof(FGeneralMatPropertiesEmpty, Result) == 0x000000, "Member 'FGeneralMatPropertiesEmpty::Result' has a wrong offset!");
static_assert(offsetof(FGeneralMatPropertiesEmpty, Material) == 0x000008, "Member 'FGeneralMatPropertiesEmpty::Material' has a wrong offset!");

// ScriptStruct FSDEngine.GeneralMatProperties
// 0x0010 (0x0010 - 0x0000)
struct FGeneralMatProperties final
{
public:
	EGeneralComb                                  Result;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27A8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTerrainMaterialCore*                   Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralMatProperties) == 0x000008, "Wrong alignment on FGeneralMatProperties");
static_assert(sizeof(FGeneralMatProperties) == 0x000010, "Wrong size on FGeneralMatProperties");
static_assert(offsetof(FGeneralMatProperties, Result) == 0x000000, "Member 'FGeneralMatProperties::Result' has a wrong offset!");
static_assert(offsetof(FGeneralMatProperties, Material) == 0x000008, "Member 'FGeneralMatProperties::Material' has a wrong offset!");

// ScriptStruct FSDEngine.GeneralMatPatterns
// 0x0020 (0x0020 - 0x0000)
struct FGeneralMatPatterns final
{
public:
	EGeneralPattern                               PatternType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27A9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTerrainMaterialCore*                   PatternMaterial;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeneralMatProperties                  ReplaceWith;                                       // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralMatPatterns) == 0x000008, "Wrong alignment on FGeneralMatPatterns");
static_assert(sizeof(FGeneralMatPatterns) == 0x000020, "Wrong size on FGeneralMatPatterns");
static_assert(offsetof(FGeneralMatPatterns, PatternType) == 0x000000, "Member 'FGeneralMatPatterns::PatternType' has a wrong offset!");
static_assert(offsetof(FGeneralMatPatterns, PatternMaterial) == 0x000008, "Member 'FGeneralMatPatterns::PatternMaterial' has a wrong offset!");
static_assert(offsetof(FGeneralMatPatterns, ReplaceWith) == 0x000010, "Member 'FGeneralMatPatterns::ReplaceWith' has a wrong offset!");

// ScriptStruct FSDEngine.GeneralTerrainMaterialCombiner
// 0x0050 (0x0050 - 0x0000)
struct FGeneralTerrainMaterialCombiner final
{
public:
	struct FGeneralMatPropertiesEmpty             IfBothEmpty;                                       // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FGeneralMatPatterns>            Patterns;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGeneralMatProperties                  IfBothSolid;                                       // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeneralMatProperties                  IfSrcSolid;                                        // 0x0030(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeneralMatProperties                  IfDestSolid;                                       // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralTerrainMaterialCombiner) == 0x000008, "Wrong alignment on FGeneralTerrainMaterialCombiner");
static_assert(sizeof(FGeneralTerrainMaterialCombiner) == 0x000050, "Wrong size on FGeneralTerrainMaterialCombiner");
static_assert(offsetof(FGeneralTerrainMaterialCombiner, IfBothEmpty) == 0x000000, "Member 'FGeneralTerrainMaterialCombiner::IfBothEmpty' has a wrong offset!");
static_assert(offsetof(FGeneralTerrainMaterialCombiner, Patterns) == 0x000010, "Member 'FGeneralTerrainMaterialCombiner::Patterns' has a wrong offset!");
static_assert(offsetof(FGeneralTerrainMaterialCombiner, IfBothSolid) == 0x000020, "Member 'FGeneralTerrainMaterialCombiner::IfBothSolid' has a wrong offset!");
static_assert(offsetof(FGeneralTerrainMaterialCombiner, IfSrcSolid) == 0x000030, "Member 'FGeneralTerrainMaterialCombiner::IfSrcSolid' has a wrong offset!");
static_assert(offsetof(FGeneralTerrainMaterialCombiner, IfDestSolid) == 0x000040, "Member 'FGeneralTerrainMaterialCombiner::IfDestSolid' has a wrong offset!");

// ScriptStruct FSDEngine.BakeSetting
// 0x001C (0x001C - 0x0000)
struct FBakeSetting final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VectorValue;                                       // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBakeSetting) == 0x000004, "Wrong alignment on FBakeSetting");
static_assert(sizeof(FBakeSetting) == 0x00001C, "Wrong size on FBakeSetting");
static_assert(offsetof(FBakeSetting, Key) == 0x000000, "Member 'FBakeSetting::Key' has a wrong offset!");
static_assert(offsetof(FBakeSetting, IntValue) == 0x000008, "Member 'FBakeSetting::IntValue' has a wrong offset!");
static_assert(offsetof(FBakeSetting, FloatValue) == 0x00000C, "Member 'FBakeSetting::FloatValue' has a wrong offset!");
static_assert(offsetof(FBakeSetting, VectorValue) == 0x000010, "Member 'FBakeSetting::VectorValue' has a wrong offset!");

// ScriptStruct FSDEngine.BakeSettings
// 0x0010 (0x0010 - 0x0000)
struct FBakeSettings final
{
public:
	TArray<struct FBakeSetting>                   Pairs;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBakeSettings) == 0x000008, "Wrong alignment on FBakeSettings");
static_assert(sizeof(FBakeSettings) == 0x000010, "Wrong size on FBakeSettings");
static_assert(offsetof(FBakeSettings, Pairs) == 0x000000, "Member 'FBakeSettings::Pairs' has a wrong offset!");

// ScriptStruct FSDEngine.CSGCircleDuplicatorProperties
// 0x0008 (0x0008 - 0x0000)
struct FCSGCircleDuplicatorProperties final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSGCircleDuplicatorProperties) == 0x000004, "Wrong alignment on FCSGCircleDuplicatorProperties");
static_assert(sizeof(FCSGCircleDuplicatorProperties) == 0x000008, "Wrong size on FCSGCircleDuplicatorProperties");
static_assert(offsetof(FCSGCircleDuplicatorProperties, Num) == 0x000000, "Member 'FCSGCircleDuplicatorProperties::Num' has a wrong offset!");
static_assert(offsetof(FCSGCircleDuplicatorProperties, Radius) == 0x000004, "Member 'FCSGCircleDuplicatorProperties::Radius' has a wrong offset!");

// ScriptStruct FSDEngine.MatrixWithExactSync
// 0x0040 (0x0040 - 0x0000)
struct FMatrixWithExactSync final
{
public:
	float                                         Values[0x10];                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatrixWithExactSync) == 0x000004, "Wrong alignment on FMatrixWithExactSync");
static_assert(sizeof(FMatrixWithExactSync) == 0x000040, "Wrong size on FMatrixWithExactSync");
static_assert(offsetof(FMatrixWithExactSync, Values) == 0x000000, "Member 'FMatrixWithExactSync::Values' has a wrong offset!");

// ScriptStruct FSDEngine.MeshBaseProperties
// 0x0001 (0x0001 - 0x0000)
struct FMeshBaseProperties final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshBaseProperties) == 0x000001, "Wrong alignment on FMeshBaseProperties");
static_assert(sizeof(FMeshBaseProperties) == 0x000001, "Wrong size on FMeshBaseProperties");
static_assert(offsetof(FMeshBaseProperties, Enabled) == 0x000000, "Member 'FMeshBaseProperties::Enabled' has a wrong offset!");

// ScriptStruct FSDEngine.DeepCSGNode
// 0x0004 (0x0004 - 0x0000)
struct FDeepCSGNode final
{
public:
	uint32                                        Val;                                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeepCSGNode) == 0x000004, "Wrong alignment on FDeepCSGNode");
static_assert(sizeof(FDeepCSGNode) == 0x000004, "Wrong size on FDeepCSGNode");
static_assert(offsetof(FDeepCSGNode, Val) == 0x000000, "Member 'FDeepCSGNode::Val' has a wrong offset!");

// ScriptStruct FSDEngine.MeshLayerProperties
// 0x0028 (0x0028 - 0x0000)
struct FMeshLayerProperties final
{
public:
	class UTerrainMaterialCore*                   StartMaterial;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   BoundingBox;                                       // 0x0008(0x001C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_27AA[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeshLayerProperties) == 0x000008, "Wrong alignment on FMeshLayerProperties");
static_assert(sizeof(FMeshLayerProperties) == 0x000028, "Wrong size on FMeshLayerProperties");
static_assert(offsetof(FMeshLayerProperties, StartMaterial) == 0x000000, "Member 'FMeshLayerProperties::StartMaterial' has a wrong offset!");
static_assert(offsetof(FMeshLayerProperties, BoundingBox) == 0x000008, "Member 'FMeshLayerProperties::BoundingBox' has a wrong offset!");

// ScriptStruct FSDEngine.CarveSplineSegment
// 0x0034 (0x0034 - 0x0000)
struct FCarveSplineSegment final
{
public:
	struct FVector                                SplineStart;                                       // 0x0000(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SplineStartTangent;                                // 0x000C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SplineEnd;                                         // 0x0018(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SplineEndTangent;                                  // 0x0024(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCarveSplineSegment) == 0x000004, "Wrong alignment on FCarveSplineSegment");
static_assert(sizeof(FCarveSplineSegment) == 0x000034, "Wrong size on FCarveSplineSegment");
static_assert(offsetof(FCarveSplineSegment, SplineStart) == 0x000000, "Member 'FCarveSplineSegment::SplineStart' has a wrong offset!");
static_assert(offsetof(FCarveSplineSegment, SplineStartTangent) == 0x00000C, "Member 'FCarveSplineSegment::SplineStartTangent' has a wrong offset!");
static_assert(offsetof(FCarveSplineSegment, SplineEnd) == 0x000018, "Member 'FCarveSplineSegment::SplineEnd' has a wrong offset!");
static_assert(offsetof(FCarveSplineSegment, SplineEndTangent) == 0x000024, "Member 'FCarveSplineSegment::SplineEndTangent' has a wrong offset!");
static_assert(offsetof(FCarveSplineSegment, Radius) == 0x000030, "Member 'FCarveSplineSegment::Radius' has a wrong offset!");

// ScriptStruct FSDEngine.DeepCSGFloatTreePacked
// 0x0018 (0x0018 - 0x0000)
struct FDeepCSGFloatTreePacked final
{
public:
	struct FDeepCSGNode                           Root;                                              // 0x0000(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_27AB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Encplanes;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeepCSGFloatTreePacked) == 0x000008, "Wrong alignment on FDeepCSGFloatTreePacked");
static_assert(sizeof(FDeepCSGFloatTreePacked) == 0x000018, "Wrong size on FDeepCSGFloatTreePacked");
static_assert(offsetof(FDeepCSGFloatTreePacked, Root) == 0x000000, "Member 'FDeepCSGFloatTreePacked::Root' has a wrong offset!");
static_assert(offsetof(FDeepCSGFloatTreePacked, Encplanes) == 0x000008, "Member 'FDeepCSGFloatTreePacked::Encplanes' has a wrong offset!");

// ScriptStruct FSDEngine.SmartTerrainMaterialVal
// 0x0028 (0x0028 - 0x0000)
struct FSmartTerrainMaterialVal final
{
public:
	uint32                                        IfEmpty;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        IfSolid;                                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint32>                                OverrideKeys;                                      // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                                OverrideValues;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartTerrainMaterialVal) == 0x000008, "Wrong alignment on FSmartTerrainMaterialVal");
static_assert(sizeof(FSmartTerrainMaterialVal) == 0x000028, "Wrong size on FSmartTerrainMaterialVal");
static_assert(offsetof(FSmartTerrainMaterialVal, IfEmpty) == 0x000000, "Member 'FSmartTerrainMaterialVal::IfEmpty' has a wrong offset!");
static_assert(offsetof(FSmartTerrainMaterialVal, IfSolid) == 0x000004, "Member 'FSmartTerrainMaterialVal::IfSolid' has a wrong offset!");
static_assert(offsetof(FSmartTerrainMaterialVal, OverrideKeys) == 0x000008, "Member 'FSmartTerrainMaterialVal::OverrideKeys' has a wrong offset!");
static_assert(offsetof(FSmartTerrainMaterialVal, OverrideValues) == 0x000018, "Member 'FSmartTerrainMaterialVal::OverrideValues' has a wrong offset!");

// ScriptStruct FSDEngine.BakeEntry
// 0x0058 (0x0058 - 0x0000)
struct FBakeEntry final
{
public:
	struct FDeepCSGFloatTreePacked                Tree;                                              // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	struct FBox                                   AABB;                                              // 0x0018(0x001C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_27AC[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTerrainMaterialCore*>           Materials;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSmartTerrainMaterialVal>       SmartMaterials;                                    // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBakeEntry) == 0x000008, "Wrong alignment on FBakeEntry");
static_assert(sizeof(FBakeEntry) == 0x000058, "Wrong size on FBakeEntry");
static_assert(offsetof(FBakeEntry, Tree) == 0x000000, "Member 'FBakeEntry::Tree' has a wrong offset!");
static_assert(offsetof(FBakeEntry, AABB) == 0x000018, "Member 'FBakeEntry::AABB' has a wrong offset!");
static_assert(offsetof(FBakeEntry, Materials) == 0x000038, "Member 'FBakeEntry::Materials' has a wrong offset!");
static_assert(offsetof(FBakeEntry, SmartMaterials) == 0x000048, "Member 'FBakeEntry::SmartMaterials' has a wrong offset!");

// ScriptStruct FSDEngine.CSGBakedChildInstanceProperties
// 0x0010 (0x0010 - 0x0000)
struct FCSGBakedChildInstanceProperties final
{
public:
	class UCSGBake*                               BakedCSG;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariantIndex;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27AD[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCSGBakedChildInstanceProperties) == 0x000008, "Wrong alignment on FCSGBakedChildInstanceProperties");
static_assert(sizeof(FCSGBakedChildInstanceProperties) == 0x000010, "Wrong size on FCSGBakedChildInstanceProperties");
static_assert(offsetof(FCSGBakedChildInstanceProperties, BakedCSG) == 0x000000, "Member 'FCSGBakedChildInstanceProperties::BakedCSG' has a wrong offset!");
static_assert(offsetof(FCSGBakedChildInstanceProperties, VariantIndex) == 0x000008, "Member 'FCSGBakedChildInstanceProperties::VariantIndex' has a wrong offset!");

// ScriptStruct FSDEngine.EmptyBinaryMatProperties
// 0x0010 (0x0010 - 0x0000)
struct FEmptyBinaryMatProperties final
{
public:
	EEmptyBinaryComb                              Result;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27AE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTerrainMaterialCore*                   Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmptyBinaryMatProperties) == 0x000008, "Wrong alignment on FEmptyBinaryMatProperties");
static_assert(sizeof(FEmptyBinaryMatProperties) == 0x000010, "Wrong size on FEmptyBinaryMatProperties");
static_assert(offsetof(FEmptyBinaryMatProperties, Result) == 0x000000, "Member 'FEmptyBinaryMatProperties::Result' has a wrong offset!");
static_assert(offsetof(FEmptyBinaryMatProperties, Material) == 0x000008, "Member 'FEmptyBinaryMatProperties::Material' has a wrong offset!");

// ScriptStruct FSDEngine.BinaryMatProperties
// 0x0010 (0x0010 - 0x0000)
struct FBinaryMatProperties final
{
public:
	EBinaryComb                                   Result;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27AF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTerrainMaterialCore*                   Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBinaryMatProperties) == 0x000008, "Wrong alignment on FBinaryMatProperties");
static_assert(sizeof(FBinaryMatProperties) == 0x000010, "Wrong size on FBinaryMatProperties");
static_assert(offsetof(FBinaryMatProperties, Result) == 0x000000, "Member 'FBinaryMatProperties::Result' has a wrong offset!");
static_assert(offsetof(FBinaryMatProperties, Material) == 0x000008, "Member 'FBinaryMatProperties::Material' has a wrong offset!");

// ScriptStruct FSDEngine.BinaryMatPatterns
// 0x0020 (0x0020 - 0x0000)
struct FBinaryMatPatterns final
{
public:
	EPattern                                      PatternType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTerrainMaterialCore*                   PatternMaterial;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBinaryMatProperties                   ReplaceWith;                                       // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBinaryMatPatterns) == 0x000008, "Wrong alignment on FBinaryMatPatterns");
static_assert(sizeof(FBinaryMatPatterns) == 0x000020, "Wrong size on FBinaryMatPatterns");
static_assert(offsetof(FBinaryMatPatterns, PatternType) == 0x000000, "Member 'FBinaryMatPatterns::PatternType' has a wrong offset!");
static_assert(offsetof(FBinaryMatPatterns, PatternMaterial) == 0x000008, "Member 'FBinaryMatPatterns::PatternMaterial' has a wrong offset!");
static_assert(offsetof(FBinaryMatPatterns, ReplaceWith) == 0x000010, "Member 'FBinaryMatPatterns::ReplaceWith' has a wrong offset!");

// ScriptStruct FSDEngine.BinaryTerrainMaterialCombiner
// 0x0030 (0x0030 - 0x0000)
struct FBinaryTerrainMaterialCombiner final
{
public:
	struct FEmptyBinaryMatProperties              IfEmpty;                                           // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBinaryMatProperties                   IfSolid;                                           // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBinaryMatPatterns>             Patterns;                                          // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBinaryTerrainMaterialCombiner) == 0x000008, "Wrong alignment on FBinaryTerrainMaterialCombiner");
static_assert(sizeof(FBinaryTerrainMaterialCombiner) == 0x000030, "Wrong size on FBinaryTerrainMaterialCombiner");
static_assert(offsetof(FBinaryTerrainMaterialCombiner, IfEmpty) == 0x000000, "Member 'FBinaryTerrainMaterialCombiner::IfEmpty' has a wrong offset!");
static_assert(offsetof(FBinaryTerrainMaterialCombiner, IfSolid) == 0x000010, "Member 'FBinaryTerrainMaterialCombiner::IfSolid' has a wrong offset!");
static_assert(offsetof(FBinaryTerrainMaterialCombiner, Patterns) == 0x000020, "Member 'FBinaryTerrainMaterialCombiner::Patterns' has a wrong offset!");

// ScriptStruct FSDEngine.CSGLayers
// 0x0038 (0x0038 - 0x0000)
struct FCSGLayers final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBinaryTerrainMaterialCombiner         Above;                                             // 0x0008(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSGLayers) == 0x000008, "Wrong alignment on FCSGLayers");
static_assert(sizeof(FCSGLayers) == 0x000038, "Wrong size on FCSGLayers");
static_assert(offsetof(FCSGLayers, Offset) == 0x000000, "Member 'FCSGLayers::Offset' has a wrong offset!");
static_assert(offsetof(FCSGLayers, Above) == 0x000008, "Member 'FCSGLayers::Above' has a wrong offset!");

// ScriptStruct FSDEngine.CSGAddMaterialLayersProperties
// 0x0040 (0x0040 - 0x0000)
struct FCSGAddMaterialLayersProperties final
{
public:
	TArray<struct FCSGLayers>                     Layers;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBinaryTerrainMaterialCombiner         Inner;                                             // 0x0010(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSGAddMaterialLayersProperties) == 0x000008, "Wrong alignment on FCSGAddMaterialLayersProperties");
static_assert(sizeof(FCSGAddMaterialLayersProperties) == 0x000040, "Wrong size on FCSGAddMaterialLayersProperties");
static_assert(offsetof(FCSGAddMaterialLayersProperties, Layers) == 0x000000, "Member 'FCSGAddMaterialLayersProperties::Layers' has a wrong offset!");
static_assert(offsetof(FCSGAddMaterialLayersProperties, Inner) == 0x000010, "Member 'FCSGAddMaterialLayersProperties::Inner' has a wrong offset!");

// ScriptStruct FSDEngine.MeshCellNoiseProperties
// 0x001C (0x001C - 0x0000)
struct FMeshCellNoiseProperties final
{
public:
	struct FVector                                CellSize;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CellOffsetFactor;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InsideFraction;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshCellNoiseProperties) == 0x000004, "Wrong alignment on FMeshCellNoiseProperties");
static_assert(sizeof(FMeshCellNoiseProperties) == 0x00001C, "Wrong size on FMeshCellNoiseProperties");
static_assert(offsetof(FMeshCellNoiseProperties, CellSize) == 0x000000, "Member 'FMeshCellNoiseProperties::CellSize' has a wrong offset!");
static_assert(offsetof(FMeshCellNoiseProperties, CellOffsetFactor) == 0x00000C, "Member 'FMeshCellNoiseProperties::CellOffsetFactor' has a wrong offset!");
static_assert(offsetof(FMeshCellNoiseProperties, InsideFraction) == 0x000010, "Member 'FMeshCellNoiseProperties::InsideFraction' has a wrong offset!");
static_assert(offsetof(FMeshCellNoiseProperties, Distance) == 0x000014, "Member 'FMeshCellNoiseProperties::Distance' has a wrong offset!");
static_assert(offsetof(FMeshCellNoiseProperties, Seed) == 0x000018, "Member 'FMeshCellNoiseProperties::Seed' has a wrong offset!");

// ScriptStruct FSDEngine.CSGChildInstanceProperties
// 0x0020 (0x0020 - 0x0000)
struct FCSGChildInstanceProperties final
{
public:
	TSubclassOf<class ACSGBuilder>                Mesh;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBakeSettings                          Settings;                                          // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B2[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCSGChildInstanceProperties) == 0x000008, "Wrong alignment on FCSGChildInstanceProperties");
static_assert(sizeof(FCSGChildInstanceProperties) == 0x000020, "Wrong size on FCSGChildInstanceProperties");
static_assert(offsetof(FCSGChildInstanceProperties, Mesh) == 0x000000, "Member 'FCSGChildInstanceProperties::Mesh' has a wrong offset!");
static_assert(offsetof(FCSGChildInstanceProperties, Settings) == 0x000008, "Member 'FCSGChildInstanceProperties::Settings' has a wrong offset!");
static_assert(offsetof(FCSGChildInstanceProperties, Seed) == 0x000018, "Member 'FCSGChildInstanceProperties::Seed' has a wrong offset!");

// ScriptStruct FSDEngine.CSGConvexColliderProperties
// 0x0008 (0x0008 - 0x0000)
struct FCSGConvexColliderProperties final
{
public:
	class UStaticMesh*                            Collider;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSGConvexColliderProperties) == 0x000008, "Wrong alignment on FCSGConvexColliderProperties");
static_assert(sizeof(FCSGConvexColliderProperties) == 0x000008, "Wrong size on FCSGConvexColliderProperties");
static_assert(offsetof(FCSGConvexColliderProperties, Collider) == 0x000000, "Member 'FCSGConvexColliderProperties::Collider' has a wrong offset!");

// ScriptStruct FSDEngine.CSGGridDuplicatorProperties
// 0x0020 (0x0020 - 0x0000)
struct FCSGGridDuplicatorProperties final
{
public:
	int32                                         NumA;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumB;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DirectionA;                                        // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DirectionB;                                        // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSGGridDuplicatorProperties) == 0x000004, "Wrong alignment on FCSGGridDuplicatorProperties");
static_assert(sizeof(FCSGGridDuplicatorProperties) == 0x000020, "Wrong size on FCSGGridDuplicatorProperties");
static_assert(offsetof(FCSGGridDuplicatorProperties, NumA) == 0x000000, "Member 'FCSGGridDuplicatorProperties::NumA' has a wrong offset!");
static_assert(offsetof(FCSGGridDuplicatorProperties, NumB) == 0x000004, "Member 'FCSGGridDuplicatorProperties::NumB' has a wrong offset!");
static_assert(offsetof(FCSGGridDuplicatorProperties, DirectionA) == 0x000008, "Member 'FCSGGridDuplicatorProperties::DirectionA' has a wrong offset!");
static_assert(offsetof(FCSGGridDuplicatorProperties, DirectionB) == 0x000014, "Member 'FCSGGridDuplicatorProperties::DirectionB' has a wrong offset!");

// ScriptStruct FSDEngine.CSGRandomDisableProperties
// 0x0004 (0x0004 - 0x0000)
struct FCSGRandomDisableProperties final
{
public:
	float                                         DisableProbability;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSGRandomDisableProperties) == 0x000004, "Wrong alignment on FCSGRandomDisableProperties");
static_assert(sizeof(FCSGRandomDisableProperties) == 0x000004, "Wrong size on FCSGRandomDisableProperties");
static_assert(offsetof(FCSGRandomDisableProperties, DisableProbability) == 0x000000, "Member 'FCSGRandomDisableProperties::DisableProbability' has a wrong offset!");

// ScriptStruct FSDEngine.CSGRandomizeTransformProperties
// 0x0054 (0x0054 - 0x0000)
struct FCSGRandomizeTransformProperties final
{
public:
	struct FBox                                   Translation;                                       // 0x0000(0x001C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RotationMinZ;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMaxZ;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMinY;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMaxY;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMinX;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMaxX;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleMin;                                          // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleMax;                                          // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScaleAxesIndependent;                              // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableRandomize;                                  // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B3[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Seed;                                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSGRandomizeTransformProperties) == 0x000004, "Wrong alignment on FCSGRandomizeTransformProperties");
static_assert(sizeof(FCSGRandomizeTransformProperties) == 0x000054, "Wrong size on FCSGRandomizeTransformProperties");
static_assert(offsetof(FCSGRandomizeTransformProperties, Translation) == 0x000000, "Member 'FCSGRandomizeTransformProperties::Translation' has a wrong offset!");
static_assert(offsetof(FCSGRandomizeTransformProperties, RotationMinZ) == 0x00001C, "Member 'FCSGRandomizeTransformProperties::RotationMinZ' has a wrong offset!");
static_assert(offsetof(FCSGRandomizeTransformProperties, RotationMaxZ) == 0x000020, "Member 'FCSGRandomizeTransformProperties::RotationMaxZ' has a wrong offset!");
static_assert(offsetof(FCSGRandomizeTransformProperties, RotationMinY) == 0x000024, "Member 'FCSGRandomizeTransformProperties::RotationMinY' has a wrong offset!");
static_assert(offsetof(FCSGRandomizeTransformProperties, RotationMaxY) == 0x000028, "Member 'FCSGRandomizeTransformProperties::RotationMaxY' has a wrong offset!");
static_assert(offsetof(FCSGRandomizeTransformProperties, RotationMinX) == 0x00002C, "Member 'FCSGRandomizeTransformProperties::RotationMinX' has a wrong offset!");
static_assert(offsetof(FCSGRandomizeTransformProperties, RotationMaxX) == 0x000030, "Member 'FCSGRandomizeTransformProperties::RotationMaxX' has a wrong offset!");
static_assert(offsetof(FCSGRandomizeTransformProperties, ScaleMin) == 0x000034, "Member 'FCSGRandomizeTransformProperties::ScaleMin' has a wrong offset!");
static_assert(offsetof(FCSGRandomizeTransformProperties, ScaleMax) == 0x000040, "Member 'FCSGRandomizeTransformProperties::ScaleMax' has a wrong offset!");
static_assert(offsetof(FCSGRandomizeTransformProperties, ScaleAxesIndependent) == 0x00004C, "Member 'FCSGRandomizeTransformProperties::ScaleAxesIndependent' has a wrong offset!");
static_assert(offsetof(FCSGRandomizeTransformProperties, DisableRandomize) == 0x00004D, "Member 'FCSGRandomizeTransformProperties::DisableRandomize' has a wrong offset!");
static_assert(offsetof(FCSGRandomizeTransformProperties, Seed) == 0x000050, "Member 'FCSGRandomizeTransformProperties::Seed' has a wrong offset!");

// ScriptStruct FSDEngine.CSGSphereProperties
// 0x0014 (0x0014 - 0x0000)
struct FCSGSphereProperties final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleTop;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleBottom;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SidesTopBottom;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sides;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSGSphereProperties) == 0x000004, "Wrong alignment on FCSGSphereProperties");
static_assert(sizeof(FCSGSphereProperties) == 0x000014, "Wrong size on FCSGSphereProperties");
static_assert(offsetof(FCSGSphereProperties, Radius) == 0x000000, "Member 'FCSGSphereProperties::Radius' has a wrong offset!");
static_assert(offsetof(FCSGSphereProperties, AngleTop) == 0x000004, "Member 'FCSGSphereProperties::AngleTop' has a wrong offset!");
static_assert(offsetof(FCSGSphereProperties, AngleBottom) == 0x000008, "Member 'FCSGSphereProperties::AngleBottom' has a wrong offset!");
static_assert(offsetof(FCSGSphereProperties, SidesTopBottom) == 0x00000C, "Member 'FCSGSphereProperties::SidesTopBottom' has a wrong offset!");
static_assert(offsetof(FCSGSphereProperties, Sides) == 0x000010, "Member 'FCSGSphereProperties::Sides' has a wrong offset!");

// ScriptStruct FSDEngine.CSGConeProperties
// 0x0010 (0x0010 - 0x0000)
struct FCSGConeProperties final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusTop;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusBottom;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sides;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSGConeProperties) == 0x000004, "Wrong alignment on FCSGConeProperties");
static_assert(sizeof(FCSGConeProperties) == 0x000010, "Wrong size on FCSGConeProperties");
static_assert(offsetof(FCSGConeProperties, Height) == 0x000000, "Member 'FCSGConeProperties::Height' has a wrong offset!");
static_assert(offsetof(FCSGConeProperties, RadiusTop) == 0x000004, "Member 'FCSGConeProperties::RadiusTop' has a wrong offset!");
static_assert(offsetof(FCSGConeProperties, RadiusBottom) == 0x000008, "Member 'FCSGConeProperties::RadiusBottom' has a wrong offset!");
static_assert(offsetof(FCSGConeProperties, Sides) == 0x00000C, "Member 'FCSGConeProperties::Sides' has a wrong offset!");

// ScriptStruct FSDEngine.CSGCylinderProperties
// 0x000C (0x000C - 0x0000)
struct FCSGCylinderProperties final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sides;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSGCylinderProperties) == 0x000004, "Wrong alignment on FCSGCylinderProperties");
static_assert(sizeof(FCSGCylinderProperties) == 0x00000C, "Wrong size on FCSGCylinderProperties");
static_assert(offsetof(FCSGCylinderProperties, Height) == 0x000000, "Member 'FCSGCylinderProperties::Height' has a wrong offset!");
static_assert(offsetof(FCSGCylinderProperties, Radius) == 0x000004, "Member 'FCSGCylinderProperties::Radius' has a wrong offset!");
static_assert(offsetof(FCSGCylinderProperties, Sides) == 0x000008, "Member 'FCSGCylinderProperties::Sides' has a wrong offset!");

// ScriptStruct FSDEngine.MeshBoxProperties
// 0x0014 (0x0014 - 0x0000)
struct FMeshBoxProperties final
{
public:
	struct FVector                                HalfSize;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BevelSegments;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BevelSize;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshBoxProperties) == 0x000004, "Wrong alignment on FMeshBoxProperties");
static_assert(sizeof(FMeshBoxProperties) == 0x000014, "Wrong size on FMeshBoxProperties");
static_assert(offsetof(FMeshBoxProperties, HalfSize) == 0x000000, "Member 'FMeshBoxProperties::HalfSize' has a wrong offset!");
static_assert(offsetof(FMeshBoxProperties, BevelSegments) == 0x00000C, "Member 'FMeshBoxProperties::BevelSegments' has a wrong offset!");
static_assert(offsetof(FMeshBoxProperties, BevelSize) == 0x000010, "Member 'FMeshBoxProperties::BevelSize' has a wrong offset!");

// ScriptStruct FSDEngine.ConvexNoiseProperties
// 0x000C (0x000C - 0x0000)
struct FConvexNoiseProperties final
{
public:
	float                                         Amplitude;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridSize;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConvexNoiseProperties) == 0x000004, "Wrong alignment on FConvexNoiseProperties");
static_assert(sizeof(FConvexNoiseProperties) == 0x00000C, "Wrong size on FConvexNoiseProperties");
static_assert(offsetof(FConvexNoiseProperties, Amplitude) == 0x000000, "Member 'FConvexNoiseProperties::Amplitude' has a wrong offset!");
static_assert(offsetof(FConvexNoiseProperties, GridSize) == 0x000004, "Member 'FConvexNoiseProperties::GridSize' has a wrong offset!");
static_assert(offsetof(FConvexNoiseProperties, Seed) == 0x000008, "Member 'FConvexNoiseProperties::Seed' has a wrong offset!");

// ScriptStruct FSDEngine.SplineWarpProperties
// 0x0020 (0x0020 - 0x0000)
struct FSplineWarpProperties final
{
public:
	struct FBox                                   ElementBox;                                        // 0x0000(0x001C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESplineWarpType                               SplineWarpType;                                    // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B4[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSplineWarpProperties) == 0x000004, "Wrong alignment on FSplineWarpProperties");
static_assert(sizeof(FSplineWarpProperties) == 0x000020, "Wrong size on FSplineWarpProperties");
static_assert(offsetof(FSplineWarpProperties, ElementBox) == 0x000000, "Member 'FSplineWarpProperties::ElementBox' has a wrong offset!");
static_assert(offsetof(FSplineWarpProperties, SplineWarpType) == 0x00001C, "Member 'FSplineWarpProperties::SplineWarpType' has a wrong offset!");

// ScriptStruct FSDEngine.WarpNoiseProperties
// 0x0020 (0x0020 - 0x0000)
struct FWarpNoiseProperties final
{
public:
	float                                         Frequency;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFNRotationType3D                             RotationType3d;                                    // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFNFractalType                                FractalType;                                       // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B5[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Octaves;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lacunarity;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gain;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightedStrength;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFNDomainWarpType                             DomainWarpType;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B6[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Amplitude;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarpNoiseProperties) == 0x000004, "Wrong alignment on FWarpNoiseProperties");
static_assert(sizeof(FWarpNoiseProperties) == 0x000020, "Wrong size on FWarpNoiseProperties");
static_assert(offsetof(FWarpNoiseProperties, Frequency) == 0x000000, "Member 'FWarpNoiseProperties::Frequency' has a wrong offset!");
static_assert(offsetof(FWarpNoiseProperties, RotationType3d) == 0x000004, "Member 'FWarpNoiseProperties::RotationType3d' has a wrong offset!");
static_assert(offsetof(FWarpNoiseProperties, FractalType) == 0x000005, "Member 'FWarpNoiseProperties::FractalType' has a wrong offset!");
static_assert(offsetof(FWarpNoiseProperties, Octaves) == 0x000008, "Member 'FWarpNoiseProperties::Octaves' has a wrong offset!");
static_assert(offsetof(FWarpNoiseProperties, Lacunarity) == 0x00000C, "Member 'FWarpNoiseProperties::Lacunarity' has a wrong offset!");
static_assert(offsetof(FWarpNoiseProperties, Gain) == 0x000010, "Member 'FWarpNoiseProperties::Gain' has a wrong offset!");
static_assert(offsetof(FWarpNoiseProperties, WeightedStrength) == 0x000014, "Member 'FWarpNoiseProperties::WeightedStrength' has a wrong offset!");
static_assert(offsetof(FWarpNoiseProperties, DomainWarpType) == 0x000018, "Member 'FWarpNoiseProperties::DomainWarpType' has a wrong offset!");
static_assert(offsetof(FWarpNoiseProperties, Amplitude) == 0x00001C, "Member 'FWarpNoiseProperties::Amplitude' has a wrong offset!");

// ScriptStruct FSDEngine.WarpedProperties
// 0x0028 (0x0028 - 0x0000)
struct FWarpedProperties final
{
public:
	EPreviewCellSize                              CellSize;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWarpNoiseProperties                   WarpNoise;                                         // 0x0004(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarpedProperties) == 0x000004, "Wrong alignment on FWarpedProperties");
static_assert(sizeof(FWarpedProperties) == 0x000028, "Wrong size on FWarpedProperties");
static_assert(offsetof(FWarpedProperties, CellSize) == 0x000000, "Member 'FWarpedProperties::CellSize' has a wrong offset!");
static_assert(offsetof(FWarpedProperties, WarpNoise) == 0x000004, "Member 'FWarpedProperties::WarpNoise' has a wrong offset!");
static_assert(offsetof(FWarpedProperties, Seed) == 0x000024, "Member 'FWarpedProperties::Seed' has a wrong offset!");

// ScriptStruct FSDEngine.SDFModulateLayer
// 0x0008 (0x0008 - 0x0000)
struct FSDFModulateLayer final
{
public:
	float                                         ModulateDistance;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SDFOffset;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDFModulateLayer) == 0x000004, "Wrong alignment on FSDFModulateLayer");
static_assert(sizeof(FSDFModulateLayer) == 0x000008, "Wrong size on FSDFModulateLayer");
static_assert(offsetof(FSDFModulateLayer, ModulateDistance) == 0x000000, "Member 'FSDFModulateLayer::ModulateDistance' has a wrong offset!");
static_assert(offsetof(FSDFModulateLayer, SDFOffset) == 0x000004, "Member 'FSDFModulateLayer::SDFOffset' has a wrong offset!");

// ScriptStruct FSDEngine.CSGSDFModulatedInstanceProperties
// 0x0050 (0x0050 - 0x0000)
struct FCSGSDFModulatedInstanceProperties final
{
public:
	TSubclassOf<class ASDFBuilder>                SDF;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASDFBuilder>                ModulateSDF;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPreviewCellSize                              CellSize;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B8[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBakeSettings                          SDFSettings;                                       // 0x0018(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FBakeSettings                          ModulateSettings;                                  // 0x0028(0x0010)(Edit, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESDFModulateMode                              ModulateMode;                                      // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B9[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSDFModulateLayer>              ModulateLayers;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSGSDFModulatedInstanceProperties) == 0x000008, "Wrong alignment on FCSGSDFModulatedInstanceProperties");
static_assert(sizeof(FCSGSDFModulatedInstanceProperties) == 0x000050, "Wrong size on FCSGSDFModulatedInstanceProperties");
static_assert(offsetof(FCSGSDFModulatedInstanceProperties, SDF) == 0x000000, "Member 'FCSGSDFModulatedInstanceProperties::SDF' has a wrong offset!");
static_assert(offsetof(FCSGSDFModulatedInstanceProperties, ModulateSDF) == 0x000008, "Member 'FCSGSDFModulatedInstanceProperties::ModulateSDF' has a wrong offset!");
static_assert(offsetof(FCSGSDFModulatedInstanceProperties, CellSize) == 0x000010, "Member 'FCSGSDFModulatedInstanceProperties::CellSize' has a wrong offset!");
static_assert(offsetof(FCSGSDFModulatedInstanceProperties, SDFSettings) == 0x000018, "Member 'FCSGSDFModulatedInstanceProperties::SDFSettings' has a wrong offset!");
static_assert(offsetof(FCSGSDFModulatedInstanceProperties, ModulateSettings) == 0x000028, "Member 'FCSGSDFModulatedInstanceProperties::ModulateSettings' has a wrong offset!");
static_assert(offsetof(FCSGSDFModulatedInstanceProperties, Seed) == 0x000038, "Member 'FCSGSDFModulatedInstanceProperties::Seed' has a wrong offset!");
static_assert(offsetof(FCSGSDFModulatedInstanceProperties, ModulateMode) == 0x00003C, "Member 'FCSGSDFModulatedInstanceProperties::ModulateMode' has a wrong offset!");
static_assert(offsetof(FCSGSDFModulatedInstanceProperties, ModulateLayers) == 0x000040, "Member 'FCSGSDFModulatedInstanceProperties::ModulateLayers' has a wrong offset!");

// ScriptStruct FSDEngine.CSGSDFInstanceProperties
// 0x0028 (0x0028 - 0x0000)
struct FCSGSDFInstanceProperties final
{
public:
	TSubclassOf<class ASDFBuilder>                SDF;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPreviewCellSize                              CellSize;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27BA[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBakeSettings                          Settings;                                          // 0x0010(0x0010)(Edit, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27BB[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCSGSDFInstanceProperties) == 0x000008, "Wrong alignment on FCSGSDFInstanceProperties");
static_assert(sizeof(FCSGSDFInstanceProperties) == 0x000028, "Wrong size on FCSGSDFInstanceProperties");
static_assert(offsetof(FCSGSDFInstanceProperties, SDF) == 0x000000, "Member 'FCSGSDFInstanceProperties::SDF' has a wrong offset!");
static_assert(offsetof(FCSGSDFInstanceProperties, CellSize) == 0x000008, "Member 'FCSGSDFInstanceProperties::CellSize' has a wrong offset!");
static_assert(offsetof(FCSGSDFInstanceProperties, Settings) == 0x000010, "Member 'FCSGSDFInstanceProperties::Settings' has a wrong offset!");
static_assert(offsetof(FCSGSDFInstanceProperties, Seed) == 0x000020, "Member 'FCSGSDFInstanceProperties::Seed' has a wrong offset!");

// ScriptStruct FSDEngine.VoronoiProperties
// 0x001C (0x001C - 0x0000)
struct FVoronoiProperties final
{
public:
	struct FVector                                HalfSize;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoints;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Inverted;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27BC[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoronoiProperties) == 0x000004, "Wrong alignment on FVoronoiProperties");
static_assert(sizeof(FVoronoiProperties) == 0x00001C, "Wrong size on FVoronoiProperties");
static_assert(offsetof(FVoronoiProperties, HalfSize) == 0x000000, "Member 'FVoronoiProperties::HalfSize' has a wrong offset!");
static_assert(offsetof(FVoronoiProperties, NumPoints) == 0x00000C, "Member 'FVoronoiProperties::NumPoints' has a wrong offset!");
static_assert(offsetof(FVoronoiProperties, Seed) == 0x000010, "Member 'FVoronoiProperties::Seed' has a wrong offset!");
static_assert(offsetof(FVoronoiProperties, Distance) == 0x000014, "Member 'FVoronoiProperties::Distance' has a wrong offset!");
static_assert(offsetof(FVoronoiProperties, Inverted) == 0x000018, "Member 'FVoronoiProperties::Inverted' has a wrong offset!");

// ScriptStruct FSDEngine.CSGSTLProperties
// 0x0008 (0x0008 - 0x0000)
struct FCSGSTLProperties final
{
public:
	class UStaticMeshCarver*                      Mesh;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCSGSTLProperties) == 0x000008, "Wrong alignment on FCSGSTLProperties");
static_assert(sizeof(FCSGSTLProperties) == 0x000008, "Wrong size on FCSGSTLProperties");
static_assert(offsetof(FCSGSTLProperties, Mesh) == 0x000000, "Member 'FCSGSTLProperties::Mesh' has a wrong offset!");

// ScriptStruct FSDEngine.DeepCSGFloatPlane
// 0x0020 (0x0020 - 0x0000)
struct FDeepCSGFloatPlane final
{
public:
	struct FVector4                               Plane;                                             // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeepCSGNode                           Top;                                               // 0x0010(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDeepCSGNode                           Bottom;                                            // 0x0014(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_27BD[0x8];                                     // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeepCSGFloatPlane) == 0x000010, "Wrong alignment on FDeepCSGFloatPlane");
static_assert(sizeof(FDeepCSGFloatPlane) == 0x000020, "Wrong size on FDeepCSGFloatPlane");
static_assert(offsetof(FDeepCSGFloatPlane, Plane) == 0x000000, "Member 'FDeepCSGFloatPlane::Plane' has a wrong offset!");
static_assert(offsetof(FDeepCSGFloatPlane, Top) == 0x000010, "Member 'FDeepCSGFloatPlane::Top' has a wrong offset!");
static_assert(offsetof(FDeepCSGFloatPlane, Bottom) == 0x000014, "Member 'FDeepCSGFloatPlane::Bottom' has a wrong offset!");

// ScriptStruct FSDEngine.DeepCSGFloatTree
// 0x0018 (0x0018 - 0x0000)
struct FDeepCSGFloatTree final
{
public:
	struct FDeepCSGNode                           Root;                                              // 0x0000(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_27BE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDeepCSGFloatPlane>             Planes;                                            // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeepCSGFloatTree) == 0x000008, "Wrong alignment on FDeepCSGFloatTree");
static_assert(sizeof(FDeepCSGFloatTree) == 0x000018, "Wrong size on FDeepCSGFloatTree");
static_assert(offsetof(FDeepCSGFloatTree, Root) == 0x000000, "Member 'FDeepCSGFloatTree::Root' has a wrong offset!");
static_assert(offsetof(FDeepCSGFloatTree, Planes) == 0x000008, "Member 'FDeepCSGFloatTree::Planes' has a wrong offset!");

// ScriptStruct FSDEngine.ChunkOffset
// 0x0006 (0x0006 - 0x0000)
struct FChunkOffset final
{
public:
	int16                                         X;                                                 // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Y;                                                 // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Z;                                                 // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChunkOffset) == 0x000002, "Wrong alignment on FChunkOffset");
static_assert(sizeof(FChunkOffset) == 0x000006, "Wrong size on FChunkOffset");
static_assert(offsetof(FChunkOffset, X) == 0x000000, "Member 'FChunkOffset::X' has a wrong offset!");
static_assert(offsetof(FChunkOffset, Y) == 0x000002, "Member 'FChunkOffset::Y' has a wrong offset!");
static_assert(offsetof(FChunkOffset, Z) == 0x000004, "Member 'FChunkOffset::Z' has a wrong offset!");

// ScriptStruct FSDEngine.ChunkId
// 0x0006 (0x0006 - 0x0000)
struct FChunkId final
{
public:
	int16                                         X;                                                 // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Y;                                                 // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Z;                                                 // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChunkId) == 0x000002, "Wrong alignment on FChunkId");
static_assert(sizeof(FChunkId) == 0x000006, "Wrong size on FChunkId");
static_assert(offsetof(FChunkId, X) == 0x000000, "Member 'FChunkId::X' has a wrong offset!");
static_assert(offsetof(FChunkId, Y) == 0x000002, "Member 'FChunkId::Y' has a wrong offset!");
static_assert(offsetof(FChunkId, Z) == 0x000004, "Member 'FChunkId::Z' has a wrong offset!");

// ScriptStruct FSDEngine.CellId
// 0x0006 (0x0006 - 0x0000)
struct FCellId final
{
public:
	int16                                         X;                                                 // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Y;                                                 // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Z;                                                 // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCellId) == 0x000002, "Wrong alignment on FCellId");
static_assert(sizeof(FCellId) == 0x000006, "Wrong size on FCellId");
static_assert(offsetof(FCellId, X) == 0x000000, "Member 'FCellId::X' has a wrong offset!");
static_assert(offsetof(FCellId, Y) == 0x000002, "Member 'FCellId::Y' has a wrong offset!");
static_assert(offsetof(FCellId, Z) == 0x000004, "Member 'FCellId::Z' has a wrong offset!");

// ScriptStruct FSDEngine.DeepCSGTree
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FDeepCSGTree final
{
public:
	uint8                                         Pad_27BF[0x48];                                    // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeepCSGTree) == 0x000008, "Wrong alignment on FDeepCSGTree");
static_assert(sizeof(FDeepCSGTree) == 0x000048, "Wrong size on FDeepCSGTree");

// ScriptStruct FSDEngine.DeepCSGTreeOperations
// 0x0001 (0x0001 - 0x0000)
struct FDeepCSGTreeOperations final
{
public:
	uint8                                         Pad_27C0[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeepCSGTreeOperations) == 0x000001, "Wrong alignment on FDeepCSGTreeOperations");
static_assert(sizeof(FDeepCSGTreeOperations) == 0x000001, "Wrong size on FDeepCSGTreeOperations");

// ScriptStruct FSDEngine.DeepCSGUtils
// 0x0001 (0x0001 - 0x0000)
struct FDeepCSGUtils final
{
public:
	uint8                                         Pad_27C1[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeepCSGUtils) == 0x000001, "Wrong alignment on FDeepCSGUtils");
static_assert(sizeof(FDeepCSGUtils) == 0x000001, "Wrong size on FDeepCSGUtils");

// ScriptStruct FSDEngine.LinearCellId
// 0x0006 (0x0006 - 0x0000)
struct FLinearCellId final
{
public:
	uint16                                        X;                                                 // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Y;                                                 // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Z;                                                 // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLinearCellId) == 0x000002, "Wrong alignment on FLinearCellId");
static_assert(sizeof(FLinearCellId) == 0x000006, "Wrong size on FLinearCellId");
static_assert(offsetof(FLinearCellId, X) == 0x000000, "Member 'FLinearCellId::X' has a wrong offset!");
static_assert(offsetof(FLinearCellId, Y) == 0x000002, "Member 'FLinearCellId::Y' has a wrong offset!");
static_assert(offsetof(FLinearCellId, Z) == 0x000004, "Member 'FLinearCellId::Z' has a wrong offset!");

// ScriptStruct FSDEngine.EncodedChunkId
// 0x0004 (0x0004 - 0x0000)
struct FEncodedChunkId final
{
public:
	uint32                                        ID;                                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncodedChunkId) == 0x000004, "Wrong alignment on FEncodedChunkId");
static_assert(sizeof(FEncodedChunkId) == 0x000004, "Wrong size on FEncodedChunkId");
static_assert(offsetof(FEncodedChunkId, ID) == 0x000000, "Member 'FEncodedChunkId::ID' has a wrong offset!");

// ScriptStruct FSDEngine.EncodedChunkCellId
// 0x0008 (0x0008 - 0x0000)
struct FEncodedChunkCellId final
{
public:
	struct FEncodedChunkId                        ChunkId;                                           // 0x0000(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint16                                        CellOffset;                                        // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C2[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncodedChunkCellId) == 0x000004, "Wrong alignment on FEncodedChunkCellId");
static_assert(sizeof(FEncodedChunkCellId) == 0x000008, "Wrong size on FEncodedChunkCellId");
static_assert(offsetof(FEncodedChunkCellId, ChunkId) == 0x000000, "Member 'FEncodedChunkCellId::ChunkId' has a wrong offset!");
static_assert(offsetof(FEncodedChunkCellId, CellOffset) == 0x000004, "Member 'FEncodedChunkCellId::CellOffset' has a wrong offset!");

// ScriptStruct FSDEngine.ChunckIDAndOffsetBox
// 0x0012 (0x0012 - 0x0000)
struct FChunckIDAndOffsetBox final
{
public:
	struct FChunkId                               ChunkId;                                           // 0x0000(0x0006)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChunkOffset                           MinOffset;                                         // 0x0006(0x0006)(NoDestructor, NativeAccessSpecifierPublic)
	struct FChunkOffset                           MaxOffset;                                         // 0x000C(0x0006)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChunckIDAndOffsetBox) == 0x000002, "Wrong alignment on FChunckIDAndOffsetBox");
static_assert(sizeof(FChunckIDAndOffsetBox) == 0x000012, "Wrong size on FChunckIDAndOffsetBox");
static_assert(offsetof(FChunckIDAndOffsetBox, ChunkId) == 0x000000, "Member 'FChunckIDAndOffsetBox::ChunkId' has a wrong offset!");
static_assert(offsetof(FChunckIDAndOffsetBox, MinOffset) == 0x000006, "Member 'FChunckIDAndOffsetBox::MinOffset' has a wrong offset!");
static_assert(offsetof(FChunckIDAndOffsetBox, MaxOffset) == 0x00000C, "Member 'FChunckIDAndOffsetBox::MaxOffset' has a wrong offset!");

// ScriptStruct FSDEngine.ChunckIDAndOffset
// 0x000C (0x000C - 0x0000)
struct FChunckIDAndOffset final
{
public:
	struct FChunkId                               ChunkId;                                           // 0x0000(0x0006)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChunkOffset                           Offset;                                            // 0x0006(0x0006)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChunckIDAndOffset) == 0x000002, "Wrong alignment on FChunckIDAndOffset");
static_assert(sizeof(FChunckIDAndOffset) == 0x00000C, "Wrong size on FChunckIDAndOffset");
static_assert(offsetof(FChunckIDAndOffset, ChunkId) == 0x000000, "Member 'FChunckIDAndOffset::ChunkId' has a wrong offset!");
static_assert(offsetof(FChunckIDAndOffset, Offset) == 0x000006, "Member 'FChunckIDAndOffset::Offset' has a wrong offset!");

// ScriptStruct FSDEngine.CellBox
// 0x000C (0x000C - 0x0000)
struct FCellBox final
{
public:
	struct FCellId                                Min;                                               // 0x0000(0x0006)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCellId                                Max;                                               // 0x0006(0x0006)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCellBox) == 0x000002, "Wrong alignment on FCellBox");
static_assert(sizeof(FCellBox) == 0x00000C, "Wrong size on FCellBox");
static_assert(offsetof(FCellBox, Min) == 0x000000, "Member 'FCellBox::Min' has a wrong offset!");
static_assert(offsetof(FCellBox, Max) == 0x000006, "Member 'FCellBox::Max' has a wrong offset!");

// ScriptStruct FSDEngine.FastNoiseProperties
// 0x002C (0x002C - 0x0000)
struct FFastNoiseProperties final
{
public:
	float                                         Frequency;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFNNoiseType                                  NoiseType;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFNRotationType3D                             RotationType3d;                                    // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFNFractalType                                FractalType;                                       // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C3[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Octaves;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lacunarity;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gain;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightedStrength;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PingPongStrength;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFNCellularDistanceFunc                       CellularDistanceFunc;                              // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFNCellularReturnType                         CellularReturnYype;                                // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C4[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CellularJitterMod;                                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFNDomainWarpType                             DomainWarpType;                                    // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C5[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WarpAmplitude;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFastNoiseProperties) == 0x000004, "Wrong alignment on FFastNoiseProperties");
static_assert(sizeof(FFastNoiseProperties) == 0x00002C, "Wrong size on FFastNoiseProperties");
static_assert(offsetof(FFastNoiseProperties, Frequency) == 0x000000, "Member 'FFastNoiseProperties::Frequency' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, NoiseType) == 0x000004, "Member 'FFastNoiseProperties::NoiseType' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, RotationType3d) == 0x000005, "Member 'FFastNoiseProperties::RotationType3d' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, FractalType) == 0x000006, "Member 'FFastNoiseProperties::FractalType' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, Octaves) == 0x000008, "Member 'FFastNoiseProperties::Octaves' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, Lacunarity) == 0x00000C, "Member 'FFastNoiseProperties::Lacunarity' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, Gain) == 0x000010, "Member 'FFastNoiseProperties::Gain' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, WeightedStrength) == 0x000014, "Member 'FFastNoiseProperties::WeightedStrength' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, PingPongStrength) == 0x000018, "Member 'FFastNoiseProperties::PingPongStrength' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, CellularDistanceFunc) == 0x00001C, "Member 'FFastNoiseProperties::CellularDistanceFunc' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, CellularReturnYype) == 0x00001D, "Member 'FFastNoiseProperties::CellularReturnYype' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, CellularJitterMod) == 0x000020, "Member 'FFastNoiseProperties::CellularJitterMod' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, DomainWarpType) == 0x000024, "Member 'FFastNoiseProperties::DomainWarpType' has a wrong offset!");
static_assert(offsetof(FFastNoiseProperties, WarpAmplitude) == 0x000028, "Member 'FFastNoiseProperties::WarpAmplitude' has a wrong offset!");

// ScriptStruct FSDEngine.SDFHeightMaproperties
// 0x000C (0x000C - 0x0000)
struct FSDFHeightMaproperties final
{
public:
	struct FVector                                Scale;                                             // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDFHeightMaproperties) == 0x000004, "Wrong alignment on FSDFHeightMaproperties");
static_assert(sizeof(FSDFHeightMaproperties) == 0x00000C, "Wrong size on FSDFHeightMaproperties");
static_assert(offsetof(FSDFHeightMaproperties, Scale) == 0x000000, "Member 'FSDFHeightMaproperties::Scale' has a wrong offset!");

// ScriptStruct FSDEngine.HMMinMaxLevel
// 0x0010 (0x0010 - 0x0000)
struct FHMMinMaxLevel final
{
public:
	TArray<float>                                 Entries;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHMMinMaxLevel) == 0x000008, "Wrong alignment on FHMMinMaxLevel");
static_assert(sizeof(FHMMinMaxLevel) == 0x000010, "Wrong size on FHMMinMaxLevel");
static_assert(offsetof(FHMMinMaxLevel, Entries) == 0x000000, "Member 'FHMMinMaxLevel::Entries' has a wrong offset!");

// ScriptStruct FSDEngine.SDFOnionProperties
// 0x0004 (0x0004 - 0x0000)
struct FSDFOnionProperties final
{
public:
	float                                         Thickness;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDFOnionProperties) == 0x000004, "Wrong alignment on FSDFOnionProperties");
static_assert(sizeof(FSDFOnionProperties) == 0x000004, "Wrong size on FSDFOnionProperties");
static_assert(offsetof(FSDFOnionProperties, Thickness) == 0x000000, "Member 'FSDFOnionProperties::Thickness' has a wrong offset!");

// ScriptStruct FSDEngine.SDFSmoothingProperties
// 0x0008 (0x0008 - 0x0000)
struct FSDFSmoothingProperties final
{
public:
	float                                         SmoothingDist;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SmoothingEnabled;                                  // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C6[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSDFSmoothingProperties) == 0x000004, "Wrong alignment on FSDFSmoothingProperties");
static_assert(sizeof(FSDFSmoothingProperties) == 0x000008, "Wrong size on FSDFSmoothingProperties");
static_assert(offsetof(FSDFSmoothingProperties, SmoothingDist) == 0x000000, "Member 'FSDFSmoothingProperties::SmoothingDist' has a wrong offset!");
static_assert(offsetof(FSDFSmoothingProperties, SmoothingEnabled) == 0x000004, "Member 'FSDFSmoothingProperties::SmoothingEnabled' has a wrong offset!");

// ScriptStruct FSDEngine.SDFModifierProperties
// 0x0038 (0x0038 - 0x0000)
struct FSDFModifierProperties final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFastNoiseProperties                   Noise;                                             // 0x0004(0x002C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         NoiseAmplitude;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDFModifierProperties) == 0x000004, "Wrong alignment on FSDFModifierProperties");
static_assert(sizeof(FSDFModifierProperties) == 0x000038, "Wrong size on FSDFModifierProperties");
static_assert(offsetof(FSDFModifierProperties, Offset) == 0x000000, "Member 'FSDFModifierProperties::Offset' has a wrong offset!");
static_assert(offsetof(FSDFModifierProperties, Noise) == 0x000004, "Member 'FSDFModifierProperties::Noise' has a wrong offset!");
static_assert(offsetof(FSDFModifierProperties, NoiseAmplitude) == 0x000030, "Member 'FSDFModifierProperties::NoiseAmplitude' has a wrong offset!");
static_assert(offsetof(FSDFModifierProperties, Seed) == 0x000034, "Member 'FSDFModifierProperties::Seed' has a wrong offset!");

// ScriptStruct FSDEngine.SDFBaseProperties
// 0x0001 (0x0001 - 0x0000)
struct FSDFBaseProperties final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDFBaseProperties) == 0x000001, "Wrong alignment on FSDFBaseProperties");
static_assert(sizeof(FSDFBaseProperties) == 0x000001, "Wrong size on FSDFBaseProperties");
static_assert(offsetof(FSDFBaseProperties, Enabled) == 0x000000, "Member 'FSDFBaseProperties::Enabled' has a wrong offset!");

// ScriptStruct FSDEngine.SDFRandomDisableProperties
// 0x0004 (0x0004 - 0x0000)
struct FSDFRandomDisableProperties final
{
public:
	float                                         DisableProbability;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDFRandomDisableProperties) == 0x000004, "Wrong alignment on FSDFRandomDisableProperties");
static_assert(sizeof(FSDFRandomDisableProperties) == 0x000004, "Wrong size on FSDFRandomDisableProperties");
static_assert(offsetof(FSDFRandomDisableProperties, DisableProbability) == 0x000000, "Member 'FSDFRandomDisableProperties::DisableProbability' has a wrong offset!");

// ScriptStruct FSDEngine.SDFRandomizeTransformProperties
// 0x0054 (0x0054 - 0x0000)
struct FSDFRandomizeTransformProperties final
{
public:
	struct FBox                                   Translation;                                       // 0x0000(0x001C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RotationMinZ;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMaxZ;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMinY;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMaxY;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMinX;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMaxX;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleMin;                                          // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleMax;                                          // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScaleAxesIndependent;                              // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableRandomize;                                  // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C7[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Seed;                                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDFRandomizeTransformProperties) == 0x000004, "Wrong alignment on FSDFRandomizeTransformProperties");
static_assert(sizeof(FSDFRandomizeTransformProperties) == 0x000054, "Wrong size on FSDFRandomizeTransformProperties");
static_assert(offsetof(FSDFRandomizeTransformProperties, Translation) == 0x000000, "Member 'FSDFRandomizeTransformProperties::Translation' has a wrong offset!");
static_assert(offsetof(FSDFRandomizeTransformProperties, RotationMinZ) == 0x00001C, "Member 'FSDFRandomizeTransformProperties::RotationMinZ' has a wrong offset!");
static_assert(offsetof(FSDFRandomizeTransformProperties, RotationMaxZ) == 0x000020, "Member 'FSDFRandomizeTransformProperties::RotationMaxZ' has a wrong offset!");
static_assert(offsetof(FSDFRandomizeTransformProperties, RotationMinY) == 0x000024, "Member 'FSDFRandomizeTransformProperties::RotationMinY' has a wrong offset!");
static_assert(offsetof(FSDFRandomizeTransformProperties, RotationMaxY) == 0x000028, "Member 'FSDFRandomizeTransformProperties::RotationMaxY' has a wrong offset!");
static_assert(offsetof(FSDFRandomizeTransformProperties, RotationMinX) == 0x00002C, "Member 'FSDFRandomizeTransformProperties::RotationMinX' has a wrong offset!");
static_assert(offsetof(FSDFRandomizeTransformProperties, RotationMaxX) == 0x000030, "Member 'FSDFRandomizeTransformProperties::RotationMaxX' has a wrong offset!");
static_assert(offsetof(FSDFRandomizeTransformProperties, ScaleMin) == 0x000034, "Member 'FSDFRandomizeTransformProperties::ScaleMin' has a wrong offset!");
static_assert(offsetof(FSDFRandomizeTransformProperties, ScaleMax) == 0x000040, "Member 'FSDFRandomizeTransformProperties::ScaleMax' has a wrong offset!");
static_assert(offsetof(FSDFRandomizeTransformProperties, ScaleAxesIndependent) == 0x00004C, "Member 'FSDFRandomizeTransformProperties::ScaleAxesIndependent' has a wrong offset!");
static_assert(offsetof(FSDFRandomizeTransformProperties, DisableRandomize) == 0x00004D, "Member 'FSDFRandomizeTransformProperties::DisableRandomize' has a wrong offset!");
static_assert(offsetof(FSDFRandomizeTransformProperties, Seed) == 0x000050, "Member 'FSDFRandomizeTransformProperties::Seed' has a wrong offset!");

// ScriptStruct FSDEngine.SDFTorusProperties
// 0x0010 (0x0010 - 0x0000)
struct FSDFTorusProperties final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TubeRadius;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SizeOverrideName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDFTorusProperties) == 0x000004, "Wrong alignment on FSDFTorusProperties");
static_assert(sizeof(FSDFTorusProperties) == 0x000010, "Wrong size on FSDFTorusProperties");
static_assert(offsetof(FSDFTorusProperties, Radius) == 0x000000, "Member 'FSDFTorusProperties::Radius' has a wrong offset!");
static_assert(offsetof(FSDFTorusProperties, TubeRadius) == 0x000004, "Member 'FSDFTorusProperties::TubeRadius' has a wrong offset!");
static_assert(offsetof(FSDFTorusProperties, SizeOverrideName) == 0x000008, "Member 'FSDFTorusProperties::SizeOverrideName' has a wrong offset!");

// ScriptStruct FSDEngine.SDFCapsuleProperties
// 0x0008 (0x0008 - 0x0000)
struct FSDFCapsuleProperties final
{
public:
	float                                         HalfLength;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDFCapsuleProperties) == 0x000004, "Wrong alignment on FSDFCapsuleProperties");
static_assert(sizeof(FSDFCapsuleProperties) == 0x000008, "Wrong size on FSDFCapsuleProperties");
static_assert(offsetof(FSDFCapsuleProperties, HalfLength) == 0x000000, "Member 'FSDFCapsuleProperties::HalfLength' has a wrong offset!");
static_assert(offsetof(FSDFCapsuleProperties, Radius) == 0x000004, "Member 'FSDFCapsuleProperties::Radius' has a wrong offset!");

// ScriptStruct FSDEngine.SDFCylinderProperties
// 0x0008 (0x0008 - 0x0000)
struct FSDFCylinderProperties final
{
public:
	float                                         HalfLength;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDFCylinderProperties) == 0x000004, "Wrong alignment on FSDFCylinderProperties");
static_assert(sizeof(FSDFCylinderProperties) == 0x000008, "Wrong size on FSDFCylinderProperties");
static_assert(offsetof(FSDFCylinderProperties, HalfLength) == 0x000000, "Member 'FSDFCylinderProperties::HalfLength' has a wrong offset!");
static_assert(offsetof(FSDFCylinderProperties, Radius) == 0x000004, "Member 'FSDFCylinderProperties::Radius' has a wrong offset!");

// ScriptStruct FSDEngine.SDFBoxProperties
// 0x000C (0x000C - 0x0000)
struct FSDFBoxProperties final
{
public:
	struct FVector                                HalfSize;                                          // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDFBoxProperties) == 0x000004, "Wrong alignment on FSDFBoxProperties");
static_assert(sizeof(FSDFBoxProperties) == 0x00000C, "Wrong size on FSDFBoxProperties");
static_assert(offsetof(FSDFBoxProperties, HalfSize) == 0x000000, "Member 'FSDFBoxProperties::HalfSize' has a wrong offset!");

// ScriptStruct FSDEngine.SDFSphereProperties
// 0x000C (0x000C - 0x0000)
struct FSDFSphereProperties final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RadiusOverrideName;                                // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDFSphereProperties) == 0x000004, "Wrong alignment on FSDFSphereProperties");
static_assert(sizeof(FSDFSphereProperties) == 0x00000C, "Wrong size on FSDFSphereProperties");
static_assert(offsetof(FSDFSphereProperties, Radius) == 0x000000, "Member 'FSDFSphereProperties::Radius' has a wrong offset!");
static_assert(offsetof(FSDFSphereProperties, RadiusOverrideName) == 0x000004, "Member 'FSDFSphereProperties::RadiusOverrideName' has a wrong offset!");

}

