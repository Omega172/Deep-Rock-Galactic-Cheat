#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LIB_Text

#include "Basic.hpp"

#include "LIB_Text_classes.hpp"
#include "LIB_Text_parameters.hpp"


namespace CG
{

// Function LIB_Text.LIB_Text_C.GetDisconnectReasonText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EDisconnectReason                       DisconnectReason                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void ULIB_Text_C::GetDisconnectReasonText(EDisconnectReason DisconnectReason, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LIB_Text_C", "GetDisconnectReasonText");

	Params::LIB_Text_C_GetDisconnectReasonText Parms{};

	Parms.DisconnectReason = DisconnectReason;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function LIB_Text.LIB_Text_C.GetDisconnectReasonCaption
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EDisconnectReason                       DisconnectReason                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void ULIB_Text_C::GetDisconnectReasonCaption(EDisconnectReason DisconnectReason, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LIB_Text_C", "GetDisconnectReasonCaption");

	Params::LIB_Text_C_GetDisconnectReasonCaption Parms{};

	Parms.DisconnectReason = DisconnectReason;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function LIB_Text.LIB_Text_C.SetTextUpperCased
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextBlock*                       Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             InText                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULIB_Text_C::SetTextUpperCased(class UTextBlock* Target, const class FText& InText, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LIB_Text_C", "SetTextUpperCased");

	Params::LIB_Text_C_SetTextUpperCased Parms{};

	Parms.Target = Target;
	Parms.InText = std::move(InText);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LIB_Text.LIB_Text_C.SetFontSize
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextBlock*                       Label                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewSize                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULIB_Text_C::SetFontSize(class UTextBlock*& Label, int32 NewSize, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LIB_Text_C", "SetFontSize");

	Params::LIB_Text_C_SetFontSize Parms{};

	Parms.Label = Label;
	Parms.NewSize = NewSize;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Label = Parms.Label;
}


// Function LIB_Text.LIB_Text_C.GetFontSize
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UTextBlock*                       Label                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Size                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULIB_Text_C::GetFontSize(class UTextBlock*& Label, class UObject* __WorldContext, int32* Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LIB_Text_C", "GetFontSize");

	Params::LIB_Text_C_GetFontSize Parms{};

	Parms.Label = Label;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Label = Parms.Label;

	if (Size != nullptr)
		*Size = Parms.Size;
}


// Function LIB_Text.LIB_Text_C.SetTextCased
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextBlock*                       Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             InText                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// ENU_TextCase                            Text_Case                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULIB_Text_C::SetTextCased(class UTextBlock*& Target, const class FText& InText, ENU_TextCase Text_Case, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LIB_Text_C", "SetTextCased");

	Params::LIB_Text_C_SetTextCased Parms{};

	Parms.Target = Target;
	Parms.InText = std::move(InText);
	Parms.Text_Case = Text_Case;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Target = Parms.Target;
}


// Function LIB_Text.LIB_Text_C.GetTimeText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Dividend                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void ULIB_Text_C::GetTimeText(float Dividend, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LIB_Text_C", "GetTimeText");

	Params::LIB_Text_C_GetTimeText Parms{};

	Parms.Dividend = Dividend;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function LIB_Text.LIB_Text_C.Select Character ID Text
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UPlayerCharacterID*               CharacterID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             DrillerText                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             GunnerText                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             ScoutText                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             EngineerText                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             BoscoText                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             NoneText                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             OutText                                                (Parm, OutParm)

void ULIB_Text_C::Select_Character_ID_Text(class UPlayerCharacterID* CharacterID, const class FText& DrillerText, const class FText& GunnerText, const class FText& ScoutText, const class FText& EngineerText, const class FText& BoscoText, const class FText& NoneText, class UObject* __WorldContext, class FText* OutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LIB_Text_C", "Select Character ID Text");

	Params::LIB_Text_C_Select_Character_ID_Text Parms{};

	Parms.CharacterID = CharacterID;
	Parms.DrillerText = std::move(DrillerText);
	Parms.GunnerText = std::move(GunnerText);
	Parms.ScoutText = std::move(ScoutText);
	Parms.EngineerText = std::move(EngineerText);
	Parms.BoscoText = std::move(BoscoText);
	Parms.NoneText = std::move(NoneText);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);
}


// Function LIB_Text.LIB_Text_C.Select Character Class Text
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UPlayerCharacterID*               CharacterClass                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             DrillerText                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             GunnerText                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             ScoutText                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             EngineerText                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             BoscoText                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             NoneText                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             OutText                                                (Parm, OutParm)

void ULIB_Text_C::Select_Character_Class_Text(class UPlayerCharacterID* CharacterClass, const class FText& DrillerText, const class FText& GunnerText, const class FText& ScoutText, const class FText& EngineerText, const class FText& BoscoText, const class FText& NoneText, class UObject* __WorldContext, class FText* OutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LIB_Text_C", "Select Character Class Text");

	Params::LIB_Text_C_Select_Character_Class_Text Parms{};

	Parms.CharacterClass = CharacterClass;
	Parms.DrillerText = std::move(DrillerText);
	Parms.GunnerText = std::move(GunnerText);
	Parms.ScoutText = std::move(ScoutText);
	Parms.EngineerText = std::move(EngineerText);
	Parms.BoscoText = std::move(BoscoText);
	Parms.NoneText = std::move(NoneText);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);
}


// Function LIB_Text.LIB_Text_C.Select CharacterText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APlayerCharacter*                 Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             DrillerText                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             GunnerText                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             ScoutText                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             EngineerText                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             BoscoText                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             NoneText                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             OutText                                                (Parm, OutParm)

void ULIB_Text_C::Select_CharacterText(class APlayerCharacter* Character, const class FText& DrillerText, const class FText& GunnerText, const class FText& ScoutText, const class FText& EngineerText, const class FText& BoscoText, const class FText& NoneText, class UObject* __WorldContext, class FText* OutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LIB_Text_C", "Select CharacterText");

	Params::LIB_Text_C_Select_CharacterText Parms{};

	Parms.Character = Character;
	Parms.DrillerText = std::move(DrillerText);
	Parms.GunnerText = std::move(GunnerText);
	Parms.ScoutText = std::move(ScoutText);
	Parms.EngineerText = std::move(EngineerText);
	Parms.BoscoText = std::move(BoscoText);
	Parms.NoneText = std::move(NoneText);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);
}

}

