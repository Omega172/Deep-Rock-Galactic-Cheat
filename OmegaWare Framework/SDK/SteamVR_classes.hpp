#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamVR

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SteamVR_structs.hpp"
#include "InputCore_structs.hpp"


namespace CG
{

// Class SteamVR.SteamVRChaperoneComponent
// 0x0028 (0x00D8 - 0x00B0)
class USteamVRChaperoneComponent final : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnLeaveBounds;                                     // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReturnToBounds;                                  // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D6[0x8];                                     // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SteamVRChaperoneEvent__DelegateSignature();

	TArray<struct FVector> GetBounds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamVRChaperoneComponent">();
	}
	static class USteamVRChaperoneComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamVRChaperoneComponent>();
	}
};
static_assert(alignof(USteamVRChaperoneComponent) == 0x000008, "Wrong alignment on USteamVRChaperoneComponent");
static_assert(sizeof(USteamVRChaperoneComponent) == 0x0000D8, "Wrong size on USteamVRChaperoneComponent");
static_assert(offsetof(USteamVRChaperoneComponent, OnLeaveBounds) == 0x0000B0, "Member 'USteamVRChaperoneComponent::OnLeaveBounds' has a wrong offset!");
static_assert(offsetof(USteamVRChaperoneComponent, OnReturnToBounds) == 0x0000C0, "Member 'USteamVRChaperoneComponent::OnReturnToBounds' has a wrong offset!");

// Class SteamVR.SteamVRFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USteamVRFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetHandPositionAndOrientation(int32 ControllerIndex, EControllerHand Hand, struct FVector* OutPosition, struct FRotator* OutOrientation);
	static bool GetTrackedDevicePositionAndOrientation(int32 DeviceID, struct FVector* OutPosition, struct FRotator* OutOrientation);
	static void GetValidTrackedDeviceIds(ESteamVRTrackedDeviceType DeviceType, TArray<int32>* OutTrackedDeviceIds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamVRFunctionLibrary">();
	}
	static class USteamVRFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamVRFunctionLibrary>();
	}
};
static_assert(alignof(USteamVRFunctionLibrary) == 0x000008, "Wrong alignment on USteamVRFunctionLibrary");
static_assert(sizeof(USteamVRFunctionLibrary) == 0x000028, "Wrong size on USteamVRFunctionLibrary");

// Class SteamVR.SteamVRHQStereoLayerShape
// 0x0010 (0x0038 - 0x0028)
class USteamVRHQStereoLayerShape final : public UStereoLayerShapeQuad
{
public:
	bool                                          bCurved;                                           // 0x0028(0x0001)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAntiAlias;                                        // 0x0029(0x0001)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10DB[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoCurveMinDistance;                              // 0x002C(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCurveMaxDistance;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10DC[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAntiAlias(bool InAntiAlias);
	void SetAutoCurveMaxDistance(float InDistance);
	void SetAutoCurveMinDistance(float InDistance);
	void SetCurved(bool InCurved);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamVRHQStereoLayerShape">();
	}
	static class USteamVRHQStereoLayerShape* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamVRHQStereoLayerShape>();
	}
};
static_assert(alignof(USteamVRHQStereoLayerShape) == 0x000008, "Wrong alignment on USteamVRHQStereoLayerShape");
static_assert(sizeof(USteamVRHQStereoLayerShape) == 0x000038, "Wrong size on USteamVRHQStereoLayerShape");
static_assert(offsetof(USteamVRHQStereoLayerShape, bCurved) == 0x000028, "Member 'USteamVRHQStereoLayerShape::bCurved' has a wrong offset!");
static_assert(offsetof(USteamVRHQStereoLayerShape, bAntiAlias) == 0x000029, "Member 'USteamVRHQStereoLayerShape::bAntiAlias' has a wrong offset!");
static_assert(offsetof(USteamVRHQStereoLayerShape, AutoCurveMinDistance) == 0x00002C, "Member 'USteamVRHQStereoLayerShape::AutoCurveMinDistance' has a wrong offset!");
static_assert(offsetof(USteamVRHQStereoLayerShape, AutoCurveMaxDistance) == 0x000030, "Member 'USteamVRHQStereoLayerShape::AutoCurveMaxDistance' has a wrong offset!");

}

