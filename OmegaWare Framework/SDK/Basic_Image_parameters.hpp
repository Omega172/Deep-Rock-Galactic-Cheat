#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Basic_Image

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "ENUM_MenuColors_structs.hpp"
#include "UMG_structs.hpp"
#include "MenuColorAndOpacity_structs.hpp"


namespace CG::Params
{

// Function Basic_Image.Basic_Image_C.ExecuteUbergraph_Basic_Image
// 0x0008 (0x0008 - 0x0000)
struct Basic_Image_C_ExecuteUbergraph_Basic_Image final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Basic_Image_C_ExecuteUbergraph_Basic_Image) == 0x000004, "Wrong alignment on Basic_Image_C_ExecuteUbergraph_Basic_Image");
static_assert(sizeof(Basic_Image_C_ExecuteUbergraph_Basic_Image) == 0x000008, "Wrong size on Basic_Image_C_ExecuteUbergraph_Basic_Image");
static_assert(offsetof(Basic_Image_C_ExecuteUbergraph_Basic_Image, EntryPoint) == 0x000000, "Member 'Basic_Image_C_ExecuteUbergraph_Basic_Image::EntryPoint' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ExecuteUbergraph_Basic_Image, K2Node_Event_IsDesignTime) == 0x000004, "Member 'Basic_Image_C_ExecuteUbergraph_Basic_Image::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct Basic_Image_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Basic_Image_C_PreConstruct) == 0x000001, "Wrong alignment on Basic_Image_C_PreConstruct");
static_assert(sizeof(Basic_Image_C_PreConstruct) == 0x000001, "Wrong size on Basic_Image_C_PreConstruct");
static_assert(offsetof(Basic_Image_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'Basic_Image_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.GetBrush
// 0x0088 (0x0088 - 0x0000)
struct Basic_Image_C_GetBrush final
{
public:
	struct FSlateBrush                            Param_Brush;                                       // 0x0000(0x0088)(Parm, OutParm)
};
static_assert(alignof(Basic_Image_C_GetBrush) == 0x000008, "Wrong alignment on Basic_Image_C_GetBrush");
static_assert(sizeof(Basic_Image_C_GetBrush) == 0x000088, "Wrong size on Basic_Image_C_GetBrush");
static_assert(offsetof(Basic_Image_C_GetBrush, Param_Brush) == 0x000000, "Member 'Basic_Image_C_GetBrush::Param_Brush' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct Basic_Image_C_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(Basic_Image_C_SetBrush) == 0x000008, "Wrong alignment on Basic_Image_C_SetBrush");
static_assert(sizeof(Basic_Image_C_SetBrush) == 0x000088, "Wrong size on Basic_Image_C_SetBrush");
static_assert(offsetof(Basic_Image_C_SetBrush, InBrush) == 0x000000, "Member 'Basic_Image_C_SetBrush::InBrush' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SetBrushFromTexture
// 0x0010 (0x0010 - 0x0000)
struct Basic_Image_C_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Basic_Image_C_SetBrushFromTexture) == 0x000008, "Wrong alignment on Basic_Image_C_SetBrushFromTexture");
static_assert(sizeof(Basic_Image_C_SetBrushFromTexture) == 0x000010, "Wrong size on Basic_Image_C_SetBrushFromTexture");
static_assert(offsetof(Basic_Image_C_SetBrushFromTexture, Texture) == 0x000000, "Member 'Basic_Image_C_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetBrushFromTexture, bMatchSize) == 0x000008, "Member 'Basic_Image_C_SetBrushFromTexture::bMatchSize' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SelectTint
// 0x0006 (0x0006 - 0x0000)
struct Basic_Image_C_SelectTint final
{
public:
	ENUM_MenuColors                               FLASE;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MenuColors                               TURR;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Condition;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_MenuColors                               SelectedTint;                                      // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_MenuColors                               K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_SelectTint) == 0x000001, "Wrong alignment on Basic_Image_C_SelectTint");
static_assert(sizeof(Basic_Image_C_SelectTint) == 0x000006, "Wrong size on Basic_Image_C_SelectTint");
static_assert(offsetof(Basic_Image_C_SelectTint, FLASE) == 0x000000, "Member 'Basic_Image_C_SelectTint::FLASE' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SelectTint, TURR) == 0x000001, "Member 'Basic_Image_C_SelectTint::TURR' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SelectTint, Condition) == 0x000002, "Member 'Basic_Image_C_SelectTint::Condition' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SelectTint, SelectedTint) == 0x000003, "Member 'Basic_Image_C_SelectTint::SelectedTint' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SelectTint, Temp_bool_Variable) == 0x000004, "Member 'Basic_Image_C_SelectTint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SelectTint, K2Node_Select_Default) == 0x000005, "Member 'Basic_Image_C_SelectTint::K2Node_Select_Default' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SetTint
// 0x0001 (0x0001 - 0x0000)
struct Basic_Image_C_SetTint final
{
public:
	ENUM_MenuColors                               InTint;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_SetTint) == 0x000001, "Wrong alignment on Basic_Image_C_SetTint");
static_assert(sizeof(Basic_Image_C_SetTint) == 0x000001, "Wrong size on Basic_Image_C_SetTint");
static_assert(offsetof(Basic_Image_C_SetTint, InTint) == 0x000000, "Member 'Basic_Image_C_SetTint::InTint' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SetTintOpacity
// 0x0004 (0x0004 - 0x0000)
struct Basic_Image_C_SetTintOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_SetTintOpacity) == 0x000004, "Wrong alignment on Basic_Image_C_SetTintOpacity");
static_assert(sizeof(Basic_Image_C_SetTintOpacity) == 0x000004, "Wrong size on Basic_Image_C_SetTintOpacity");
static_assert(offsetof(Basic_Image_C_SetTintOpacity, InOpacity) == 0x000000, "Member 'Basic_Image_C_SetTintOpacity::InOpacity' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SetTintAndOpacity
// 0x0018 (0x0018 - 0x0000)
struct Basic_Image_C_SetTintAndOpacity final
{
public:
	ENUM_MenuColors                               InTint;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C41[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InTintOpacity;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MenuColorsAndOpacity_OutputColor;         // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_SetTintAndOpacity) == 0x000004, "Wrong alignment on Basic_Image_C_SetTintAndOpacity");
static_assert(sizeof(Basic_Image_C_SetTintAndOpacity) == 0x000018, "Wrong size on Basic_Image_C_SetTintAndOpacity");
static_assert(offsetof(Basic_Image_C_SetTintAndOpacity, InTint) == 0x000000, "Member 'Basic_Image_C_SetTintAndOpacity::InTint' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetTintAndOpacity, InTintOpacity) == 0x000004, "Member 'Basic_Image_C_SetTintAndOpacity::InTintOpacity' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetTintAndOpacity, CallFunc_MenuColorsAndOpacity_OutputColor) == 0x000008, "Member 'Basic_Image_C_SetTintAndOpacity::CallFunc_MenuColorsAndOpacity_OutputColor' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.GetDynamicMaterial
// 0x0010 (0x0010 - 0x0000)
struct Basic_Image_C_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_GetDynamicMaterial) == 0x000008, "Wrong alignment on Basic_Image_C_GetDynamicMaterial");
static_assert(sizeof(Basic_Image_C_GetDynamicMaterial) == 0x000010, "Wrong size on Basic_Image_C_GetDynamicMaterial");
static_assert(offsetof(Basic_Image_C_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'Basic_Image_C_GetDynamicMaterial::ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_GetDynamicMaterial, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'Basic_Image_C_GetDynamicMaterial::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SetBrushFromSoftTexture
// 0x0030 (0x0030 - 0x0000)
struct Basic_Image_C_SetBrushFromSoftTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          bMatchSize;                                        // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Basic_Image_C_SetBrushFromSoftTexture) == 0x000008, "Wrong alignment on Basic_Image_C_SetBrushFromSoftTexture");
static_assert(sizeof(Basic_Image_C_SetBrushFromSoftTexture) == 0x000030, "Wrong size on Basic_Image_C_SetBrushFromSoftTexture");
static_assert(offsetof(Basic_Image_C_SetBrushFromSoftTexture, Texture) == 0x000000, "Member 'Basic_Image_C_SetBrushFromSoftTexture::Texture' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetBrushFromSoftTexture, bMatchSize) == 0x000028, "Member 'Basic_Image_C_SetBrushFromSoftTexture::bMatchSize' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SetBrushSize
// 0x0008 (0x0008 - 0x0000)
struct Basic_Image_C_SetBrushSize final
{
public:
	struct FVector2D                              DesiredSize;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_SetBrushSize) == 0x000004, "Wrong alignment on Basic_Image_C_SetBrushSize");
static_assert(sizeof(Basic_Image_C_SetBrushSize) == 0x000008, "Wrong size on Basic_Image_C_SetBrushSize");
static_assert(offsetof(Basic_Image_C_SetBrushSize, DesiredSize) == 0x000000, "Member 'Basic_Image_C_SetBrushSize::DesiredSize' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.GetBrushSize
// 0x0008 (0x0008 - 0x0000)
struct Basic_Image_C_GetBrushSize final
{
public:
	struct FVector2D                              Brush_Image_Size;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_GetBrushSize) == 0x000004, "Wrong alignment on Basic_Image_C_GetBrushSize");
static_assert(sizeof(Basic_Image_C_GetBrushSize) == 0x000008, "Wrong size on Basic_Image_C_GetBrushSize");
static_assert(offsetof(Basic_Image_C_GetBrushSize, Brush_Image_Size) == 0x000000, "Member 'Basic_Image_C_GetBrushSize::Brush_Image_Size' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.FadeIn
// 0x0018 (0x0018 - 0x0000)
struct Basic_Image_C_FadeIn final
{
public:
	float                                         InDuration;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C42[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_FadeIn) == 0x000008, "Wrong alignment on Basic_Image_C_FadeIn");
static_assert(sizeof(Basic_Image_C_FadeIn) == 0x000018, "Wrong size on Basic_Image_C_FadeIn");
static_assert(offsetof(Basic_Image_C_FadeIn, InDuration) == 0x000000, "Member 'Basic_Image_C_FadeIn::InDuration' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_FadeIn, CallFunc_FMax_ReturnValue) == 0x000004, "Member 'Basic_Image_C_FadeIn::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_FadeIn, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'Basic_Image_C_FadeIn::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_FadeIn, CallFunc_PlayAnimationForward_ReturnValue) == 0x000010, "Member 'Basic_Image_C_FadeIn::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.FadeOut
// 0x0018 (0x0018 - 0x0000)
struct Basic_Image_C_FadeOut final
{
public:
	float                                         InDuration;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C43[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_FadeOut) == 0x000008, "Wrong alignment on Basic_Image_C_FadeOut");
static_assert(sizeof(Basic_Image_C_FadeOut) == 0x000018, "Wrong size on Basic_Image_C_FadeOut");
static_assert(offsetof(Basic_Image_C_FadeOut, InDuration) == 0x000000, "Member 'Basic_Image_C_FadeOut::InDuration' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_FadeOut, CallFunc_FMax_ReturnValue) == 0x000004, "Member 'Basic_Image_C_FadeOut::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_FadeOut, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'Basic_Image_C_FadeOut::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_FadeOut, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000010, "Member 'Basic_Image_C_FadeOut::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SetDynamicMaterialScalar
// 0x0020 (0x0020 - 0x0000)
struct Basic_Image_C_SetDynamicMaterialScalar final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C44[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Basic_Image_C_SetDynamicMaterialScalar) == 0x000008, "Wrong alignment on Basic_Image_C_SetDynamicMaterialScalar");
static_assert(sizeof(Basic_Image_C_SetDynamicMaterialScalar) == 0x000020, "Wrong size on Basic_Image_C_SetDynamicMaterialScalar");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialScalar, ParameterName) == 0x000000, "Member 'Basic_Image_C_SetDynamicMaterialScalar::ParameterName' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialScalar, Value) == 0x000008, "Member 'Basic_Image_C_SetDynamicMaterialScalar::Value' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialScalar, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'Basic_Image_C_SetDynamicMaterialScalar::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialScalar, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'Basic_Image_C_SetDynamicMaterialScalar::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SetDynamicMaterialVector
// 0x0028 (0x0028 - 0x0000)
struct Basic_Image_C_SetDynamicMaterialVector final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Basic_Image_C_SetDynamicMaterialVector) == 0x000008, "Wrong alignment on Basic_Image_C_SetDynamicMaterialVector");
static_assert(sizeof(Basic_Image_C_SetDynamicMaterialVector) == 0x000028, "Wrong size on Basic_Image_C_SetDynamicMaterialVector");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialVector, ParameterName) == 0x000000, "Member 'Basic_Image_C_SetDynamicMaterialVector::ParameterName' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialVector, Value) == 0x000008, "Member 'Basic_Image_C_SetDynamicMaterialVector::Value' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialVector, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000018, "Member 'Basic_Image_C_SetDynamicMaterialVector::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialVector, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'Basic_Image_C_SetDynamicMaterialVector::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SetDynamicMaterialTexture
// 0x0020 (0x0020 - 0x0000)
struct Basic_Image_C_SetDynamicMaterialTexture final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Value;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Basic_Image_C_SetDynamicMaterialTexture) == 0x000008, "Wrong alignment on Basic_Image_C_SetDynamicMaterialTexture");
static_assert(sizeof(Basic_Image_C_SetDynamicMaterialTexture) == 0x000020, "Wrong size on Basic_Image_C_SetDynamicMaterialTexture");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialTexture, ParameterName) == 0x000000, "Member 'Basic_Image_C_SetDynamicMaterialTexture::ParameterName' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialTexture, Value) == 0x000008, "Member 'Basic_Image_C_SetDynamicMaterialTexture::Value' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialTexture, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'Basic_Image_C_SetDynamicMaterialTexture::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialTexture, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'Basic_Image_C_SetDynamicMaterialTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SetDynamicMaterialValues
// 0x0138 (0x0138 - 0x0000)
struct Basic_Image_C_SetDynamicMaterialValues final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMenuColorAndOpacity                   CallFunc_Map_Find_Value;                           // 0x0038(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C45[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_Map_Keys_Keys;                            // 0x0048(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MenuColorsAndOpacity_OutputColor;         // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C46[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                CallFunc_Map_Find_Value_1;                         // 0x0078(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C47[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_Map_Keys_Keys_1;                          // 0x00A8(0x0010)(ReferenceParm)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_1;                         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               K2Node_DynamicCast_AsTexture;                      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C48[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C49[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Map_Find_Value_2;                         // 0x00DC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C4A[0x3];                                     // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_Map_Keys_Keys_2;                          // 0x00F0(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item_2;                         // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C4B[0x3];                                     // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Map_Find_Value_3;                         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C4C[0x3];                                     // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_Map_Keys_Keys_3;                          // 0x0118(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item_3;                         // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Basic_Image_C_SetDynamicMaterialValues) == 0x000008, "Wrong alignment on Basic_Image_C_SetDynamicMaterialValues");
static_assert(sizeof(Basic_Image_C_SetDynamicMaterialValues) == 0x000138, "Wrong size on Basic_Image_C_SetDynamicMaterialValues");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, Param_Name) == 0x000000, "Member 'Basic_Image_C_SetDynamicMaterialValues::Param_Name' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'Basic_Image_C_SetDynamicMaterialValues::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'Basic_Image_C_SetDynamicMaterialValues::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, Temp_int_Loop_Counter_Variable_2) == 0x000018, "Member 'Basic_Image_C_SetDynamicMaterialValues::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Add_IntInt_ReturnValue_2) == 0x00001C, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, Temp_int_Array_Index_Variable) == 0x000020, "Member 'Basic_Image_C_SetDynamicMaterialValues::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, Temp_int_Array_Index_Variable_1) == 0x000024, "Member 'Basic_Image_C_SetDynamicMaterialValues::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, Temp_int_Array_Index_Variable_2) == 0x000028, "Member 'Basic_Image_C_SetDynamicMaterialValues::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, Temp_int_Loop_Counter_Variable_3) == 0x00002C, "Member 'Basic_Image_C_SetDynamicMaterialValues::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Add_IntInt_ReturnValue_3) == 0x000030, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, Temp_int_Array_Index_Variable_3) == 0x000034, "Member 'Basic_Image_C_SetDynamicMaterialValues::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Map_Find_Value) == 0x000038, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Map_Keys_Keys) == 0x000048, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Array_Get_Item) == 0x000058, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_MenuColorsAndOpacity_OutputColor) == 0x000060, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_MenuColorsAndOpacity_OutputColor' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Map_Find_Value_1) == 0x000078, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Map_Find_ReturnValue_1) == 0x0000A0, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Map_Keys_Keys_1) == 0x0000A8, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Map_Keys_Keys_1' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x0000B8, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Array_Get_Item_1) == 0x0000C0, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, K2Node_DynamicCast_AsTexture) == 0x0000C8, "Member 'Basic_Image_C_SetDynamicMaterialValues::K2Node_DynamicCast_AsTexture' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'Basic_Image_C_SetDynamicMaterialValues::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Array_Length_ReturnValue_1) == 0x0000D4, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000D8, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Map_Find_Value_2) == 0x0000DC, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Map_Find_ReturnValue_2) == 0x0000EC, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Map_Keys_Keys_2) == 0x0000F0, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Map_Keys_Keys_2' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Array_Get_Item_2) == 0x000100, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Array_Length_ReturnValue_2) == 0x000108, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Less_IntInt_ReturnValue_2) == 0x00010C, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Map_Find_Value_3) == 0x000110, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Map_Find_ReturnValue_3) == 0x000114, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Map_Keys_Keys_3) == 0x000118, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Map_Keys_Keys_3' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Array_Get_Item_3) == 0x000128, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Array_Length_ReturnValue_3) == 0x000130, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetDynamicMaterialValues, CallFunc_Less_IntInt_ReturnValue_3) == 0x000134, "Member 'Basic_Image_C_SetDynamicMaterialValues::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.GetBasicToolTip
// 0x0030 (0x0030 - 0x0000)
struct Basic_Image_C_GetBasicToolTip final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBasic_ToolTip_C*                       BasicToolTip;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C4D[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWindowManager*                         CallFunc_GetWindowManager_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetOrCreateSingletonWidget_WidgetCreated; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C4E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBasic_ToolTip_C*                       CallFunc_GetOrCreateSingletonWidget_ReturnValue;   // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_GetBasicToolTip) == 0x000008, "Wrong alignment on Basic_Image_C_GetBasicToolTip");
static_assert(sizeof(Basic_Image_C_GetBasicToolTip) == 0x000030, "Wrong size on Basic_Image_C_GetBasicToolTip");
static_assert(offsetof(Basic_Image_C_GetBasicToolTip, ReturnValue) == 0x000000, "Member 'Basic_Image_C_GetBasicToolTip::ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_GetBasicToolTip, BasicToolTip) == 0x000008, "Member 'Basic_Image_C_GetBasicToolTip::BasicToolTip' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_GetBasicToolTip, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Basic_Image_C_GetBasicToolTip::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_GetBasicToolTip, CallFunc_TextIsEmpty_ReturnValue) == 0x000011, "Member 'Basic_Image_C_GetBasicToolTip::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_GetBasicToolTip, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'Basic_Image_C_GetBasicToolTip::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_GetBasicToolTip, CallFunc_GetWindowManager_ReturnValue) == 0x000018, "Member 'Basic_Image_C_GetBasicToolTip::CallFunc_GetWindowManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_GetBasicToolTip, CallFunc_GetOrCreateSingletonWidget_WidgetCreated) == 0x000020, "Member 'Basic_Image_C_GetBasicToolTip::CallFunc_GetOrCreateSingletonWidget_WidgetCreated' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_GetBasicToolTip, CallFunc_GetOrCreateSingletonWidget_ReturnValue) == 0x000028, "Member 'Basic_Image_C_GetBasicToolTip::CallFunc_GetOrCreateSingletonWidget_ReturnValue' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.SetBasicToolTip
// 0x0030 (0x0030 - 0x0000)
struct Basic_Image_C_SetBasicToolTip final
{
public:
	class FText                                   Param_BasicToolTipText;                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FVector2D                              Param_BasicToolTipPosition;                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Param_BasicToolTipAlignment;                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_IsVisible;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_VisibilityChanged;       // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_SelectVisibility_New_Visibility;          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_SetBasicToolTip) == 0x000008, "Wrong alignment on Basic_Image_C_SetBasicToolTip");
static_assert(sizeof(Basic_Image_C_SetBasicToolTip) == 0x000030, "Wrong size on Basic_Image_C_SetBasicToolTip");
static_assert(offsetof(Basic_Image_C_SetBasicToolTip, Param_BasicToolTipText) == 0x000000, "Member 'Basic_Image_C_SetBasicToolTip::Param_BasicToolTipText' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetBasicToolTip, Param_BasicToolTipPosition) == 0x000018, "Member 'Basic_Image_C_SetBasicToolTip::Param_BasicToolTipPosition' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetBasicToolTip, Param_BasicToolTipAlignment) == 0x000020, "Member 'Basic_Image_C_SetBasicToolTip::Param_BasicToolTipAlignment' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetBasicToolTip, CallFunc_TextIsEmpty_ReturnValue) == 0x000028, "Member 'Basic_Image_C_SetBasicToolTip::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetBasicToolTip, CallFunc_SelectVisibility_IsVisible) == 0x000029, "Member 'Basic_Image_C_SetBasicToolTip::CallFunc_SelectVisibility_IsVisible' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetBasicToolTip, CallFunc_SelectVisibility_VisibilityChanged) == 0x00002A, "Member 'Basic_Image_C_SetBasicToolTip::CallFunc_SelectVisibility_VisibilityChanged' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_SetBasicToolTip, CallFunc_SelectVisibility_New_Visibility) == 0x00002B, "Member 'Basic_Image_C_SetBasicToolTip::CallFunc_SelectVisibility_New_Visibility' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.ScaleToFitX
// 0x0038 (0x0038 - 0x0000)
struct Basic_Image_C_ScaleToFitX final
{
public:
	float                                         InWidth;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C50[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Blueprint_GetSizeX_ReturnValue;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Blueprint_GetSizeY_ReturnValue;           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_GetBrushResourceAsTexture2D_ReturnValue;  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_ScaleToFitX) == 0x000008, "Wrong alignment on Basic_Image_C_ScaleToFitX");
static_assert(sizeof(Basic_Image_C_ScaleToFitX) == 0x000038, "Wrong size on Basic_Image_C_ScaleToFitX");
static_assert(offsetof(Basic_Image_C_ScaleToFitX, InWidth) == 0x000000, "Member 'Basic_Image_C_ScaleToFitX::InWidth' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitX, Texture) == 0x000008, "Member 'Basic_Image_C_ScaleToFitX::Texture' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitX, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000010, "Member 'Basic_Image_C_ScaleToFitX::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitX, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'Basic_Image_C_ScaleToFitX::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitX, CallFunc_Blueprint_GetSizeX_ReturnValue) == 0x000014, "Member 'Basic_Image_C_ScaleToFitX::CallFunc_Blueprint_GetSizeX_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitX, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000018, "Member 'Basic_Image_C_ScaleToFitX::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitX, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'Basic_Image_C_ScaleToFitX::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitX, CallFunc_Blueprint_GetSizeY_ReturnValue) == 0x000020, "Member 'Basic_Image_C_ScaleToFitX::CallFunc_Blueprint_GetSizeY_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitX, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000024, "Member 'Basic_Image_C_ScaleToFitX::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitX, CallFunc_GetBrushResourceAsTexture2D_ReturnValue) == 0x000028, "Member 'Basic_Image_C_ScaleToFitX::CallFunc_GetBrushResourceAsTexture2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitX, CallFunc_MakeVector2D_ReturnValue) == 0x000030, "Member 'Basic_Image_C_ScaleToFitX::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function Basic_Image.Basic_Image_C.ScaleToFitY
// 0x0040 (0x0040 - 0x0000)
struct Basic_Image_C_ScaleToFitY final
{
public:
	float                                         InHeight;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C51[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C52[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Blueprint_GetSizeY_ReturnValue;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Blueprint_GetSizeX_ReturnValue;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C53[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_GetBrushResourceAsTexture2D_ReturnValue;  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Image_C_ScaleToFitY) == 0x000008, "Wrong alignment on Basic_Image_C_ScaleToFitY");
static_assert(sizeof(Basic_Image_C_ScaleToFitY) == 0x000040, "Wrong size on Basic_Image_C_ScaleToFitY");
static_assert(offsetof(Basic_Image_C_ScaleToFitY, InHeight) == 0x000000, "Member 'Basic_Image_C_ScaleToFitY::InHeight' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitY, Texture) == 0x000008, "Member 'Basic_Image_C_ScaleToFitY::Texture' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitY, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000010, "Member 'Basic_Image_C_ScaleToFitY::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitY, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'Basic_Image_C_ScaleToFitY::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitY, CallFunc_Blueprint_GetSizeY_ReturnValue) == 0x000014, "Member 'Basic_Image_C_ScaleToFitY::CallFunc_Blueprint_GetSizeY_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitY, CallFunc_Blueprint_GetSizeX_ReturnValue) == 0x000018, "Member 'Basic_Image_C_ScaleToFitY::CallFunc_Blueprint_GetSizeX_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitY, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00001C, "Member 'Basic_Image_C_ScaleToFitY::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitY, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'Basic_Image_C_ScaleToFitY::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitY, CallFunc_GetBrushResourceAsTexture2D_ReturnValue) == 0x000028, "Member 'Basic_Image_C_ScaleToFitY::CallFunc_GetBrushResourceAsTexture2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitY, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000030, "Member 'Basic_Image_C_ScaleToFitY::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Image_C_ScaleToFitY, CallFunc_MakeVector2D_ReturnValue) == 0x000034, "Member 'Basic_Image_C_ScaleToFitY::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

}

