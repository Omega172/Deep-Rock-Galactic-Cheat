#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ScreenOverlay_Afflictions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace CG
{

// WidgetBlueprintGeneratedClass ScreenOverlay_Afflictions.ScreenOverlay_Afflictions_C
// 0x0070 (0x02D0 - 0x0260)
class UScreenOverlay_Afflictions_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           RootCanvas;                                        // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class APlayerCharacter*                       Player;                                            // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHealthComponent*                       HealthComponent;                                   // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UPlayerAfflictionOverlay*, class UPlayerAfflictionOverlayWidget*> ActiveOverlays;                                    // 0x0280(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_ScreenOverlay_Afflictions(int32 EntryPoint);
	void OnHideOverlay_Event(class UPlayerAfflictionOverlay* Overlay);
	void OnShowOverlay_Event(class UPlayerAfflictionOverlay* Overlay);
	void Construct();
	void FindOverlayWidget(class UPlayerAfflictionOverlay* OverlayData, bool CreateIfNew, class UPlayerAfflictionOverlayWidget** OutWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ScreenOverlay_Afflictions_C">();
	}
	static class UScreenOverlay_Afflictions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScreenOverlay_Afflictions_C>();
	}
};
static_assert(alignof(UScreenOverlay_Afflictions_C) == 0x000008, "Wrong alignment on UScreenOverlay_Afflictions_C");
static_assert(sizeof(UScreenOverlay_Afflictions_C) == 0x0002D0, "Wrong size on UScreenOverlay_Afflictions_C");
static_assert(offsetof(UScreenOverlay_Afflictions_C, UberGraphFrame) == 0x000260, "Member 'UScreenOverlay_Afflictions_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UScreenOverlay_Afflictions_C, RootCanvas) == 0x000268, "Member 'UScreenOverlay_Afflictions_C::RootCanvas' has a wrong offset!");
static_assert(offsetof(UScreenOverlay_Afflictions_C, Player) == 0x000270, "Member 'UScreenOverlay_Afflictions_C::Player' has a wrong offset!");
static_assert(offsetof(UScreenOverlay_Afflictions_C, HealthComponent) == 0x000278, "Member 'UScreenOverlay_Afflictions_C::HealthComponent' has a wrong offset!");
static_assert(offsetof(UScreenOverlay_Afflictions_C, ActiveOverlays) == 0x000280, "Member 'UScreenOverlay_Afflictions_C::ActiveOverlays' has a wrong offset!");

}

