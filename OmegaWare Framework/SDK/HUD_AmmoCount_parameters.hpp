#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUD_AmmoCount

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace CG::Params
{

// Function HUD_AmmoCount.HUD_AmmoCount_C.ExecuteUbergraph_HUD_AmmoCount
// 0x00B8 (0x00B8 - 0x0000)
struct HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Total;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Count;                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3390[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0018(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0030(0x0018)()
	bool                                          K2Node_Event_visible_1;                            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_showClipCount;                        // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_visible;                              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           CallFunc_MenuColors_OutputColor;                   // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0060(0x0028)()
	class UClipBasedItemAggregator*               K2Node_DynamicCast_AsClip_Based_Item_Aggregator;   // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3391[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetClipAmount_ReturnValue;                // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalAmount_ReturnValue;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_2;             // 0x00A0(0x0018)()
};
static_assert(alignof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount) == 0x000008, "Wrong alignment on HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount");
static_assert(sizeof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount) == 0x0000B8, "Wrong size on HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, EntryPoint) == 0x000000, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::EntryPoint' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, Temp_byte_Variable) == 0x000004, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, Temp_byte_Variable_1) == 0x000005, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, Temp_bool_Variable) == 0x000006, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, Temp_byte_Variable_2) == 0x000007, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, Temp_byte_Variable_3) == 0x000008, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, Temp_bool_Variable_1) == 0x000009, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, Temp_byte_Variable_4) == 0x00000A, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, Temp_byte_Variable_5) == 0x00000B, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, K2Node_Event_Total) == 0x00000C, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::K2Node_Event_Total' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, K2Node_Event_Count) == 0x000010, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::K2Node_Event_Count' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000018, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000030, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, K2Node_Event_visible_1) == 0x000048, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::K2Node_Event_visible_1' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, K2Node_Event_showClipCount) == 0x000049, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::K2Node_Event_showClipCount' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, K2Node_Select_Default) == 0x00004A, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, Temp_bool_Variable_2) == 0x00004B, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, K2Node_Event_visible) == 0x00004C, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::K2Node_Event_visible' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, K2Node_Select_Default_1) == 0x00004D, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, K2Node_Select_Default_2) == 0x00004E, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, K2Node_Event_IsDesignTime) == 0x00004F, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, CallFunc_MenuColors_OutputColor) == 0x000050, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::CallFunc_MenuColors_OutputColor' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, K2Node_MakeStruct_SlateColor) == 0x000060, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, K2Node_DynamicCast_AsClip_Based_Item_Aggregator) == 0x000088, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::K2Node_DynamicCast_AsClip_Based_Item_Aggregator' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, CallFunc_GetClipAmount_ReturnValue) == 0x000094, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::CallFunc_GetClipAmount_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, CallFunc_GetTotalAmount_ReturnValue) == 0x000098, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::CallFunc_GetTotalAmount_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount, CallFunc_Conv_IntToText_ReturnValue_2) == 0x0000A0, "Member 'HUD_AmmoCount_C_ExecuteUbergraph_HUD_AmmoCount::CallFunc_Conv_IntToText_ReturnValue_2' has a wrong offset!");

// Function HUD_AmmoCount.HUD_AmmoCount_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct HUD_AmmoCount_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_AmmoCount_C_PreConstruct) == 0x000001, "Wrong alignment on HUD_AmmoCount_C_PreConstruct");
static_assert(sizeof(HUD_AmmoCount_C_PreConstruct) == 0x000001, "Wrong size on HUD_AmmoCount_C_PreConstruct");
static_assert(offsetof(HUD_AmmoCount_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'HUD_AmmoCount_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function HUD_AmmoCount.HUD_AmmoCount_C.OnTotalVisibleChanged
// 0x0001 (0x0001 - 0x0000)
struct HUD_AmmoCount_C_OnTotalVisibleChanged final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_AmmoCount_C_OnTotalVisibleChanged) == 0x000001, "Wrong alignment on HUD_AmmoCount_C_OnTotalVisibleChanged");
static_assert(sizeof(HUD_AmmoCount_C_OnTotalVisibleChanged) == 0x000001, "Wrong size on HUD_AmmoCount_C_OnTotalVisibleChanged");
static_assert(offsetof(HUD_AmmoCount_C_OnTotalVisibleChanged, Visible) == 0x000000, "Member 'HUD_AmmoCount_C_OnTotalVisibleChanged::Visible' has a wrong offset!");

// Function HUD_AmmoCount.HUD_AmmoCount_C.OnVisibleChanged
// 0x0002 (0x0002 - 0x0000)
struct HUD_AmmoCount_C_OnVisibleChanged final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowClipCount;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_AmmoCount_C_OnVisibleChanged) == 0x000001, "Wrong alignment on HUD_AmmoCount_C_OnVisibleChanged");
static_assert(sizeof(HUD_AmmoCount_C_OnVisibleChanged) == 0x000002, "Wrong size on HUD_AmmoCount_C_OnVisibleChanged");
static_assert(offsetof(HUD_AmmoCount_C_OnVisibleChanged, Visible) == 0x000000, "Member 'HUD_AmmoCount_C_OnVisibleChanged::Visible' has a wrong offset!");
static_assert(offsetof(HUD_AmmoCount_C_OnVisibleChanged, ShowClipCount) == 0x000001, "Member 'HUD_AmmoCount_C_OnVisibleChanged::ShowClipCount' has a wrong offset!");

// Function HUD_AmmoCount.HUD_AmmoCount_C.OnAmountChanged
// 0x0004 (0x0004 - 0x0000)
struct HUD_AmmoCount_C_OnAmountChanged final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_AmmoCount_C_OnAmountChanged) == 0x000004, "Wrong alignment on HUD_AmmoCount_C_OnAmountChanged");
static_assert(sizeof(HUD_AmmoCount_C_OnAmountChanged) == 0x000004, "Wrong size on HUD_AmmoCount_C_OnAmountChanged");
static_assert(offsetof(HUD_AmmoCount_C_OnAmountChanged, Count) == 0x000000, "Member 'HUD_AmmoCount_C_OnAmountChanged::Count' has a wrong offset!");

// Function HUD_AmmoCount.HUD_AmmoCount_C.OnTotalChanged
// 0x0004 (0x0004 - 0x0000)
struct HUD_AmmoCount_C_OnTotalChanged final
{
public:
	int32                                         Total;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_AmmoCount_C_OnTotalChanged) == 0x000004, "Wrong alignment on HUD_AmmoCount_C_OnTotalChanged");
static_assert(sizeof(HUD_AmmoCount_C_OnTotalChanged) == 0x000004, "Wrong size on HUD_AmmoCount_C_OnTotalChanged");
static_assert(offsetof(HUD_AmmoCount_C_OnTotalChanged, Total) == 0x000000, "Member 'HUD_AmmoCount_C_OnTotalChanged::Total' has a wrong offset!");

}

