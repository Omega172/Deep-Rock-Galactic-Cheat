#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LIB_Game

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "UMG_structs.hpp"
#include "FSD_structs.hpp"


namespace CG
{

// BlueprintGeneratedClass LIB_Game.LIB_Game_C
// 0x0000 (0x0028 - 0x0028)
class ULIB_Game_C final : public UBlueprintFunctionLibrary
{
public:
	static void IsKickReason(EDisconnectReason DisconnectReason, class UObject* __WorldContext, bool* Kicked);
	static void SelectVisibility(class UWidget* Widget, ESlateVisibility FLASE, ESlateVisibility TURR, bool Param_Index, class UObject* __WorldContext, bool* IsVisible, bool* VisibilityChanged, ESlateVisibility* New_Visibility);
	static void LoadMission(const struct FSoftObjectPath& NewParam, class UObject* __WorldContext);
	static void SetVisibilityIf(class UWidget* Widget, ESlateVisibility Visibility, bool Condition, class UObject* __WorldContext, bool* IsVisible);
	static void UpdateBool(bool& Variable, bool InValue, class UObject* __WorldContext, bool* ValueChanged, bool* OutValue);
	static void SetTextureAndTint(class UImage* Target, class UTexture2D* Texture, bool bMatchSize, const struct FLinearColor& Tint, class UObject* __WorldContext);
	static void SetSoftTextureAndTint(class UImage* Target, TSoftObjectPtr<class UTexture2D> Texture, bool bMatchSize, const struct FLinearColor& Tint, class UObject* __WorldContext);
	static void IsFlaggedVisible(class UWidget* InWidget, class UObject* __WorldContext, bool* Param_IsFlaggedVisible);
	static void SetTextureAndColor(class UImage* Target, class UTexture2D* Texture, bool bMatchSize, const struct FLinearColor& InColorAndOpacity, class UObject* __WorldContext);
	static void GetMissionSeedString(class UObject* __WorldContext, class FString* SeedString);

	static void IsOnSpaceRig(class UObject* __WorldContext, bool* OnSpaceRig);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LIB_Game_C">();
	}
	static class ULIB_Game_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULIB_Game_C>();
	}
};
static_assert(alignof(ULIB_Game_C) == 0x000008, "Wrong alignment on ULIB_Game_C");
static_assert(sizeof(ULIB_Game_C) == 0x000028, "Wrong size on ULIB_Game_C");

}

