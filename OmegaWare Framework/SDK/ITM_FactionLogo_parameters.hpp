#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITM_FactionLogo

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace CG::Params
{

// Function ITM_FactionLogo.ITM_FactionLogo_C.ExecuteUbergraph_ITM_FactionLogo
// 0x00A8 (0x00A8 - 0x0000)
struct ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_378F[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3790[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3791[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0020(0x0088)()
};
static_assert(alignof(ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo) == 0x000008, "Wrong alignment on ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo");
static_assert(sizeof(ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo) == 0x0000A8, "Wrong size on ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo");
static_assert(offsetof(ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo, EntryPoint) == 0x000000, "Member 'ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo::EntryPoint' has a wrong offset!");
static_assert(offsetof(ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo, K2Node_Event_IsDesignTime) == 0x000010, "Member 'ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo, CallFunc_BreakVector2D_X) == 0x000014, "Member 'ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo, K2Node_MakeStruct_SlateBrush) == 0x000020, "Member 'ITM_FactionLogo_C_ExecuteUbergraph_ITM_FactionLogo::K2Node_MakeStruct_SlateBrush' has a wrong offset!");

// Function ITM_FactionLogo.ITM_FactionLogo_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ITM_FactionLogo_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITM_FactionLogo_C_PreConstruct) == 0x000001, "Wrong alignment on ITM_FactionLogo_C_PreConstruct");
static_assert(sizeof(ITM_FactionLogo_C_PreConstruct) == 0x000001, "Wrong size on ITM_FactionLogo_C_PreConstruct");
static_assert(offsetof(ITM_FactionLogo_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ITM_FactionLogo_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

