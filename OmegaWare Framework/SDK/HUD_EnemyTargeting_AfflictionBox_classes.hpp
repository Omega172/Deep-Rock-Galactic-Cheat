#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUD_EnemyTargeting_AfflictionBox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace CG
{

// WidgetBlueprintGeneratedClass HUD_EnemyTargeting_AfflictionBox.HUD_EnemyTargeting_AfflictionBox_C
// 0x0090 (0x02F0 - 0x0260)
class UHUD_EnemyTargeting_AfflictionBox_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHorizontalBox*                         AfflictionBox;                                     // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         Size;                                              // 0x0270(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_347F[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPawnAfflictionComponent*               AfflictionComponent;                               // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UPawnAffliction*, class UHUD_EnemyTargeting_Affliction_C*> AfflictionWidgets;                                 // 0x0280(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<TSoftObjectPtr<class UPawnAffliction>> PreviewAfflictions;                                // 0x02D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<class UPawnAffliction*>                IgnoreAfflictions;                                 // 0x02E0(0x0010)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_HUD_EnemyTargeting_AfflictionBox(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void OnAfflictionDeactivatedEvent_Event(class UPawnAffliction* Affliction);
	void OnAfflictionActivatedEvent_Event(class UPawnAffliction* Affliction);
	void SetTarget(class AActor* InAfflictionTarget);
	void ToggleAffliction(class UPawnAffliction* InAffliction, bool InVisible);
	void ClearAfflictions();
	void ToggleIgnoreAffliction(class UPawnAffliction* Affliction, bool ShouldIgnore);
	void ToggleIgnoreAfflictions(TArray<class UPawnAffliction*>& Affliction, bool ShouldIgnore);
	void SetAfflictionComponent(class UPawnAfflictionComponent* InAfflictionComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HUD_EnemyTargeting_AfflictionBox_C">();
	}
	static class UHUD_EnemyTargeting_AfflictionBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUD_EnemyTargeting_AfflictionBox_C>();
	}
};
static_assert(alignof(UHUD_EnemyTargeting_AfflictionBox_C) == 0x000008, "Wrong alignment on UHUD_EnemyTargeting_AfflictionBox_C");
static_assert(sizeof(UHUD_EnemyTargeting_AfflictionBox_C) == 0x0002F0, "Wrong size on UHUD_EnemyTargeting_AfflictionBox_C");
static_assert(offsetof(UHUD_EnemyTargeting_AfflictionBox_C, UberGraphFrame) == 0x000260, "Member 'UHUD_EnemyTargeting_AfflictionBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UHUD_EnemyTargeting_AfflictionBox_C, AfflictionBox) == 0x000268, "Member 'UHUD_EnemyTargeting_AfflictionBox_C::AfflictionBox' has a wrong offset!");
static_assert(offsetof(UHUD_EnemyTargeting_AfflictionBox_C, Size) == 0x000270, "Member 'UHUD_EnemyTargeting_AfflictionBox_C::Size' has a wrong offset!");
static_assert(offsetof(UHUD_EnemyTargeting_AfflictionBox_C, AfflictionComponent) == 0x000278, "Member 'UHUD_EnemyTargeting_AfflictionBox_C::AfflictionComponent' has a wrong offset!");
static_assert(offsetof(UHUD_EnemyTargeting_AfflictionBox_C, AfflictionWidgets) == 0x000280, "Member 'UHUD_EnemyTargeting_AfflictionBox_C::AfflictionWidgets' has a wrong offset!");
static_assert(offsetof(UHUD_EnemyTargeting_AfflictionBox_C, PreviewAfflictions) == 0x0002D0, "Member 'UHUD_EnemyTargeting_AfflictionBox_C::PreviewAfflictions' has a wrong offset!");
static_assert(offsetof(UHUD_EnemyTargeting_AfflictionBox_C, IgnoreAfflictions) == 0x0002E0, "Member 'UHUD_EnemyTargeting_AfflictionBox_C::IgnoreAfflictions' has a wrong offset!");

}

