#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUD_WeaponName

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace CG::Params
{

// Function HUD_WeaponName.HUD_WeaponName_C.ExecuteUbergraph_HUD_WeaponName
// 0x0070 (0x0070 - 0x0000)
struct HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MenuColors_OutputColor;                   // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A7[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0018(0x0028)()
	TDelegate<void(class AItem* Item)>            K2Node_CreateDelegate_OutputDelegate;              // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AItem*                                  K2Node_CustomEvent_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCharacter*                       K2Node_DynamicCast_AsPlayer_Character;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName) == 0x000008, "Wrong alignment on HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName");
static_assert(sizeof(HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName) == 0x000070, "Wrong size on HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName");
static_assert(offsetof(HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName, EntryPoint) == 0x000000, "Member 'HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName::EntryPoint' has a wrong offset!");
static_assert(offsetof(HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName, CallFunc_MenuColors_OutputColor) == 0x000004, "Member 'HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName::CallFunc_MenuColors_OutputColor' has a wrong offset!");
static_assert(offsetof(HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName, K2Node_MakeStruct_SlateColor) == 0x000018, "Member 'HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName, K2Node_CreateDelegate_OutputDelegate) == 0x000040, "Member 'HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000050, "Member 'HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName, K2Node_CustomEvent_Item) == 0x000058, "Member 'HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName::K2Node_CustomEvent_Item' has a wrong offset!");
static_assert(offsetof(HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName, K2Node_DynamicCast_AsPlayer_Character) == 0x000060, "Member 'HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName::K2Node_DynamicCast_AsPlayer_Character' has a wrong offset!");
static_assert(offsetof(HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName, K2Node_Event_IsDesignTime) == 0x000069, "Member 'HUD_WeaponName_C_ExecuteUbergraph_HUD_WeaponName::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function HUD_WeaponName.HUD_WeaponName_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct HUD_WeaponName_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_WeaponName_C_PreConstruct) == 0x000001, "Wrong alignment on HUD_WeaponName_C_PreConstruct");
static_assert(sizeof(HUD_WeaponName_C_PreConstruct) == 0x000001, "Wrong size on HUD_WeaponName_C_PreConstruct");
static_assert(offsetof(HUD_WeaponName_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'HUD_WeaponName_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function HUD_WeaponName.HUD_WeaponName_C.OnItemEquipped
// 0x0008 (0x0008 - 0x0000)
struct HUD_WeaponName_C_OnItemEquipped final
{
public:
	class AItem*                                  Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_WeaponName_C_OnItemEquipped) == 0x000008, "Wrong alignment on HUD_WeaponName_C_OnItemEquipped");
static_assert(sizeof(HUD_WeaponName_C_OnItemEquipped) == 0x000008, "Wrong size on HUD_WeaponName_C_OnItemEquipped");
static_assert(offsetof(HUD_WeaponName_C_OnItemEquipped, Item) == 0x000000, "Member 'HUD_WeaponName_C_OnItemEquipped::Item' has a wrong offset!");

// Function HUD_WeaponName.HUD_WeaponName_C.UpdateLabel
// 0x0058 (0x0058 - 0x0000)
struct HUD_WeaponName_C_UpdateLabel final
{
public:
	class AItem*                                  CallFunc_GetEquippedItem_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetItemName_ReturnValue;                  // 0x0008(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35A8[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0028(0x0018)()
	class FText                                   CallFunc_GetItemCategory_ReturnValue;              // 0x0040(0x0018)()
};
static_assert(alignof(HUD_WeaponName_C_UpdateLabel) == 0x000008, "Wrong alignment on HUD_WeaponName_C_UpdateLabel");
static_assert(sizeof(HUD_WeaponName_C_UpdateLabel) == 0x000058, "Wrong size on HUD_WeaponName_C_UpdateLabel");
static_assert(offsetof(HUD_WeaponName_C_UpdateLabel, CallFunc_GetEquippedItem_ReturnValue) == 0x000000, "Member 'HUD_WeaponName_C_UpdateLabel::CallFunc_GetEquippedItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_WeaponName_C_UpdateLabel, CallFunc_GetItemName_ReturnValue) == 0x000008, "Member 'HUD_WeaponName_C_UpdateLabel::CallFunc_GetItemName_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_WeaponName_C_UpdateLabel, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'HUD_WeaponName_C_UpdateLabel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_WeaponName_C_UpdateLabel, CallFunc_TextToUpper_ReturnValue) == 0x000028, "Member 'HUD_WeaponName_C_UpdateLabel::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_WeaponName_C_UpdateLabel, CallFunc_GetItemCategory_ReturnValue) == 0x000040, "Member 'HUD_WeaponName_C_UpdateLabel::CallFunc_GetItemCategory_ReturnValue' has a wrong offset!");

}

