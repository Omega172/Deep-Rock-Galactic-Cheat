#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ControlRig

#include "Basic.hpp"

#include "ControlRig_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace CG::Params
{

// Function ControlRig.ControlRig.SetInteractionRig
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_SetInteractionRig final
{
public:
	class UControlRig*                            InInteractionRig;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_SetInteractionRig) == 0x000008, "Wrong alignment on ControlRig_SetInteractionRig");
static_assert(sizeof(ControlRig_SetInteractionRig) == 0x000008, "Wrong size on ControlRig_SetInteractionRig");
static_assert(offsetof(ControlRig_SetInteractionRig, InInteractionRig) == 0x000000, "Member 'ControlRig_SetInteractionRig::InInteractionRig' has a wrong offset!");

// Function ControlRig.ControlRig.SetInteractionRigClass
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_SetInteractionRigClass final
{
public:
	TSubclassOf<class UControlRig>                InInteractionRigClass;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_SetInteractionRigClass) == 0x000008, "Wrong alignment on ControlRig_SetInteractionRigClass");
static_assert(sizeof(ControlRig_SetInteractionRigClass) == 0x000008, "Wrong size on ControlRig_SetInteractionRigClass");
static_assert(offsetof(ControlRig_SetInteractionRigClass, InInteractionRigClass) == 0x000000, "Member 'ControlRig_SetInteractionRigClass::InInteractionRigClass' has a wrong offset!");

// Function ControlRig.ControlRig.GetInteractionRig
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_GetInteractionRig final
{
public:
	class UControlRig*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetInteractionRig) == 0x000008, "Wrong alignment on ControlRig_GetInteractionRig");
static_assert(sizeof(ControlRig_GetInteractionRig) == 0x000008, "Wrong size on ControlRig_GetInteractionRig");
static_assert(offsetof(ControlRig_GetInteractionRig, ReturnValue) == 0x000000, "Member 'ControlRig_GetInteractionRig::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.GetInteractionRigClass
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_GetInteractionRigClass final
{
public:
	TSubclassOf<class UControlRig>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetInteractionRigClass) == 0x000008, "Wrong alignment on ControlRig_GetInteractionRigClass");
static_assert(sizeof(ControlRig_GetInteractionRigClass) == 0x000008, "Wrong size on ControlRig_GetInteractionRigClass");
static_assert(offsetof(ControlRig_GetInteractionRigClass, ReturnValue) == 0x000000, "Member 'ControlRig_GetInteractionRigClass::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.OnEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlRigGizmoActor_OnEnabledChanged final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_OnEnabledChanged) == 0x000001, "Wrong alignment on ControlRigGizmoActor_OnEnabledChanged");
static_assert(sizeof(ControlRigGizmoActor_OnEnabledChanged) == 0x000001, "Wrong size on ControlRigGizmoActor_OnEnabledChanged");
static_assert(offsetof(ControlRigGizmoActor_OnEnabledChanged, bIsEnabled) == 0x000000, "Member 'ControlRigGizmoActor_OnEnabledChanged::bIsEnabled' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.OnHoveredChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlRigGizmoActor_OnHoveredChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_OnHoveredChanged) == 0x000001, "Wrong alignment on ControlRigGizmoActor_OnHoveredChanged");
static_assert(sizeof(ControlRigGizmoActor_OnHoveredChanged) == 0x000001, "Wrong size on ControlRigGizmoActor_OnHoveredChanged");
static_assert(offsetof(ControlRigGizmoActor_OnHoveredChanged, bIsSelected) == 0x000000, "Member 'ControlRigGizmoActor_OnHoveredChanged::bIsSelected' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.OnManipulatingChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlRigGizmoActor_OnManipulatingChanged final
{
public:
	bool                                          bIsManipulating;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_OnManipulatingChanged) == 0x000001, "Wrong alignment on ControlRigGizmoActor_OnManipulatingChanged");
static_assert(sizeof(ControlRigGizmoActor_OnManipulatingChanged) == 0x000001, "Wrong size on ControlRigGizmoActor_OnManipulatingChanged");
static_assert(offsetof(ControlRigGizmoActor_OnManipulatingChanged, bIsManipulating) == 0x000000, "Member 'ControlRigGizmoActor_OnManipulatingChanged::bIsManipulating' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.OnSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlRigGizmoActor_OnSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_OnSelectionChanged) == 0x000001, "Wrong alignment on ControlRigGizmoActor_OnSelectionChanged");
static_assert(sizeof(ControlRigGizmoActor_OnSelectionChanged) == 0x000001, "Wrong size on ControlRigGizmoActor_OnSelectionChanged");
static_assert(offsetof(ControlRigGizmoActor_OnSelectionChanged, bIsSelected) == 0x000000, "Member 'ControlRigGizmoActor_OnSelectionChanged::bIsSelected' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.OnTransformChanged
// 0x0030 (0x0030 - 0x0000)
struct ControlRigGizmoActor_OnTransformChanged final
{
public:
	struct FTransform                             NewTransform;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_OnTransformChanged) == 0x000010, "Wrong alignment on ControlRigGizmoActor_OnTransformChanged");
static_assert(sizeof(ControlRigGizmoActor_OnTransformChanged) == 0x000030, "Wrong size on ControlRigGizmoActor_OnTransformChanged");
static_assert(offsetof(ControlRigGizmoActor_OnTransformChanged, NewTransform) == 0x000000, "Member 'ControlRigGizmoActor_OnTransformChanged::NewTransform' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct ControlRigGizmoActor_SetEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_SetEnabled) == 0x000001, "Wrong alignment on ControlRigGizmoActor_SetEnabled");
static_assert(sizeof(ControlRigGizmoActor_SetEnabled) == 0x000001, "Wrong size on ControlRigGizmoActor_SetEnabled");
static_assert(offsetof(ControlRigGizmoActor_SetEnabled, bInEnabled) == 0x000000, "Member 'ControlRigGizmoActor_SetEnabled::bInEnabled' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.SetGlobalTransform
// 0x0030 (0x0030 - 0x0000)
struct ControlRigGizmoActor_SetGlobalTransform final
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_SetGlobalTransform) == 0x000010, "Wrong alignment on ControlRigGizmoActor_SetGlobalTransform");
static_assert(sizeof(ControlRigGizmoActor_SetGlobalTransform) == 0x000030, "Wrong size on ControlRigGizmoActor_SetGlobalTransform");
static_assert(offsetof(ControlRigGizmoActor_SetGlobalTransform, InTransform) == 0x000000, "Member 'ControlRigGizmoActor_SetGlobalTransform::InTransform' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.SetHovered
// 0x0001 (0x0001 - 0x0000)
struct ControlRigGizmoActor_SetHovered final
{
public:
	bool                                          bInHovered;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_SetHovered) == 0x000001, "Wrong alignment on ControlRigGizmoActor_SetHovered");
static_assert(sizeof(ControlRigGizmoActor_SetHovered) == 0x000001, "Wrong size on ControlRigGizmoActor_SetHovered");
static_assert(offsetof(ControlRigGizmoActor_SetHovered, bInHovered) == 0x000000, "Member 'ControlRigGizmoActor_SetHovered::bInHovered' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.SetSelectable
// 0x0001 (0x0001 - 0x0000)
struct ControlRigGizmoActor_SetSelectable final
{
public:
	bool                                          bInSelectable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_SetSelectable) == 0x000001, "Wrong alignment on ControlRigGizmoActor_SetSelectable");
static_assert(sizeof(ControlRigGizmoActor_SetSelectable) == 0x000001, "Wrong size on ControlRigGizmoActor_SetSelectable");
static_assert(offsetof(ControlRigGizmoActor_SetSelectable, bInSelectable) == 0x000000, "Member 'ControlRigGizmoActor_SetSelectable::bInSelectable' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct ControlRigGizmoActor_SetSelected final
{
public:
	bool                                          bInSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_SetSelected) == 0x000001, "Wrong alignment on ControlRigGizmoActor_SetSelected");
static_assert(sizeof(ControlRigGizmoActor_SetSelected) == 0x000001, "Wrong size on ControlRigGizmoActor_SetSelected");
static_assert(offsetof(ControlRigGizmoActor_SetSelected, bInSelected) == 0x000000, "Member 'ControlRigGizmoActor_SetSelected::bInSelected' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.GetGlobalTransform
// 0x0030 (0x0030 - 0x0000)
struct ControlRigGizmoActor_GetGlobalTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_GetGlobalTransform) == 0x000010, "Wrong alignment on ControlRigGizmoActor_GetGlobalTransform");
static_assert(sizeof(ControlRigGizmoActor_GetGlobalTransform) == 0x000030, "Wrong size on ControlRigGizmoActor_GetGlobalTransform");
static_assert(offsetof(ControlRigGizmoActor_GetGlobalTransform, ReturnValue) == 0x000000, "Member 'ControlRigGizmoActor_GetGlobalTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ControlRigGizmoActor_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_IsEnabled) == 0x000001, "Wrong alignment on ControlRigGizmoActor_IsEnabled");
static_assert(sizeof(ControlRigGizmoActor_IsEnabled) == 0x000001, "Wrong size on ControlRigGizmoActor_IsEnabled");
static_assert(offsetof(ControlRigGizmoActor_IsEnabled, ReturnValue) == 0x000000, "Member 'ControlRigGizmoActor_IsEnabled::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.IsHovered
// 0x0001 (0x0001 - 0x0000)
struct ControlRigGizmoActor_IsHovered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_IsHovered) == 0x000001, "Wrong alignment on ControlRigGizmoActor_IsHovered");
static_assert(sizeof(ControlRigGizmoActor_IsHovered) == 0x000001, "Wrong size on ControlRigGizmoActor_IsHovered");
static_assert(offsetof(ControlRigGizmoActor_IsHovered, ReturnValue) == 0x000000, "Member 'ControlRigGizmoActor_IsHovered::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigGizmoActor.IsSelectedInEditor
// 0x0001 (0x0001 - 0x0000)
struct ControlRigGizmoActor_IsSelectedInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigGizmoActor_IsSelectedInEditor) == 0x000001, "Wrong alignment on ControlRigGizmoActor_IsSelectedInEditor");
static_assert(sizeof(ControlRigGizmoActor_IsSelectedInEditor) == 0x000001, "Wrong size on ControlRigGizmoActor_IsSelectedInEditor");
static_assert(offsetof(ControlRigGizmoActor_IsSelectedInEditor, ReturnValue) == 0x000000, "Member 'ControlRigGizmoActor_IsSelectedInEditor::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.AddMappedCompleteSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_AddMappedCompleteSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_AddMappedCompleteSkeletalMesh) == 0x000008, "Wrong alignment on ControlRigComponent_AddMappedCompleteSkeletalMesh");
static_assert(sizeof(ControlRigComponent_AddMappedCompleteSkeletalMesh) == 0x000008, "Wrong size on ControlRigComponent_AddMappedCompleteSkeletalMesh");
static_assert(offsetof(ControlRigComponent_AddMappedCompleteSkeletalMesh, SkeletalMeshComponent) == 0x000000, "Member 'ControlRigComponent_AddMappedCompleteSkeletalMesh::SkeletalMeshComponent' has a wrong offset!");

// Function ControlRig.ControlRigComponent.AddMappedComponents
// 0x0010 (0x0010 - 0x0000)
struct ControlRigComponent_AddMappedComponents final
{
public:
	TArray<struct FControlRigComponentMappedComponent> Components;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_AddMappedComponents) == 0x000008, "Wrong alignment on ControlRigComponent_AddMappedComponents");
static_assert(sizeof(ControlRigComponent_AddMappedComponents) == 0x000010, "Wrong size on ControlRigComponent_AddMappedComponents");
static_assert(offsetof(ControlRigComponent_AddMappedComponents, Components) == 0x000000, "Member 'ControlRigComponent_AddMappedComponents::Components' has a wrong offset!");

// Function ControlRig.ControlRigComponent.AddMappedElements
// 0x0010 (0x0010 - 0x0000)
struct ControlRigComponent_AddMappedElements final
{
public:
	TArray<struct FControlRigComponentMappedElement> NewMappedElements;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_AddMappedElements) == 0x000008, "Wrong alignment on ControlRigComponent_AddMappedElements");
static_assert(sizeof(ControlRigComponent_AddMappedElements) == 0x000010, "Wrong size on ControlRigComponent_AddMappedElements");
static_assert(offsetof(ControlRigComponent_AddMappedElements, NewMappedElements) == 0x000000, "Member 'ControlRigComponent_AddMappedElements::NewMappedElements' has a wrong offset!");

// Function ControlRig.ControlRigComponent.AddMappedSkeletalMesh
// 0x0028 (0x0028 - 0x0000)
struct ControlRigComponent_AddMappedSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FControlRigComponentMappedBone> Bones;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FControlRigComponentMappedCurve> Curves;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_AddMappedSkeletalMesh) == 0x000008, "Wrong alignment on ControlRigComponent_AddMappedSkeletalMesh");
static_assert(sizeof(ControlRigComponent_AddMappedSkeletalMesh) == 0x000028, "Wrong size on ControlRigComponent_AddMappedSkeletalMesh");
static_assert(offsetof(ControlRigComponent_AddMappedSkeletalMesh, SkeletalMeshComponent) == 0x000000, "Member 'ControlRigComponent_AddMappedSkeletalMesh::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_AddMappedSkeletalMesh, Bones) == 0x000008, "Member 'ControlRigComponent_AddMappedSkeletalMesh::Bones' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_AddMappedSkeletalMesh, Curves) == 0x000018, "Member 'ControlRigComponent_AddMappedSkeletalMesh::Curves' has a wrong offset!");

// Function ControlRig.ControlRigComponent.DoesElementExist
// 0x000C (0x000C - 0x0000)
struct ControlRigComponent_DoesElementExist final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigElementType                               ElementType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1389[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_DoesElementExist) == 0x000004, "Wrong alignment on ControlRigComponent_DoesElementExist");
static_assert(sizeof(ControlRigComponent_DoesElementExist) == 0x00000C, "Wrong size on ControlRigComponent_DoesElementExist");
static_assert(offsetof(ControlRigComponent_DoesElementExist, Param_Name) == 0x000000, "Member 'ControlRigComponent_DoesElementExist::Param_Name' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_DoesElementExist, ElementType) == 0x000008, "Member 'ControlRigComponent_DoesElementExist::ElementType' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_DoesElementExist, ReturnValue) == 0x000009, "Member 'ControlRigComponent_DoesElementExist::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetBoneTransform
// 0x0040 (0x0040 - 0x0000)
struct ControlRigComponent_GetBoneTransform final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138A[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetBoneTransform) == 0x000010, "Wrong alignment on ControlRigComponent_GetBoneTransform");
static_assert(sizeof(ControlRigComponent_GetBoneTransform) == 0x000040, "Wrong size on ControlRigComponent_GetBoneTransform");
static_assert(offsetof(ControlRigComponent_GetBoneTransform, BoneName) == 0x000000, "Member 'ControlRigComponent_GetBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetBoneTransform, Space) == 0x000008, "Member 'ControlRigComponent_GetBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetBoneTransform, ReturnValue) == 0x000010, "Member 'ControlRigComponent_GetBoneTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlBool
// 0x000C (0x000C - 0x0000)
struct ControlRigComponent_GetControlBool final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138B[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_GetControlBool) == 0x000004, "Wrong alignment on ControlRigComponent_GetControlBool");
static_assert(sizeof(ControlRigComponent_GetControlBool) == 0x00000C, "Wrong size on ControlRigComponent_GetControlBool");
static_assert(offsetof(ControlRigComponent_GetControlBool, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlBool::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlBool, ReturnValue) == 0x000008, "Member 'ControlRigComponent_GetControlBool::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlFloat
// 0x000C (0x000C - 0x0000)
struct ControlRigComponent_GetControlFloat final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlFloat) == 0x000004, "Wrong alignment on ControlRigComponent_GetControlFloat");
static_assert(sizeof(ControlRigComponent_GetControlFloat) == 0x00000C, "Wrong size on ControlRigComponent_GetControlFloat");
static_assert(offsetof(ControlRigComponent_GetControlFloat, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlFloat::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlFloat, ReturnValue) == 0x000008, "Member 'ControlRigComponent_GetControlFloat::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlInt
// 0x000C (0x000C - 0x0000)
struct ControlRigComponent_GetControlInt final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlInt) == 0x000004, "Wrong alignment on ControlRigComponent_GetControlInt");
static_assert(sizeof(ControlRigComponent_GetControlInt) == 0x00000C, "Wrong size on ControlRigComponent_GetControlInt");
static_assert(offsetof(ControlRigComponent_GetControlInt, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlInt::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlInt, ReturnValue) == 0x000008, "Member 'ControlRigComponent_GetControlInt::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlOffset
// 0x0040 (0x0040 - 0x0000)
struct ControlRigComponent_GetControlOffset final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlOffset) == 0x000010, "Wrong alignment on ControlRigComponent_GetControlOffset");
static_assert(sizeof(ControlRigComponent_GetControlOffset) == 0x000040, "Wrong size on ControlRigComponent_GetControlOffset");
static_assert(offsetof(ControlRigComponent_GetControlOffset, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlOffset::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlOffset, Space) == 0x000008, "Member 'ControlRigComponent_GetControlOffset::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlOffset, ReturnValue) == 0x000010, "Member 'ControlRigComponent_GetControlOffset::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlPosition
// 0x0018 (0x0018 - 0x0000)
struct ControlRigComponent_GetControlPosition final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlPosition) == 0x000004, "Wrong alignment on ControlRigComponent_GetControlPosition");
static_assert(sizeof(ControlRigComponent_GetControlPosition) == 0x000018, "Wrong size on ControlRigComponent_GetControlPosition");
static_assert(offsetof(ControlRigComponent_GetControlPosition, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlPosition::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlPosition, Space) == 0x000008, "Member 'ControlRigComponent_GetControlPosition::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlPosition, ReturnValue) == 0x00000C, "Member 'ControlRigComponent_GetControlPosition::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlRig
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_GetControlRig final
{
public:
	class UControlRig*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlRig) == 0x000008, "Wrong alignment on ControlRigComponent_GetControlRig");
static_assert(sizeof(ControlRigComponent_GetControlRig) == 0x000008, "Wrong size on ControlRigComponent_GetControlRig");
static_assert(offsetof(ControlRigComponent_GetControlRig, ReturnValue) == 0x000000, "Member 'ControlRigComponent_GetControlRig::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlRotator
// 0x0018 (0x0018 - 0x0000)
struct ControlRigComponent_GetControlRotator final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlRotator) == 0x000004, "Wrong alignment on ControlRigComponent_GetControlRotator");
static_assert(sizeof(ControlRigComponent_GetControlRotator) == 0x000018, "Wrong size on ControlRigComponent_GetControlRotator");
static_assert(offsetof(ControlRigComponent_GetControlRotator, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlRotator::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlRotator, Space) == 0x000008, "Member 'ControlRigComponent_GetControlRotator::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlRotator, ReturnValue) == 0x00000C, "Member 'ControlRigComponent_GetControlRotator::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlScale
// 0x0018 (0x0018 - 0x0000)
struct ControlRigComponent_GetControlScale final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138F[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlScale) == 0x000004, "Wrong alignment on ControlRigComponent_GetControlScale");
static_assert(sizeof(ControlRigComponent_GetControlScale) == 0x000018, "Wrong size on ControlRigComponent_GetControlScale");
static_assert(offsetof(ControlRigComponent_GetControlScale, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlScale::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlScale, Space) == 0x000008, "Member 'ControlRigComponent_GetControlScale::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlScale, ReturnValue) == 0x00000C, "Member 'ControlRigComponent_GetControlScale::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlTransform
// 0x0040 (0x0040 - 0x0000)
struct ControlRigComponent_GetControlTransform final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1390[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlTransform) == 0x000010, "Wrong alignment on ControlRigComponent_GetControlTransform");
static_assert(sizeof(ControlRigComponent_GetControlTransform) == 0x000040, "Wrong size on ControlRigComponent_GetControlTransform");
static_assert(offsetof(ControlRigComponent_GetControlTransform, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlTransform::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlTransform, Space) == 0x000008, "Member 'ControlRigComponent_GetControlTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlTransform, ReturnValue) == 0x000010, "Member 'ControlRigComponent_GetControlTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlVector2D
// 0x0010 (0x0010 - 0x0000)
struct ControlRigComponent_GetControlVector2D final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlVector2D) == 0x000004, "Wrong alignment on ControlRigComponent_GetControlVector2D");
static_assert(sizeof(ControlRigComponent_GetControlVector2D) == 0x000010, "Wrong size on ControlRigComponent_GetControlVector2D");
static_assert(offsetof(ControlRigComponent_GetControlVector2D, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlVector2D::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlVector2D, ReturnValue) == 0x000008, "Member 'ControlRigComponent_GetControlVector2D::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetElementNames
// 0x0018 (0x0018 - 0x0000)
struct ControlRigComponent_GetElementNames final
{
public:
	ERigElementType                               ElementType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1391[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetElementNames) == 0x000008, "Wrong alignment on ControlRigComponent_GetElementNames");
static_assert(sizeof(ControlRigComponent_GetElementNames) == 0x000018, "Wrong size on ControlRigComponent_GetElementNames");
static_assert(offsetof(ControlRigComponent_GetElementNames, ElementType) == 0x000000, "Member 'ControlRigComponent_GetElementNames::ElementType' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetElementNames, ReturnValue) == 0x000008, "Member 'ControlRigComponent_GetElementNames::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetInitialBoneTransform
// 0x0040 (0x0040 - 0x0000)
struct ControlRigComponent_GetInitialBoneTransform final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1392[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetInitialBoneTransform) == 0x000010, "Wrong alignment on ControlRigComponent_GetInitialBoneTransform");
static_assert(sizeof(ControlRigComponent_GetInitialBoneTransform) == 0x000040, "Wrong size on ControlRigComponent_GetInitialBoneTransform");
static_assert(offsetof(ControlRigComponent_GetInitialBoneTransform, BoneName) == 0x000000, "Member 'ControlRigComponent_GetInitialBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetInitialBoneTransform, Space) == 0x000008, "Member 'ControlRigComponent_GetInitialBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetInitialBoneTransform, ReturnValue) == 0x000010, "Member 'ControlRigComponent_GetInitialBoneTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetInitialSpaceTransform
// 0x0040 (0x0040 - 0x0000)
struct ControlRigComponent_GetInitialSpaceTransform final
{
public:
	class FName                                   SpaceName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1393[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetInitialSpaceTransform) == 0x000010, "Wrong alignment on ControlRigComponent_GetInitialSpaceTransform");
static_assert(sizeof(ControlRigComponent_GetInitialSpaceTransform) == 0x000040, "Wrong size on ControlRigComponent_GetInitialSpaceTransform");
static_assert(offsetof(ControlRigComponent_GetInitialSpaceTransform, SpaceName) == 0x000000, "Member 'ControlRigComponent_GetInitialSpaceTransform::SpaceName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetInitialSpaceTransform, Space) == 0x000008, "Member 'ControlRigComponent_GetInitialSpaceTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetInitialSpaceTransform, ReturnValue) == 0x000010, "Member 'ControlRigComponent_GetInitialSpaceTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetSpaceTransform
// 0x0040 (0x0040 - 0x0000)
struct ControlRigComponent_GetSpaceTransform final
{
public:
	class FName                                   SpaceName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1394[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetSpaceTransform) == 0x000010, "Wrong alignment on ControlRigComponent_GetSpaceTransform");
static_assert(sizeof(ControlRigComponent_GetSpaceTransform) == 0x000040, "Wrong size on ControlRigComponent_GetSpaceTransform");
static_assert(offsetof(ControlRigComponent_GetSpaceTransform, SpaceName) == 0x000000, "Member 'ControlRigComponent_GetSpaceTransform::SpaceName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetSpaceTransform, Space) == 0x000008, "Member 'ControlRigComponent_GetSpaceTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetSpaceTransform, ReturnValue) == 0x000010, "Member 'ControlRigComponent_GetSpaceTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.OnPostInitialize
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_OnPostInitialize final
{
public:
	class UControlRigComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_OnPostInitialize) == 0x000008, "Wrong alignment on ControlRigComponent_OnPostInitialize");
static_assert(sizeof(ControlRigComponent_OnPostInitialize) == 0x000008, "Wrong size on ControlRigComponent_OnPostInitialize");
static_assert(offsetof(ControlRigComponent_OnPostInitialize, Component) == 0x000000, "Member 'ControlRigComponent_OnPostInitialize::Component' has a wrong offset!");

// Function ControlRig.ControlRigComponent.OnPostSetup
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_OnPostSetup final
{
public:
	class UControlRigComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_OnPostSetup) == 0x000008, "Wrong alignment on ControlRigComponent_OnPostSetup");
static_assert(sizeof(ControlRigComponent_OnPostSetup) == 0x000008, "Wrong size on ControlRigComponent_OnPostSetup");
static_assert(offsetof(ControlRigComponent_OnPostSetup, Component) == 0x000000, "Member 'ControlRigComponent_OnPostSetup::Component' has a wrong offset!");

// Function ControlRig.ControlRigComponent.OnPostUpdate
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_OnPostUpdate final
{
public:
	class UControlRigComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_OnPostUpdate) == 0x000008, "Wrong alignment on ControlRigComponent_OnPostUpdate");
static_assert(sizeof(ControlRigComponent_OnPostUpdate) == 0x000008, "Wrong size on ControlRigComponent_OnPostUpdate");
static_assert(offsetof(ControlRigComponent_OnPostUpdate, Component) == 0x000000, "Member 'ControlRigComponent_OnPostUpdate::Component' has a wrong offset!");

// Function ControlRig.ControlRigComponent.OnPreSetup
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_OnPreSetup final
{
public:
	class UControlRigComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_OnPreSetup) == 0x000008, "Wrong alignment on ControlRigComponent_OnPreSetup");
static_assert(sizeof(ControlRigComponent_OnPreSetup) == 0x000008, "Wrong size on ControlRigComponent_OnPreSetup");
static_assert(offsetof(ControlRigComponent_OnPreSetup, Component) == 0x000000, "Member 'ControlRigComponent_OnPreSetup::Component' has a wrong offset!");

// Function ControlRig.ControlRigComponent.OnPreUpdate
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_OnPreUpdate final
{
public:
	class UControlRigComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_OnPreUpdate) == 0x000008, "Wrong alignment on ControlRigComponent_OnPreUpdate");
static_assert(sizeof(ControlRigComponent_OnPreUpdate) == 0x000008, "Wrong size on ControlRigComponent_OnPreUpdate");
static_assert(offsetof(ControlRigComponent_OnPreUpdate, Component) == 0x000000, "Member 'ControlRigComponent_OnPreUpdate::Component' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetBoneInitialTransformsFromSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh final
{
public:
	class USkeletalMesh*                          InSkeletalMesh;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh) == 0x000008, "Wrong alignment on ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh");
static_assert(sizeof(ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh) == 0x000008, "Wrong size on ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh");
static_assert(offsetof(ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh, InSkeletalMesh) == 0x000000, "Member 'ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh::InSkeletalMesh' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetBoneTransform
// 0x0050 (0x0050 - 0x0000)
struct ControlRigComponent_SetBoneTransform final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1395[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1396[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1397[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetBoneTransform) == 0x000010, "Wrong alignment on ControlRigComponent_SetBoneTransform");
static_assert(sizeof(ControlRigComponent_SetBoneTransform) == 0x000050, "Wrong size on ControlRigComponent_SetBoneTransform");
static_assert(offsetof(ControlRigComponent_SetBoneTransform, BoneName) == 0x000000, "Member 'ControlRigComponent_SetBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetBoneTransform, Transform) == 0x000010, "Member 'ControlRigComponent_SetBoneTransform::Transform' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetBoneTransform, Space) == 0x000040, "Member 'ControlRigComponent_SetBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetBoneTransform, Weight) == 0x000044, "Member 'ControlRigComponent_SetBoneTransform::Weight' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetBoneTransform, bPropagateToChildren) == 0x000048, "Member 'ControlRigComponent_SetBoneTransform::bPropagateToChildren' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlBool
// 0x000C (0x000C - 0x0000)
struct ControlRigComponent_SetControlBool final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1398[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetControlBool) == 0x000004, "Wrong alignment on ControlRigComponent_SetControlBool");
static_assert(sizeof(ControlRigComponent_SetControlBool) == 0x00000C, "Wrong size on ControlRigComponent_SetControlBool");
static_assert(offsetof(ControlRigComponent_SetControlBool, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlBool::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlBool, Value) == 0x000008, "Member 'ControlRigComponent_SetControlBool::Value' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlFloat
// 0x000C (0x000C - 0x0000)
struct ControlRigComponent_SetControlFloat final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_SetControlFloat) == 0x000004, "Wrong alignment on ControlRigComponent_SetControlFloat");
static_assert(sizeof(ControlRigComponent_SetControlFloat) == 0x00000C, "Wrong size on ControlRigComponent_SetControlFloat");
static_assert(offsetof(ControlRigComponent_SetControlFloat, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlFloat::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlFloat, Value) == 0x000008, "Member 'ControlRigComponent_SetControlFloat::Value' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlInt
// 0x000C (0x000C - 0x0000)
struct ControlRigComponent_SetControlInt final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_SetControlInt) == 0x000004, "Wrong alignment on ControlRigComponent_SetControlInt");
static_assert(sizeof(ControlRigComponent_SetControlInt) == 0x00000C, "Wrong size on ControlRigComponent_SetControlInt");
static_assert(offsetof(ControlRigComponent_SetControlInt, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlInt::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlInt, Value) == 0x000008, "Member 'ControlRigComponent_SetControlInt::Value' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlOffset
// 0x0050 (0x0050 - 0x0000)
struct ControlRigComponent_SetControlOffset final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1399[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetTransform;                                   // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139A[0xF];                                     // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetControlOffset) == 0x000010, "Wrong alignment on ControlRigComponent_SetControlOffset");
static_assert(sizeof(ControlRigComponent_SetControlOffset) == 0x000050, "Wrong size on ControlRigComponent_SetControlOffset");
static_assert(offsetof(ControlRigComponent_SetControlOffset, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlOffset::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlOffset, OffsetTransform) == 0x000010, "Member 'ControlRigComponent_SetControlOffset::OffsetTransform' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlOffset, Space) == 0x000040, "Member 'ControlRigComponent_SetControlOffset::Space' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlPosition
// 0x0018 (0x0018 - 0x0000)
struct ControlRigComponent_SetControlPosition final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139B[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetControlPosition) == 0x000004, "Wrong alignment on ControlRigComponent_SetControlPosition");
static_assert(sizeof(ControlRigComponent_SetControlPosition) == 0x000018, "Wrong size on ControlRigComponent_SetControlPosition");
static_assert(offsetof(ControlRigComponent_SetControlPosition, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlPosition::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlPosition, Value) == 0x000008, "Member 'ControlRigComponent_SetControlPosition::Value' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlPosition, Space) == 0x000014, "Member 'ControlRigComponent_SetControlPosition::Space' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlRotator
// 0x0018 (0x0018 - 0x0000)
struct ControlRigComponent_SetControlRotator final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139C[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetControlRotator) == 0x000004, "Wrong alignment on ControlRigComponent_SetControlRotator");
static_assert(sizeof(ControlRigComponent_SetControlRotator) == 0x000018, "Wrong size on ControlRigComponent_SetControlRotator");
static_assert(offsetof(ControlRigComponent_SetControlRotator, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlRotator::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlRotator, Value) == 0x000008, "Member 'ControlRigComponent_SetControlRotator::Value' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlRotator, Space) == 0x000014, "Member 'ControlRigComponent_SetControlRotator::Space' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlScale
// 0x0018 (0x0018 - 0x0000)
struct ControlRigComponent_SetControlScale final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139D[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetControlScale) == 0x000004, "Wrong alignment on ControlRigComponent_SetControlScale");
static_assert(sizeof(ControlRigComponent_SetControlScale) == 0x000018, "Wrong size on ControlRigComponent_SetControlScale");
static_assert(offsetof(ControlRigComponent_SetControlScale, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlScale::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlScale, Value) == 0x000008, "Member 'ControlRigComponent_SetControlScale::Value' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlScale, Space) == 0x000014, "Member 'ControlRigComponent_SetControlScale::Space' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlTransform
// 0x0050 (0x0050 - 0x0000)
struct ControlRigComponent_SetControlTransform final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139E[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139F[0xF];                                     // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetControlTransform) == 0x000010, "Wrong alignment on ControlRigComponent_SetControlTransform");
static_assert(sizeof(ControlRigComponent_SetControlTransform) == 0x000050, "Wrong size on ControlRigComponent_SetControlTransform");
static_assert(offsetof(ControlRigComponent_SetControlTransform, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlTransform::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlTransform, Value) == 0x000010, "Member 'ControlRigComponent_SetControlTransform::Value' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlTransform, Space) == 0x000040, "Member 'ControlRigComponent_SetControlTransform::Space' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlVector2D
// 0x0010 (0x0010 - 0x0000)
struct ControlRigComponent_SetControlVector2D final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_SetControlVector2D) == 0x000004, "Wrong alignment on ControlRigComponent_SetControlVector2D");
static_assert(sizeof(ControlRigComponent_SetControlVector2D) == 0x000010, "Wrong size on ControlRigComponent_SetControlVector2D");
static_assert(offsetof(ControlRigComponent_SetControlVector2D, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlVector2D::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlVector2D, Value) == 0x000008, "Member 'ControlRigComponent_SetControlVector2D::Value' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetInitialBoneTransform
// 0x0050 (0x0050 - 0x0000)
struct ControlRigComponent_SetInitialBoneTransform final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A0[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialTransform;                                  // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A1[0xE];                                     // 0x0042(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetInitialBoneTransform) == 0x000010, "Wrong alignment on ControlRigComponent_SetInitialBoneTransform");
static_assert(sizeof(ControlRigComponent_SetInitialBoneTransform) == 0x000050, "Wrong size on ControlRigComponent_SetInitialBoneTransform");
static_assert(offsetof(ControlRigComponent_SetInitialBoneTransform, BoneName) == 0x000000, "Member 'ControlRigComponent_SetInitialBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetInitialBoneTransform, InitialTransform) == 0x000010, "Member 'ControlRigComponent_SetInitialBoneTransform::InitialTransform' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetInitialBoneTransform, Space) == 0x000040, "Member 'ControlRigComponent_SetInitialBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetInitialBoneTransform, bPropagateToChildren) == 0x000041, "Member 'ControlRigComponent_SetInitialBoneTransform::bPropagateToChildren' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetInitialSpaceTransform
// 0x0050 (0x0050 - 0x0000)
struct ControlRigComponent_SetInitialSpaceTransform final
{
public:
	class FName                                   SpaceName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A2[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialTransform;                                  // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A3[0xF];                                     // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetInitialSpaceTransform) == 0x000010, "Wrong alignment on ControlRigComponent_SetInitialSpaceTransform");
static_assert(sizeof(ControlRigComponent_SetInitialSpaceTransform) == 0x000050, "Wrong size on ControlRigComponent_SetInitialSpaceTransform");
static_assert(offsetof(ControlRigComponent_SetInitialSpaceTransform, SpaceName) == 0x000000, "Member 'ControlRigComponent_SetInitialSpaceTransform::SpaceName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetInitialSpaceTransform, InitialTransform) == 0x000010, "Member 'ControlRigComponent_SetInitialSpaceTransform::InitialTransform' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetInitialSpaceTransform, Space) == 0x000040, "Member 'ControlRigComponent_SetInitialSpaceTransform::Space' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetMappedElements
// 0x0010 (0x0010 - 0x0000)
struct ControlRigComponent_SetMappedElements final
{
public:
	TArray<struct FControlRigComponentMappedElement> NewMappedElements;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_SetMappedElements) == 0x000008, "Wrong alignment on ControlRigComponent_SetMappedElements");
static_assert(sizeof(ControlRigComponent_SetMappedElements) == 0x000010, "Wrong size on ControlRigComponent_SetMappedElements");
static_assert(offsetof(ControlRigComponent_SetMappedElements, NewMappedElements) == 0x000000, "Member 'ControlRigComponent_SetMappedElements::NewMappedElements' has a wrong offset!");

// Function ControlRig.ControlRigComponent.Update
// 0x0004 (0x0004 - 0x0000)
struct ControlRigComponent_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_Update) == 0x000004, "Wrong alignment on ControlRigComponent_Update");
static_assert(sizeof(ControlRigComponent_Update) == 0x000004, "Wrong size on ControlRigComponent_Update");
static_assert(offsetof(ControlRigComponent_Update, DeltaTime) == 0x000000, "Member 'ControlRigComponent_Update::DeltaTime' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetAbsoluteTime
// 0x0004 (0x0004 - 0x0000)
struct ControlRigComponent_GetAbsoluteTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetAbsoluteTime) == 0x000004, "Wrong alignment on ControlRigComponent_GetAbsoluteTime");
static_assert(sizeof(ControlRigComponent_GetAbsoluteTime) == 0x000004, "Wrong size on ControlRigComponent_GetAbsoluteTime");
static_assert(offsetof(ControlRigComponent_GetAbsoluteTime, ReturnValue) == 0x000000, "Member 'ControlRigComponent_GetAbsoluteTime::ReturnValue' has a wrong offset!");

}

