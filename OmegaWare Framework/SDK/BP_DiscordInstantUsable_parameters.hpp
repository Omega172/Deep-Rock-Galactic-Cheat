#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DiscordInstantUsable

#include "Basic.hpp"


namespace CG::Params
{

// Function BP_DiscordInstantUsable.BP_DiscordInstantUsable_C.BPCanUse
// 0x0030 (0x0030 - 0x0000)
struct BP_DiscordInstantUsable_C_BPCanUse final
{
public:
	class APlayerCharacter*                       User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        UseCollider;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AF4[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFSDPlayerController*                   CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_SpaceRig_C*        K2Node_DynamicCast_AsBP_Player_Controller_Space_Rig; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DiscordInstantUsable_C_BPCanUse) == 0x000008, "Wrong alignment on BP_DiscordInstantUsable_C_BPCanUse");
static_assert(sizeof(BP_DiscordInstantUsable_C_BPCanUse) == 0x000030, "Wrong size on BP_DiscordInstantUsable_C_BPCanUse");
static_assert(offsetof(BP_DiscordInstantUsable_C_BPCanUse, User) == 0x000000, "Member 'BP_DiscordInstantUsable_C_BPCanUse::User' has a wrong offset!");
static_assert(offsetof(BP_DiscordInstantUsable_C_BPCanUse, UseCollider) == 0x000008, "Member 'BP_DiscordInstantUsable_C_BPCanUse::UseCollider' has a wrong offset!");
static_assert(offsetof(BP_DiscordInstantUsable_C_BPCanUse, ReturnValue) == 0x000010, "Member 'BP_DiscordInstantUsable_C_BPCanUse::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DiscordInstantUsable_C_BPCanUse, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'BP_DiscordInstantUsable_C_BPCanUse::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DiscordInstantUsable_C_BPCanUse, K2Node_DynamicCast_AsBP_Player_Controller_Space_Rig) == 0x000020, "Member 'BP_DiscordInstantUsable_C_BPCanUse::K2Node_DynamicCast_AsBP_Player_Controller_Space_Rig' has a wrong offset!");
static_assert(offsetof(BP_DiscordInstantUsable_C_BPCanUse, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_DiscordInstantUsable_C_BPCanUse::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

