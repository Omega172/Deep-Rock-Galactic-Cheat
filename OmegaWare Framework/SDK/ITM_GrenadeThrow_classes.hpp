#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITM_GrenadeThrow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FSD_classes.hpp"


namespace CG
{

// BlueprintGeneratedClass ITM_GrenadeThrow.ITM_GrenadeThrow_C
// 0x00E8 (0x04F8 - 0x0410)
class AITM_GrenadeThrow_C final : public AThrownGrenadeItem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFSDAudioComponent*                     CookTicking;                                       // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCrosshairAggregator*                   CrosshairAggregator;                               // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EndPoint;                                          // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartTangent;                                      // 0x0448(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndTangent;                                        // 0x0454(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x0460(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3748[0x4];                                     // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     ScaleCurve;                                        // 0x0470(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_ITM_GrenadeThrow(int32 EntryPoint);
	void UpdateCookTime(float Time);
	void GrenadeThrown();
	void Set_Is_Visible(bool Visible);
	void ReceiveBeginPlay();
	void RecieveUnequipped();
	void RecieveEquipped();
	void ReceiveTick(float DeltaSeconds);
	void UpdateSpline(TArray<struct FVector>& Array, float& DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ITM_GrenadeThrow_C">();
	}
	static class AITM_GrenadeThrow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AITM_GrenadeThrow_C>();
	}
};
static_assert(alignof(AITM_GrenadeThrow_C) == 0x000008, "Wrong alignment on AITM_GrenadeThrow_C");
static_assert(sizeof(AITM_GrenadeThrow_C) == 0x0004F8, "Wrong size on AITM_GrenadeThrow_C");
static_assert(offsetof(AITM_GrenadeThrow_C, UberGraphFrame) == 0x000410, "Member 'AITM_GrenadeThrow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AITM_GrenadeThrow_C, CookTicking) == 0x000418, "Member 'AITM_GrenadeThrow_C::CookTicking' has a wrong offset!");
static_assert(offsetof(AITM_GrenadeThrow_C, CrosshairAggregator) == 0x000420, "Member 'AITM_GrenadeThrow_C::CrosshairAggregator' has a wrong offset!");
static_assert(offsetof(AITM_GrenadeThrow_C, Billboard) == 0x000428, "Member 'AITM_GrenadeThrow_C::Billboard' has a wrong offset!");
static_assert(offsetof(AITM_GrenadeThrow_C, EndPoint) == 0x000430, "Member 'AITM_GrenadeThrow_C::EndPoint' has a wrong offset!");
static_assert(offsetof(AITM_GrenadeThrow_C, SplineMesh) == 0x000438, "Member 'AITM_GrenadeThrow_C::SplineMesh' has a wrong offset!");
static_assert(offsetof(AITM_GrenadeThrow_C, DefaultSceneRoot) == 0x000440, "Member 'AITM_GrenadeThrow_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AITM_GrenadeThrow_C, StartTangent) == 0x000448, "Member 'AITM_GrenadeThrow_C::StartTangent' has a wrong offset!");
static_assert(offsetof(AITM_GrenadeThrow_C, EndTangent) == 0x000454, "Member 'AITM_GrenadeThrow_C::EndTangent' has a wrong offset!");
static_assert(offsetof(AITM_GrenadeThrow_C, EndLocation) == 0x000460, "Member 'AITM_GrenadeThrow_C::EndLocation' has a wrong offset!");
static_assert(offsetof(AITM_GrenadeThrow_C, ScaleCurve) == 0x000470, "Member 'AITM_GrenadeThrow_C::ScaleCurve' has a wrong offset!");

}

