#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Announcement_Label

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace CG
{

// WidgetBlueprintGeneratedClass Announcement_Label.Announcement_Label_C
// 0x0070 (0x02D0 - 0x0260)
class UAnnouncement_Label_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnnounceAnim;                                      // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Icon;                                              // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Label;                                             // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Root;                                              // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0288(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FLinearColor                           TextColor;                                         // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             IconTexture;                                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           Icon_Tint;                                         // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         StartDelay;                                        // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Announcement_Label(int32 EntryPoint);
	void OnAnnounceAnimFinished();
	void Construct();
	void PreConstruct(bool IsDesignTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Announcement_Label_C">();
	}
	static class UAnnouncement_Label_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnnouncement_Label_C>();
	}
};
static_assert(alignof(UAnnouncement_Label_C) == 0x000008, "Wrong alignment on UAnnouncement_Label_C");
static_assert(sizeof(UAnnouncement_Label_C) == 0x0002D0, "Wrong size on UAnnouncement_Label_C");
static_assert(offsetof(UAnnouncement_Label_C, UberGraphFrame) == 0x000260, "Member 'UAnnouncement_Label_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAnnouncement_Label_C, AnnounceAnim) == 0x000268, "Member 'UAnnouncement_Label_C::AnnounceAnim' has a wrong offset!");
static_assert(offsetof(UAnnouncement_Label_C, Icon) == 0x000270, "Member 'UAnnouncement_Label_C::Icon' has a wrong offset!");
static_assert(offsetof(UAnnouncement_Label_C, Label) == 0x000278, "Member 'UAnnouncement_Label_C::Label' has a wrong offset!");
static_assert(offsetof(UAnnouncement_Label_C, Root) == 0x000280, "Member 'UAnnouncement_Label_C::Root' has a wrong offset!");
static_assert(offsetof(UAnnouncement_Label_C, Text) == 0x000288, "Member 'UAnnouncement_Label_C::Text' has a wrong offset!");
static_assert(offsetof(UAnnouncement_Label_C, TextColor) == 0x0002A0, "Member 'UAnnouncement_Label_C::TextColor' has a wrong offset!");
static_assert(offsetof(UAnnouncement_Label_C, IconTexture) == 0x0002B0, "Member 'UAnnouncement_Label_C::IconTexture' has a wrong offset!");
static_assert(offsetof(UAnnouncement_Label_C, Icon_Tint) == 0x0002B8, "Member 'UAnnouncement_Label_C::Icon_Tint' has a wrong offset!");
static_assert(offsetof(UAnnouncement_Label_C, StartDelay) == 0x0002C8, "Member 'UAnnouncement_Label_C::StartDelay' has a wrong offset!");

}

