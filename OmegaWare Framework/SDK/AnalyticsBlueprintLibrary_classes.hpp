#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnalyticsBlueprintLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace CG
{

// Class AnalyticsBlueprintLibrary.AnalyticsBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UAnalyticsBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void EndSession();
	static void FlushEvents();
	static class FString GetSessionId();
	static class FString GetUserId();
	static struct FAnalyticsEventAttr MakeEventAttribute(const class FString& AttributeName, const class FString& AttributeValue);
	static void RecordCurrencyGiven(const class FString& GameCurrencyType, int32 GameCurrencyAmount);
	static void RecordCurrencyGivenWithAttributes(const class FString& GameCurrencyType, int32 GameCurrencyAmount, const TArray<struct FAnalyticsEventAttr>& Attributes);
	static void RecordCurrencyPurchase(const class FString& GameCurrencyType, int32 GameCurrencyAmount, const class FString& RealCurrencyType, float RealMoneyCost, const class FString& PaymentProvider);
	static void RecordError(const class FString& Error);
	static void RecordErrorWithAttributes(const class FString& Error, const TArray<struct FAnalyticsEventAttr>& Attributes);
	static void RecordEvent(const class FString& EventName);
	static void RecordEventWithAttribute(const class FString& EventName, const class FString& AttributeName, const class FString& AttributeValue);
	static void RecordEventWithAttributes(const class FString& EventName, const TArray<struct FAnalyticsEventAttr>& Attributes);
	static void RecordItemPurchase(const class FString& ItemID, const class FString& Currency, int32 PerItemCost, int32 ItemQuantity);
	static void RecordProgress(const class FString& ProgressType, const class FString& ProgressName);
	static void RecordProgressWithAttributes(const class FString& ProgressType, const class FString& ProgressName, const TArray<struct FAnalyticsEventAttr>& Attributes);
	static void RecordProgressWithFullHierarchyAndAttributes(const class FString& ProgressType, const TArray<class FString>& ProgressNames, const TArray<struct FAnalyticsEventAttr>& Attributes);
	static void RecordSimpleCurrencyPurchase(const class FString& GameCurrencyType, int32 GameCurrencyAmount);
	static void RecordSimpleCurrencyPurchaseWithAttributes(const class FString& GameCurrencyType, int32 GameCurrencyAmount, const TArray<struct FAnalyticsEventAttr>& Attributes);
	static void RecordSimpleItemPurchase(const class FString& ItemID, int32 ItemQuantity);
	static void RecordSimpleItemPurchaseWithAttributes(const class FString& ItemID, int32 ItemQuantity, const TArray<struct FAnalyticsEventAttr>& Attributes);
	static void SetAge(int32 Age);
	static void SetBuildInfo(const class FString& BuildInfo);
	static void SetGender(const class FString& Gender);
	static void SetLocation(const class FString& Location);
	static void SetSessionId(const class FString& SessionId);
	static void SetUserId(const class FString& UserId);
	static bool StartSession();
	static bool StartSessionWithAttributes(const TArray<struct FAnalyticsEventAttr>& Attributes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnalyticsBlueprintLibrary">();
	}
	static class UAnalyticsBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnalyticsBlueprintLibrary>();
	}
};
static_assert(alignof(UAnalyticsBlueprintLibrary) == 0x000008, "Wrong alignment on UAnalyticsBlueprintLibrary");
static_assert(sizeof(UAnalyticsBlueprintLibrary) == 0x000028, "Wrong size on UAnalyticsBlueprintLibrary");

}

