#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WND_Skins

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_structs.hpp"
#include "ENUM_MenuColors_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace CG
{

// WidgetBlueprintGeneratedClass WND_Skins.WND_Skins_C
// 0x00C0 (0x0320 - 0x0260)
class UWND_Skins_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ButtonHover;                                       // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       WindowAppear;                                      // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBasic_Menu_ColorBar_C*                 Basic_Menu_ColorBar;                               // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_FocusableCanvas_C*                  ItemsWindow;                                       // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UITM_ItemUnlockedIcon_C*                ITM_ItemUnlockedIcon;                              // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UITM_SkinIcon_C*                        SelectedViewer;                                    // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                SelectorButton;                                    // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUniformGridPanel*                      SkinGrid;                                          // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SkinLabel;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UItemID*                                ItemID;                                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UITM_SkinItem_C*>                SkinWidgets;                                       // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         Columns;                                           // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseHovering;                                     // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3801[0x3];                                     // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxColumns;                                        // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftToRight;                                       // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_3802[0x3];                                     // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreviewCount;                                      // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3803[0x4];                                     // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             PingSkin;                                          // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UPlayerCharacterID*                     CharaterID;                                        // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkinHasNotification;                               // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EItemSkinType                                 SkinType;                                          // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3804[0x6];                                     // 0x02FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnOpened;                                          // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          HighlightFirstItem;                                // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_3805[0x7];                                     // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemSkin*                              DefaultSkin;                                       // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void PingSkin__DelegateSignature(class UItemSkin* Skin);
	void OnOpened__DelegateSignature();
	void ExecuteUbergraph_WND_Skins(int32 EntryPoint);
	void OnSkinChangedEvent_Event_0();
	void BndEvt__UI_FocusableCanvas_K2Node_ComponentBoundEvent_3_OnHoverChanged__DelegateSignature(class UWidget* Widget, bool Param_IsHovered);
	void OnFocusLost(const struct FFocusEvent& InFocusEvent);
	void Construct();
	void OnUnhoveringSkin(class UITM_SkinItem_C* SkinItem);
	void PreviewSkin(class UItemSkin* Skin);
	void OnHoveringSkin(class UITM_SkinItem_C* SkinItem);
	void BndEvt__SelectorButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__SelectorButton_K2Node_ComponentBoundEvent_7_OnButtonHoverEvent__DelegateSignature();
	void OnSkinClicked(class UITM_SkinItem_C* Item);
	void OnSkinWidgetAdded(class UITM_SkinItem_C* SkinWidget);
	void PreConstruct(bool IsDesignTime);
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void SetSkinData(class UItemID* ItemClass, class UPlayerCharacterID* PlayerCharacterClass);
	void AddSkin(class UItemSkin* InSkin, class UClass* InItem, class UClass* InPlayerCharacter, int32 InIndex, class UITM_SkinItem_C** OutSkinWidget);
	void SetWindowVisible(bool Param_IsVisible, bool* VisibilityChanged, bool* NewVisibility);
	void PopulateSkinWindow(bool* IsEmpty);
	void IsWindowVisible(bool* Visible);
	void UpdateBorder();
	void GetItemsWindow(class UWidget** Widget);
	void RefreshWindowItems();
	void RefreshSelectorButton();
	void OnUnlockedSkin(class UItemSkin* SkinItem);
	void ClearSkins();
	void RefreshLoadout();
	class UItemSkin* SelectSkinOrEquipped(class UItemSkin* InSkin);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WND_Skins_C">();
	}
	static class UWND_Skins_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWND_Skins_C>();
	}
};
static_assert(alignof(UWND_Skins_C) == 0x000008, "Wrong alignment on UWND_Skins_C");
static_assert(sizeof(UWND_Skins_C) == 0x000320, "Wrong size on UWND_Skins_C");
static_assert(offsetof(UWND_Skins_C, UberGraphFrame) == 0x000260, "Member 'UWND_Skins_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, ButtonHover) == 0x000268, "Member 'UWND_Skins_C::ButtonHover' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, WindowAppear) == 0x000270, "Member 'UWND_Skins_C::WindowAppear' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, Basic_Menu_ColorBar) == 0x000278, "Member 'UWND_Skins_C::Basic_Menu_ColorBar' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, ItemsWindow) == 0x000280, "Member 'UWND_Skins_C::ItemsWindow' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, ITM_ItemUnlockedIcon) == 0x000288, "Member 'UWND_Skins_C::ITM_ItemUnlockedIcon' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, SelectedViewer) == 0x000290, "Member 'UWND_Skins_C::SelectedViewer' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, SelectorButton) == 0x000298, "Member 'UWND_Skins_C::SelectorButton' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, SkinGrid) == 0x0002A0, "Member 'UWND_Skins_C::SkinGrid' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, SkinLabel) == 0x0002A8, "Member 'UWND_Skins_C::SkinLabel' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, ItemID) == 0x0002B0, "Member 'UWND_Skins_C::ItemID' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, SkinWidgets) == 0x0002B8, "Member 'UWND_Skins_C::SkinWidgets' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, Columns) == 0x0002C8, "Member 'UWND_Skins_C::Columns' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, MouseHovering) == 0x0002CC, "Member 'UWND_Skins_C::MouseHovering' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, MaxColumns) == 0x0002D0, "Member 'UWND_Skins_C::MaxColumns' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, LeftToRight) == 0x0002D4, "Member 'UWND_Skins_C::LeftToRight' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, PreviewCount) == 0x0002D8, "Member 'UWND_Skins_C::PreviewCount' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, PingSkin) == 0x0002E0, "Member 'UWND_Skins_C::PingSkin' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, CharaterID) == 0x0002F0, "Member 'UWND_Skins_C::CharaterID' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, SkinHasNotification) == 0x0002F8, "Member 'UWND_Skins_C::SkinHasNotification' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, SkinType) == 0x0002F9, "Member 'UWND_Skins_C::SkinType' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, OnOpened) == 0x000300, "Member 'UWND_Skins_C::OnOpened' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, HighlightFirstItem) == 0x000310, "Member 'UWND_Skins_C::HighlightFirstItem' has a wrong offset!");
static_assert(offsetof(UWND_Skins_C, DefaultSkin) == 0x000318, "Member 'UWND_Skins_C::DefaultSkin' has a wrong offset!");

}

