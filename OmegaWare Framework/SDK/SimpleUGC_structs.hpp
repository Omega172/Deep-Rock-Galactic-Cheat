#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleUGC

#include "Basic.hpp"


namespace CG
{

// Enum SimpleUGC.EUGCApprovalStatus
// NumValues: 0x0005
enum class EUGCApprovalStatus : uint8
{
	Fully                                    = 0,
	Progression                              = 1,
	Sandbox                                  = 2,
	All                                      = 255,
	EUGCApprovalStatus_MAX                   = 256,
};

// Enum SimpleUGC.EPackageSortField
// NumValues: 0x0006
enum class EPackageSortField : uint8
{
	None                                     = 0,
	Name                                     = 1,
	Status                                   = 2,
	Author                                   = 3,
	Mounted                                  = 4,
	EPackageSortField_MAX                    = 5,
};

// Enum SimpleUGC.EModioRequestType
// NumValues: 0x000B
enum class EModioRequestType : uint8
{
	Authentication                           = 0,
	K2_Authentication                        = 1,
	TermsOfUse                               = 2,
	FetchModUpdates                          = 3,
	ModMetaData                              = 4,
	Thumbnail                                = 5,
	Subscribe                                = 6,
	ModDependencySubscribe                   = 7,
	ModDependencyList                        = 8,
	ModDependencyAdd                         = 9,
	EModioRequestType_MAX                    = 10,
};

// Enum SimpleUGC.EUGCPackageError
// NumValues: 0x0004
enum class EUGCPackageError : uint8
{
	Exists                                   = 0,
	Invalid                                  = 1,
	Other                                    = 2,
	EUGCPackageError_MAX                     = 3,
};

// Enum SimpleUGC.EUGCDownloadVersion
// NumValues: 0x0004
enum class EUGCDownloadVersion : uint8
{
	Optional                                 = 0,
	Required                                 = 1,
	All                                      = 255,
	EUGCDownloadVersion_MAX                  = 256,
};

// Enum SimpleUGC.EUGCBlueprintSpawning
// NumValues: 0x0004
enum class EUGCBlueprintSpawning : uint8
{
	Spacerig                                 = 0,
	Cave                                     = 1,
	Other                                    = 2,
	EUGCBlueprintSpawning_MAX                = 3,
};

// ScriptStruct SimpleUGC.ModDefinition
// 0x0028 (0x0028 - 0x0000)
struct FModDefinition final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Category;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C6[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModDefinition) == 0x000008, "Wrong alignment on FModDefinition");
static_assert(sizeof(FModDefinition) == 0x000028, "Wrong size on FModDefinition");
static_assert(offsetof(FModDefinition, Name) == 0x000000, "Member 'FModDefinition::Name' has a wrong offset!");
static_assert(offsetof(FModDefinition, Category) == 0x000010, "Member 'FModDefinition::Category' has a wrong offset!");
static_assert(offsetof(FModDefinition, Version) == 0x000018, "Member 'FModDefinition::Version' has a wrong offset!");

// ScriptStruct SimpleUGC.Mods
// 0x0010 (0x0010 - 0x0000)
struct FMods final
{
public:
	TArray<struct FModDefinition>                 Mods;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMods) == 0x000008, "Wrong alignment on FMods");
static_assert(sizeof(FMods) == 0x000010, "Wrong size on FMods");
static_assert(offsetof(FMods, Mods) == 0x000000, "Member 'FMods::Mods' has a wrong offset!");

}

