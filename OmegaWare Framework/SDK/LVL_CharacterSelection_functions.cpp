#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LVL_CharacterSelection

#include "Basic.hpp"

#include "LVL_CharacterSelection_classes.hpp"
#include "LVL_CharacterSelection_parameters.hpp"


namespace CG
{

// Function LVL_CharacterSelection.LVL_CharacterSelection_C.ExecuteUbergraph_LVL_CharacterSelection
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALVL_CharacterSelection_C::ExecuteUbergraph_LVL_CharacterSelection(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LVL_CharacterSelection_C", "ExecuteUbergraph_LVL_CharacterSelection");

	Params::LVL_CharacterSelection_C_ExecuteUbergraph_LVL_CharacterSelection Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LVL_CharacterSelection.LVL_CharacterSelection_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ALVL_CharacterSelection_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LVL_CharacterSelection_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LVL_CharacterSelection.LVL_CharacterSelection_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ALVL_CharacterSelection_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LVL_CharacterSelection_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LVL_CharacterSelection.LVL_CharacterSelection_C.StartLevelSeq
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   CharacterLevelSequence                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALVL_CharacterSelection_C::StartLevelSeq(class ULevelSequence* CharacterLevelSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LVL_CharacterSelection_C", "StartLevelSeq");

	Params::LVL_CharacterSelection_C_StartLevelSeq Parms{};

	Parms.CharacterLevelSequence = CharacterLevelSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LVL_CharacterSelection.LVL_CharacterSelection_C.StartPlay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharselectionCameraLocation            SelectionLocation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALVL_CharacterSelection_C::StartPlay(ECharselectionCameraLocation SelectionLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LVL_CharacterSelection_C", "StartPlay");

	Params::LVL_CharacterSelection_C_StartPlay Parms{};

	Parms.SelectionLocation = SelectionLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LVL_CharacterSelection.LVL_CharacterSelection_C.StopPlay
// (BlueprintCallable, BlueprintEvent)

void ALVL_CharacterSelection_C::StopPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LVL_CharacterSelection_C", "StopPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LVL_CharacterSelection.LVL_CharacterSelection_C.StartPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharselectionCameraLocation            CamSetting                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALVL_CharacterSelection_C::StartPlayer(ECharselectionCameraLocation CamSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LVL_CharacterSelection_C", "StartPlayer");

	Params::LVL_CharacterSelection_C_StartPlayer Parms{};

	Parms.CamSetting = CamSetting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LVL_CharacterSelection.LVL_CharacterSelection_C.StopPlayer
// (Public, BlueprintCallable, BlueprintEvent)

void ALVL_CharacterSelection_C::StopPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LVL_CharacterSelection_C", "StopPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LVL_CharacterSelection.LVL_CharacterSelection_C.PlaySpecificSequence
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALVL_CharacterSelection_C::PlaySpecificSequence(class ULevelSequence* LevelSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LVL_CharacterSelection_C", "PlaySpecificSequence");

	Params::LVL_CharacterSelection_C_PlaySpecificSequence Parms{};

	Parms.LevelSequence = LevelSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LVL_CharacterSelection.LVL_CharacterSelection_C.MakeVanity
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    UseSleves                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FEquippedVanity                  UseSleveless                                           (Parm, OutParm)

void ALVL_CharacterSelection_C::MakeVanity(bool UseSleves, struct FEquippedVanity* UseSleveless)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LVL_CharacterSelection_C", "MakeVanity");

	Params::LVL_CharacterSelection_C_MakeVanity Parms{};

	Parms.UseSleves = UseSleves;

	UObject::ProcessEvent(Func, &Parms);

	if (UseSleveless != nullptr)
		*UseSleveless = std::move(Parms.UseSleveless);
}

}

