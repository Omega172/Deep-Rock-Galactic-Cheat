#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlurBackground

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace CG::Params
{

// Function BlurBackground.BlurBackground_C.ExecuteUbergraph_BlurBackground
// 0x0008 (0x0008 - 0x0000)
struct BlurBackground_C_ExecuteUbergraph_BlurBackground final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlurBackground_C_ExecuteUbergraph_BlurBackground) == 0x000004, "Wrong alignment on BlurBackground_C_ExecuteUbergraph_BlurBackground");
static_assert(sizeof(BlurBackground_C_ExecuteUbergraph_BlurBackground) == 0x000008, "Wrong size on BlurBackground_C_ExecuteUbergraph_BlurBackground");
static_assert(offsetof(BlurBackground_C_ExecuteUbergraph_BlurBackground, EntryPoint) == 0x000000, "Member 'BlurBackground_C_ExecuteUbergraph_BlurBackground::EntryPoint' has a wrong offset!");
static_assert(offsetof(BlurBackground_C_ExecuteUbergraph_BlurBackground, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BlurBackground_C_ExecuteUbergraph_BlurBackground::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function BlurBackground.BlurBackground_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BlurBackground_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlurBackground_C_PreConstruct) == 0x000001, "Wrong alignment on BlurBackground_C_PreConstruct");
static_assert(sizeof(BlurBackground_C_PreConstruct) == 0x000001, "Wrong size on BlurBackground_C_PreConstruct");
static_assert(offsetof(BlurBackground_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BlurBackground_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BlurBackground.BlurBackground_C.SetColor
// 0x0010 (0x0010 - 0x0000)
struct BlurBackground_C_SetColor final
{
public:
	struct FLinearColor                           Param_Tint;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BlurBackground_C_SetColor) == 0x000004, "Wrong alignment on BlurBackground_C_SetColor");
static_assert(sizeof(BlurBackground_C_SetColor) == 0x000010, "Wrong size on BlurBackground_C_SetColor");
static_assert(offsetof(BlurBackground_C_SetColor, Param_Tint) == 0x000000, "Member 'BlurBackground_C_SetColor::Param_Tint' has a wrong offset!");

// Function BlurBackground.BlurBackground_C.SetBlur
// 0x0004 (0x0004 - 0x0000)
struct BlurBackground_C_SetBlur final
{
public:
	float                                         InBlur;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BlurBackground_C_SetBlur) == 0x000004, "Wrong alignment on BlurBackground_C_SetBlur");
static_assert(sizeof(BlurBackground_C_SetBlur) == 0x000004, "Wrong size on BlurBackground_C_SetBlur");
static_assert(offsetof(BlurBackground_C_SetBlur, InBlur) == 0x000000, "Member 'BlurBackground_C_SetBlur::InBlur' has a wrong offset!");

}

