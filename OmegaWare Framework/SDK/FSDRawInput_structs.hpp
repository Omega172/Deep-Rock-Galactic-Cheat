#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FSDRawInput

#include "Basic.hpp"

#include "InputCore_structs.hpp"


namespace CG
{

// ScriptStruct FSDRawInput.RegisteredDeviceInfo
// 0x0020 (0x0020 - 0x0000)
struct FRegisteredDeviceInfo final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VendorID;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductID;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegisteredDeviceInfo) == 0x000008, "Wrong alignment on FRegisteredDeviceInfo");
static_assert(sizeof(FRegisteredDeviceInfo) == 0x000020, "Wrong size on FRegisteredDeviceInfo");
static_assert(offsetof(FRegisteredDeviceInfo, Handle) == 0x000000, "Member 'FRegisteredDeviceInfo::Handle' has a wrong offset!");
static_assert(offsetof(FRegisteredDeviceInfo, VendorID) == 0x000004, "Member 'FRegisteredDeviceInfo::VendorID' has a wrong offset!");
static_assert(offsetof(FRegisteredDeviceInfo, ProductID) == 0x000008, "Member 'FRegisteredDeviceInfo::ProductID' has a wrong offset!");
static_assert(offsetof(FRegisteredDeviceInfo, DeviceName) == 0x000010, "Member 'FRegisteredDeviceInfo::DeviceName' has a wrong offset!");

// ScriptStruct FSDRawInput.RawInputDeviceAxisToButtonProperties
// 0x0020 (0x0020 - 0x0000)
struct FRawInputDeviceAxisToButtonProperties final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisThreshold;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ButtonKey;                                         // 0x0008(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRawInputDeviceAxisToButtonProperties) == 0x000008, "Wrong alignment on FRawInputDeviceAxisToButtonProperties");
static_assert(sizeof(FRawInputDeviceAxisToButtonProperties) == 0x000020, "Wrong size on FRawInputDeviceAxisToButtonProperties");
static_assert(offsetof(FRawInputDeviceAxisToButtonProperties, AxisValue) == 0x000000, "Member 'FRawInputDeviceAxisToButtonProperties::AxisValue' has a wrong offset!");
static_assert(offsetof(FRawInputDeviceAxisToButtonProperties, AxisThreshold) == 0x000004, "Member 'FRawInputDeviceAxisToButtonProperties::AxisThreshold' has a wrong offset!");
static_assert(offsetof(FRawInputDeviceAxisToButtonProperties, ButtonKey) == 0x000008, "Member 'FRawInputDeviceAxisToButtonProperties::ButtonKey' has a wrong offset!");

// ScriptStruct FSDRawInput.RawInputDeviceAxisProperties
// 0x0038 (0x0038 - 0x0000)
struct FRawInputDeviceAxisProperties final
{
public:
	uint8                                         bEnabled : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMapToButton : 1;                                  // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_10D2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInverted : 1;                                     // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGamepadStick : 1;                                 // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_10D3[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRawInputDeviceAxisToButtonProperties> AxisToButtonMapping;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRawInputDeviceAxisProperties) == 0x000008, "Wrong alignment on FRawInputDeviceAxisProperties");
static_assert(sizeof(FRawInputDeviceAxisProperties) == 0x000038, "Wrong size on FRawInputDeviceAxisProperties");
static_assert(offsetof(FRawInputDeviceAxisProperties, Key) == 0x000008, "Member 'FRawInputDeviceAxisProperties::Key' has a wrong offset!");
static_assert(offsetof(FRawInputDeviceAxisProperties, Offset) == 0x000024, "Member 'FRawInputDeviceAxisProperties::Offset' has a wrong offset!");
static_assert(offsetof(FRawInputDeviceAxisProperties, AxisToButtonMapping) == 0x000028, "Member 'FRawInputDeviceAxisProperties::AxisToButtonMapping' has a wrong offset!");

// ScriptStruct FSDRawInput.RawInputDeviceButtonProperties
// 0x0020 (0x0020 - 0x0000)
struct FRawInputDeviceButtonProperties final
{
public:
	uint8                                         bEnabled : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_10D4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRawInputDeviceButtonProperties) == 0x000008, "Wrong alignment on FRawInputDeviceButtonProperties");
static_assert(sizeof(FRawInputDeviceButtonProperties) == 0x000020, "Wrong size on FRawInputDeviceButtonProperties");
static_assert(offsetof(FRawInputDeviceButtonProperties, Key) == 0x000008, "Member 'FRawInputDeviceButtonProperties::Key' has a wrong offset!");

// ScriptStruct FSDRawInput.RawInputDeviceConfiguration
// 0x0040 (0x0040 - 0x0000)
struct FRawInputDeviceConfiguration final
{
public:
	class FString                                 VendorID;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductID;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRawInputDeviceAxisProperties>  AxisProperties;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRawInputDeviceButtonProperties> ButtonProperties;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRawInputDeviceConfiguration) == 0x000008, "Wrong alignment on FRawInputDeviceConfiguration");
static_assert(sizeof(FRawInputDeviceConfiguration) == 0x000040, "Wrong size on FRawInputDeviceConfiguration");
static_assert(offsetof(FRawInputDeviceConfiguration, VendorID) == 0x000000, "Member 'FRawInputDeviceConfiguration::VendorID' has a wrong offset!");
static_assert(offsetof(FRawInputDeviceConfiguration, ProductID) == 0x000010, "Member 'FRawInputDeviceConfiguration::ProductID' has a wrong offset!");
static_assert(offsetof(FRawInputDeviceConfiguration, AxisProperties) == 0x000020, "Member 'FRawInputDeviceConfiguration::AxisProperties' has a wrong offset!");
static_assert(offsetof(FRawInputDeviceConfiguration, ButtonProperties) == 0x000030, "Member 'FRawInputDeviceConfiguration::ButtonProperties' has a wrong offset!");

}

