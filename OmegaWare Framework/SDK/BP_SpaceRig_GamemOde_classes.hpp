#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpaceRig_GamemOde

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_structs.hpp"
#include "FSD_classes.hpp"


namespace CG
{

// BlueprintGeneratedClass BP_SpaceRig_GamemOde.BP_SpaceRig_Gamemode_C
// 0x0018 (0x0520 - 0x0508)
class ABP_SpaceRig_Gamemode_C final : public AFSDGameModeSpaceRig
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0508(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDifficultyManager*                     DifficultyManager;                                 // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SpaceRig_Gamemode(int32 EntryPoint);
	void On_online_privilige_checked(const class APlayerState* CheckedPlayerState, EBlueprintableUserPrivileges CheckedPrivilege, EBlueprintablePrivilegeResults PrivilegeResult);
	void InstantlyStartMission();
	void ControllerReady(class AFSDPlayerController* Target);
	void K2_OnRestartPlayer(class AController* NewPlayer);
	void K2_OnLogout(class AController* ExitingController);
	void OnCountdownComplete();
	void ReceiveBeginPlay();
	void OnSuccess_509E599D4BB91C15BA2979B190501E9F();
	void OnFailure_509E599D4BB91C15BA2979B190501E9F();
	void OnSuccess_1E75EB674DDE2C1E6C7EC18D18AFDB55();
	void OnFailure_1E75EB674DDE2C1E6C7EC18D18AFDB55();
	class UClass* GetDefaultPawnClassForController(class AController* InController);
	void GetGameState(class ABP_GameState_SpaceRig_C** Param_GameState);
	class AActor* ChoosePlayerStart(class AController* Player);
	void SelectRandomAvailableClass(class AFSDPlayerState* Player);
	void SendMissionStartAnalytics();
	bool PlayerCanRestart(class APlayerController* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SpaceRig_Gamemode_C">();
	}
	static class ABP_SpaceRig_Gamemode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SpaceRig_Gamemode_C>();
	}
};
static_assert(alignof(ABP_SpaceRig_Gamemode_C) == 0x000008, "Wrong alignment on ABP_SpaceRig_Gamemode_C");
static_assert(sizeof(ABP_SpaceRig_Gamemode_C) == 0x000520, "Wrong size on ABP_SpaceRig_Gamemode_C");
static_assert(offsetof(ABP_SpaceRig_Gamemode_C, UberGraphFrame) == 0x000508, "Member 'ABP_SpaceRig_Gamemode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Gamemode_C, DifficultyManager) == 0x000510, "Member 'ABP_SpaceRig_Gamemode_C::DifficultyManager' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Gamemode_C, DefaultSceneRoot) == 0x000518, "Member 'ABP_SpaceRig_Gamemode_C::DefaultSceneRoot' has a wrong offset!");

}

