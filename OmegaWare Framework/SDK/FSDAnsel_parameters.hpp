#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FSDAnsel

#include "Basic.hpp"

#include "FSDAnsel_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace CG::Params
{

// Function FSDAnsel.FSDAnselFunctionLibrary.ConstrainCameraByDistance
// 0x0040 (0x0040 - 0x0000)
struct FSDAnselFunctionLibrary_ConstrainCameraByDistance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewCameraLocation;                                 // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousCameraLocation;                            // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginalCameraLocation;                            // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCameraLocation;                                 // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFA[0x4];                                      // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSDAnselFunctionLibrary_ConstrainCameraByDistance) == 0x000008, "Wrong alignment on FSDAnselFunctionLibrary_ConstrainCameraByDistance");
static_assert(sizeof(FSDAnselFunctionLibrary_ConstrainCameraByDistance) == 0x000040, "Wrong size on FSDAnselFunctionLibrary_ConstrainCameraByDistance");
static_assert(offsetof(FSDAnselFunctionLibrary_ConstrainCameraByDistance, WorldContextObject) == 0x000000, "Member 'FSDAnselFunctionLibrary_ConstrainCameraByDistance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FSDAnselFunctionLibrary_ConstrainCameraByDistance, NewCameraLocation) == 0x000008, "Member 'FSDAnselFunctionLibrary_ConstrainCameraByDistance::NewCameraLocation' has a wrong offset!");
static_assert(offsetof(FSDAnselFunctionLibrary_ConstrainCameraByDistance, PreviousCameraLocation) == 0x000014, "Member 'FSDAnselFunctionLibrary_ConstrainCameraByDistance::PreviousCameraLocation' has a wrong offset!");
static_assert(offsetof(FSDAnselFunctionLibrary_ConstrainCameraByDistance, OriginalCameraLocation) == 0x000020, "Member 'FSDAnselFunctionLibrary_ConstrainCameraByDistance::OriginalCameraLocation' has a wrong offset!");
static_assert(offsetof(FSDAnselFunctionLibrary_ConstrainCameraByDistance, OutCameraLocation) == 0x00002C, "Member 'FSDAnselFunctionLibrary_ConstrainCameraByDistance::OutCameraLocation' has a wrong offset!");
static_assert(offsetof(FSDAnselFunctionLibrary_ConstrainCameraByDistance, MaxDistance) == 0x000038, "Member 'FSDAnselFunctionLibrary_ConstrainCameraByDistance::MaxDistance' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.ConstrainCameraByGeometry
// 0x0038 (0x0038 - 0x0000)
struct FSDAnselFunctionLibrary_ConstrainCameraByGeometry final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewCameraLocation;                                 // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousCameraLocation;                            // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginalCameraLocation;                            // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCameraLocation;                                 // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDAnselFunctionLibrary_ConstrainCameraByGeometry) == 0x000008, "Wrong alignment on FSDAnselFunctionLibrary_ConstrainCameraByGeometry");
static_assert(sizeof(FSDAnselFunctionLibrary_ConstrainCameraByGeometry) == 0x000038, "Wrong size on FSDAnselFunctionLibrary_ConstrainCameraByGeometry");
static_assert(offsetof(FSDAnselFunctionLibrary_ConstrainCameraByGeometry, WorldContextObject) == 0x000000, "Member 'FSDAnselFunctionLibrary_ConstrainCameraByGeometry::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FSDAnselFunctionLibrary_ConstrainCameraByGeometry, NewCameraLocation) == 0x000008, "Member 'FSDAnselFunctionLibrary_ConstrainCameraByGeometry::NewCameraLocation' has a wrong offset!");
static_assert(offsetof(FSDAnselFunctionLibrary_ConstrainCameraByGeometry, PreviousCameraLocation) == 0x000014, "Member 'FSDAnselFunctionLibrary_ConstrainCameraByGeometry::PreviousCameraLocation' has a wrong offset!");
static_assert(offsetof(FSDAnselFunctionLibrary_ConstrainCameraByGeometry, OriginalCameraLocation) == 0x000020, "Member 'FSDAnselFunctionLibrary_ConstrainCameraByGeometry::OriginalCameraLocation' has a wrong offset!");
static_assert(offsetof(FSDAnselFunctionLibrary_ConstrainCameraByGeometry, OutCameraLocation) == 0x00002C, "Member 'FSDAnselFunctionLibrary_ConstrainCameraByGeometry::OutCameraLocation' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.IsPhotographyAllowed
// 0x0001 (0x0001 - 0x0000)
struct FSDAnselFunctionLibrary_IsPhotographyAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDAnselFunctionLibrary_IsPhotographyAllowed) == 0x000001, "Wrong alignment on FSDAnselFunctionLibrary_IsPhotographyAllowed");
static_assert(sizeof(FSDAnselFunctionLibrary_IsPhotographyAllowed) == 0x000001, "Wrong size on FSDAnselFunctionLibrary_IsPhotographyAllowed");
static_assert(offsetof(FSDAnselFunctionLibrary_IsPhotographyAllowed, ReturnValue) == 0x000000, "Member 'FSDAnselFunctionLibrary_IsPhotographyAllowed::ReturnValue' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.IsPhotographyAvailable
// 0x0001 (0x0001 - 0x0000)
struct FSDAnselFunctionLibrary_IsPhotographyAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDAnselFunctionLibrary_IsPhotographyAvailable) == 0x000001, "Wrong alignment on FSDAnselFunctionLibrary_IsPhotographyAvailable");
static_assert(sizeof(FSDAnselFunctionLibrary_IsPhotographyAvailable) == 0x000001, "Wrong size on FSDAnselFunctionLibrary_IsPhotographyAvailable");
static_assert(offsetof(FSDAnselFunctionLibrary_IsPhotographyAvailable, ReturnValue) == 0x000000, "Member 'FSDAnselFunctionLibrary_IsPhotographyAvailable::ReturnValue' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.SetAutoPause
// 0x0001 (0x0001 - 0x0000)
struct FSDAnselFunctionLibrary_SetAutoPause final
{
public:
	bool                                          bShouldAutoPause;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDAnselFunctionLibrary_SetAutoPause) == 0x000001, "Wrong alignment on FSDAnselFunctionLibrary_SetAutoPause");
static_assert(sizeof(FSDAnselFunctionLibrary_SetAutoPause) == 0x000001, "Wrong size on FSDAnselFunctionLibrary_SetAutoPause");
static_assert(offsetof(FSDAnselFunctionLibrary_SetAutoPause, bShouldAutoPause) == 0x000000, "Member 'FSDAnselFunctionLibrary_SetAutoPause::bShouldAutoPause' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.SetAutoPostprocess
// 0x0001 (0x0001 - 0x0000)
struct FSDAnselFunctionLibrary_SetAutoPostprocess final
{
public:
	bool                                          bShouldAutoPostprocess;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDAnselFunctionLibrary_SetAutoPostprocess) == 0x000001, "Wrong alignment on FSDAnselFunctionLibrary_SetAutoPostprocess");
static_assert(sizeof(FSDAnselFunctionLibrary_SetAutoPostprocess) == 0x000001, "Wrong size on FSDAnselFunctionLibrary_SetAutoPostprocess");
static_assert(offsetof(FSDAnselFunctionLibrary_SetAutoPostprocess, bShouldAutoPostprocess) == 0x000000, "Member 'FSDAnselFunctionLibrary_SetAutoPostprocess::bShouldAutoPostprocess' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.SetCameraConstraintCameraSize
// 0x0004 (0x0004 - 0x0000)
struct FSDAnselFunctionLibrary_SetCameraConstraintCameraSize final
{
public:
	float                                         CameraSize;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDAnselFunctionLibrary_SetCameraConstraintCameraSize) == 0x000004, "Wrong alignment on FSDAnselFunctionLibrary_SetCameraConstraintCameraSize");
static_assert(sizeof(FSDAnselFunctionLibrary_SetCameraConstraintCameraSize) == 0x000004, "Wrong size on FSDAnselFunctionLibrary_SetCameraConstraintCameraSize");
static_assert(offsetof(FSDAnselFunctionLibrary_SetCameraConstraintCameraSize, CameraSize) == 0x000000, "Member 'FSDAnselFunctionLibrary_SetCameraConstraintCameraSize::CameraSize' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.SetCameraConstraintDistance
// 0x0004 (0x0004 - 0x0000)
struct FSDAnselFunctionLibrary_SetCameraConstraintDistance final
{
public:
	float                                         MaxCameraDistance;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDAnselFunctionLibrary_SetCameraConstraintDistance) == 0x000004, "Wrong alignment on FSDAnselFunctionLibrary_SetCameraConstraintDistance");
static_assert(sizeof(FSDAnselFunctionLibrary_SetCameraConstraintDistance) == 0x000004, "Wrong size on FSDAnselFunctionLibrary_SetCameraConstraintDistance");
static_assert(offsetof(FSDAnselFunctionLibrary_SetCameraConstraintDistance, MaxCameraDistance) == 0x000000, "Member 'FSDAnselFunctionLibrary_SetCameraConstraintDistance::MaxCameraDistance' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.SetCameraMovementSpeed
// 0x0004 (0x0004 - 0x0000)
struct FSDAnselFunctionLibrary_SetCameraMovementSpeed final
{
public:
	float                                         TranslationSpeed;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDAnselFunctionLibrary_SetCameraMovementSpeed) == 0x000004, "Wrong alignment on FSDAnselFunctionLibrary_SetCameraMovementSpeed");
static_assert(sizeof(FSDAnselFunctionLibrary_SetCameraMovementSpeed) == 0x000004, "Wrong size on FSDAnselFunctionLibrary_SetCameraMovementSpeed");
static_assert(offsetof(FSDAnselFunctionLibrary_SetCameraMovementSpeed, TranslationSpeed) == 0x000000, "Member 'FSDAnselFunctionLibrary_SetCameraMovementSpeed::TranslationSpeed' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.SetIsPhotographyAllowed
// 0x0001 (0x0001 - 0x0000)
struct FSDAnselFunctionLibrary_SetIsPhotographyAllowed final
{
public:
	bool                                          bIsPhotographyAllowed;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDAnselFunctionLibrary_SetIsPhotographyAllowed) == 0x000001, "Wrong alignment on FSDAnselFunctionLibrary_SetIsPhotographyAllowed");
static_assert(sizeof(FSDAnselFunctionLibrary_SetIsPhotographyAllowed) == 0x000001, "Wrong size on FSDAnselFunctionLibrary_SetIsPhotographyAllowed");
static_assert(offsetof(FSDAnselFunctionLibrary_SetIsPhotographyAllowed, bIsPhotographyAllowed) == 0x000000, "Member 'FSDAnselFunctionLibrary_SetIsPhotographyAllowed::bIsPhotographyAllowed' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.SetSettleFrames
// 0x0004 (0x0004 - 0x0000)
struct FSDAnselFunctionLibrary_SetSettleFrames final
{
public:
	int32                                         NumSettleFrames;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDAnselFunctionLibrary_SetSettleFrames) == 0x000004, "Wrong alignment on FSDAnselFunctionLibrary_SetSettleFrames");
static_assert(sizeof(FSDAnselFunctionLibrary_SetSettleFrames) == 0x000004, "Wrong size on FSDAnselFunctionLibrary_SetSettleFrames");
static_assert(offsetof(FSDAnselFunctionLibrary_SetSettleFrames, NumSettleFrames) == 0x000000, "Member 'FSDAnselFunctionLibrary_SetSettleFrames::NumSettleFrames' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.SetUIControlVisibility
// 0x0010 (0x0010 - 0x0000)
struct FSDAnselFunctionLibrary_SetUIControlVisibility final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIControlEffectTarget                        UIControlTarget;                                   // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFB[0x6];                                      // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSDAnselFunctionLibrary_SetUIControlVisibility) == 0x000008, "Wrong alignment on FSDAnselFunctionLibrary_SetUIControlVisibility");
static_assert(sizeof(FSDAnselFunctionLibrary_SetUIControlVisibility) == 0x000010, "Wrong size on FSDAnselFunctionLibrary_SetUIControlVisibility");
static_assert(offsetof(FSDAnselFunctionLibrary_SetUIControlVisibility, WorldContextObject) == 0x000000, "Member 'FSDAnselFunctionLibrary_SetUIControlVisibility::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FSDAnselFunctionLibrary_SetUIControlVisibility, UIControlTarget) == 0x000008, "Member 'FSDAnselFunctionLibrary_SetUIControlVisibility::UIControlTarget' has a wrong offset!");
static_assert(offsetof(FSDAnselFunctionLibrary_SetUIControlVisibility, bIsVisible) == 0x000009, "Member 'FSDAnselFunctionLibrary_SetUIControlVisibility::bIsVisible' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.StartPhotographySession
// 0x0008 (0x0008 - 0x0000)
struct FSDAnselFunctionLibrary_StartPhotographySession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDAnselFunctionLibrary_StartPhotographySession) == 0x000008, "Wrong alignment on FSDAnselFunctionLibrary_StartPhotographySession");
static_assert(sizeof(FSDAnselFunctionLibrary_StartPhotographySession) == 0x000008, "Wrong size on FSDAnselFunctionLibrary_StartPhotographySession");
static_assert(offsetof(FSDAnselFunctionLibrary_StartPhotographySession, WorldContextObject) == 0x000000, "Member 'FSDAnselFunctionLibrary_StartPhotographySession::WorldContextObject' has a wrong offset!");

// Function FSDAnsel.FSDAnselFunctionLibrary.StopPhotographySession
// 0x0008 (0x0008 - 0x0000)
struct FSDAnselFunctionLibrary_StopPhotographySession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDAnselFunctionLibrary_StopPhotographySession) == 0x000008, "Wrong alignment on FSDAnselFunctionLibrary_StopPhotographySession");
static_assert(sizeof(FSDAnselFunctionLibrary_StopPhotographySession) == 0x000008, "Wrong size on FSDAnselFunctionLibrary_StopPhotographySession");
static_assert(offsetof(FSDAnselFunctionLibrary_StopPhotographySession, WorldContextObject) == 0x000000, "Member 'FSDAnselFunctionLibrary_StopPhotographySession::WorldContextObject' has a wrong offset!");

}

