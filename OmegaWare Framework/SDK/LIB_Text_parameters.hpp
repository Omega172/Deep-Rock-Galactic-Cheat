#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LIB_Text

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENU_TextCase_structs.hpp"
#include "SlateCore_structs.hpp"
#include "FSD_structs.hpp"


namespace CG::Params
{

// Function LIB_Text.LIB_Text_C.GetDisconnectReasonText
// 0x0210 (0x0210 - 0x0000)
struct LIB_Text_C_GetDisconnectReasonText final
{
public:
	EDisconnectReason                             DisconnectReason;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DA7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0010(0x0018)(Parm, OutParm)
	EDisconnectReason                             Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DA8[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00C0(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00D8(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x00F0(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x0108(0x0018)()
	class FText                                   Temp_text_Variable_10;                             // 0x0120(0x0018)()
	class FText                                   Temp_text_Variable_11;                             // 0x0138(0x0018)()
	class FText                                   Temp_text_Variable_12;                             // 0x0150(0x0018)()
	class FText                                   Temp_text_Variable_13;                             // 0x0168(0x0018)()
	class FText                                   Temp_text_Variable_14;                             // 0x0180(0x0018)()
	class FText                                   Temp_text_Variable_15;                             // 0x0198(0x0018)()
	class FText                                   Temp_text_Variable_16;                             // 0x01B0(0x0018)()
	class FText                                   Temp_text_Variable_17;                             // 0x01C8(0x0018)()
	class FText                                   Temp_text_Variable_18;                             // 0x01E0(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x01F8(0x0018)()
};
static_assert(alignof(LIB_Text_C_GetDisconnectReasonText) == 0x000008, "Wrong alignment on LIB_Text_C_GetDisconnectReasonText");
static_assert(sizeof(LIB_Text_C_GetDisconnectReasonText) == 0x000210, "Wrong size on LIB_Text_C_GetDisconnectReasonText");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, DisconnectReason) == 0x000000, "Member 'LIB_Text_C_GetDisconnectReasonText::DisconnectReason' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, __WorldContext) == 0x000008, "Member 'LIB_Text_C_GetDisconnectReasonText::__WorldContext' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Text) == 0x000010, "Member 'LIB_Text_C_GetDisconnectReasonText::Text' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_byte_Variable) == 0x000028, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable) == 0x000030, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_1) == 0x000048, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_2) == 0x000060, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_3) == 0x000078, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_4) == 0x000090, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_5) == 0x0000A8, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_6) == 0x0000C0, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_7) == 0x0000D8, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_8) == 0x0000F0, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_9) == 0x000108, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_10) == 0x000120, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_11) == 0x000138, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_12) == 0x000150, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_13) == 0x000168, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_14) == 0x000180, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_15) == 0x000198, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_15' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_16) == 0x0001B0, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_16' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_17) == 0x0001C8, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_17' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, Temp_text_Variable_18) == 0x0001E0, "Member 'LIB_Text_C_GetDisconnectReasonText::Temp_text_Variable_18' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonText, K2Node_Select_Default) == 0x0001F8, "Member 'LIB_Text_C_GetDisconnectReasonText::K2Node_Select_Default' has a wrong offset!");

// Function LIB_Text.LIB_Text_C.GetDisconnectReasonCaption
// 0x0210 (0x0210 - 0x0000)
struct LIB_Text_C_GetDisconnectReasonCaption final
{
public:
	EDisconnectReason                             DisconnectReason;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DA9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0010(0x0018)(Parm, OutParm)
	EDisconnectReason                             Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DAA[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00C0(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00D8(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x00F0(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x0108(0x0018)()
	class FText                                   Temp_text_Variable_10;                             // 0x0120(0x0018)()
	class FText                                   Temp_text_Variable_11;                             // 0x0138(0x0018)()
	class FText                                   Temp_text_Variable_12;                             // 0x0150(0x0018)()
	class FText                                   Temp_text_Variable_13;                             // 0x0168(0x0018)()
	class FText                                   Temp_text_Variable_14;                             // 0x0180(0x0018)()
	class FText                                   Temp_text_Variable_15;                             // 0x0198(0x0018)()
	class FText                                   Temp_text_Variable_16;                             // 0x01B0(0x0018)()
	class FText                                   Temp_text_Variable_17;                             // 0x01C8(0x0018)()
	class FText                                   Temp_text_Variable_18;                             // 0x01E0(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x01F8(0x0018)()
};
static_assert(alignof(LIB_Text_C_GetDisconnectReasonCaption) == 0x000008, "Wrong alignment on LIB_Text_C_GetDisconnectReasonCaption");
static_assert(sizeof(LIB_Text_C_GetDisconnectReasonCaption) == 0x000210, "Wrong size on LIB_Text_C_GetDisconnectReasonCaption");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, DisconnectReason) == 0x000000, "Member 'LIB_Text_C_GetDisconnectReasonCaption::DisconnectReason' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, __WorldContext) == 0x000008, "Member 'LIB_Text_C_GetDisconnectReasonCaption::__WorldContext' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Text) == 0x000010, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Text' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_byte_Variable) == 0x000028, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable) == 0x000030, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_1) == 0x000048, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_2) == 0x000060, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_3) == 0x000078, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_4) == 0x000090, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_5) == 0x0000A8, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_6) == 0x0000C0, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_7) == 0x0000D8, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_8) == 0x0000F0, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_9) == 0x000108, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_10) == 0x000120, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_11) == 0x000138, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_12) == 0x000150, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_13) == 0x000168, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_14) == 0x000180, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_15) == 0x000198, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_15' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_16) == 0x0001B0, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_16' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_17) == 0x0001C8, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_17' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, Temp_text_Variable_18) == 0x0001E0, "Member 'LIB_Text_C_GetDisconnectReasonCaption::Temp_text_Variable_18' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetDisconnectReasonCaption, K2Node_Select_Default) == 0x0001F8, "Member 'LIB_Text_C_GetDisconnectReasonCaption::K2Node_Select_Default' has a wrong offset!");

// Function LIB_Text.LIB_Text_C.SetTextUpperCased
// 0x0040 (0x0040 - 0x0000)
struct LIB_Text_C_SetTextUpperCased final
{
public:
	class UTextBlock*                             Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InText;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0028(0x0018)()
};
static_assert(alignof(LIB_Text_C_SetTextUpperCased) == 0x000008, "Wrong alignment on LIB_Text_C_SetTextUpperCased");
static_assert(sizeof(LIB_Text_C_SetTextUpperCased) == 0x000040, "Wrong size on LIB_Text_C_SetTextUpperCased");
static_assert(offsetof(LIB_Text_C_SetTextUpperCased, Target) == 0x000000, "Member 'LIB_Text_C_SetTextUpperCased::Target' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetTextUpperCased, InText) == 0x000008, "Member 'LIB_Text_C_SetTextUpperCased::InText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetTextUpperCased, __WorldContext) == 0x000020, "Member 'LIB_Text_C_SetTextUpperCased::__WorldContext' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetTextUpperCased, CallFunc_TextToUpper_ReturnValue) == 0x000028, "Member 'LIB_Text_C_SetTextUpperCased::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");

// Function LIB_Text.LIB_Text_C.SetFontSize
// 0x0070 (0x0070 - 0x0000)
struct LIB_Text_C_SetFontSize final
{
public:
	class UTextBlock*                             Label;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewSize;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DAB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0018(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(LIB_Text_C_SetFontSize) == 0x000008, "Wrong alignment on LIB_Text_C_SetFontSize");
static_assert(sizeof(LIB_Text_C_SetFontSize) == 0x000070, "Wrong size on LIB_Text_C_SetFontSize");
static_assert(offsetof(LIB_Text_C_SetFontSize, Label) == 0x000000, "Member 'LIB_Text_C_SetFontSize::Label' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetFontSize, NewSize) == 0x000008, "Member 'LIB_Text_C_SetFontSize::NewSize' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetFontSize, __WorldContext) == 0x000010, "Member 'LIB_Text_C_SetFontSize::__WorldContext' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetFontSize, K2Node_MakeStruct_SlateFontInfo) == 0x000018, "Member 'LIB_Text_C_SetFontSize::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function LIB_Text.LIB_Text_C.GetFontSize
// 0x0018 (0x0018 - 0x0000)
struct LIB_Text_C_GetFontSize final
{
public:
	class UTextBlock*                             Label;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Size;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LIB_Text_C_GetFontSize) == 0x000008, "Wrong alignment on LIB_Text_C_GetFontSize");
static_assert(sizeof(LIB_Text_C_GetFontSize) == 0x000018, "Wrong size on LIB_Text_C_GetFontSize");
static_assert(offsetof(LIB_Text_C_GetFontSize, Label) == 0x000000, "Member 'LIB_Text_C_GetFontSize::Label' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetFontSize, __WorldContext) == 0x000008, "Member 'LIB_Text_C_GetFontSize::__WorldContext' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetFontSize, Size) == 0x000010, "Member 'LIB_Text_C_GetFontSize::Size' has a wrong offset!");

// Function LIB_Text.LIB_Text_C.SetTextCased
// 0x0080 (0x0080 - 0x0000)
struct LIB_Text_C_SetTextCased final
{
public:
	class UTextBlock*                             Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InText;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	ENU_TextCase                                  Text_Case;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DAC[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENU_TextCase                                  Temp_byte_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DAD[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_TextToLower_ReturnValue;                  // 0x0038(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0050(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0068(0x0018)()
};
static_assert(alignof(LIB_Text_C_SetTextCased) == 0x000008, "Wrong alignment on LIB_Text_C_SetTextCased");
static_assert(sizeof(LIB_Text_C_SetTextCased) == 0x000080, "Wrong size on LIB_Text_C_SetTextCased");
static_assert(offsetof(LIB_Text_C_SetTextCased, Target) == 0x000000, "Member 'LIB_Text_C_SetTextCased::Target' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetTextCased, InText) == 0x000008, "Member 'LIB_Text_C_SetTextCased::InText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetTextCased, Text_Case) == 0x000020, "Member 'LIB_Text_C_SetTextCased::Text_Case' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetTextCased, __WorldContext) == 0x000028, "Member 'LIB_Text_C_SetTextCased::__WorldContext' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetTextCased, Temp_byte_Variable) == 0x000030, "Member 'LIB_Text_C_SetTextCased::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetTextCased, CallFunc_TextToLower_ReturnValue) == 0x000038, "Member 'LIB_Text_C_SetTextCased::CallFunc_TextToLower_ReturnValue' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetTextCased, CallFunc_TextToUpper_ReturnValue) == 0x000050, "Member 'LIB_Text_C_SetTextCased::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_SetTextCased, K2Node_Select_Default) == 0x000068, "Member 'LIB_Text_C_SetTextCased::K2Node_Select_Default' has a wrong offset!");

// Function LIB_Text.LIB_Text_C.GetTimeText
// 0x0258 (0x0258 - 0x0000)
struct LIB_Text_C_GetTimeText final
{
public:
	float                                         Dividend;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DAE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0010(0x0018)(Parm, OutParm)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DAF[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMod_Remainder;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FMod_ReturnValue;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DB0[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0038(0x0018)()
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DB1[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0058(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_FMod_Remainder_1;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FMod_ReturnValue_1;                       // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00A0(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x00E0(0x0018)()
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_1;           // 0x00F8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0110(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0150(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DB2[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0198(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01A8(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x01C0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x01D8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0218(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0228(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0240(0x0018)()
};
static_assert(alignof(LIB_Text_C_GetTimeText) == 0x000008, "Wrong alignment on LIB_Text_C_GetTimeText");
static_assert(sizeof(LIB_Text_C_GetTimeText) == 0x000258, "Wrong size on LIB_Text_C_GetTimeText");
static_assert(offsetof(LIB_Text_C_GetTimeText, Dividend) == 0x000000, "Member 'LIB_Text_C_GetTimeText::Dividend' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, __WorldContext) == 0x000008, "Member 'LIB_Text_C_GetTimeText::__WorldContext' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, Text) == 0x000010, "Member 'LIB_Text_C_GetTimeText::Text' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, Temp_bool_Variable) == 0x000028, "Member 'LIB_Text_C_GetTimeText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, CallFunc_FMod_Remainder) == 0x00002C, "Member 'LIB_Text_C_GetTimeText::CallFunc_FMod_Remainder' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, CallFunc_FMod_ReturnValue) == 0x000030, "Member 'LIB_Text_C_GetTimeText::CallFunc_FMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, CallFunc_Conv_FloatToText_ReturnValue) == 0x000038, "Member 'LIB_Text_C_GetTimeText::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000050, "Member 'LIB_Text_C_GetTimeText::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, K2Node_MakeStruct_FormatArgumentData) == 0x000058, "Member 'LIB_Text_C_GetTimeText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, CallFunc_FMod_Remainder_1) == 0x000098, "Member 'LIB_Text_C_GetTimeText::CallFunc_FMod_Remainder_1' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, CallFunc_FMod_ReturnValue_1) == 0x00009C, "Member 'LIB_Text_C_GetTimeText::CallFunc_FMod_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000A0, "Member 'LIB_Text_C_GetTimeText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, CallFunc_Conv_IntToText_ReturnValue) == 0x0000E0, "Member 'LIB_Text_C_GetTimeText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, CallFunc_Conv_FloatToText_ReturnValue_1) == 0x0000F8, "Member 'LIB_Text_C_GetTimeText::CallFunc_Conv_FloatToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, K2Node_MakeStruct_FormatArgumentData_2) == 0x000110, "Member 'LIB_Text_C_GetTimeText::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, K2Node_MakeStruct_FormatArgumentData_3) == 0x000150, "Member 'LIB_Text_C_GetTimeText::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, CallFunc_Greater_IntInt_ReturnValue) == 0x000190, "Member 'LIB_Text_C_GetTimeText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, K2Node_MakeArray_Array) == 0x000198, "Member 'LIB_Text_C_GetTimeText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, CallFunc_Format_ReturnValue) == 0x0001A8, "Member 'LIB_Text_C_GetTimeText::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, CallFunc_Conv_IntToText_ReturnValue_1) == 0x0001C0, "Member 'LIB_Text_C_GetTimeText::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, K2Node_MakeStruct_FormatArgumentData_4) == 0x0001D8, "Member 'LIB_Text_C_GetTimeText::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, K2Node_MakeArray_Array_1) == 0x000218, "Member 'LIB_Text_C_GetTimeText::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, CallFunc_Format_ReturnValue_1) == 0x000228, "Member 'LIB_Text_C_GetTimeText::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_GetTimeText, K2Node_Select_Default) == 0x000240, "Member 'LIB_Text_C_GetTimeText::K2Node_Select_Default' has a wrong offset!");

// Function LIB_Text.LIB_Text_C.Select Character ID Text
// 0x00E8 (0x00E8 - 0x0000)
struct LIB_Text_C_Select_Character_ID_Text final
{
public:
	class UPlayerCharacterID*                     CharacterID;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   DrillerText;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   GunnerText;                                        // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   ScoutText;                                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   EngineerText;                                      // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   BoscoText;                                         // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   NoneText;                                          // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   OutText;                                           // 0x00A0(0x0018)(Parm, OutParm)
	class UPlayerCharacterID*                     BoscoID;                                           // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     ScoutID;                                           // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     GunnerID;                                          // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     DrillerID;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     EngineerID;                                        // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_4;    // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LIB_Text_C_Select_Character_ID_Text) == 0x000008, "Wrong alignment on LIB_Text_C_Select_Character_ID_Text");
static_assert(sizeof(LIB_Text_C_Select_Character_ID_Text) == 0x0000E8, "Wrong size on LIB_Text_C_Select_Character_ID_Text");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, CharacterID) == 0x000000, "Member 'LIB_Text_C_Select_Character_ID_Text::CharacterID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, DrillerText) == 0x000008, "Member 'LIB_Text_C_Select_Character_ID_Text::DrillerText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, GunnerText) == 0x000020, "Member 'LIB_Text_C_Select_Character_ID_Text::GunnerText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, ScoutText) == 0x000038, "Member 'LIB_Text_C_Select_Character_ID_Text::ScoutText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, EngineerText) == 0x000050, "Member 'LIB_Text_C_Select_Character_ID_Text::EngineerText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, BoscoText) == 0x000068, "Member 'LIB_Text_C_Select_Character_ID_Text::BoscoText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, NoneText) == 0x000080, "Member 'LIB_Text_C_Select_Character_ID_Text::NoneText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, __WorldContext) == 0x000098, "Member 'LIB_Text_C_Select_Character_ID_Text::__WorldContext' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, OutText) == 0x0000A0, "Member 'LIB_Text_C_Select_Character_ID_Text::OutText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, BoscoID) == 0x0000B8, "Member 'LIB_Text_C_Select_Character_ID_Text::BoscoID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, ScoutID) == 0x0000C0, "Member 'LIB_Text_C_Select_Character_ID_Text::ScoutID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, GunnerID) == 0x0000C8, "Member 'LIB_Text_C_Select_Character_ID_Text::GunnerID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, DrillerID) == 0x0000D0, "Member 'LIB_Text_C_Select_Character_ID_Text::DrillerID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, EngineerID) == 0x0000D8, "Member 'LIB_Text_C_Select_Character_ID_Text::EngineerID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000E0, "Member 'LIB_Text_C_Select_Character_ID_Text::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0000E1, "Member 'LIB_Text_C_Select_Character_ID_Text::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x0000E2, "Member 'LIB_Text_C_Select_Character_ID_Text::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x0000E3, "Member 'LIB_Text_C_Select_Character_ID_Text::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_ID_Text, CallFunc_EqualEqual_ObjectObject_ReturnValue_4) == 0x0000E4, "Member 'LIB_Text_C_Select_Character_ID_Text::CallFunc_EqualEqual_ObjectObject_ReturnValue_4' has a wrong offset!");

// Function LIB_Text.LIB_Text_C.Select Character Class Text
// 0x00F8 (0x00F8 - 0x0000)
struct LIB_Text_C_Select_Character_Class_Text final
{
public:
	class UPlayerCharacterID*                     CharacterClass;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   DrillerText;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   GunnerText;                                        // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   ScoutText;                                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   EngineerText;                                      // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   BoscoText;                                         // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   NoneText;                                          // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   OutText;                                           // 0x00A0(0x0018)(Parm, OutParm)
	class UPlayerCharacterID*                     BoscoID;                                           // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     ScoutID;                                           // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     GunnerID;                                          // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     DrillerID;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     EngineerID;                                        // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Select_Character_ID_Text_OutText;         // 0x00E0(0x0018)()
};
static_assert(alignof(LIB_Text_C_Select_Character_Class_Text) == 0x000008, "Wrong alignment on LIB_Text_C_Select_Character_Class_Text");
static_assert(sizeof(LIB_Text_C_Select_Character_Class_Text) == 0x0000F8, "Wrong size on LIB_Text_C_Select_Character_Class_Text");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, CharacterClass) == 0x000000, "Member 'LIB_Text_C_Select_Character_Class_Text::CharacterClass' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, DrillerText) == 0x000008, "Member 'LIB_Text_C_Select_Character_Class_Text::DrillerText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, GunnerText) == 0x000020, "Member 'LIB_Text_C_Select_Character_Class_Text::GunnerText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, ScoutText) == 0x000038, "Member 'LIB_Text_C_Select_Character_Class_Text::ScoutText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, EngineerText) == 0x000050, "Member 'LIB_Text_C_Select_Character_Class_Text::EngineerText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, BoscoText) == 0x000068, "Member 'LIB_Text_C_Select_Character_Class_Text::BoscoText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, NoneText) == 0x000080, "Member 'LIB_Text_C_Select_Character_Class_Text::NoneText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, __WorldContext) == 0x000098, "Member 'LIB_Text_C_Select_Character_Class_Text::__WorldContext' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, OutText) == 0x0000A0, "Member 'LIB_Text_C_Select_Character_Class_Text::OutText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, BoscoID) == 0x0000B8, "Member 'LIB_Text_C_Select_Character_Class_Text::BoscoID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, ScoutID) == 0x0000C0, "Member 'LIB_Text_C_Select_Character_Class_Text::ScoutID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, GunnerID) == 0x0000C8, "Member 'LIB_Text_C_Select_Character_Class_Text::GunnerID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, DrillerID) == 0x0000D0, "Member 'LIB_Text_C_Select_Character_Class_Text::DrillerID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, EngineerID) == 0x0000D8, "Member 'LIB_Text_C_Select_Character_Class_Text::EngineerID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_Character_Class_Text, CallFunc_Select_Character_ID_Text_OutText) == 0x0000E0, "Member 'LIB_Text_C_Select_Character_Class_Text::CallFunc_Select_Character_ID_Text_OutText' has a wrong offset!");

// Function LIB_Text.LIB_Text_C.Select CharacterText
// 0x0100 (0x0100 - 0x0000)
struct LIB_Text_C_Select_CharacterText final
{
public:
	class APlayerCharacter*                       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   DrillerText;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   GunnerText;                                        // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   ScoutText;                                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   EngineerText;                                      // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   BoscoText;                                         // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   NoneText;                                          // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   OutText;                                           // 0x00A0(0x0018)(Parm, OutParm)
	class UPlayerCharacterID*                     BoscoID;                                           // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     ScoutID;                                           // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     GunnerID;                                          // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     DrillerID;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     EngineerID;                                        // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerCharacterID*                     CallFunc_GetCharacterIDFromCharacter_ReturnValue;  // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Select_Character_ID_Text_OutText;         // 0x00E8(0x0018)()
};
static_assert(alignof(LIB_Text_C_Select_CharacterText) == 0x000008, "Wrong alignment on LIB_Text_C_Select_CharacterText");
static_assert(sizeof(LIB_Text_C_Select_CharacterText) == 0x000100, "Wrong size on LIB_Text_C_Select_CharacterText");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, Character) == 0x000000, "Member 'LIB_Text_C_Select_CharacterText::Character' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, DrillerText) == 0x000008, "Member 'LIB_Text_C_Select_CharacterText::DrillerText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, GunnerText) == 0x000020, "Member 'LIB_Text_C_Select_CharacterText::GunnerText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, ScoutText) == 0x000038, "Member 'LIB_Text_C_Select_CharacterText::ScoutText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, EngineerText) == 0x000050, "Member 'LIB_Text_C_Select_CharacterText::EngineerText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, BoscoText) == 0x000068, "Member 'LIB_Text_C_Select_CharacterText::BoscoText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, NoneText) == 0x000080, "Member 'LIB_Text_C_Select_CharacterText::NoneText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, __WorldContext) == 0x000098, "Member 'LIB_Text_C_Select_CharacterText::__WorldContext' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, OutText) == 0x0000A0, "Member 'LIB_Text_C_Select_CharacterText::OutText' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, BoscoID) == 0x0000B8, "Member 'LIB_Text_C_Select_CharacterText::BoscoID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, ScoutID) == 0x0000C0, "Member 'LIB_Text_C_Select_CharacterText::ScoutID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, GunnerID) == 0x0000C8, "Member 'LIB_Text_C_Select_CharacterText::GunnerID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, DrillerID) == 0x0000D0, "Member 'LIB_Text_C_Select_CharacterText::DrillerID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, EngineerID) == 0x0000D8, "Member 'LIB_Text_C_Select_CharacterText::EngineerID' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, CallFunc_GetCharacterIDFromCharacter_ReturnValue) == 0x0000E0, "Member 'LIB_Text_C_Select_CharacterText::CallFunc_GetCharacterIDFromCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(LIB_Text_C_Select_CharacterText, CallFunc_Select_Character_ID_Text_OutText) == 0x0000E8, "Member 'LIB_Text_C_Select_CharacterText::CallFunc_Select_Character_ID_Text_OutText' has a wrong offset!");

}

