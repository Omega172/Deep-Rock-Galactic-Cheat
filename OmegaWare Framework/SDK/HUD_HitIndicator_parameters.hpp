#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUD_HitIndicator

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace CG::Params
{

// Function HUD_HitIndicator.HUD_HitIndicator_C.ExecuteUbergraph_HUD_HitIndicator
// 0x0060 (0x0060 - 0x0000)
struct HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MenuColors_OutputColor;                   // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_1108[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IHealth>               K2Node_CustomEvent_EnemyHealth;                    // 0x0028(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	float                                         K2Node_CustomEvent_Damage;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DamageModifier;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_HealthRemaining;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsWeakpoint;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsRadial;                       // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1109[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator) == 0x000008, "Wrong alignment on HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator");
static_assert(sizeof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator) == 0x000060, "Wrong size on HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator");
static_assert(offsetof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator, EntryPoint) == 0x000000, "Member 'HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator::EntryPoint' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator, CallFunc_MenuColors_OutputColor) == 0x000004, "Member 'HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator::CallFunc_MenuColors_OutputColor' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator, K2Node_CustomEvent_EnemyHealth) == 0x000028, "Member 'HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator::K2Node_CustomEvent_EnemyHealth' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator, K2Node_CustomEvent_Damage) == 0x000038, "Member 'HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator::K2Node_CustomEvent_Damage' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator, K2Node_CustomEvent_DamageModifier) == 0x00003C, "Member 'HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator::K2Node_CustomEvent_DamageModifier' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator, K2Node_CustomEvent_HealthRemaining) == 0x000040, "Member 'HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator::K2Node_CustomEvent_HealthRemaining' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator, K2Node_CustomEvent_IsWeakpoint) == 0x000044, "Member 'HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator::K2Node_CustomEvent_IsWeakpoint' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator, K2Node_CustomEvent_IsRadial) == 0x000045, "Member 'HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator::K2Node_CustomEvent_IsRadial' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator, K2Node_CreateDelegate_OutputDelegate_1) == 0x000048, "Member 'HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator, K2Node_Event_IsDesignTime) == 0x000058, "Member 'HUD_HitIndicator_C_ExecuteUbergraph_HUD_HitIndicator::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function HUD_HitIndicator.HUD_HitIndicator_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct HUD_HitIndicator_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_HitIndicator_C_PreConstruct) == 0x000001, "Wrong alignment on HUD_HitIndicator_C_PreConstruct");
static_assert(sizeof(HUD_HitIndicator_C_PreConstruct) == 0x000001, "Wrong size on HUD_HitIndicator_C_PreConstruct");
static_assert(offsetof(HUD_HitIndicator_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'HUD_HitIndicator_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function HUD_HitIndicator.HUD_HitIndicator_C.OnDamagedEnemy_Event
// 0x0020 (0x0020 - 0x0000)
struct HUD_HitIndicator_C_OnDamagedEnemy_Event final
{
public:
	TScriptInterface<class IHealth>               EnemyHealth;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper)
	float                                         Damage;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageModifier;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthRemaining;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWeakPoint;                                       // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsRadial;                                          // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_HitIndicator_C_OnDamagedEnemy_Event) == 0x000008, "Wrong alignment on HUD_HitIndicator_C_OnDamagedEnemy_Event");
static_assert(sizeof(HUD_HitIndicator_C_OnDamagedEnemy_Event) == 0x000020, "Wrong size on HUD_HitIndicator_C_OnDamagedEnemy_Event");
static_assert(offsetof(HUD_HitIndicator_C_OnDamagedEnemy_Event, EnemyHealth) == 0x000000, "Member 'HUD_HitIndicator_C_OnDamagedEnemy_Event::EnemyHealth' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_OnDamagedEnemy_Event, Damage) == 0x000010, "Member 'HUD_HitIndicator_C_OnDamagedEnemy_Event::Damage' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_OnDamagedEnemy_Event, DamageModifier) == 0x000014, "Member 'HUD_HitIndicator_C_OnDamagedEnemy_Event::DamageModifier' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_OnDamagedEnemy_Event, HealthRemaining) == 0x000018, "Member 'HUD_HitIndicator_C_OnDamagedEnemy_Event::HealthRemaining' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_OnDamagedEnemy_Event, IsWeakPoint) == 0x00001C, "Member 'HUD_HitIndicator_C_OnDamagedEnemy_Event::IsWeakPoint' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_OnDamagedEnemy_Event, IsRadial) == 0x00001D, "Member 'HUD_HitIndicator_C_OnDamagedEnemy_Event::IsRadial' has a wrong offset!");

// Function HUD_HitIndicator.HUD_HitIndicator_C.StartAnimation
// 0x0048 (0x0048 - 0x0000)
struct HUD_HitIndicator_C_StartAnimation final
{
public:
	int32                                         Param_Priority;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowKillImage;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_110A[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_Select_Default_1;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_HitIndicator_C_StartAnimation) == 0x000008, "Wrong alignment on HUD_HitIndicator_C_StartAnimation");
static_assert(sizeof(HUD_HitIndicator_C_StartAnimation) == 0x000048, "Wrong size on HUD_HitIndicator_C_StartAnimation");
static_assert(offsetof(HUD_HitIndicator_C_StartAnimation, Param_Priority) == 0x000000, "Member 'HUD_HitIndicator_C_StartAnimation::Param_Priority' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_StartAnimation, Scale) == 0x000004, "Member 'HUD_HitIndicator_C_StartAnimation::Scale' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_StartAnimation, Color) == 0x000008, "Member 'HUD_HitIndicator_C_StartAnimation::Color' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_StartAnimation, ShowKillImage) == 0x000018, "Member 'HUD_HitIndicator_C_StartAnimation::ShowKillImage' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_StartAnimation, Temp_bool_Variable) == 0x000019, "Member 'HUD_HitIndicator_C_StartAnimation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_StartAnimation, Temp_bool_Variable_1) == 0x00001A, "Member 'HUD_HitIndicator_C_StartAnimation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_StartAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'HUD_HitIndicator_C_StartAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_StartAnimation, CallFunc_MakeVector2D_ReturnValue) == 0x000028, "Member 'HUD_HitIndicator_C_StartAnimation::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_StartAnimation, K2Node_Select_Default) == 0x000030, "Member 'HUD_HitIndicator_C_StartAnimation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_StartAnimation, K2Node_Select_Default_1) == 0x000038, "Member 'HUD_HitIndicator_C_StartAnimation::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(HUD_HitIndicator_C_StartAnimation, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000040, "Member 'HUD_HitIndicator_C_StartAnimation::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

}

