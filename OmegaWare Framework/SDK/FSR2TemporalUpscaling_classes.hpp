#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FSR2TemporalUpscaling

#include "Basic.hpp"

#include "FSR2TemporalUpscaling_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace CG
{

// Class FSR2TemporalUpscaling.FSR2Settings
// 0x0048 (0x0080 - 0x0038)
class UFSR2Settings final : public UDeveloperSettings
{
public:
	bool                                          bEnabled;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoExposure;                                      // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledInEditorViewport;                           // 0x003A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSSRExperimentalDenoiser;                        // 0x003B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNativeDX12;                                     // 0x003C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNativeVulkan;                                   // 0x003D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110F[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EFSR2QualityMode                              QualityMode;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFSR2HistoryFormat                            HistoryFormat;                                     // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sharpness;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdjustMipBias;                                     // 0x004C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReactiveMask;                                      // 0x004D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceVertexDeformationOutputsVelocity;             // 0x004E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1110[0x1];                                     // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReflectionScale;                                   // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionLuminanceBias;                           // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessScale;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessBias;                                     // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessMaxDistance;                              // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReactiveMaskRoughnessForceMaxDistance;             // 0x0064(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1111[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TranslucencyBias;                                  // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucencyLuminanceBias;                         // 0x006C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucencyMaxDistance;                           // 0x0070(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreDOFTranslucencyScale;                           // 0x0074(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreDOFTranslucencyMax;                             // 0x0078(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1112[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FSR2Settings">();
	}
	static class UFSR2Settings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFSR2Settings>();
	}
};
static_assert(alignof(UFSR2Settings) == 0x000008, "Wrong alignment on UFSR2Settings");
static_assert(sizeof(UFSR2Settings) == 0x000080, "Wrong size on UFSR2Settings");
static_assert(offsetof(UFSR2Settings, bEnabled) == 0x000038, "Member 'UFSR2Settings::bEnabled' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, AutoExposure) == 0x000039, "Member 'UFSR2Settings::AutoExposure' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, EnabledInEditorViewport) == 0x00003A, "Member 'UFSR2Settings::EnabledInEditorViewport' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, UseSSRExperimentalDenoiser) == 0x00003B, "Member 'UFSR2Settings::UseSSRExperimentalDenoiser' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, UseNativeDX12) == 0x00003C, "Member 'UFSR2Settings::UseNativeDX12' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, UseNativeVulkan) == 0x00003D, "Member 'UFSR2Settings::UseNativeVulkan' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, QualityMode) == 0x000040, "Member 'UFSR2Settings::QualityMode' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, HistoryFormat) == 0x000044, "Member 'UFSR2Settings::HistoryFormat' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, Sharpness) == 0x000048, "Member 'UFSR2Settings::Sharpness' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, AdjustMipBias) == 0x00004C, "Member 'UFSR2Settings::AdjustMipBias' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, ReactiveMask) == 0x00004D, "Member 'UFSR2Settings::ReactiveMask' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, ForceVertexDeformationOutputsVelocity) == 0x00004E, "Member 'UFSR2Settings::ForceVertexDeformationOutputsVelocity' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, ReflectionScale) == 0x000050, "Member 'UFSR2Settings::ReflectionScale' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, ReflectionLuminanceBias) == 0x000054, "Member 'UFSR2Settings::ReflectionLuminanceBias' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, RoughnessScale) == 0x000058, "Member 'UFSR2Settings::RoughnessScale' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, RoughnessBias) == 0x00005C, "Member 'UFSR2Settings::RoughnessBias' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, RoughnessMaxDistance) == 0x000060, "Member 'UFSR2Settings::RoughnessMaxDistance' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, ReactiveMaskRoughnessForceMaxDistance) == 0x000064, "Member 'UFSR2Settings::ReactiveMaskRoughnessForceMaxDistance' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, TranslucencyBias) == 0x000068, "Member 'UFSR2Settings::TranslucencyBias' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, TranslucencyLuminanceBias) == 0x00006C, "Member 'UFSR2Settings::TranslucencyLuminanceBias' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, TranslucencyMaxDistance) == 0x000070, "Member 'UFSR2Settings::TranslucencyMaxDistance' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, PreDOFTranslucencyScale) == 0x000074, "Member 'UFSR2Settings::PreDOFTranslucencyScale' has a wrong offset!");
static_assert(offsetof(UFSR2Settings, PreDOFTranslucencyMax) == 0x000078, "Member 'UFSR2Settings::PreDOFTranslucencyMax' has a wrong offset!");

}

