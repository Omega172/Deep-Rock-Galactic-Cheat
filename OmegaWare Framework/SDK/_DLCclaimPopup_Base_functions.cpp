#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: _DLCclaimPopup_Base

#include "Basic.hpp"

#include "_DLCclaimPopup_Base_classes.hpp"
#include "_DLCclaimPopup_Base_parameters.hpp"


namespace CG
{

// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.OnCloseClicked__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void U_DLCclaimPopup_Base_C::OnCloseClicked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("_DLCclaimPopup_Base_C", "OnCloseClicked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.ExecuteUbergraph__DLCclaimPopup_Base
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void U_DLCclaimPopup_Base_C::ExecuteUbergraph__DLCclaimPopup_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("_DLCclaimPopup_Base_C", "ExecuteUbergraph__DLCclaimPopup_Base");

	Params::_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.BndEvt__ITM_BigButton_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature
// (BlueprintEvent)

void U_DLCclaimPopup_Base_C::BndEvt__ITM_BigButton_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("_DLCclaimPopup_Base_C", "BndEvt__ITM_BigButton_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void U_DLCclaimPopup_Base_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("_DLCclaimPopup_Base_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void U_DLCclaimPopup_Base_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("_DLCclaimPopup_Base_C", "PreConstruct");

	Params::_DLCclaimPopup_Base_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.SetHeader
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InHeader                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void U_DLCclaimPopup_Base_C::SetHeader(const class FText& InHeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("_DLCclaimPopup_Base_C", "SetHeader");

	Params::_DLCclaimPopup_Base_C_SetHeader Parms{};

	Parms.InHeader = std::move(InHeader);

	UObject::ProcessEvent(Func, &Parms);
}


// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.SetBottomText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_BottomText                                       (BlueprintVisible, BlueprintReadOnly, Parm)

void U_DLCclaimPopup_Base_C::SetBottomText(const class FText& Param_BottomText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("_DLCclaimPopup_Base_C", "SetBottomText");

	Params::_DLCclaimPopup_Base_C_SetBottomText Parms{};

	Parms.Param_BottomText = std::move(Param_BottomText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.SetHeaderTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Param_HeaderTexture                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void U_DLCclaimPopup_Base_C::SetHeaderTexture(class UTexture2D* Param_HeaderTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("_DLCclaimPopup_Base_C", "SetHeaderTexture");

	Params::_DLCclaimPopup_Base_C_SetHeaderTexture Parms{};

	Parms.Param_HeaderTexture = Param_HeaderTexture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.OnKeyUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply U_DLCclaimPopup_Base_C::OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("_DLCclaimPopup_Base_C", "OnKeyUp");

	Params::_DLCclaimPopup_Base_C_OnKeyUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.SetButtonText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InText                                                 (BlueprintVisible, BlueprintReadOnly, Parm)

void U_DLCclaimPopup_Base_C::SetButtonText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("_DLCclaimPopup_Base_C", "SetButtonText");

	Params::_DLCclaimPopup_Base_C_SetButtonText Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}

}

