#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Modio

#include "Basic.hpp"

#include "Modio_classes.hpp"
#include "Modio_parameters.hpp"


namespace CG
{

// Function Modio.ModioCommonTypesLibrary.Conv_ApiKeyToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioApiKey                     ApiKey                                                 (Parm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModioCommonTypesLibrary::Conv_ApiKeyToString(const struct FModioApiKey& ApiKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "Conv_ApiKeyToString");

	Params::ModioCommonTypesLibrary_Conv_ApiKeyToString Parms{};

	Parms.ApiKey = std::move(ApiKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.Conv_EmailAddressToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioEmailAddress               EmailAddress                                           (Parm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModioCommonTypesLibrary::Conv_EmailAddressToString(const struct FModioEmailAddress& EmailAddress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "Conv_EmailAddressToString");

	Params::ModioCommonTypesLibrary_Conv_EmailAddressToString Parms{};

	Parms.EmailAddress = std::move(EmailAddress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.Conv_EmailAuthCodeToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioEmailAuthCode              EmailAuthCode                                          (Parm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModioCommonTypesLibrary::Conv_EmailAuthCodeToString(const struct FModioEmailAuthCode& EmailAuthCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "Conv_EmailAuthCodeToString");

	Params::ModioCommonTypesLibrary_Conv_EmailAuthCodeToString Parms{};

	Parms.EmailAuthCode = std::move(EmailAuthCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.Conv_FileMetadataIDToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFileMetadataID             FileMetadataID                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModioCommonTypesLibrary::Conv_FileMetadataIDToString(const struct FModioFileMetadataID& FileMetadataID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "Conv_FileMetadataIDToString");

	Params::ModioCommonTypesLibrary_Conv_FileMetadataIDToString Parms{};

	Parms.FileMetadataID = std::move(FileMetadataID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.Conv_GameIDToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioGameID                     GameId                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModioCommonTypesLibrary::Conv_GameIDToString(const struct FModioGameID& GameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "Conv_GameIDToString");

	Params::ModioCommonTypesLibrary_Conv_GameIDToString Parms{};

	Parms.GameId = std::move(GameId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.Conv_ModIDToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModID                      ModId                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModioCommonTypesLibrary::Conv_ModIDToString(const struct FModioModID& ModId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "Conv_ModIDToString");

	Params::ModioCommonTypesLibrary_Conv_ModIDToString Parms{};

	Parms.ModId = std::move(ModId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.Conv_StringToEmailAddress
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Email                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioEmailAddress               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioEmailAddress UModioCommonTypesLibrary::Conv_StringToEmailAddress(const class FString& Email)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "Conv_StringToEmailAddress");

	Params::ModioCommonTypesLibrary_Conv_StringToEmailAddress Parms{};

	Parms.Email = std::move(Email);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.Conv_StringToEmailAuthCode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           AuthCode                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioEmailAuthCode              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioEmailAuthCode UModioCommonTypesLibrary::Conv_StringToEmailAuthCode(const class FString& AuthCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "Conv_StringToEmailAuthCode");

	Params::ModioCommonTypesLibrary_Conv_StringToEmailAuthCode Parms{};

	Parms.AuthCode = std::move(AuthCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.Conv_UserIDToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUserID                     UserId                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModioCommonTypesLibrary::Conv_UserIDToString(const struct FModioUserID& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "Conv_UserIDToString");

	Params::ModioCommonTypesLibrary_Conv_UserIDToString Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.EqualTo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModID                      A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioModID                      B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioCommonTypesLibrary::EqualTo(const struct FModioModID& A, const struct FModioModID& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "EqualTo");

	Params::ModioCommonTypesLibrary_EqualTo Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.GetRawValueFromModID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModID                      In                                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UModioCommonTypesLibrary::GetRawValueFromModID(const struct FModioModID& In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "GetRawValueFromModID");

	Params::ModioCommonTypesLibrary_GetRawValueFromModID Parms{};

	Parms.In = std::move(In);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.MakeApiKey
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ApiKey                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioApiKey                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioApiKey UModioCommonTypesLibrary::MakeApiKey(const class FString& ApiKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "MakeApiKey");

	Params::ModioCommonTypesLibrary_MakeApiKey Parms{};

	Parms.ApiKey = std::move(ApiKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.MakeAuthParams
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           AuthToken                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EmailAddress                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasAcceptedTOS                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioAuthenticationParams       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioAuthenticationParams UModioCommonTypesLibrary::MakeAuthParams(const class FString& AuthToken, const class FString& EmailAddress, const bool bHasAcceptedTOS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "MakeAuthParams");

	Params::ModioCommonTypesLibrary_MakeAuthParams Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.EmailAddress = std::move(EmailAddress);
	Parms.bHasAcceptedTOS = bHasAcceptedTOS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.MakeGameId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   GameId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioGameID                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FModioGameID UModioCommonTypesLibrary::MakeGameId(int64 GameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "MakeGameId");

	Params::ModioCommonTypesLibrary_MakeGameId Parms{};

	Parms.GameId = GameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.MakeInitializeOptions
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   GameId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ApiKey                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioEnvironment                       GameEnvironment                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioPortal                            PortalInUse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioInitializeOptions          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioInitializeOptions UModioCommonTypesLibrary::MakeInitializeOptions(int64 GameId, const class FString& ApiKey, EModioEnvironment GameEnvironment, EModioPortal PortalInUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "MakeInitializeOptions");

	Params::ModioCommonTypesLibrary_MakeInitializeOptions Parms{};

	Parms.GameId = GameId;
	Parms.ApiKey = std::move(ApiKey);
	Parms.GameEnvironment = GameEnvironment;
	Parms.PortalInUse = PortalInUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.NotEqualTo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModID                      A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioModID                      B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioCommonTypesLibrary::NotEqualTo(const struct FModioModID& A, const struct FModioModID& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "NotEqualTo");

	Params::ModioCommonTypesLibrary_NotEqualTo Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.SetPortal
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioInitializeOptions          Options                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EModioPortal                            PortalToUse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioInitializeOptions          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioInitializeOptions UModioCommonTypesLibrary::SetPortal(const struct FModioInitializeOptions& Options, EModioPortal PortalToUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "SetPortal");

	Params::ModioCommonTypesLibrary_SetPortal Parms{};

	Parms.Options = std::move(Options);
	Parms.PortalToUse = PortalToUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCommonTypesLibrary.SetSessionIdentifier
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioInitializeOptions          Options                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           SessionIdentifier                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioInitializeOptions          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioInitializeOptions UModioCommonTypesLibrary::SetSessionIdentifier(const struct FModioInitializeOptions& Options, const class FString& SessionIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCommonTypesLibrary", "SetSessionIdentifier");

	Params::ModioCommonTypesLibrary_SetSessionIdentifier Parms{};

	Parms.Options = std::move(Options);
	Parms.SessionIdentifier = std::move(SessionIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioCreateModLibrary.SetChangelogString
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioCreateModFileParams        In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Changelog                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioCreateModLibrary::SetChangelogString(struct FModioCreateModFileParams& In, const class FString& Changelog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCreateModLibrary", "SetChangelogString");

	Params::ModioCreateModLibrary_SetChangelogString Parms{};

	Parms.In = std::move(In);
	Parms.Changelog = std::move(Changelog);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioCreateModLibrary.SetDescription
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioCreateModParams            In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Description                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioCreateModLibrary::SetDescription(struct FModioCreateModParams& In, const class FString& Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCreateModLibrary", "SetDescription");

	Params::ModioCreateModLibrary_SetDescription Parms{};

	Parms.In = std::move(In);
	Parms.Description = std::move(Description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioCreateModLibrary.SetHomepageURL
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioCreateModParams            In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           HomepageURL                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioCreateModLibrary::SetHomepageURL(struct FModioCreateModParams& In, const class FString& HomepageURL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCreateModLibrary", "SetHomepageURL");

	Params::ModioCreateModLibrary_SetHomepageURL Parms{};

	Parms.In = std::move(In);
	Parms.HomepageURL = std::move(HomepageURL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioCreateModLibrary.SetInitialVisibility
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioCreateModParams            In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    InitialVisibility                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioCreateModLibrary::SetInitialVisibility(struct FModioCreateModParams& In, bool InitialVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCreateModLibrary", "SetInitialVisibility");

	Params::ModioCreateModLibrary_SetInitialVisibility Parms{};

	Parms.In = std::move(In);
	Parms.InitialVisibility = InitialVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioCreateModLibrary.SetMarkAsActiveRelease
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioCreateModFileParams        In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bMarkAsActiveRelease                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioCreateModLibrary::SetMarkAsActiveRelease(struct FModioCreateModFileParams& In, bool bMarkAsActiveRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCreateModLibrary", "SetMarkAsActiveRelease");

	Params::ModioCreateModLibrary_SetMarkAsActiveRelease Parms{};

	Parms.In = std::move(In);
	Parms.bMarkAsActiveRelease = bMarkAsActiveRelease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioCreateModLibrary.SetMetadataBlob
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioCreateModParams            In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           MetadataBlob                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioCreateModLibrary::SetMetadataBlob(struct FModioCreateModParams& In, const class FString& MetadataBlob)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCreateModLibrary", "SetMetadataBlob");

	Params::ModioCreateModLibrary_SetMetadataBlob Parms{};

	Parms.In = std::move(In);
	Parms.MetadataBlob = std::move(MetadataBlob);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioCreateModLibrary.SetModFileMetadataBlob
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioCreateModFileParams        In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           MetadataBlob                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioCreateModLibrary::SetModFileMetadataBlob(struct FModioCreateModFileParams& In, const class FString& MetadataBlob)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCreateModLibrary", "SetModFileMetadataBlob");

	Params::ModioCreateModLibrary_SetModFileMetadataBlob Parms{};

	Parms.In = std::move(In);
	Parms.MetadataBlob = std::move(MetadataBlob);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioCreateModLibrary.SetModfilePlatforms
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioCreateModFileParams        In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<EModioModfilePlatform>           Platforms                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UModioCreateModLibrary::SetModfilePlatforms(struct FModioCreateModFileParams& In, TArray<EModioModfilePlatform>& Platforms)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCreateModLibrary", "SetModfilePlatforms");

	Params::ModioCreateModLibrary_SetModfilePlatforms Parms{};

	Parms.In = std::move(In);
	Parms.Platforms = std::move(Platforms);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
	Platforms = std::move(Parms.Platforms);
}


// Function Modio.ModioCreateModLibrary.SetTags
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioCreateModParams            In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   Tags                                                   (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UModioCreateModLibrary::SetTags(struct FModioCreateModParams& In, TArray<class FString>& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCreateModLibrary", "SetTags");

	Params::ModioCreateModLibrary_SetTags Parms{};

	Parms.In = std::move(In);
	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
	Tags = std::move(Parms.Tags);
}


// Function Modio.ModioCreateModLibrary.SetVersionString
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioCreateModFileParams        In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Version                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioCreateModLibrary::SetVersionString(struct FModioCreateModFileParams& In, const class FString& Version)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioCreateModLibrary", "SetVersionString");

	Params::ModioCreateModLibrary_SetVersionString Parms{};

	Parms.In = std::move(In);
	Parms.Version = std::move(Version);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioEditModLibrary.SetDescription
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioEditModParams              In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Description                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioEditModLibrary::SetDescription(struct FModioEditModParams& In, const class FString& Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioEditModLibrary", "SetDescription");

	Params::ModioEditModLibrary_SetDescription Parms{};

	Parms.In = std::move(In);
	Parms.Description = std::move(Description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioEditModLibrary.SetHomepageURL
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioEditModParams              In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           HomepageURL                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioEditModLibrary::SetHomepageURL(struct FModioEditModParams& In, const class FString& HomepageURL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioEditModLibrary", "SetHomepageURL");

	Params::ModioEditModLibrary_SetHomepageURL Parms{};

	Parms.In = std::move(In);
	Parms.HomepageURL = std::move(HomepageURL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioEditModLibrary.SetMaturityFlags
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioEditModParams              In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EModioMaturityFlags                     MaturityFlags                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioEditModLibrary::SetMaturityFlags(struct FModioEditModParams& In, EModioMaturityFlags MaturityFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioEditModLibrary", "SetMaturityFlags");

	Params::ModioEditModLibrary_SetMaturityFlags Parms{};

	Parms.In = std::move(In);
	Parms.MaturityFlags = MaturityFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioEditModLibrary.SetMetadataBlob
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioEditModParams              In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           MetadataBlob                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioEditModLibrary::SetMetadataBlob(struct FModioEditModParams& In, const class FString& MetadataBlob)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioEditModLibrary", "SetMetadataBlob");

	Params::ModioEditModLibrary_SetMetadataBlob Parms{};

	Parms.In = std::move(In);
	Parms.MetadataBlob = std::move(MetadataBlob);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioEditModLibrary.SetName
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioEditModParams              In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioEditModLibrary::SetName(struct FModioEditModParams& In, const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioEditModLibrary", "SetName");

	Params::ModioEditModLibrary_SetName Parms{};

	Parms.In = std::move(In);
	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioEditModLibrary.SetNamePath
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioEditModParams              In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           NamePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioEditModLibrary::SetNamePath(struct FModioEditModParams& In, const class FString& NamePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioEditModLibrary", "SetNamePath");

	Params::ModioEditModLibrary_SetNamePath Parms{};

	Parms.In = std::move(In);
	Parms.NamePath = std::move(NamePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioEditModLibrary.SetSummary
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioEditModParams              In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Summary                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioEditModLibrary::SetSummary(struct FModioEditModParams& In, const class FString& Summary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioEditModLibrary", "SetSummary");

	Params::ModioEditModLibrary_SetSummary Parms{};

	Parms.In = std::move(In);
	Parms.Summary = std::move(Summary);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioEditModLibrary.SetVisibility
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioEditModParams              In                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    Visibility                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioEditModLibrary::SetVisibility(struct FModioEditModParams& In, bool Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioEditModLibrary", "SetVisibility");

	Params::ModioEditModLibrary_SetVisibility Parms{};

	Parms.In = std::move(In);
	Parms.Visibility = Visibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function Modio.ModioErrorCodeLibrary.GetMessage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioErrorCode                  Error                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModioErrorCodeLibrary::GetMessage(const struct FModioErrorCode& Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioErrorCodeLibrary", "GetMessage");

	Params::ModioErrorCodeLibrary_GetMessage Parms{};

	Parms.Error = std::move(Error);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioErrorCodeLibrary.GetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioErrorCode                  Error                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UModioErrorCodeLibrary::GetValue(const struct FModioErrorCode& Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioErrorCodeLibrary", "GetValue");

	Params::ModioErrorCodeLibrary_GetValue Parms{};

	Parms.Error = std::move(Error);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioErrorCodeLibrary.IsError
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioErrorCode                  Error                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioErrorCodeLibrary::IsError(const struct FModioErrorCode& Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioErrorCodeLibrary", "IsError");

	Params::ModioErrorCodeLibrary_IsError Parms{};

	Parms.Error = std::move(Error);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioErrorConditionLibrary.ErrorCodeMatches
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FModioErrorCode                  ErrorCode                                              (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioErrorCondition                    Condition                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioErrorConditionLibrary::ErrorCodeMatches(const struct FModioErrorCode& ErrorCode, EModioErrorCondition Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioErrorConditionLibrary", "ErrorCodeMatches");

	Params::ModioErrorConditionLibrary_ErrorCodeMatches Parms{};

	Parms.ErrorCode = std::move(ErrorCode);
	Parms.Condition = Condition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioExampleLibrary.GetAvatarThumbnailSize
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EModioAvatarSize                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EModioAvatarSize UModioExampleLibrary::GetAvatarThumbnailSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioExampleLibrary", "GetAvatarThumbnailSize");

	Params::ModioExampleLibrary_GetAvatarThumbnailSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioExampleLibrary.GetLogoFullSize
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EModioLogoSize                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EModioLogoSize UModioExampleLibrary::GetLogoFullSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioExampleLibrary", "GetLogoFullSize");

	Params::ModioExampleLibrary_GetLogoFullSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioExampleLibrary.GetLogoThumbnailSize
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EModioLogoSize                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EModioLogoSize UModioExampleLibrary::GetLogoThumbnailSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioExampleLibrary", "GetLogoThumbnailSize");

	Params::ModioExampleLibrary_GetLogoThumbnailSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioExampleLibrary.ListUserSubscriptionAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioFilterParams               FilterParams                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfoList& Result)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioExampleLibrary::ListUserSubscriptionAsync(const struct FModioFilterParams& FilterParams, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfoList& Result)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioExampleLibrary", "ListUserSubscriptionAsync");

	Params::ModioExampleLibrary_ListUserSubscriptionAsync Parms{};

	Parms.FilterParams = std::move(FilterParams);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioFilterParamsLibrary.ExcludingIDs
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FModioModID>              IDs                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::ExcludingIDs(struct FModioFilterParams& Filter, const TArray<struct FModioModID>& IDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "ExcludingIDs");

	Params::ModioFilterParamsLibrary_ExcludingIDs Parms{};

	Parms.Filter = std::move(Filter);
	Parms.IDs = std::move(IDs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.IndexedResults
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int64                                   StartIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ResultCount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::IndexedResults(struct FModioFilterParams& Filter, int64 StartIndex, int64 ResultCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "IndexedResults");

	Params::ModioFilterParamsLibrary_IndexedResults Parms{};

	Parms.Filter = std::move(Filter);
	Parms.StartIndex = StartIndex;
	Parms.ResultCount = ResultCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.MarkedLiveAfter
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FDateTime                        LiveAfter                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::MarkedLiveAfter(struct FModioFilterParams& Filter, const struct FDateTime& LiveAfter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "MarkedLiveAfter");

	Params::ModioFilterParamsLibrary_MarkedLiveAfter Parms{};

	Parms.Filter = std::move(Filter);
	Parms.LiveAfter = std::move(LiveAfter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.MarkedLiveBefore
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FDateTime                        LiveBefore                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::MarkedLiveBefore(struct FModioFilterParams& Filter, const struct FDateTime& LiveBefore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "MarkedLiveBefore");

	Params::ModioFilterParamsLibrary_MarkedLiveBefore Parms{};

	Parms.Filter = std::move(Filter);
	Parms.LiveBefore = std::move(LiveBefore);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.MatchingIDs
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FModioModID>              IDs                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::MatchingIDs(struct FModioFilterParams& Filter, const TArray<struct FModioModID>& IDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "MatchingIDs");

	Params::ModioFilterParamsLibrary_MatchingIDs Parms{};

	Parms.Filter = std::move(Filter);
	Parms.IDs = std::move(IDs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.MetadataLike
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           SearchString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::MetadataLike(struct FModioFilterParams& Filter, const class FString& SearchString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "MetadataLike");

	Params::ModioFilterParamsLibrary_MetadataLike Parms{};

	Parms.Filter = std::move(Filter);
	Parms.SearchString = std::move(SearchString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.NameContains
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           SearchString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::NameContains(struct FModioFilterParams& Filter, const class FString& SearchString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "NameContains");

	Params::ModioFilterParamsLibrary_NameContains Parms{};

	Parms.Filter = std::move(Filter);
	Parms.SearchString = std::move(SearchString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.NameContainsStrings
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   SearchStrings                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::NameContainsStrings(struct FModioFilterParams& Filter, const TArray<class FString>& SearchStrings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "NameContainsStrings");

	Params::ModioFilterParamsLibrary_NameContainsStrings Parms{};

	Parms.Filter = std::move(Filter);
	Parms.SearchStrings = std::move(SearchStrings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.PagedResults
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int64                                   PageNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   PageSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::PagedResults(struct FModioFilterParams& Filter, int64 PageNumber, int64 PageSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "PagedResults");

	Params::ModioFilterParamsLibrary_PagedResults Parms{};

	Parms.Filter = std::move(Filter);
	Parms.PageNumber = PageNumber;
	Parms.PageSize = PageSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.SortBy
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EModioSortFieldType                     ByField                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioSortDirection                     ByDirection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::SortBy(struct FModioFilterParams& Filter, EModioSortFieldType ByField, EModioSortDirection ByDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "SortBy");

	Params::ModioFilterParamsLibrary_SortBy Parms{};

	Parms.Filter = std::move(Filter);
	Parms.ByField = ByField;
	Parms.ByDirection = ByDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.WithoutTag
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Tag                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::WithoutTag(struct FModioFilterParams& Filter, const class FString& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "WithoutTag");

	Params::ModioFilterParamsLibrary_WithoutTag Parms{};

	Parms.Filter = std::move(Filter);
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.WithoutTags
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   NewTags                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::WithoutTags(struct FModioFilterParams& Filter, const TArray<class FString>& NewTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "WithoutTags");

	Params::ModioFilterParamsLibrary_WithoutTags Parms{};

	Parms.Filter = std::move(Filter);
	Parms.NewTags = std::move(NewTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.WithTag
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Tag                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::WithTag(struct FModioFilterParams& Filter, const class FString& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "WithTag");

	Params::ModioFilterParamsLibrary_WithTag Parms{};

	Parms.Filter = std::move(Filter);
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioFilterParamsLibrary.WithTags
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioFilterParams               Filter                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   NewTags                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioFilterParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioFilterParams UModioFilterParamsLibrary::WithTags(struct FModioFilterParams& Filter, const TArray<class FString>& NewTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioFilterParamsLibrary", "WithTags");

	Params::ModioFilterParamsLibrary_WithTags Parms{};

	Parms.Filter = std::move(Filter);
	Parms.NewTags = std::move(NewTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Filter = std::move(Parms.Filter);

	return Parms.ReturnValue;
}


// Function Modio.ModioImageLibrary.GetAvatarSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTexture*                         Avatar                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioAvatarSize                        AvatarSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UModioImageLibrary::GetAvatarSize(class UTexture* Avatar, EModioAvatarSize AvatarSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioImageLibrary", "GetAvatarSize");

	Params::ModioImageLibrary_GetAvatarSize Parms{};

	Parms.Avatar = Avatar;
	Parms.AvatarSize = AvatarSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioImageLibrary.GetGallerySize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTexture*                         GalleryImage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioGallerySize                       GallerySize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UModioImageLibrary::GetGallerySize(class UTexture* GalleryImage, EModioGallerySize GallerySize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioImageLibrary", "GetGallerySize");

	Params::ModioImageLibrary_GetGallerySize Parms{};

	Parms.GalleryImage = GalleryImage;
	Parms.GallerySize = GallerySize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioImageLibrary.GetLogoSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTexture*                         Logo                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioLogoSize                          LogoSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UModioImageLibrary::GetLogoSize(class UTexture* Logo, EModioLogoSize LogoSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioImageLibrary", "GetLogoSize");

	Params::ModioImageLibrary_GetLogoSize Parms{};

	Parms.Logo = Logo;
	Parms.LogoSize = LogoSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioImageLibrary.GetState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioImageWrapper               Image                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EModioImageState                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EModioImageState UModioImageLibrary::GetState(const struct FModioImageWrapper& Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioImageLibrary", "GetState");

	Params::ModioImageLibrary_GetState Parms{};

	Parms.Image = std::move(Image);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioImageLibrary.GetTexture
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioImageWrapper               Image                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture2DDynamic*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2DDynamic* UModioImageLibrary::GetTexture(const struct FModioImageWrapper& Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioImageLibrary", "GetTexture");

	Params::ModioImageLibrary_GetTexture Parms{};

	Parms.Image = std::move(Image);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioImageLibrary.LoadAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioImageWrapper               Image                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class UTexture2DDynamic* Texture)>OnImageLoaded                                          (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioImageLibrary::LoadAsync(const struct FModioImageWrapper& Image, TDelegate<void(class UTexture2DDynamic* Texture)> OnImageLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioImageLibrary", "LoadAsync");

	Params::ModioImageLibrary_LoadAsync Parms{};

	Parms.Image = std::move(Image);
	Parms.OnImageLoaded = OnImageLoaded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioModCollectionLibrary.GetID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModCollectionEntry         Entry                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioModID                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FModioModID UModioModCollectionLibrary::GetID(const struct FModioModCollectionEntry& Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioModCollectionLibrary", "GetID");

	Params::ModioModCollectionLibrary_GetID Parms{};

	Parms.Entry = std::move(Entry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioModCollectionLibrary.GetModProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModCollectionEntry         Entry                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FModioModInfo              ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModioModInfo UModioModCollectionLibrary::GetModProfile(const struct FModioModCollectionEntry& Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioModCollectionLibrary", "GetModProfile");

	Params::ModioModCollectionLibrary_GetModProfile Parms{};

	Parms.Entry = std::move(Entry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioModCollectionLibrary.GetModState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModCollectionEntry         Entry                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EModioModState                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EModioModState UModioModCollectionLibrary::GetModState(const struct FModioModCollectionEntry& Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioModCollectionLibrary", "GetModState");

	Params::ModioModCollectionLibrary_GetModState Parms{};

	Parms.Entry = std::move(Entry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioModCollectionLibrary.GetPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModCollectionEntry         Entry                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FString UModioModCollectionLibrary::GetPath(const struct FModioModCollectionEntry& Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioModCollectionLibrary", "GetPath");

	Params::ModioModCollectionLibrary_GetPath Parms{};

	Parms.Entry = std::move(Entry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioModDependenciesLibrary.GetDependencies
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModDependencyList          ModTags                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FModioModDependency>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FModioModDependency> UModioModDependenciesLibrary::GetDependencies(const struct FModioModDependencyList& ModTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioModDependenciesLibrary", "GetDependencies");

	Params::ModioModDependenciesLibrary_GetDependencies Parms{};

	Parms.ModTags = std::move(ModTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioModDependenciesLibrary.GetPagedResult
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModDependencyList          ModTags                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FModioPagedResult          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FModioPagedResult UModioModDependenciesLibrary::GetPagedResult(const struct FModioModDependencyList& ModTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioModDependenciesLibrary", "GetPagedResult");

	Params::ModioModDependenciesLibrary_GetPagedResult Parms{};

	Parms.ModTags = std::move(ModTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioModInfoListLibrary.GetMods
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModInfoList                ModInfoList                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FModioModInfo>      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FModioModInfo> UModioModInfoListLibrary::GetMods(const struct FModioModInfoList& ModInfoList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioModInfoListLibrary", "GetMods");

	Params::ModioModInfoListLibrary_GetMods Parms{};

	Parms.ModInfoList = std::move(ModInfoList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioModInfoListLibrary.GetPagedResult
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModInfoList                ModInfoList                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FModioPagedResult          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FModioPagedResult UModioModInfoListLibrary::GetPagedResult(const struct FModioModInfoList& ModInfoList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioModInfoListLibrary", "GetPagedResult");

	Params::ModioModInfoListLibrary_GetPagedResult Parms{};

	Parms.ModInfoList = std::move(ModInfoList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioModTagOptionsLibrary.GetPagedResult
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModTagOptions              ModTags                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FModioPagedResult          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FModioPagedResult UModioModTagOptionsLibrary::GetPagedResult(const struct FModioModTagOptions& ModTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioModTagOptionsLibrary", "GetPagedResult");

	Params::ModioModTagOptionsLibrary_GetPagedResult Parms{};

	Parms.ModTags = std::move(ModTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioModTagOptionsLibrary.GetTags
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModTagOptions              ModTags                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FModioModTagInfo>   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FModioModTagInfo> UModioModTagOptionsLibrary::GetTags(const struct FModioModTagOptions& ModTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioModTagOptionsLibrary", "GetTags");

	Params::ModioModTagOptionsLibrary_GetTags Parms{};

	Parms.ModTags = std::move(ModTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.GetValue_ModioOptionalImage
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalImage              OptionalImage                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioImageWrapper               Image                                                  (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::GetValue_ModioOptionalImage(const struct FModioOptionalImage& OptionalImage, struct FModioImageWrapper* Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "GetValue_ModioOptionalImage");

	Params::ModioOptionalLibrary_GetValue_ModioOptionalImage Parms{};

	Parms.OptionalImage = std::move(OptionalImage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Image != nullptr)
		*Image = std::move(Parms.Image);

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.GetValue_ModioOptionalModDependencyList
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModDependencyList  OptionalDependencyList                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioModDependencyList          DependencyList                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::GetValue_ModioOptionalModDependencyList(const struct FModioOptionalModDependencyList& OptionalDependencyList, struct FModioModDependencyList* DependencyList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "GetValue_ModioOptionalModDependencyList");

	Params::ModioOptionalLibrary_GetValue_ModioOptionalModDependencyList Parms{};

	Parms.OptionalDependencyList = std::move(OptionalDependencyList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DependencyList != nullptr)
		*DependencyList = std::move(Parms.DependencyList);

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.GetValue_ModioOptionalModID
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModID              OptionalID                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioModID                      ID                                                     (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::GetValue_ModioOptionalModID(const struct FModioOptionalModID& OptionalID, struct FModioModID* ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "GetValue_ModioOptionalModID");

	Params::ModioOptionalLibrary_GetValue_ModioOptionalModID Parms{};

	Parms.OptionalID = std::move(OptionalID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ID != nullptr)
		*ID = std::move(Parms.ID);

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.GetValue_ModioOptionalModInfo
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModInfo            OptionalModInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioModInfo                    ModInfo                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::GetValue_ModioOptionalModInfo(const struct FModioOptionalModInfo& OptionalModInfo, struct FModioModInfo* ModInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "GetValue_ModioOptionalModInfo");

	Params::ModioOptionalLibrary_GetValue_ModioOptionalModInfo Parms{};

	Parms.OptionalModInfo = std::move(OptionalModInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ModInfo != nullptr)
		*ModInfo = std::move(Parms.ModInfo);

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.GetValue_ModioOptionalModInfoList
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModInfoList        OptionalModInfoList                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioModInfoList                ModInfoList                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::GetValue_ModioOptionalModInfoList(const struct FModioOptionalModInfoList& OptionalModInfoList, struct FModioModInfoList* ModInfoList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "GetValue_ModioOptionalModInfoList");

	Params::ModioOptionalLibrary_GetValue_ModioOptionalModInfoList Parms{};

	Parms.OptionalModInfoList = std::move(OptionalModInfoList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ModInfoList != nullptr)
		*ModInfoList = std::move(Parms.ModInfoList);

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.GetValue_ModioOptionalModProgressInfo
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModProgressInfo    OptionalModProgressInfo                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioModProgressInfo            ModProgressInfo                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::GetValue_ModioOptionalModProgressInfo(const struct FModioOptionalModProgressInfo& OptionalModProgressInfo, struct FModioModProgressInfo* ModProgressInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "GetValue_ModioOptionalModProgressInfo");

	Params::ModioOptionalLibrary_GetValue_ModioOptionalModProgressInfo Parms{};

	Parms.OptionalModProgressInfo = std::move(OptionalModProgressInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ModProgressInfo != nullptr)
		*ModProgressInfo = std::move(Parms.ModProgressInfo);

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.GetValue_ModioOptionalModTagOptions
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModTagOptions      OptionalModTagOptions                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioModTagOptions              ModTagOptions                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::GetValue_ModioOptionalModTagOptions(const struct FModioOptionalModTagOptions& OptionalModTagOptions, struct FModioModTagOptions* ModTagOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "GetValue_ModioOptionalModTagOptions");

	Params::ModioOptionalLibrary_GetValue_ModioOptionalModTagOptions Parms{};

	Parms.OptionalModTagOptions = std::move(OptionalModTagOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ModTagOptions != nullptr)
		*ModTagOptions = std::move(Parms.ModTagOptions);

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.GetValue_ModioOptionalTerms
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalTerms              OptionalTerms                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioTerms                      Terms                                                  (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::GetValue_ModioOptionalTerms(const struct FModioOptionalTerms& OptionalTerms, struct FModioTerms* Terms)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "GetValue_ModioOptionalTerms");

	Params::ModioOptionalLibrary_GetValue_ModioOptionalTerms Parms{};

	Parms.OptionalTerms = std::move(OptionalTerms);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Terms != nullptr)
		*Terms = std::move(Parms.Terms);

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.GetValue_ModioOptionalUser
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalUser               OptionalUser                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FModioUser                       User                                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::GetValue_ModioOptionalUser(const struct FModioOptionalUser& OptionalUser, struct FModioUser* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "GetValue_ModioOptionalUser");

	Params::ModioOptionalLibrary_GetValue_ModioOptionalUser Parms{};

	Parms.OptionalUser = std::move(OptionalUser);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (User != nullptr)
		*User = std::move(Parms.User);

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.IsSet_ModioOptionalImage
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalImage              OptionalImage                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::IsSet_ModioOptionalImage(const struct FModioOptionalImage& OptionalImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "IsSet_ModioOptionalImage");

	Params::ModioOptionalLibrary_IsSet_ModioOptionalImage Parms{};

	Parms.OptionalImage = std::move(OptionalImage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.IsSet_ModioOptionalModDependencyList
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModDependencyList  OptionalDependencyList                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::IsSet_ModioOptionalModDependencyList(const struct FModioOptionalModDependencyList& OptionalDependencyList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "IsSet_ModioOptionalModDependencyList");

	Params::ModioOptionalLibrary_IsSet_ModioOptionalModDependencyList Parms{};

	Parms.OptionalDependencyList = std::move(OptionalDependencyList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.IsSet_ModioOptionalModID
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModID              OptionalID                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::IsSet_ModioOptionalModID(const struct FModioOptionalModID& OptionalID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "IsSet_ModioOptionalModID");

	Params::ModioOptionalLibrary_IsSet_ModioOptionalModID Parms{};

	Parms.OptionalID = std::move(OptionalID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.IsSet_ModioOptionalModInfo
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModInfo            OptionalModInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::IsSet_ModioOptionalModInfo(const struct FModioOptionalModInfo& OptionalModInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "IsSet_ModioOptionalModInfo");

	Params::ModioOptionalLibrary_IsSet_ModioOptionalModInfo Parms{};

	Parms.OptionalModInfo = std::move(OptionalModInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.IsSet_ModioOptionalModInfoList
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModInfoList        OptionalModInfoList                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::IsSet_ModioOptionalModInfoList(const struct FModioOptionalModInfoList& OptionalModInfoList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "IsSet_ModioOptionalModInfoList");

	Params::ModioOptionalLibrary_IsSet_ModioOptionalModInfoList Parms{};

	Parms.OptionalModInfoList = std::move(OptionalModInfoList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.IsSet_ModioOptionalModProgressInfo
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModProgressInfo    OptionalModProgressInfo                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::IsSet_ModioOptionalModProgressInfo(const struct FModioOptionalModProgressInfo& OptionalModProgressInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "IsSet_ModioOptionalModProgressInfo");

	Params::ModioOptionalLibrary_IsSet_ModioOptionalModProgressInfo Parms{};

	Parms.OptionalModProgressInfo = std::move(OptionalModProgressInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.IsSet_ModioOptionalModTagOptions
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModTagOptions      OptionalModTagOptions                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::IsSet_ModioOptionalModTagOptions(const struct FModioOptionalModTagOptions& OptionalModTagOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "IsSet_ModioOptionalModTagOptions");

	Params::ModioOptionalLibrary_IsSet_ModioOptionalModTagOptions Parms{};

	Parms.OptionalModTagOptions = std::move(OptionalModTagOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.IsSet_ModioOptionalTerms
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalTerms              OptionalTerms                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::IsSet_ModioOptionalTerms(const struct FModioOptionalTerms& OptionalTerms)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "IsSet_ModioOptionalTerms");

	Params::ModioOptionalLibrary_IsSet_ModioOptionalTerms Parms{};

	Parms.OptionalTerms = std::move(OptionalTerms);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioOptionalLibrary.IsSet_ModioOptionalUser
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalUser               OptionalUser                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioOptionalLibrary::IsSet_ModioOptionalUser(const struct FModioOptionalUser& OptionalUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioOptionalLibrary", "IsSet_ModioOptionalUser");

	Params::ModioOptionalLibrary_IsSet_ModioOptionalUser Parms{};

	Parms.OptionalUser = std::move(OptionalUser);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioPopupContainer.PopPopup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UModioPopupBase>      PopupClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UModioPopupBase*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UModioPopupBase* UModioPopupContainer::PopPopup(TSubclassOf<class UModioPopupBase> PopupClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioPopupContainer", "PopPopup");

	Params::ModioPopupContainer_PopPopup Parms{};

	Parms.PopupClass = PopupClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioPopupContainer.PushPopup
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UModioPopupBase>      PopupClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UModioPopupBase*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UModioPopupBase* UModioPopupContainer::PushPopup(TSubclassOf<class UModioPopupBase> PopupClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioPopupContainer", "PushPopup");

	Params::ModioPopupContainer_PushPopup Parms{};

	Parms.PopupClass = PopupClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioReportLibrary.MakeReportForGame
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioGameID                     Game                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioReportType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReportDescription                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReporterName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReporterContact                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioReportParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioReportParams UModioReportLibrary::MakeReportForGame(const struct FModioGameID& Game, EModioReportType Type, const class FString& ReportDescription, const class FString& ReporterName, const class FString& ReporterContact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioReportLibrary", "MakeReportForGame");

	Params::ModioReportLibrary_MakeReportForGame Parms{};

	Parms.Game = std::move(Game);
	Parms.Type = Type;
	Parms.ReportDescription = std::move(ReportDescription);
	Parms.ReporterName = std::move(ReporterName);
	Parms.ReporterContact = std::move(ReporterContact);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioReportLibrary.MakeReportForMod
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioModID                      Mod                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioReportType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReportDescription                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReporterName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReporterContact                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioReportParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioReportParams UModioReportLibrary::MakeReportForMod(const struct FModioModID& Mod, EModioReportType Type, const class FString& ReportDescription, const class FString& ReporterName, const class FString& ReporterContact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioReportLibrary", "MakeReportForMod");

	Params::ModioReportLibrary_MakeReportForMod Parms{};

	Parms.Mod = std::move(Mod);
	Parms.Type = Type;
	Parms.ReportDescription = std::move(ReportDescription);
	Parms.ReporterName = std::move(ReporterName);
	Parms.ReporterContact = std::move(ReporterContact);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioReportLibrary.MakeReportForUser
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUserID                     User                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioReportType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReportDescription                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReporterName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReporterContact                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioReportParams               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioReportParams UModioReportLibrary::MakeReportForUser(const struct FModioUserID& User, EModioReportType Type, const class FString& ReportDescription, const class FString& ReporterName, const class FString& ReporterContact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioReportLibrary", "MakeReportForUser");

	Params::ModioReportLibrary_MakeReportForUser Parms{};

	Parms.User = std::move(User);
	Parms.Type = Type;
	Parms.ReportDescription = std::move(ReportDescription);
	Parms.ReporterName = std::move(ReporterName);
	Parms.ReporterContact = std::move(ReporterContact);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSDKLibrary.Conv_Int64ToString
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   InInt                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModioSDKLibrary::Conv_Int64ToString(int64 InInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioSDKLibrary", "Conv_Int64ToString");

	Params::ModioSDKLibrary_Conv_Int64ToString Parms{};

	Parms.InInt = InInt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSDKLibrary.Conv_Int64ToText
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlwaysSign                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseGrouping                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinimumIntegralDigits                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaximumIntegralDigits                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UModioSDKLibrary::Conv_Int64ToText(int64 Value, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioSDKLibrary", "Conv_Int64ToText");

	Params::ModioSDKLibrary_Conv_Int64ToText Parms{};

	Parms.Value = Value;
	Parms.bAlwaysSign = bAlwaysSign;
	Parms.bUseGrouping = bUseGrouping;
	Parms.MinimumIntegralDigits = MinimumIntegralDigits;
	Parms.MaximumIntegralDigits = MaximumIntegralDigits;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSDKLibrary.Filesize_ToString
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   Filesize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxDecimals                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFileSizeUnit                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UModioSDKLibrary::Filesize_ToString(int64 Filesize, int32 MaxDecimals, EFileSizeUnit Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioSDKLibrary", "Filesize_ToString");

	Params::ModioSDKLibrary_Filesize_ToString Parms{};

	Parms.Filesize = Filesize;
	Parms.MaxDecimals = MaxDecimals;
	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSDKLibrary.GetProjectApiKey
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioApiKey                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioApiKey UModioSDKLibrary::GetProjectApiKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioSDKLibrary", "GetProjectApiKey");

	Params::ModioSDKLibrary_GetProjectApiKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSDKLibrary.GetProjectEnvironment
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EModioEnvironment                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EModioEnvironment UModioSDKLibrary::GetProjectEnvironment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioSDKLibrary", "GetProjectEnvironment");

	Params::ModioSDKLibrary_GetProjectEnvironment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSDKLibrary.GetProjectGameId
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioGameID                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FModioGameID UModioSDKLibrary::GetProjectGameId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioSDKLibrary", "GetProjectGameId");

	Params::ModioSDKLibrary_GetProjectGameId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSDKLibrary.GetProjectInitializeOptions
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioInitializeOptions          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioInitializeOptions UModioSDKLibrary::GetProjectInitializeOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioSDKLibrary", "GetProjectInitializeOptions");

	Params::ModioSDKLibrary_GetProjectInitializeOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSDKLibrary.GetProjectInitializeOptionsForSessionId
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           SessionId                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioInitializeOptions          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioInitializeOptions UModioSDKLibrary::GetProjectInitializeOptionsForSessionId(const class FString& SessionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioSDKLibrary", "GetProjectInitializeOptionsForSessionId");

	Params::ModioSDKLibrary_GetProjectInitializeOptionsForSessionId Parms{};

	Parms.SessionId = std::move(SessionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSDKLibrary.IsValidEmailAddressFormat
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioSDKLibrary::IsValidEmailAddressFormat(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioSDKLibrary", "IsValidEmailAddressFormat");

	Params::ModioSDKLibrary_IsValidEmailAddressFormat Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSDKLibrary.IsValidSecurityCodeFormat
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioSDKLibrary::IsValidSecurityCodeFormat(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioSDKLibrary", "IsValidSecurityCodeFormat");

	Params::ModioSDKLibrary_IsValidSecurityCodeFormat Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSDKLibrary.Pct_Int64Int64
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   Dividend                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Divisor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UModioSDKLibrary::Pct_Int64Int64(int64 Dividend, int64 Divisor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioSDKLibrary", "Pct_Int64Int64");

	Params::ModioSDKLibrary_Pct_Int64Int64 Parms{};

	Parms.Dividend = Dividend;
	Parms.Divisor = Divisor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSubsystem.DisableModManagement
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UModioSubsystem::DisableModManagement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "DisableModManagement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.GetLastValidationError
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FModioValidationError>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FModioValidationError> UModioSubsystem::GetLastValidationError()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "GetLastValidationError");

	Params::ModioSubsystem_GetLastValidationError Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSubsystem.IsModManagementBusy
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioSubsystem::IsModManagementBusy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "IsModManagementBusy");

	Params::ModioSubsystem_IsModManagementBusy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSubsystem.K2_ArchiveModAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      Mod                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_ArchiveModAsync(const struct FModioModID& Mod, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_ArchiveModAsync");

	Params::ModioSubsystem_K2_ArchiveModAsync Parms{};

	Parms.Mod = std::move(Mod);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_AuthenticateUserEmailAsync
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioEmailAuthCode              AuthenticationCode                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_AuthenticateUserEmailAsync(const struct FModioEmailAuthCode& AuthenticationCode, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_AuthenticateUserEmailAsync");

	Params::ModioSubsystem_K2_AuthenticateUserEmailAsync Parms{};

	Parms.AuthenticationCode = std::move(AuthenticationCode);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_AuthenticateUserExternalAsync
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioAuthenticationParams       User                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EModioAuthenticationProvider            Provider                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_AuthenticateUserExternalAsync(const struct FModioAuthenticationParams& User, EModioAuthenticationProvider Provider, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_AuthenticateUserExternalAsync");

	Params::ModioSubsystem_K2_AuthenticateUserExternalAsync Parms{};

	Parms.User = std::move(User);
	Parms.Provider = Provider;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_ClearUserDataAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_ClearUserDataAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_ClearUserDataAsync");

	Params::ModioSubsystem_K2_ClearUserDataAsync Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_EnableModManagement
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FModioModManagementEvent& Event)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioErrorCode                  ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FModioErrorCode UModioSubsystem::K2_EnableModManagement(TDelegate<void(const struct FModioModManagementEvent& Event)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_EnableModManagement");

	Params::ModioSubsystem_K2_EnableModManagement Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSubsystem.K2_FetchExternalUpdatesAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>OnFetchDone                                            (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_FetchExternalUpdatesAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode)> OnFetchDone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_FetchExternalUpdatesAsync");

	Params::ModioSubsystem_K2_FetchExternalUpdatesAsync Parms{};

	Parms.OnFetchDone = OnFetchDone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_ForceUninstallModAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      ModToRemove                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_ForceUninstallModAsync(const struct FModioModID& ModToRemove, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_ForceUninstallModAsync");

	Params::ModioSubsystem_K2_ForceUninstallModAsync Parms{};

	Parms.ModToRemove = std::move(ModToRemove);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_GetModCreationHandle
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModCreationHandle          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FModioModCreationHandle UModioSubsystem::K2_GetModCreationHandle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_GetModCreationHandle");

	Params::ModioSubsystem_K2_GetModCreationHandle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSubsystem.K2_GetModDependenciesAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      ModId                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModDependencyList& Dependencies)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_GetModDependenciesAsync(const struct FModioModID& ModId, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModDependencyList& Dependencies)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_GetModDependenciesAsync");

	Params::ModioSubsystem_K2_GetModDependenciesAsync Parms{};

	Parms.ModId = std::move(ModId);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_GetModInfoAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      ModId                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfo& ModInfo)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_GetModInfoAsync(const struct FModioModID& ModId, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfo& ModInfo)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_GetModInfoAsync");

	Params::ModioSubsystem_K2_GetModInfoAsync Parms{};

	Parms.ModId = std::move(ModId);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_GetModMediaAvatarAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      ModId                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioAvatarSize                        AvatarSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Path)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_GetModMediaAvatarAsync(const struct FModioModID& ModId, EModioAvatarSize AvatarSize, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Path)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_GetModMediaAvatarAsync");

	Params::ModioSubsystem_K2_GetModMediaAvatarAsync Parms{};

	Parms.ModId = std::move(ModId);
	Parms.AvatarSize = AvatarSize;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_GetModMediaGalleryImageAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      ModId                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioGallerySize                       GallerySize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Path)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_GetModMediaGalleryImageAsync(const struct FModioModID& ModId, EModioGallerySize GallerySize, int32 Param_Index, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Path)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_GetModMediaGalleryImageAsync");

	Params::ModioSubsystem_K2_GetModMediaGalleryImageAsync Parms{};

	Parms.ModId = std::move(ModId);
	Parms.GallerySize = GallerySize;
	Parms.Param_Index = Param_Index;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_GetModMediaLogoAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      ModId                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioLogoSize                          LogoSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Path)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_GetModMediaLogoAsync(const struct FModioModID& ModId, EModioLogoSize LogoSize, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Path)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_GetModMediaLogoAsync");

	Params::ModioSubsystem_K2_GetModMediaLogoAsync Parms{};

	Parms.ModId = std::move(ModId);
	Parms.LogoSize = LogoSize;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_GetModTagOptionsAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModTagOptions& ModTagOptions)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_GetModTagOptionsAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModTagOptions& ModTagOptions)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_GetModTagOptionsAsync");

	Params::ModioSubsystem_K2_GetModTagOptionsAsync Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_GetTermsOfUseAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// EModioAuthenticationProvider            Provider                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioLanguage                          Locale                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalTerms& Terms)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_GetTermsOfUseAsync(EModioAuthenticationProvider Provider, EModioLanguage Locale, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalTerms& Terms)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_GetTermsOfUseAsync");

	Params::ModioSubsystem_K2_GetTermsOfUseAsync Parms{};

	Parms.Provider = Provider;
	Parms.Locale = Locale;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_GetUserMediaAvatarAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// EModioAvatarSize                        AvatarSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Path)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_GetUserMediaAvatarAsync(EModioAvatarSize AvatarSize, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Path)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_GetUserMediaAvatarAsync");

	Params::ModioSubsystem_K2_GetUserMediaAvatarAsync Parms{};

	Parms.AvatarSize = AvatarSize;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_InitializeAsync
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioInitializeOptions          InitializeOptions                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>OnInitComplete                                         (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_InitializeAsync(const struct FModioInitializeOptions& InitializeOptions, TDelegate<void(const struct FModioErrorCode& ErrorCode)> OnInitComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_InitializeAsync");

	Params::ModioSubsystem_K2_InitializeAsync Parms{};

	Parms.InitializeOptions = std::move(InitializeOptions);
	Parms.OnInitComplete = OnInitComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_ListAllModsAsync
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioFilterParams               Filter                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfoList& Result)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_ListAllModsAsync(const struct FModioFilterParams& Filter, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfoList& Result)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_ListAllModsAsync");

	Params::ModioSubsystem_K2_ListAllModsAsync Parms{};

	Parms.Filter = std::move(Filter);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_QueryCurrentModUpdate
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalModProgressInfo    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioOptionalModProgressInfo UModioSubsystem::K2_QueryCurrentModUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_QueryCurrentModUpdate");

	Params::ModioSubsystem_K2_QueryCurrentModUpdate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSubsystem.K2_QueryUserProfile
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioOptionalUser               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModioOptionalUser UModioSubsystem::K2_QueryUserProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_QueryUserProfile");

	Params::ModioSubsystem_K2_QueryUserProfile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSubsystem.K2_ReportContentAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioReportParams               Report                                                 (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_ReportContentAsync(const struct FModioReportParams& Report, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_ReportContentAsync");

	Params::ModioSubsystem_K2_ReportContentAsync Parms{};

	Parms.Report = std::move(Report);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_RequestEmailAuthCodeAsync
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FModioEmailAddress               EmailAddress                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_RequestEmailAuthCodeAsync(const struct FModioEmailAddress& EmailAddress, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_RequestEmailAuthCodeAsync");

	Params::ModioSubsystem_K2_RequestEmailAuthCodeAsync Parms{};

	Parms.EmailAddress = std::move(EmailAddress);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_ShutdownAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>OnShutdownComplete                                     (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_ShutdownAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode)> OnShutdownComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_ShutdownAsync");

	Params::ModioSubsystem_K2_ShutdownAsync Parms{};

	Parms.OnShutdownComplete = OnShutdownComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_SubmitModChangesAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      Mod                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioEditModParams              Params_0                                               (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfo& ModInfo)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_SubmitModChangesAsync(const struct FModioModID& Mod, const struct FModioEditModParams& Params_0, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfo& ModInfo)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_SubmitModChangesAsync");

	Params::ModioSubsystem_K2_SubmitModChangesAsync Parms{};

	Parms.Mod = std::move(Mod);
	Parms.Params_0 = std::move(Params_0);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_SubmitModRatingAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      Mod                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModioRating                            Rating                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_SubmitModRatingAsync(const struct FModioModID& Mod, EModioRating Rating, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_SubmitModRatingAsync");

	Params::ModioSubsystem_K2_SubmitModRatingAsync Parms{};

	Parms.Mod = std::move(Mod);
	Parms.Rating = Rating;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_SubmitNewModAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModCreationHandle          Handle                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioCreateModParams            Params_0                                               (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModID& NewModID)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_SubmitNewModAsync(const struct FModioModCreationHandle& Handle, const struct FModioCreateModParams& Params_0, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModID& NewModID)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_SubmitNewModAsync");

	Params::ModioSubsystem_K2_SubmitNewModAsync Parms{};

	Parms.Handle = std::move(Handle);
	Parms.Params_0 = std::move(Params_0);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_SubmitNewModFileForMod
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      Mod                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioCreateModFileParams        Params_0                                               (Parm, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_SubmitNewModFileForMod(const struct FModioModID& Mod, const struct FModioCreateModFileParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_SubmitNewModFileForMod");

	Params::ModioSubsystem_K2_SubmitNewModFileForMod Parms{};

	Parms.Mod = std::move(Mod);
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_SubscribeToModAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      ModToSubscribeTo                                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>OnSubscribeComplete                                    (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_SubscribeToModAsync(const struct FModioModID& ModToSubscribeTo, TDelegate<void(const struct FModioErrorCode& ErrorCode)> OnSubscribeComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_SubscribeToModAsync");

	Params::ModioSubsystem_K2_SubscribeToModAsync Parms{};

	Parms.ModToSubscribeTo = std::move(ModToSubscribeTo);
	Parms.OnSubscribeComplete = OnSubscribeComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_UnsubscribeFromModAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      ModToUnsubscribeFrom                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>OnUnsubscribeComplete                                  (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_UnsubscribeFromModAsync(const struct FModioModID& ModToUnsubscribeFrom, TDelegate<void(const struct FModioErrorCode& ErrorCode)> OnUnsubscribeComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_UnsubscribeFromModAsync");

	Params::ModioSubsystem_K2_UnsubscribeFromModAsync Parms{};

	Parms.ModToUnsubscribeFrom = std::move(ModToUnsubscribeFrom);
	Parms.OnUnsubscribeComplete = OnUnsubscribeComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.K2_VerifyUserAuthenticationAsync
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FModioErrorCode& ErrorCode)>Callback                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UModioSubsystem::K2_VerifyUserAuthenticationAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "K2_VerifyUserAuthenticationAsync");

	Params::ModioSubsystem_K2_VerifyUserAuthenticationAsync Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.PrioritizeTransferForMod
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// struct FModioModID                      ModToPrioritize                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioErrorCode                  ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FModioErrorCode UModioSubsystem::PrioritizeTransferForMod(const struct FModioModID& ModToPrioritize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "PrioritizeTransferForMod");

	Params::ModioSubsystem_PrioritizeTransferForMod Parms{};

	Parms.ModToPrioritize = std::move(ModToPrioritize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSubsystem.QuerySystemInstallations
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<struct FModioModID, struct FModioModCollectionEntry>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<struct FModioModID, struct FModioModCollectionEntry> UModioSubsystem::QuerySystemInstallations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "QuerySystemInstallations");

	Params::ModioSubsystem_QuerySystemInstallations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSubsystem.QueryUserInstallations
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bIncludeOutdatedMods                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<struct FModioModID, struct FModioModCollectionEntry>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<struct FModioModID, struct FModioModCollectionEntry> UModioSubsystem::QueryUserInstallations(bool bIncludeOutdatedMods)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "QueryUserInstallations");

	Params::ModioSubsystem_QueryUserInstallations Parms{};

	Parms.bIncludeOutdatedMods = bIncludeOutdatedMods;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSubsystem.QueryUserSubscriptions
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const TMap<struct FModioModID, struct FModioModCollectionEntry>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<struct FModioModID, struct FModioModCollectionEntry> UModioSubsystem::QueryUserSubscriptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "QueryUserSubscriptions");

	Params::ModioSubsystem_QueryUserSubscriptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioSubsystem.RunPendingHandlers
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UModioSubsystem::RunPendingHandlers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "RunPendingHandlers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioSubsystem.SetLogLevel
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// EModioLogLevel                          UnrealLogLevel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioSubsystem::SetLogLevel(EModioLogLevel UnrealLogLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSubsystem", "SetLogLevel");

	Params::ModioSubsystem_SetLogLevel Parms{};

	Parms.UnrealLogLevel = UnrealLogLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Modio.ModioUnsigned64Library.Add
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUnsigned64                 LHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 RHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FModioUnsigned64 UModioUnsigned64Library::Add(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "Add");

	Params::ModioUnsigned64Library_Add Parms{};

	Parms.LHS = std::move(LHS);
	Parms.RHS = std::move(RHS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioUnsigned64Library.BreakToComponents
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUnsigned64                 In                                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   High                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Low                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioUnsigned64Library::BreakToComponents(const struct FModioUnsigned64& In, int32* High, int32* Low)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "BreakToComponents");

	Params::ModioUnsigned64Library_BreakToComponents Parms{};

	Parms.In = std::move(In);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (High != nullptr)
		*High = Parms.High;

	if (Low != nullptr)
		*Low = Parms.Low;
}


// Function Modio.ModioUnsigned64Library.Conv_FModioUnsigned64ToFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUnsigned64                 In                                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UModioUnsigned64Library::Conv_FModioUnsigned64ToFloat(const struct FModioUnsigned64& In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "Conv_FModioUnsigned64ToFloat");

	Params::ModioUnsigned64Library_Conv_FModioUnsigned64ToFloat Parms{};

	Parms.In = std::move(In);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioUnsigned64Library.Divide
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUnsigned64                 LHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 RHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FModioUnsigned64 UModioUnsigned64Library::Divide(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "Divide");

	Params::ModioUnsigned64Library_Divide Parms{};

	Parms.LHS = std::move(LHS);
	Parms.RHS = std::move(RHS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioUnsigned64Library.DivideFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUnsigned64                 LHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   RHS                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UModioUnsigned64Library::DivideFloat(const struct FModioUnsigned64& LHS, const float RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "DivideFloat");

	Params::ModioUnsigned64Library_DivideFloat Parms{};

	Parms.LHS = std::move(LHS);
	Parms.RHS = RHS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioUnsigned64Library.DivideToFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUnsigned64                 LHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 RHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UModioUnsigned64Library::DivideToFloat(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "DivideToFloat");

	Params::ModioUnsigned64Library_DivideToFloat Parms{};

	Parms.LHS = std::move(LHS);
	Parms.RHS = std::move(RHS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioUnsigned64Library.EqualTo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUnsigned64                 LHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 RHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioUnsigned64Library::EqualTo(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "EqualTo");

	Params::ModioUnsigned64Library_EqualTo Parms{};

	Parms.LHS = std::move(LHS);
	Parms.RHS = std::move(RHS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioUnsigned64Library.GreaterThan
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUnsigned64                 LHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 RHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioUnsigned64Library::GreaterThan(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "GreaterThan");

	Params::ModioUnsigned64Library_GreaterThan Parms{};

	Parms.LHS = std::move(LHS);
	Parms.RHS = std::move(RHS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioUnsigned64Library.LessThan
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUnsigned64                 LHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 RHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioUnsigned64Library::LessThan(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "LessThan");

	Params::ModioUnsigned64Library_LessThan Parms{};

	Parms.LHS = std::move(LHS);
	Parms.RHS = std::move(RHS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioUnsigned64Library.MakeFromComponents
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   High                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Low                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FModioUnsigned64 UModioUnsigned64Library::MakeFromComponents(const int32& High, const int32& Low)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "MakeFromComponents");

	Params::ModioUnsigned64Library_MakeFromComponents Parms{};

	Parms.High = High;
	Parms.Low = Low;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioUnsigned64Library.NotEqualTo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUnsigned64                 LHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 RHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModioUnsigned64Library::NotEqualTo(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "NotEqualTo");

	Params::ModioUnsigned64Library_NotEqualTo Parms{};

	Parms.LHS = std::move(LHS);
	Parms.RHS = std::move(RHS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioUnsigned64Library.Percentage_Unsigned64
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUnsigned64                 LHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 RHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UModioUnsigned64Library::Percentage_Unsigned64(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "Percentage_Unsigned64");

	Params::ModioUnsigned64Library_Percentage_Unsigned64 Parms{};

	Parms.LHS = std::move(LHS);
	Parms.RHS = std::move(RHS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Modio.ModioUnsigned64Library.Subtract
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FModioUnsigned64                 LHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 RHS                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FModioUnsigned64                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FModioUnsigned64 UModioUnsigned64Library::Subtract(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModioUnsigned64Library", "Subtract");

	Params::ModioUnsigned64Library_Subtract Parms{};

	Parms.LHS = std::move(LHS);
	Parms.RHS = std::move(RHS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

