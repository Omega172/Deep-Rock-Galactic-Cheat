#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PostProcessing_CharSelect

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FSD_classes.hpp"


namespace CG
{

// BlueprintGeneratedClass BP_PostProcessing_CharSelect.BP_PostProcessing_CharSelect_C
// 0x0028 (0x0268 - 0x0240)
class ABP_PostProcessing_CharSelect_C final : public AFSDPostProcessingActor
{
public:
	class UPostProcessComponent*                  PostProcess;                                       // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoundsSize;                                        // 0x0258(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Unbound;                                           // 0x0264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PostProcessing_CharSelect_C">();
	}
	static class ABP_PostProcessing_CharSelect_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PostProcessing_CharSelect_C>();
	}
};
static_assert(alignof(ABP_PostProcessing_CharSelect_C) == 0x000008, "Wrong alignment on ABP_PostProcessing_CharSelect_C");
static_assert(sizeof(ABP_PostProcessing_CharSelect_C) == 0x000268, "Wrong size on ABP_PostProcessing_CharSelect_C");
static_assert(offsetof(ABP_PostProcessing_CharSelect_C, PostProcess) == 0x000240, "Member 'ABP_PostProcessing_CharSelect_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessing_CharSelect_C, Box) == 0x000248, "Member 'ABP_PostProcessing_CharSelect_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessing_CharSelect_C, DefaultSceneRoot) == 0x000250, "Member 'ABP_PostProcessing_CharSelect_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessing_CharSelect_C, BoundsSize) == 0x000258, "Member 'ABP_PostProcessing_CharSelect_C::BoundsSize' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessing_CharSelect_C, Unbound) == 0x000264, "Member 'ABP_PostProcessing_CharSelect_C::Unbound' has a wrong offset!");

}

