#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_ImageTinted

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ENUM_MenuColors_structs.hpp"
#include "SlateCore_structs.hpp"


namespace CG::Params
{

// Function UI_ImageTinted.UI_ImageTinted_C.ExecuteUbergraph_UI_ImageTinted
// 0x0008 (0x0008 - 0x0000)
struct UI_ImageTinted_C_ExecuteUbergraph_UI_ImageTinted final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_ImageTinted_C_ExecuteUbergraph_UI_ImageTinted) == 0x000004, "Wrong alignment on UI_ImageTinted_C_ExecuteUbergraph_UI_ImageTinted");
static_assert(sizeof(UI_ImageTinted_C_ExecuteUbergraph_UI_ImageTinted) == 0x000008, "Wrong size on UI_ImageTinted_C_ExecuteUbergraph_UI_ImageTinted");
static_assert(offsetof(UI_ImageTinted_C_ExecuteUbergraph_UI_ImageTinted, EntryPoint) == 0x000000, "Member 'UI_ImageTinted_C_ExecuteUbergraph_UI_ImageTinted::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_ExecuteUbergraph_UI_ImageTinted, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_ImageTinted_C_ExecuteUbergraph_UI_ImageTinted::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function UI_ImageTinted.UI_ImageTinted_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_ImageTinted_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_ImageTinted_C_PreConstruct) == 0x000001, "Wrong alignment on UI_ImageTinted_C_PreConstruct");
static_assert(sizeof(UI_ImageTinted_C_PreConstruct) == 0x000001, "Wrong size on UI_ImageTinted_C_PreConstruct");
static_assert(offsetof(UI_ImageTinted_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_ImageTinted_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_ImageTinted.UI_ImageTinted_C.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct UI_ImageTinted_C_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(UI_ImageTinted_C_SetBrush) == 0x000008, "Wrong alignment on UI_ImageTinted_C_SetBrush");
static_assert(sizeof(UI_ImageTinted_C_SetBrush) == 0x000088, "Wrong size on UI_ImageTinted_C_SetBrush");
static_assert(offsetof(UI_ImageTinted_C_SetBrush, InBrush) == 0x000000, "Member 'UI_ImageTinted_C_SetBrush::InBrush' has a wrong offset!");

// Function UI_ImageTinted.UI_ImageTinted_C.SetTint
// 0x0018 (0x0018 - 0x0000)
struct UI_ImageTinted_C_SetTint final
{
public:
	ENUM_MenuColors                               InTint;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3082[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOpacity;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MenuColorsAndOpacity_OutputColor;         // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_ImageTinted_C_SetTint) == 0x000004, "Wrong alignment on UI_ImageTinted_C_SetTint");
static_assert(sizeof(UI_ImageTinted_C_SetTint) == 0x000018, "Wrong size on UI_ImageTinted_C_SetTint");
static_assert(offsetof(UI_ImageTinted_C_SetTint, InTint) == 0x000000, "Member 'UI_ImageTinted_C_SetTint::InTint' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetTint, InOpacity) == 0x000004, "Member 'UI_ImageTinted_C_SetTint::InOpacity' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetTint, CallFunc_MenuColorsAndOpacity_OutputColor) == 0x000008, "Member 'UI_ImageTinted_C_SetTint::CallFunc_MenuColorsAndOpacity_OutputColor' has a wrong offset!");

// Function UI_ImageTinted.UI_ImageTinted_C.SetBrushFromTexture
// 0x00B8 (0x00B8 - 0x0000)
struct UI_ImageTinted_C_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MatchSize;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3083[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Size;                                              // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Blueprint_GetSizeY_ReturnValue;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Blueprint_GetSizeX_ReturnValue;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3084[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0030(0x0088)()
};
static_assert(alignof(UI_ImageTinted_C_SetBrushFromTexture) == 0x000008, "Wrong alignment on UI_ImageTinted_C_SetBrushFromTexture");
static_assert(sizeof(UI_ImageTinted_C_SetBrushFromTexture) == 0x0000B8, "Wrong size on UI_ImageTinted_C_SetBrushFromTexture");
static_assert(offsetof(UI_ImageTinted_C_SetBrushFromTexture, Texture) == 0x000000, "Member 'UI_ImageTinted_C_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetBrushFromTexture, MatchSize) == 0x000008, "Member 'UI_ImageTinted_C_SetBrushFromTexture::MatchSize' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetBrushFromTexture, Size) == 0x00000C, "Member 'UI_ImageTinted_C_SetBrushFromTexture::Size' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetBrushFromTexture, CallFunc_Blueprint_GetSizeY_ReturnValue) == 0x000014, "Member 'UI_ImageTinted_C_SetBrushFromTexture::CallFunc_Blueprint_GetSizeY_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetBrushFromTexture, CallFunc_Blueprint_GetSizeX_ReturnValue) == 0x000018, "Member 'UI_ImageTinted_C_SetBrushFromTexture::CallFunc_Blueprint_GetSizeX_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetBrushFromTexture, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00001C, "Member 'UI_ImageTinted_C_SetBrushFromTexture::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetBrushFromTexture, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000020, "Member 'UI_ImageTinted_C_SetBrushFromTexture::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetBrushFromTexture, CallFunc_MakeVector2D_ReturnValue) == 0x000024, "Member 'UI_ImageTinted_C_SetBrushFromTexture::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetBrushFromTexture, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'UI_ImageTinted_C_SetBrushFromTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetBrushFromTexture, CallFunc_BooleanAND_ReturnValue) == 0x00002D, "Member 'UI_ImageTinted_C_SetBrushFromTexture::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetBrushFromTexture, K2Node_MakeStruct_SlateBrush) == 0x000030, "Member 'UI_ImageTinted_C_SetBrushFromTexture::K2Node_MakeStruct_SlateBrush' has a wrong offset!");

// Function UI_ImageTinted.UI_ImageTinted_C.GetBrush
// 0x0088 (0x0088 - 0x0000)
struct UI_ImageTinted_C_GetBrush final
{
public:
	struct FSlateBrush                            Param_Brush;                                       // 0x0000(0x0088)(Parm, OutParm)
};
static_assert(alignof(UI_ImageTinted_C_GetBrush) == 0x000008, "Wrong alignment on UI_ImageTinted_C_GetBrush");
static_assert(sizeof(UI_ImageTinted_C_GetBrush) == 0x000088, "Wrong size on UI_ImageTinted_C_GetBrush");
static_assert(offsetof(UI_ImageTinted_C_GetBrush, Param_Brush) == 0x000000, "Member 'UI_ImageTinted_C_GetBrush::Param_Brush' has a wrong offset!");

// Function UI_ImageTinted.UI_ImageTinted_C.SelectTint
// 0x0005 (0x0005 - 0x0000)
struct UI_ImageTinted_C_SelectTint final
{
public:
	ENUM_MenuColors                               FLASE;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MenuColors                               TURR;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Condition;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_MenuColors                               K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_ImageTinted_C_SelectTint) == 0x000001, "Wrong alignment on UI_ImageTinted_C_SelectTint");
static_assert(sizeof(UI_ImageTinted_C_SelectTint) == 0x000005, "Wrong size on UI_ImageTinted_C_SelectTint");
static_assert(offsetof(UI_ImageTinted_C_SelectTint, FLASE) == 0x000000, "Member 'UI_ImageTinted_C_SelectTint::FLASE' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SelectTint, TURR) == 0x000001, "Member 'UI_ImageTinted_C_SelectTint::TURR' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SelectTint, Condition) == 0x000002, "Member 'UI_ImageTinted_C_SelectTint::Condition' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SelectTint, Temp_bool_Variable) == 0x000003, "Member 'UI_ImageTinted_C_SelectTint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SelectTint, K2Node_Select_Default) == 0x000004, "Member 'UI_ImageTinted_C_SelectTint::K2Node_Select_Default' has a wrong offset!");

// Function UI_ImageTinted.UI_ImageTinted_C.SetBrushSize
// 0x0090 (0x0090 - 0x0000)
struct UI_ImageTinted_C_SetBrushSize final
{
public:
	struct FVector2D                              Brush_Image_Size;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0008(0x0088)()
};
static_assert(alignof(UI_ImageTinted_C_SetBrushSize) == 0x000008, "Wrong alignment on UI_ImageTinted_C_SetBrushSize");
static_assert(sizeof(UI_ImageTinted_C_SetBrushSize) == 0x000090, "Wrong size on UI_ImageTinted_C_SetBrushSize");
static_assert(offsetof(UI_ImageTinted_C_SetBrushSize, Brush_Image_Size) == 0x000000, "Member 'UI_ImageTinted_C_SetBrushSize::Brush_Image_Size' has a wrong offset!");
static_assert(offsetof(UI_ImageTinted_C_SetBrushSize, K2Node_MakeStruct_SlateBrush) == 0x000008, "Member 'UI_ImageTinted_C_SetBrushSize::K2Node_MakeStruct_SlateBrush' has a wrong offset!");

}

