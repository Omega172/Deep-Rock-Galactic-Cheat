#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUD_DamageClass_Indicator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_classes.hpp"
#include "UMG_structs.hpp"


namespace CG
{

// WidgetBlueprintGeneratedClass HUD_DamageClass_Indicator.HUD_DamageClass_Indicator_C
// 0x0090 (0x0310 - 0x0280)
class UHUD_DamageClass_Indicator_C final : public UFSDUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHorizontalBox*                         AfflictionBox_Left;                                // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         AfflictionBox_Right;                               // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHUD_PlayerInfection_C*                 HUD_PlayerInfection;                               // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHUD_PlayerTemperature_C*               HUD_PlayerTemperature;                             // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_Left;                                       // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_Right;                                      // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsOn;                                              // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34F8[0x7];                                     // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UPawnAffliction*, class UHUD_DamageClass_Item_C*> Indicators;                                        // 0x02C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_HUD_DamageClass_Indicator(int32 EntryPoint);
	void BndEvt__HUD_PlayerTemperature_K2Node_ComponentBoundEvent_0_VisibilityChangedDelegate__DelegateSignature(ESlateVisibility InVisibility);
	void Elapsed(class UHUD_DamageClass_Item_C* Item);
	void OnAfflictionDeactivated(class UPawnAffliction* Affliction);
	void OnAfflictionActivated(class UPawnAffliction* Affliction);
	void Construct();
	class UHUD_DamageClass_Item_C* CreateIcon(class UPawnAffliction* Affliction);
	void ClearIcons();
	void UpdateSpacers();
	void UpdateThisSpacer(class UWidget* ThisSpacer, class UPanelWidget* ThisAfflictionBox, class UPanelWidget* OtherAfflictionBox, bool TemperatureIsVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HUD_DamageClass_Indicator_C">();
	}
	static class UHUD_DamageClass_Indicator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUD_DamageClass_Indicator_C>();
	}
};
static_assert(alignof(UHUD_DamageClass_Indicator_C) == 0x000008, "Wrong alignment on UHUD_DamageClass_Indicator_C");
static_assert(sizeof(UHUD_DamageClass_Indicator_C) == 0x000310, "Wrong size on UHUD_DamageClass_Indicator_C");
static_assert(offsetof(UHUD_DamageClass_Indicator_C, UberGraphFrame) == 0x000280, "Member 'UHUD_DamageClass_Indicator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UHUD_DamageClass_Indicator_C, AfflictionBox_Left) == 0x000288, "Member 'UHUD_DamageClass_Indicator_C::AfflictionBox_Left' has a wrong offset!");
static_assert(offsetof(UHUD_DamageClass_Indicator_C, AfflictionBox_Right) == 0x000290, "Member 'UHUD_DamageClass_Indicator_C::AfflictionBox_Right' has a wrong offset!");
static_assert(offsetof(UHUD_DamageClass_Indicator_C, HUD_PlayerInfection) == 0x000298, "Member 'UHUD_DamageClass_Indicator_C::HUD_PlayerInfection' has a wrong offset!");
static_assert(offsetof(UHUD_DamageClass_Indicator_C, HUD_PlayerTemperature) == 0x0002A0, "Member 'UHUD_DamageClass_Indicator_C::HUD_PlayerTemperature' has a wrong offset!");
static_assert(offsetof(UHUD_DamageClass_Indicator_C, Spacer_Left) == 0x0002A8, "Member 'UHUD_DamageClass_Indicator_C::Spacer_Left' has a wrong offset!");
static_assert(offsetof(UHUD_DamageClass_Indicator_C, Spacer_Right) == 0x0002B0, "Member 'UHUD_DamageClass_Indicator_C::Spacer_Right' has a wrong offset!");
static_assert(offsetof(UHUD_DamageClass_Indicator_C, IsOn) == 0x0002B8, "Member 'UHUD_DamageClass_Indicator_C::IsOn' has a wrong offset!");
static_assert(offsetof(UHUD_DamageClass_Indicator_C, Indicators) == 0x0002C0, "Member 'UHUD_DamageClass_Indicator_C::Indicators' has a wrong offset!");

}

