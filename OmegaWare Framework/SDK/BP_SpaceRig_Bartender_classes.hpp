#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpaceRig_Bartender

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FSD_structs.hpp"
#include "FSD_classes.hpp"


namespace CG
{

// BlueprintGeneratedClass BP_SpaceRig_Bartender.BP_SpaceRig_Bartender_C
// 0x0230 (0x04F0 - 0x02C0)
class ABP_SpaceRig_Bartender_C final : public ASpaceRigBar
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 Hat_Easter;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hat_Anniversary;                                   // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Moustache_Rig_A_003;                            // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hat_LunarFestival;                                 // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hat_Oktoberfest;                                   // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hat_BeachParty;                                    // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hat_Xmas;                                          // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hat_Halloween_Witch;                               // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh_Menu;                                         // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget_Menu;                                       // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Cable3End;                                         // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Cable2End;                                         // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Cable1End;                                         // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SupporterParticleSystem;                           // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_XmasCapStandalone;                              // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube1;                                             // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       AbyssBarSign_widget;                               // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCableComponent*                        Cable2;                                            // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCableComponent*                        Cable1;                                            // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCableComponent*                        Cable3;                                            // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          GreetColliderBox;                                  // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BartenderMesh;                                     // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BartenderRotator;                                  // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         LerpTimeline_NewTrack_0_6C29CBCD4E3E9F9E0BF33ABFD7C7E018; // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LerpTimeline__Direction_6C29CBCD4E3E9F9E0BF33ABFD7C7E018; // 0x038C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FFC[0x3];                                     // 0x038D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LerpTimeline;                                      // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinishedTimeline_Time_B53F699A4A357873471E8CB3303A6A82; // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FinishedTimeline__Direction_B53F699A4A357873471E8CB3303A6A82; // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FFD[0x3];                                     // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FinishedTimeline;                                  // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFSDPlayerState*                        CurrentCustomerState;                              // 0x03A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaterialWithCustomer;                              // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaterialWillNotServe;                              // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaterialCanServe;                                  // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_DrinksBox_C*>                DrinkBoxes;                                        // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class UDrinkableDataAsset*                    CurrentDrinkable;                                  // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DrinksSpawned;                                     // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FFE[0xC];                                     // 0x03E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x03F0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             TargetTransform;                                   // 0x0420(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             SourceTransform;                                   // 0x0450(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MixerCanSpawn;                                     // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FFF[0x3];                                     // 0x0481(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MixerDarkMorkiteTime;                              // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MixerRedRockTime;                                  // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MixerGlyphidSlammerTime;                           // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MixerLeafloversTime;                               // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPouring;                                         // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3000[0x3];                                     // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EHolidayType, class USkeletalMeshComponent*> HolidayAssetMap;                                   // 0x0498(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_BP_SpaceRig_Bartender(int32 EntryPoint);
	void PlayBartenderTip(class APlayerCharacter* User);
	void OnUsableChanged_Mixer(bool CanUse);
	void InitializeMixer();
	void Toggle_Fireworks(bool Enabled);
	void Init_Background_Menu();
	void Look_Towards(class AActor* Actor, float Duration);
	void BndEvt__GreetColliderBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Client_Spawn_Next_Drink(class ABP_DrinksBox_C* DrinkBox);
	void All_BeginSpawnDrinks(bool PlayFireworks);
	void Return_To_Idle();
	void OnDrinkReady_Event(class ABP_DrinksBox_C* DrinkBox);
	void OnAvailableForNewDrink_Event(class ABP_DrinksBox_C* DrinkBox);
	void Server_Spawn_Next_Drink();
	void Lerp_To(const struct FTransform& PourTransform, float Duration);
	void SpawnDrinks(class UDrinkableDataAsset* Drinable);
	void Update_Bartender_Lights();
	void OnPlayerLeave_Event(class AFSDPlayerState* PlayerState);
	void LookAtCustomer(class APlayerCharacter* Customer);
	void BndEvt__BarUsable_K2Node_ComponentBoundEvent_0_UsableChangedSignature__DelegateSignature(bool CanUse);
	void ReceiveBeginPlay();
	void BndEvt__BarUsable_K2Node_ComponentBoundEvent_0_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
	void FinishedTimeline__UpdateFunc();
	void FinishedTimeline__FinishedFunc();
	void LerpTimeline__UpdateFunc();
	void LerpTimeline__FinishedFunc();
	void UserConstructionScript();
	void CanOrderNewRound(bool* CanOrder);
	void SetCustomer(class APlayerCharacter* Customer);
	void OnRep_CurrentCustomerState();
	void SetBartenderLightMaterial(class UMaterialInterface* SourceMaterial);
	void Pour(class ABP_DrinksBox_C* DrinkBox, float* PourDuration);
	void PourFinished();
	void PlayAffirmative(float* Duration);
	void PlayNegative(float* Duration);
	void PlayAnim(class UAnimMontage* MontageToPlay, float* Duration);
	void PlayGreeting(float* Duration);
	void Spawn_Mixer_Beer(const class FString& ControlEventID, int32 MixerCooldownToSet, class UDrinkableDataAsset* OrderedDrink, const class FString& Ordering_Player, const class FText& Announcement_Text);
	void PayCredits(class APlayerCharacter* User, int32 Amount, bool* Purchased);
	void SetCableAnchors();
	void UpdateHolidayDecoration();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SpaceRig_Bartender_C">();
	}
	static class ABP_SpaceRig_Bartender_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SpaceRig_Bartender_C>();
	}
};
static_assert(alignof(ABP_SpaceRig_Bartender_C) == 0x000010, "Wrong alignment on ABP_SpaceRig_Bartender_C");
static_assert(sizeof(ABP_SpaceRig_Bartender_C) == 0x0004F0, "Wrong size on ABP_SpaceRig_Bartender_C");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, UberGraphFrame) == 0x0002C0, "Member 'ABP_SpaceRig_Bartender_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Hat_Easter) == 0x0002C8, "Member 'ABP_SpaceRig_Bartender_C::Hat_Easter' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Hat_Anniversary) == 0x0002D0, "Member 'ABP_SpaceRig_Bartender_C::Hat_Anniversary' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, SK_Moustache_Rig_A_003) == 0x0002D8, "Member 'ABP_SpaceRig_Bartender_C::SK_Moustache_Rig_A_003' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Hat_LunarFestival) == 0x0002E0, "Member 'ABP_SpaceRig_Bartender_C::Hat_LunarFestival' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Hat_Oktoberfest) == 0x0002E8, "Member 'ABP_SpaceRig_Bartender_C::Hat_Oktoberfest' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Hat_BeachParty) == 0x0002F0, "Member 'ABP_SpaceRig_Bartender_C::Hat_BeachParty' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Hat_Xmas) == 0x0002F8, "Member 'ABP_SpaceRig_Bartender_C::Hat_Xmas' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Hat_Halloween_Witch) == 0x000300, "Member 'ABP_SpaceRig_Bartender_C::Hat_Halloween_Witch' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Mesh_Menu) == 0x000308, "Member 'ABP_SpaceRig_Bartender_C::Mesh_Menu' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Widget_Menu) == 0x000310, "Member 'ABP_SpaceRig_Bartender_C::Widget_Menu' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Cable3End) == 0x000318, "Member 'ABP_SpaceRig_Bartender_C::Cable3End' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Cable2End) == 0x000320, "Member 'ABP_SpaceRig_Bartender_C::Cable2End' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Cable1End) == 0x000328, "Member 'ABP_SpaceRig_Bartender_C::Cable1End' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, SupporterParticleSystem) == 0x000330, "Member 'ABP_SpaceRig_Bartender_C::SupporterParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, SM_XmasCapStandalone) == 0x000338, "Member 'ABP_SpaceRig_Bartender_C::SM_XmasCapStandalone' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Cube1) == 0x000340, "Member 'ABP_SpaceRig_Bartender_C::Cube1' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, AbyssBarSign_widget) == 0x000348, "Member 'ABP_SpaceRig_Bartender_C::AbyssBarSign_widget' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Cable2) == 0x000350, "Member 'ABP_SpaceRig_Bartender_C::Cable2' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Cable1) == 0x000358, "Member 'ABP_SpaceRig_Bartender_C::Cable1' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Cable3) == 0x000360, "Member 'ABP_SpaceRig_Bartender_C::Cable3' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, Box) == 0x000368, "Member 'ABP_SpaceRig_Bartender_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, GreetColliderBox) == 0x000370, "Member 'ABP_SpaceRig_Bartender_C::GreetColliderBox' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, BartenderMesh) == 0x000378, "Member 'ABP_SpaceRig_Bartender_C::BartenderMesh' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, BartenderRotator) == 0x000380, "Member 'ABP_SpaceRig_Bartender_C::BartenderRotator' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, LerpTimeline_NewTrack_0_6C29CBCD4E3E9F9E0BF33ABFD7C7E018) == 0x000388, "Member 'ABP_SpaceRig_Bartender_C::LerpTimeline_NewTrack_0_6C29CBCD4E3E9F9E0BF33ABFD7C7E018' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, LerpTimeline__Direction_6C29CBCD4E3E9F9E0BF33ABFD7C7E018) == 0x00038C, "Member 'ABP_SpaceRig_Bartender_C::LerpTimeline__Direction_6C29CBCD4E3E9F9E0BF33ABFD7C7E018' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, LerpTimeline) == 0x000390, "Member 'ABP_SpaceRig_Bartender_C::LerpTimeline' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, FinishedTimeline_Time_B53F699A4A357873471E8CB3303A6A82) == 0x000398, "Member 'ABP_SpaceRig_Bartender_C::FinishedTimeline_Time_B53F699A4A357873471E8CB3303A6A82' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, FinishedTimeline__Direction_B53F699A4A357873471E8CB3303A6A82) == 0x00039C, "Member 'ABP_SpaceRig_Bartender_C::FinishedTimeline__Direction_B53F699A4A357873471E8CB3303A6A82' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, FinishedTimeline) == 0x0003A0, "Member 'ABP_SpaceRig_Bartender_C::FinishedTimeline' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, CurrentCustomerState) == 0x0003A8, "Member 'ABP_SpaceRig_Bartender_C::CurrentCustomerState' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, MaterialWithCustomer) == 0x0003B0, "Member 'ABP_SpaceRig_Bartender_C::MaterialWithCustomer' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, MaterialWillNotServe) == 0x0003B8, "Member 'ABP_SpaceRig_Bartender_C::MaterialWillNotServe' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, MaterialCanServe) == 0x0003C0, "Member 'ABP_SpaceRig_Bartender_C::MaterialCanServe' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, DrinkBoxes) == 0x0003C8, "Member 'ABP_SpaceRig_Bartender_C::DrinkBoxes' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, CurrentDrinkable) == 0x0003D8, "Member 'ABP_SpaceRig_Bartender_C::CurrentDrinkable' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, DrinksSpawned) == 0x0003E0, "Member 'ABP_SpaceRig_Bartender_C::DrinksSpawned' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, StartTransform) == 0x0003F0, "Member 'ABP_SpaceRig_Bartender_C::StartTransform' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, TargetTransform) == 0x000420, "Member 'ABP_SpaceRig_Bartender_C::TargetTransform' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, SourceTransform) == 0x000450, "Member 'ABP_SpaceRig_Bartender_C::SourceTransform' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, MixerCanSpawn) == 0x000480, "Member 'ABP_SpaceRig_Bartender_C::MixerCanSpawn' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, MixerDarkMorkiteTime) == 0x000484, "Member 'ABP_SpaceRig_Bartender_C::MixerDarkMorkiteTime' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, MixerRedRockTime) == 0x000488, "Member 'ABP_SpaceRig_Bartender_C::MixerRedRockTime' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, MixerGlyphidSlammerTime) == 0x00048C, "Member 'ABP_SpaceRig_Bartender_C::MixerGlyphidSlammerTime' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, MixerLeafloversTime) == 0x000490, "Member 'ABP_SpaceRig_Bartender_C::MixerLeafloversTime' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, IsPouring) == 0x000494, "Member 'ABP_SpaceRig_Bartender_C::IsPouring' has a wrong offset!");
static_assert(offsetof(ABP_SpaceRig_Bartender_C, HolidayAssetMap) == 0x000498, "Member 'ABP_SpaceRig_Bartender_C::HolidayAssetMap' has a wrong offset!");

}

