#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LIB_Game_UI

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "FSD_structs.hpp"


namespace CG
{

// BlueprintGeneratedClass LIB_Game_UI.LIB_Game_UI_C
// 0x0000 (0x0028 - 0x0028)
class ULIB_Game_UI_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetVanitySlotTitle(EVanitySlot InVanitySlot, bool UpperCase, class UObject* __WorldContext, class FText* OutTitle);
	static void GetPickaxePartLocationTitle(EPickaxePartLocation InPartLocation, bool UpperCase, bool LongName, class UObject* __WorldContext, class FText* OutTitle);
	static void GetEnemyFamilyInfo(EEnemyFamily Family, class UObject* __WorldContext, class FText* Param_Name, class UTexture2D** Icon, struct FLinearColor* Color);
	static void GetEnemyTypeInfo(EEnemyType Type, class UObject* __WorldContext, class FText* Display_Text, class UTexture2D** Icon, struct FLinearColor* IconColor);
	static void GetArmorTypeInfo(EArmorType Type, class UObject* __WorldContext, class FText* Display_Text, class UTexture2D** Icon, struct FLinearColor* Color);
	static void GetEnemyFamilyName(EEnemyFamily Family, class UObject* __WorldContext, class FText* Param_Name);
	static void GetRewardText(class UReward* Reward, class UObject* __WorldContext, class FText* Title, class FText* Category, class FText* Description, bool* HasOptionalCharacterID, class UPlayerCharacterID** CharacterID);
	static void GetRewardIcon(class UReward* Reward, class UObject* __WorldContext, class UTexture** Icon);
	static void GetSkinText(class UItemSkin* InSkin, class UItemID* InOptionalItem, class UPlayerCharacterID* InOptionalCharacter, class UObject* __WorldContext, class FText* Title, class FText* Category, class FText* Description, bool* HasOptionalCharacterID, class UPlayerCharacterID** CharacterID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LIB_Game_UI_C">();
	}
	static class ULIB_Game_UI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULIB_Game_UI_C>();
	}
};
static_assert(alignof(ULIB_Game_UI_C) == 0x000008, "Wrong alignment on ULIB_Game_UI_C");
static_assert(sizeof(ULIB_Game_UI_C) == 0x000028, "Wrong size on ULIB_Game_UI_C");

}

