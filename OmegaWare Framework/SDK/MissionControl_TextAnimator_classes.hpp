#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MissionControl_TextAnimator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_structs.hpp"
#include "UMG_classes.hpp"


namespace CG
{

// WidgetBlueprintGeneratedClass MissionControl_TextAnimator.MissionControl_TextAnimator_C
// 0x0078 (0x02D8 - 0x0260)
class UMissionControl_TextAnimator_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimTextRun;                                       // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class URichTextBlock*                         TextBlock;                                         // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0278(0x0018)(Edit, BlueprintVisible)
	struct FRichTextParseResult                   Parser;                                            // 0x0290(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         AnimProgress;                                      // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MissionControl_TextAnimator(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void SetText(const class FText& InText, int32* Unformatted_Length);
	void SetAnimProgress(float Param_AnimProgress);
	void GetFirstWord(const class FString& InString, class FString* OutWord);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MissionControl_TextAnimator_C">();
	}
	static class UMissionControl_TextAnimator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMissionControl_TextAnimator_C>();
	}
};
static_assert(alignof(UMissionControl_TextAnimator_C) == 0x000008, "Wrong alignment on UMissionControl_TextAnimator_C");
static_assert(sizeof(UMissionControl_TextAnimator_C) == 0x0002D8, "Wrong size on UMissionControl_TextAnimator_C");
static_assert(offsetof(UMissionControl_TextAnimator_C, UberGraphFrame) == 0x000260, "Member 'UMissionControl_TextAnimator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMissionControl_TextAnimator_C, AnimTextRun) == 0x000268, "Member 'UMissionControl_TextAnimator_C::AnimTextRun' has a wrong offset!");
static_assert(offsetof(UMissionControl_TextAnimator_C, TextBlock) == 0x000270, "Member 'UMissionControl_TextAnimator_C::TextBlock' has a wrong offset!");
static_assert(offsetof(UMissionControl_TextAnimator_C, Text) == 0x000278, "Member 'UMissionControl_TextAnimator_C::Text' has a wrong offset!");
static_assert(offsetof(UMissionControl_TextAnimator_C, Parser) == 0x000290, "Member 'UMissionControl_TextAnimator_C::Parser' has a wrong offset!");
static_assert(offsetof(UMissionControl_TextAnimator_C, AnimProgress) == 0x0002D0, "Member 'UMissionControl_TextAnimator_C::AnimProgress' has a wrong offset!");

}

