#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OculusMR

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "OculusMR_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace CG
{

// Class OculusMR.OculusMR_CastingCameraActor
// 0x00E8 (0x0320 - 0x0238)
class alignas(0x10) AOculusMR_CastingCameraActor final : public ASceneCapture2D
{
public:
	class UVRNotificationsComponent*              VRNotificationComponent;                           // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CameraColorTexture;                                // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CameraDepthTexture;                                // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOculusMR_PlaneMeshComponent*           PlaneMeshComponent;                                // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              ChromaKeyMaterial;                                 // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              OpaqueColoredMaterial;                             // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ChromaKeyMaterialInstance;                         // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               CameraFrameMaterialInstance;                       // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               BackdropMaterialInstance;                          // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultTexture_White;                              // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169E[0x50];                                    // 0x0288(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTextureRenderTarget2D*>         BackgroundRenderTargets;                           // 0x02D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class ASceneCapture2D*                        ForegroundCaptureActor;                            // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UTextureRenderTarget2D*>         ForegroundRenderTargets;                           // 0x02F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<double>                                PoseTimes;                                         // 0x0300(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UOculusMR_Settings*                     MRSettings;                                        // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOculusMR_State*                        MRState;                                           // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusMR_CastingCameraActor">();
	}
	static class AOculusMR_CastingCameraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AOculusMR_CastingCameraActor>();
	}
};
static_assert(alignof(AOculusMR_CastingCameraActor) == 0x000010, "Wrong alignment on AOculusMR_CastingCameraActor");
static_assert(sizeof(AOculusMR_CastingCameraActor) == 0x000320, "Wrong size on AOculusMR_CastingCameraActor");
static_assert(offsetof(AOculusMR_CastingCameraActor, VRNotificationComponent) == 0x000238, "Member 'AOculusMR_CastingCameraActor::VRNotificationComponent' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, CameraColorTexture) == 0x000240, "Member 'AOculusMR_CastingCameraActor::CameraColorTexture' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, CameraDepthTexture) == 0x000248, "Member 'AOculusMR_CastingCameraActor::CameraDepthTexture' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, PlaneMeshComponent) == 0x000250, "Member 'AOculusMR_CastingCameraActor::PlaneMeshComponent' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, ChromaKeyMaterial) == 0x000258, "Member 'AOculusMR_CastingCameraActor::ChromaKeyMaterial' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, OpaqueColoredMaterial) == 0x000260, "Member 'AOculusMR_CastingCameraActor::OpaqueColoredMaterial' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, ChromaKeyMaterialInstance) == 0x000268, "Member 'AOculusMR_CastingCameraActor::ChromaKeyMaterialInstance' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, CameraFrameMaterialInstance) == 0x000270, "Member 'AOculusMR_CastingCameraActor::CameraFrameMaterialInstance' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, BackdropMaterialInstance) == 0x000278, "Member 'AOculusMR_CastingCameraActor::BackdropMaterialInstance' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, DefaultTexture_White) == 0x000280, "Member 'AOculusMR_CastingCameraActor::DefaultTexture_White' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, BackgroundRenderTargets) == 0x0002D8, "Member 'AOculusMR_CastingCameraActor::BackgroundRenderTargets' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, ForegroundCaptureActor) == 0x0002E8, "Member 'AOculusMR_CastingCameraActor::ForegroundCaptureActor' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, ForegroundRenderTargets) == 0x0002F0, "Member 'AOculusMR_CastingCameraActor::ForegroundRenderTargets' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, PoseTimes) == 0x000300, "Member 'AOculusMR_CastingCameraActor::PoseTimes' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, MRSettings) == 0x000310, "Member 'AOculusMR_CastingCameraActor::MRSettings' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, MRState) == 0x000318, "Member 'AOculusMR_CastingCameraActor::MRState' has a wrong offset!");

// Class OculusMR.OculusMR_PlaneMeshComponent
// 0x0010 (0x0490 - 0x0480)
class UOculusMR_PlaneMeshComponent final : public UMeshComponent
{
public:
	uint8                                         Pad_169F[0x18];                                    // 0x0478(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCustomMeshTriangles(const TArray<struct FOculusMR_PlaneMeshTriangle>& Triangles);
	void ClearCustomMeshTriangles();
	bool SetCustomMeshTriangles(const TArray<struct FOculusMR_PlaneMeshTriangle>& Triangles);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusMR_PlaneMeshComponent">();
	}
	static class UOculusMR_PlaneMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusMR_PlaneMeshComponent>();
	}
};
static_assert(alignof(UOculusMR_PlaneMeshComponent) == 0x000010, "Wrong alignment on UOculusMR_PlaneMeshComponent");
static_assert(sizeof(UOculusMR_PlaneMeshComponent) == 0x000490, "Wrong size on UOculusMR_PlaneMeshComponent");

// Class OculusMR.OculusMR_Settings
// 0x0070 (0x0098 - 0x0028)
class UOculusMR_Settings final : public UObject
{
public:
	EOculusMR_ClippingReference                   ClippingReference;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTrackedCameraResolution;                       // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A1[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WidthPerView;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeightPerView;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CastingLatency;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BackdropColor;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandPoseStateLatency;                              // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ChromaKeyColor;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChromaKeySimilarity;                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChromaKeySmoothRange;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChromaKeySpillRange;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOculusMR_PostProcessEffects                  ExternalCompositionPostProcessEffects;             // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCasting;                                        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EOculusMR_CompositionMethod                   CompositionMethod;                                 // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EOculusMR_CameraDeviceEnum                    CapturingCamera;                                   // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16A2[0x44];                                    // 0x0054(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToTrackedCameraIndexIfAvailable(int32 InTrackedCameraIndex);
	int32 GetBindToTrackedCameraIndex();
	EOculusMR_CameraDeviceEnum GetCapturingCamera();
	EOculusMR_CompositionMethod GetCompositionMethod();
	bool GetIsCasting();
	void LoadFromIni();
	void SetCapturingCamera(EOculusMR_CameraDeviceEnum Val);
	void SetCompositionMethod(EOculusMR_CompositionMethod Val);
	void SetIsCasting(bool Val);

	void SaveToIni() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusMR_Settings">();
	}
	static class UOculusMR_Settings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusMR_Settings>();
	}
};
static_assert(alignof(UOculusMR_Settings) == 0x000008, "Wrong alignment on UOculusMR_Settings");
static_assert(sizeof(UOculusMR_Settings) == 0x000098, "Wrong size on UOculusMR_Settings");
static_assert(offsetof(UOculusMR_Settings, ClippingReference) == 0x000028, "Member 'UOculusMR_Settings::ClippingReference' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, bUseTrackedCameraResolution) == 0x000029, "Member 'UOculusMR_Settings::bUseTrackedCameraResolution' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, WidthPerView) == 0x00002C, "Member 'UOculusMR_Settings::WidthPerView' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, HeightPerView) == 0x000030, "Member 'UOculusMR_Settings::HeightPerView' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, CastingLatency) == 0x000034, "Member 'UOculusMR_Settings::CastingLatency' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, BackdropColor) == 0x000038, "Member 'UOculusMR_Settings::BackdropColor' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, HandPoseStateLatency) == 0x00003C, "Member 'UOculusMR_Settings::HandPoseStateLatency' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, ChromaKeyColor) == 0x000040, "Member 'UOculusMR_Settings::ChromaKeyColor' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, ChromaKeySimilarity) == 0x000044, "Member 'UOculusMR_Settings::ChromaKeySimilarity' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, ChromaKeySmoothRange) == 0x000048, "Member 'UOculusMR_Settings::ChromaKeySmoothRange' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, ChromaKeySpillRange) == 0x00004C, "Member 'UOculusMR_Settings::ChromaKeySpillRange' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, ExternalCompositionPostProcessEffects) == 0x000050, "Member 'UOculusMR_Settings::ExternalCompositionPostProcessEffects' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, bIsCasting) == 0x000051, "Member 'UOculusMR_Settings::bIsCasting' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, CompositionMethod) == 0x000052, "Member 'UOculusMR_Settings::CompositionMethod' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, CapturingCamera) == 0x000053, "Member 'UOculusMR_Settings::CapturingCamera' has a wrong offset!");

// Class OculusMR.OculusMR_State
// 0x0090 (0x00B8 - 0x0028)
class UOculusMR_State final : public UObject
{
public:
	struct FTrackedCamera                         TrackedCamera;                                     // 0x0028(0x0078)(NativeAccessSpecifierPublic)
	class USceneComponent*                        TrackingReferenceComponent;                        // 0x00A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ScalingFactor;                                     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A3[0x4];                                     // 0x00B0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ChangeCameraStateRequested;                        // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BindToTrackedCameraIndexRequested;                 // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A4[0x2];                                     // 0x00B6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusMR_State">();
	}
	static class UOculusMR_State* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusMR_State>();
	}
};
static_assert(alignof(UOculusMR_State) == 0x000008, "Wrong alignment on UOculusMR_State");
static_assert(sizeof(UOculusMR_State) == 0x0000B8, "Wrong size on UOculusMR_State");
static_assert(offsetof(UOculusMR_State, TrackedCamera) == 0x000028, "Member 'UOculusMR_State::TrackedCamera' has a wrong offset!");
static_assert(offsetof(UOculusMR_State, TrackingReferenceComponent) == 0x0000A0, "Member 'UOculusMR_State::TrackingReferenceComponent' has a wrong offset!");
static_assert(offsetof(UOculusMR_State, ScalingFactor) == 0x0000A8, "Member 'UOculusMR_State::ScalingFactor' has a wrong offset!");
static_assert(offsetof(UOculusMR_State, ChangeCameraStateRequested) == 0x0000B4, "Member 'UOculusMR_State::ChangeCameraStateRequested' has a wrong offset!");
static_assert(offsetof(UOculusMR_State, BindToTrackedCameraIndexRequested) == 0x0000B5, "Member 'UOculusMR_State::BindToTrackedCameraIndexRequested' has a wrong offset!");

// Class OculusMR.OculusMRFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UOculusMRFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float GetMrcScalingFactor();
	static class UOculusMR_Settings* GetOculusMRSettings();
	static class USceneComponent* GetTrackingReferenceComponent();
	static bool IsMrcActive();
	static bool IsMrcEnabled();
	static bool SetMrcScalingFactor(float ScalingFactor);
	static bool SetTrackingReferenceComponent(class USceneComponent* Component);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusMRFunctionLibrary">();
	}
	static class UOculusMRFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusMRFunctionLibrary>();
	}
};
static_assert(alignof(UOculusMRFunctionLibrary) == 0x000008, "Wrong alignment on UOculusMRFunctionLibrary");
static_assert(sizeof(UOculusMRFunctionLibrary) == 0x000028, "Wrong size on UOculusMRFunctionLibrary");

}

