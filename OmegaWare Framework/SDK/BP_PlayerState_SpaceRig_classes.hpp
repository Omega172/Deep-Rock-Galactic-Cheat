#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerState_SpaceRig

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MissionStatItem_structs.hpp"
#include "BP_PlayerState_classes.hpp"


namespace CG
{

// BlueprintGeneratedClass BP_PlayerState_SpaceRig.BP_PlayerState_SpaceRig_C
// 0x0038 (0x0528 - 0x04F0)
class ABP_PlayerState_SpaceRig_C final : public ABP_PlayerState_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerState_SpaceRig_C;          // 0x04F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UItemUpgradePreviewComponent*           ItemUpgradePreview;                                // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HealthInsuranceStatus;                             // 0x0500(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3136[0x4];                                     // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStatChange;                                      // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FMissionStatItem>               MissionStats;                                      // 0x0518(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)

public:
	void OnStatChange__DelegateSignature(class UMissionStat* MissionStat, const class FText& StatValue);
	void ExecuteUbergraph_BP_PlayerState_SpaceRig(int32 EntryPoint);
	void Server_UpdateStat(class UMissionStat* Mission_Stat, float Stat_Value);
	void OnMissionStatChanged(class UObject* WorldContext, class UMissionStat* MissionStat, float Value);
	void CheckCampaign();
	void ReceiveBeginPlay();
	void WatchStat(class UMissionStat* MissionStat);
	void UserConstructionScript();
	void GetHealthInsuranceStatus(int32* Param_HealthInsuranceStatus);
	void OnRep_MissionStats();
	void IsListeningToMissionStat(class UMissionStat* MissionStat, bool* HasStat);
	void UpdateMissionStat(class UMissionStat* MissionStat, float Value);
	void SendMissionStatData(class UMissionStat* MissionStat, float Value);
	void GetMissionStatValue(class UMissionStat* MissionStat, class FText* StatValue, bool* Valid);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerState_SpaceRig_C">();
	}
	static class ABP_PlayerState_SpaceRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerState_SpaceRig_C>();
	}
};
static_assert(alignof(ABP_PlayerState_SpaceRig_C) == 0x000008, "Wrong alignment on ABP_PlayerState_SpaceRig_C");
static_assert(sizeof(ABP_PlayerState_SpaceRig_C) == 0x000528, "Wrong size on ABP_PlayerState_SpaceRig_C");
static_assert(offsetof(ABP_PlayerState_SpaceRig_C, UberGraphFrame_BP_PlayerState_SpaceRig_C) == 0x0004F0, "Member 'ABP_PlayerState_SpaceRig_C::UberGraphFrame_BP_PlayerState_SpaceRig_C' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_SpaceRig_C, ItemUpgradePreview) == 0x0004F8, "Member 'ABP_PlayerState_SpaceRig_C::ItemUpgradePreview' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_SpaceRig_C, HealthInsuranceStatus) == 0x000500, "Member 'ABP_PlayerState_SpaceRig_C::HealthInsuranceStatus' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_SpaceRig_C, OnStatChange) == 0x000508, "Member 'ABP_PlayerState_SpaceRig_C::OnStatChange' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_SpaceRig_C, MissionStats) == 0x000518, "Member 'ABP_PlayerState_SpaceRig_C::MissionStats' has a wrong offset!");

}

