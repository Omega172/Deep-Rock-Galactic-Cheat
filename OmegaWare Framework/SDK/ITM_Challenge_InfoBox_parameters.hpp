#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITM_Challenge_InfoBox

#include "Basic.hpp"

#include "FSD_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace CG::Params
{

// Function ITM_Challenge_InfoBox.ITM_Challenge_InfoBox_C.OnChallengeHovered__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct ITM_Challenge_InfoBox_C_OnChallengeHovered__DelegateSignature final
{
public:
	TArray<class UObject*>                        AssetReferences;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          InHovered;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_323E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USeasonChallenge*                       Challenge;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITM_Challenge_InfoBox_C_OnChallengeHovered__DelegateSignature) == 0x000008, "Wrong alignment on ITM_Challenge_InfoBox_C_OnChallengeHovered__DelegateSignature");
static_assert(sizeof(ITM_Challenge_InfoBox_C_OnChallengeHovered__DelegateSignature) == 0x000020, "Wrong size on ITM_Challenge_InfoBox_C_OnChallengeHovered__DelegateSignature");
static_assert(offsetof(ITM_Challenge_InfoBox_C_OnChallengeHovered__DelegateSignature, AssetReferences) == 0x000000, "Member 'ITM_Challenge_InfoBox_C_OnChallengeHovered__DelegateSignature::AssetReferences' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_OnChallengeHovered__DelegateSignature, InHovered) == 0x000010, "Member 'ITM_Challenge_InfoBox_C_OnChallengeHovered__DelegateSignature::InHovered' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_OnChallengeHovered__DelegateSignature, Challenge) == 0x000018, "Member 'ITM_Challenge_InfoBox_C_OnChallengeHovered__DelegateSignature::Challenge' has a wrong offset!");

// Function ITM_Challenge_InfoBox.ITM_Challenge_InfoBox_C.ExecuteUbergraph_ITM_Challenge_InfoBox
// 0x01B0 (0x01B0 - 0x0000)
struct ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_323F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USeasonsSubsystem*                      CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3240[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITM_Season_ChallengeTimer_C*           CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3241[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItm_SeasonChallenge_Small_C*           CallFunc_AddChallengeToGrid_W_Challenge;           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3242[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3243[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3244[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USeasonsSubsystem*                      CallFunc_GetGameInstanceSubsystem_ReturnValue_1;   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FChallengeInfo>                 CallFunc_GetActiveChallenges_ReturnValue;          // 0x0050(0x0010)(ReferenceParm)
	struct FChallengeInfo                         CallFunc_Array_Get_Item;                           // 0x0060(0x00A0)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3245[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UItm_SeasonChallenge_Small_C*           CallFunc_AddChallengeToGrid_W_Challenge_1;         // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0114(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3246[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0128(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3247[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridSlot*                              CallFunc_AddChildToGrid_ReturnValue;               // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3248[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_2;    // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3249[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsHovered;                      // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_324A[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Index;                          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324B[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USeasonChallenge*                       CallFunc_GetAssetReferences_outChallenge;          // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UDataAsset*>                     CallFunc_GetAssetReferences_ReturnValue;           // 0x0180(0x0010)(ReferenceParm)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324C[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_324D[0x3];                                     // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox) == 0x000008, "Wrong alignment on ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox");
static_assert(sizeof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox) == 0x0001B0, "Wrong size on ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, EntryPoint) == 0x000000, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::EntryPoint' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000008, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, Temp_int_Array_Index_Variable) == 0x000010, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_Create_ReturnValue) == 0x000018, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, Temp_bool_Variable) == 0x000020, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, Temp_int_Variable) == 0x000024, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_AddChallengeToGrid_W_Challenge) == 0x000028, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_AddChallengeToGrid_W_Challenge' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000030, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x00003C, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, K2Node_Event_IsDesignTime) == 0x000040, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_GetGameInstanceSubsystem_ReturnValue_1) == 0x000048, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_GetGameInstanceSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_GetActiveChallenges_ReturnValue) == 0x000050, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_GetActiveChallenges_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_Array_Get_Item) == 0x000060, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_Array_Length_ReturnValue) == 0x000100, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_AddChallengeToGrid_W_Challenge_1) == 0x000108, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_AddChallengeToGrid_W_Challenge_1' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_Array_Length_ReturnValue_1) == 0x000110, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, K2Node_MakeStruct_Margin) == 0x000114, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000124, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, K2Node_CreateDelegate_OutputDelegate) == 0x000128, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_GetChildrenCount_ReturnValue) == 0x000138, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_AddChildToGrid_ReturnValue) == 0x000140, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_AddChildToGrid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, Temp_byte_Variable) == 0x000148, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x00014C, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_GetAnimationCurrentTime_ReturnValue_2) == 0x000150, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_GetAnimationCurrentTime_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_PlayAnimation_ReturnValue) == 0x000158, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_PlayAnimation_ReturnValue_1) == 0x000160, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, K2Node_CustomEvent_IsHovered) == 0x000168, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::K2Node_CustomEvent_IsHovered' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, K2Node_CustomEvent_Index) == 0x00016C, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::K2Node_CustomEvent_Index' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, Temp_byte_Variable_1) == 0x000170, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_GetAssetReferences_outChallenge) == 0x000178, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_GetAssetReferences_outChallenge' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_GetAssetReferences_ReturnValue) == 0x000180, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_GetAssetReferences_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, K2Node_Select_Default) == 0x000190, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_PlayAnimation_ReturnValue_2) == 0x000198, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, Temp_int_Loop_Counter_Variable) == 0x0001A0, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_Less_IntInt_ReturnValue) == 0x0001A4, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001A8, "Member 'ITM_Challenge_InfoBox_C_ExecuteUbergraph_ITM_Challenge_InfoBox::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function ITM_Challenge_InfoBox.ITM_Challenge_InfoBox_C.OnChallengeHover
// 0x0008 (0x0008 - 0x0000)
struct ITM_Challenge_InfoBox_C_OnChallengeHover final
{
public:
	bool                                          Param_IsHovered;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_324E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITM_Challenge_InfoBox_C_OnChallengeHover) == 0x000004, "Wrong alignment on ITM_Challenge_InfoBox_C_OnChallengeHover");
static_assert(sizeof(ITM_Challenge_InfoBox_C_OnChallengeHover) == 0x000008, "Wrong size on ITM_Challenge_InfoBox_C_OnChallengeHover");
static_assert(offsetof(ITM_Challenge_InfoBox_C_OnChallengeHover, Param_IsHovered) == 0x000000, "Member 'ITM_Challenge_InfoBox_C_OnChallengeHover::Param_IsHovered' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_OnChallengeHover, Param_Index) == 0x000004, "Member 'ITM_Challenge_InfoBox_C_OnChallengeHover::Param_Index' has a wrong offset!");

// Function ITM_Challenge_InfoBox.ITM_Challenge_InfoBox_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ITM_Challenge_InfoBox_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITM_Challenge_InfoBox_C_PreConstruct) == 0x000001, "Wrong alignment on ITM_Challenge_InfoBox_C_PreConstruct");
static_assert(sizeof(ITM_Challenge_InfoBox_C_PreConstruct) == 0x000001, "Wrong size on ITM_Challenge_InfoBox_C_PreConstruct");
static_assert(offsetof(ITM_Challenge_InfoBox_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ITM_Challenge_InfoBox_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ITM_Challenge_InfoBox.ITM_Challenge_InfoBox_C.SetOpen
// 0x0001 (0x0001 - 0x0000)
struct ITM_Challenge_InfoBox_C_SetOpen final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITM_Challenge_InfoBox_C_SetOpen) == 0x000001, "Wrong alignment on ITM_Challenge_InfoBox_C_SetOpen");
static_assert(sizeof(ITM_Challenge_InfoBox_C_SetOpen) == 0x000001, "Wrong size on ITM_Challenge_InfoBox_C_SetOpen");
static_assert(offsetof(ITM_Challenge_InfoBox_C_SetOpen, InIsOpen) == 0x000000, "Member 'ITM_Challenge_InfoBox_C_SetOpen::InIsOpen' has a wrong offset!");

// Function ITM_Challenge_InfoBox.ITM_Challenge_InfoBox_C.AddChallengeToGrid
// 0x00E0 (0x00E0 - 0x0000)
struct ITM_Challenge_InfoBox_C_AddChallengeToGrid final
{
public:
	struct FChallengeInfo                         ChallengeInfo;                                     // 0x0000(0x00A0)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         Column;                                            // 0x00A0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324F[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UItm_SeasonChallenge_Small_C*           W_Challenge;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(bool IsHovered, int32 Index)>  K2Node_CreateDelegate_OutputDelegate;              // 0x00C0(0x0010)(ZeroConstructor, NoDestructor)
	class UItm_SeasonChallenge_Small_C*           CallFunc_Create_ReturnValue;                       // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGridSlot*                              CallFunc_AddChildToGrid_ReturnValue;               // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITM_Challenge_InfoBox_C_AddChallengeToGrid) == 0x000008, "Wrong alignment on ITM_Challenge_InfoBox_C_AddChallengeToGrid");
static_assert(sizeof(ITM_Challenge_InfoBox_C_AddChallengeToGrid) == 0x0000E0, "Wrong size on ITM_Challenge_InfoBox_C_AddChallengeToGrid");
static_assert(offsetof(ITM_Challenge_InfoBox_C_AddChallengeToGrid, ChallengeInfo) == 0x000000, "Member 'ITM_Challenge_InfoBox_C_AddChallengeToGrid::ChallengeInfo' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_AddChallengeToGrid, Column) == 0x0000A0, "Member 'ITM_Challenge_InfoBox_C_AddChallengeToGrid::Column' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_AddChallengeToGrid, W_Challenge) == 0x0000A8, "Member 'ITM_Challenge_InfoBox_C_AddChallengeToGrid::W_Challenge' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_AddChallengeToGrid, K2Node_MakeStruct_Margin) == 0x0000B0, "Member 'ITM_Challenge_InfoBox_C_AddChallengeToGrid::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_AddChallengeToGrid, K2Node_CreateDelegate_OutputDelegate) == 0x0000C0, "Member 'ITM_Challenge_InfoBox_C_AddChallengeToGrid::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_AddChallengeToGrid, CallFunc_Create_ReturnValue) == 0x0000D0, "Member 'ITM_Challenge_InfoBox_C_AddChallengeToGrid::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITM_Challenge_InfoBox_C_AddChallengeToGrid, CallFunc_AddChildToGrid_ReturnValue) == 0x0000D8, "Member 'ITM_Challenge_InfoBox_C_AddChallengeToGrid::CallFunc_AddChildToGrid_ReturnValue' has a wrong offset!");

}

