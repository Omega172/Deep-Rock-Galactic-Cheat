#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DSTelemetry

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace CG
{

// Class DSTelemetry.DJSONArray
// 0x0010 (0x0038 - 0x0028)
class UDJSONArray final : public UObject
{
public:
	uint8                                         Pad_1121[0x10];                                    // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UDJSONArray* CreateJSONArray(class UObject* WorldContextObject);

	const bool AddBooleanArrayItem(const TArray<bool>& Item);
	const bool AddBooleanItem(const bool Item);
	const bool AddEmptyItem();
	const bool AddFloatArrayItem(const TArray<float>& Item);
	const bool AddFloatItem(const float Item);
	const bool AddIntegerArrayItem(const TArray<int32>& Item);
	const bool AddIntegerItem(const int32 Item);
	const bool AddJSONArrayArrayItem(const TArray<class UDJSONArray*>& Item);
	const bool AddJSONArrayItem(const class UDJSONArray* Item);
	const bool AddJSONObjectArrayItem(const TArray<class UDJSONObject*>& Item);
	const bool AddJSONObjectItem(const class UDJSONObject* Item);
	const bool AddStringArrayItem(const TArray<class FString>& Item);
	const bool AddStringItem(const class FString& Item);
	const bool Clear();

	const class FString AsString() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DJSONArray">();
	}
	static class UDJSONArray* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDJSONArray>();
	}
};
static_assert(alignof(UDJSONArray) == 0x000008, "Wrong alignment on UDJSONArray");
static_assert(sizeof(UDJSONArray) == 0x000038, "Wrong size on UDJSONArray");

// Class DSTelemetry.DJSONObject
// 0x0018 (0x0040 - 0x0028)
class UDJSONObject final : public UObject
{
public:
	uint8                                         Pad_112D[0x18];                                    // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UDJSONObject* CreateJSONObject(class UObject* WorldContextObject);

	const bool AddBooleanArrayField(const class FString& Key, const TArray<bool>& Value);
	const bool AddBooleanField(const class FString& Key, const bool Value);
	const bool AddEmptyField(const class FString& Key);
	const bool AddFloatArrayField(const class FString& Key, const TArray<float>& Value);
	const bool AddFloatField(const class FString& Key, const float Value);
	const bool AddIntegerArrayField(const class FString& Key, const TArray<int32>& Value);
	const bool AddIntegerField(const class FString& Key, const int32 Value);
	const bool AddJSONArrayArrayField(const class FString& Key, const TArray<class UDJSONArray*>& Value);
	const bool AddJSONArrayField(const class FString& Key, const class UDJSONArray* Value);
	const bool AddJSONObjectArrayField(const class FString& Key, const TArray<class UDJSONObject*>& Value);
	const bool AddJSONObjectField(const class FString& Key, const class UDJSONObject* Value);
	const bool AddStringArrayField(const class FString& Key, const TArray<class FString>& Value);
	const bool AddStringField(const class FString& Key, const class FString& Value);
	const bool Clear();

	const class FString AsString() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DJSONObject">();
	}
	static class UDJSONObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDJSONObject>();
	}
};
static_assert(alignof(UDJSONObject) == 0x000008, "Wrong alignment on UDJSONObject");
static_assert(sizeof(UDJSONObject) == 0x000040, "Wrong size on UDJSONObject");

// Class DSTelemetry.DSTelemetry
// 0x0008 (0x0030 - 0x0028)
class UDSTelemetry final : public UObject
{
public:
	uint8                                         Pad_113B[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UDSTelemetry* CreateTelemetry(class UObject* WorldContextObject);

	void Pause();
	void Resume();
	bool SetOnlinePlatformIdentifier(const class FString& OnlinePlatformIdentifier);
	bool SetOnlinePlatformUserID(const class FString& OnlinePlatformUserID);
	bool SetStateBoolean(const class FString& StateKey, const bool StateData);
	bool SetStateEmpty(const class FString& StateKey);
	bool SetStateFloat(const class FString& StateKey, const float StateData);
	bool SetStateInteger(const class FString& StateKey, const int32 StateData);
	bool SetStateJSONArray(const class FString& StateKey, const class UDJSONArray* StateData);
	bool SetStateJSONObject(const class FString& StateKey, const class UDJSONObject* StateData);
	bool SetStateSerialized(const class FString& StateKey, const class FString& StateData);
	bool SetStateString(const class FString& StateKey, const class FString& StateData);
	bool Start(const class FString& GameId, const class FString& BuildID);
	bool SubmitBoolean(const class FString& EventKey, const bool EventData);
	bool SubmitEmpty(const class FString& EventKey);
	bool SubmitFloat(const class FString& EventKey, const float EventData);
	bool SubmitInteger(const class FString& EventKey, const int32 EventData);
	bool SubmitJSONArray(const class FString& EventKey, const class UDJSONArray* EventData);
	bool SubmitJSONObject(const class FString& EventKey, const class UDJSONObject* EventData);
	bool SubmitSerialized(const class FString& EventKey, const class FString& EventData);
	bool SubmitString(const class FString& EventKey, const class FString& EventData);
	void Terminate();

	int64 GetTelemetryInstanceID() const;
	bool IsPaused() const;
	bool IsTerminated() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DSTelemetry">();
	}
	static class UDSTelemetry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDSTelemetry>();
	}
};
static_assert(alignof(UDSTelemetry) == 0x000008, "Wrong alignment on UDSTelemetry");
static_assert(sizeof(UDSTelemetry) == 0x000030, "Wrong size on UDSTelemetry");

}

