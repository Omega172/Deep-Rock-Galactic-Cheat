#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController

#include "Basic.hpp"

#include "BP_PlayerControllerBase_classes.hpp"
#include "Engine_structs.hpp"
#include "FSD_structs.hpp"


namespace CG
{

// BlueprintGeneratedClass BP_PlayerController.BP_PlayerController_C
// 0x0060 (0x07F0 - 0x0790)
class ABP_PlayerController_C final : public ABP_PlayerControllerBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerController_C;              // 0x0790(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ProceduralController_C*             ProceduralController;                              // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             MainMenuRequested;                                 // 0x07A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          HUD_Visible;                                       // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36F0[0x3];                                     // 0x07B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CheatCounter;                                      // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CheatMenuRequested;                                // 0x07B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UClass*                                 MouseCursor_DO_NOT_DELETE;                         // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ToggleFPS;                                         // 0x07D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             QuickCheatMenuRequested;                           // 0x07E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void MainMenuRequested__DelegateSignature();
	void CheatMenuRequested__DelegateSignature();
	void ToggleFPS__DelegateSignature();
	void QuickCheatMenuRequested__DelegateSignature();
	void ExecuteUbergraph_BP_PlayerController(int32 EntryPoint);
	void Server_SetLag();
	void Receive_EndLevel_WaitForData(bool AreObjectivesCompleted, int32 NumberOfPlayersInPod);
	void ShowLoadingScrren();
	void ShowSelectCharacterScreen();
	void RequestLoadScreen();
	void SelectLateJoinCharacter(class UPlayerCharacterID* Hero);
	void Server_ClientReady();
	void ReceiveEndLevel();
	void Server_RestartLevel();
	void OnGenerationDone();
	void ReceiveBeginPlay();
	void SelectNewHero(class UPlayerCharacterID* Hero);
	void InpActEvt_CtrlPlusAlt_O_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_CtrlPlusAlt_N_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Multiply_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_Add_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Subtract_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_H_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_Gamepad_LeftThumbstick_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_Gamepad_LeftThumbstick_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_Chat_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Zero_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_Zero_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_Nine_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_Nine_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_Eight_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_Eight_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void InpActEvt_MenuButton_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_PushToTalk_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_PushToTalk_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_O_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void OnLoaded_0556572242FB261AF5947C9A16CF353A(class UObject* Loaded);
	void IsHUDVisible(bool* Visible);
	void DestroyCharacter();
	bool ShouldSkipEndscreen();
	void UpdateTutorialComplete();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerController_C">();
	}
	static class ABP_PlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerController_C>();
	}
};
static_assert(alignof(ABP_PlayerController_C) == 0x000008, "Wrong alignment on ABP_PlayerController_C");
static_assert(sizeof(ABP_PlayerController_C) == 0x0007F0, "Wrong size on ABP_PlayerController_C");
static_assert(offsetof(ABP_PlayerController_C, UberGraphFrame_BP_PlayerController_C) == 0x000790, "Member 'ABP_PlayerController_C::UberGraphFrame_BP_PlayerController_C' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, ProceduralController) == 0x000798, "Member 'ABP_PlayerController_C::ProceduralController' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, MainMenuRequested) == 0x0007A0, "Member 'ABP_PlayerController_C::MainMenuRequested' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, HUD_Visible) == 0x0007B0, "Member 'ABP_PlayerController_C::HUD_Visible' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, CheatCounter) == 0x0007B4, "Member 'ABP_PlayerController_C::CheatCounter' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, CheatMenuRequested) == 0x0007B8, "Member 'ABP_PlayerController_C::CheatMenuRequested' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, MouseCursor_DO_NOT_DELETE) == 0x0007C8, "Member 'ABP_PlayerController_C::MouseCursor_DO_NOT_DELETE' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, ToggleFPS) == 0x0007D0, "Member 'ABP_PlayerController_C::ToggleFPS' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, QuickCheatMenuRequested) == 0x0007E0, "Member 'ABP_PlayerController_C::QuickCheatMenuRequested' has a wrong offset!");

}

