#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ProceduralController

#include "Basic.hpp"

#include "BP_ProceduralController_classes.hpp"
#include "BP_ProceduralController_parameters.hpp"


namespace CG
{

// Function BP_ProceduralController.BP_ProceduralController_C.ExecuteUbergraph_BP_ProceduralController
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ProceduralController_C::ExecuteUbergraph_BP_ProceduralController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProceduralController_C", "ExecuteUbergraph_BP_ProceduralController");

	Params::BP_ProceduralController_C_ExecuteUbergraph_BP_ProceduralController Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ProceduralController.BP_ProceduralController_C.RequestCarverData
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDebrisItemPass                         Pass                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ProceduralController_C::RequestCarverData(EDebrisItemPass Pass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProceduralController_C", "RequestCarverData");

	Params::BP_ProceduralController_C_RequestCarverData Parms{};

	Parms.Pass = Pass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ProceduralController.BP_ProceduralController_C.RequestPLSData
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_ProceduralController_C::RequestPLSData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProceduralController_C", "RequestPLSData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProceduralController.BP_ProceduralController_C.Server_RequestCarverData
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDebrisItemPass                         Pass                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ProceduralController_C::Server_RequestCarverData(EDebrisItemPass Pass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProceduralController_C", "Server_RequestCarverData");

	Params::BP_ProceduralController_C_Server_RequestCarverData Parms{};

	Parms.Pass = Pass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ProceduralController.BP_ProceduralController_C.Server_RequestPLSData
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_ProceduralController_C::Server_RequestPLSData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProceduralController_C", "Server_RequestPLSData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProceduralController.BP_ProceduralController_C.ReceivedTunnelData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FTunnelNode>              Tunnels                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_ProceduralController_C::ReceivedTunnelData(const TArray<struct FTunnelNode>& Tunnels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProceduralController_C", "ReceivedTunnelData");

	Params::BP_ProceduralController_C_ReceivedTunnelData Parms{};

	Parms.Tunnels = std::move(Tunnels);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ProceduralController.BP_ProceduralController_C.ReceivedRoomData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   Seed                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FRoomNode>                Rooms                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FPathObstacle>            Obstacles                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_ProceduralController_C::ReceivedRoomData(int32 Seed, const TArray<struct FRoomNode>& Rooms, const TArray<struct FPathObstacle>& Obstacles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProceduralController_C", "ReceivedRoomData");

	Params::BP_ProceduralController_C_ReceivedRoomData Parms{};

	Parms.Seed = Seed;
	Parms.Rooms = std::move(Rooms);
	Parms.Obstacles = std::move(Obstacles);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ProceduralController.BP_ProceduralController_C.SendTunnelData
// (Event, Protected, BlueprintEvent)

void UBP_ProceduralController_C::SendTunnelData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProceduralController_C", "SendTunnelData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProceduralController.BP_ProceduralController_C.SendRoomData
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UBP_ProceduralController_C::SendRoomData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProceduralController_C", "SendRoomData");

	UObject::ProcessEvent(Func, nullptr);
}

}

