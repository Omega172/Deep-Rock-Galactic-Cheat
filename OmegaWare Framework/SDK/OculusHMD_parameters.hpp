#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OculusHMD

#include "Basic.hpp"

#include "HeadMountedDisplay_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "OculusHMD_structs.hpp"


namespace CG::Params
{

// Function OculusHMD.OculusFunctionLibrary.AddLoadingSplashScreen
// 0x0038 (0x0038 - 0x0000)
struct OculusFunctionLibrary_AddLoadingSplashScreen final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TranslationInMeters;                               // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              SizeInMeters;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DeltaRotation;                                     // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bClearBeforeAdd;                                   // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1670[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_AddLoadingSplashScreen) == 0x000008, "Wrong alignment on OculusFunctionLibrary_AddLoadingSplashScreen");
static_assert(sizeof(OculusFunctionLibrary_AddLoadingSplashScreen) == 0x000038, "Wrong size on OculusFunctionLibrary_AddLoadingSplashScreen");
static_assert(offsetof(OculusFunctionLibrary_AddLoadingSplashScreen, Texture) == 0x000000, "Member 'OculusFunctionLibrary_AddLoadingSplashScreen::Texture' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_AddLoadingSplashScreen, TranslationInMeters) == 0x000008, "Member 'OculusFunctionLibrary_AddLoadingSplashScreen::TranslationInMeters' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_AddLoadingSplashScreen, Rotation) == 0x000014, "Member 'OculusFunctionLibrary_AddLoadingSplashScreen::Rotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_AddLoadingSplashScreen, SizeInMeters) == 0x000020, "Member 'OculusFunctionLibrary_AddLoadingSplashScreen::SizeInMeters' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_AddLoadingSplashScreen, DeltaRotation) == 0x000028, "Member 'OculusFunctionLibrary_AddLoadingSplashScreen::DeltaRotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_AddLoadingSplashScreen, bClearBeforeAdd) == 0x000034, "Member 'OculusFunctionLibrary_AddLoadingSplashScreen::bClearBeforeAdd' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.EnableOrientationTracking
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_EnableOrientationTracking final
{
public:
	bool                                          bOrientationTracking;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_EnableOrientationTracking) == 0x000001, "Wrong alignment on OculusFunctionLibrary_EnableOrientationTracking");
static_assert(sizeof(OculusFunctionLibrary_EnableOrientationTracking) == 0x000001, "Wrong size on OculusFunctionLibrary_EnableOrientationTracking");
static_assert(offsetof(OculusFunctionLibrary_EnableOrientationTracking, bOrientationTracking) == 0x000000, "Member 'OculusFunctionLibrary_EnableOrientationTracking::bOrientationTracking' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.EnablePositionTracking
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_EnablePositionTracking final
{
public:
	bool                                          bPositionTracking;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_EnablePositionTracking) == 0x000001, "Wrong alignment on OculusFunctionLibrary_EnablePositionTracking");
static_assert(sizeof(OculusFunctionLibrary_EnablePositionTracking) == 0x000001, "Wrong size on OculusFunctionLibrary_EnablePositionTracking");
static_assert(offsetof(OculusFunctionLibrary_EnablePositionTracking, bPositionTracking) == 0x000000, "Member 'OculusFunctionLibrary_EnablePositionTracking::bPositionTracking' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetAvailableDisplayFrequencies
// 0x0010 (0x0010 - 0x0000)
struct OculusFunctionLibrary_GetAvailableDisplayFrequencies final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetAvailableDisplayFrequencies) == 0x000008, "Wrong alignment on OculusFunctionLibrary_GetAvailableDisplayFrequencies");
static_assert(sizeof(OculusFunctionLibrary_GetAvailableDisplayFrequencies) == 0x000010, "Wrong size on OculusFunctionLibrary_GetAvailableDisplayFrequencies");
static_assert(offsetof(OculusFunctionLibrary_GetAvailableDisplayFrequencies, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_GetAvailableDisplayFrequencies::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetBaseRotationAndBaseOffsetInMeters
// 0x0018 (0x0018 - 0x0000)
struct OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters final
{
public:
	struct FRotator                               OutRotation;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutBaseOffsetInMeters;                             // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters");
static_assert(sizeof(OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters) == 0x000018, "Wrong size on OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters");
static_assert(offsetof(OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters, OutRotation) == 0x000000, "Member 'OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters::OutRotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters, OutBaseOffsetInMeters) == 0x00000C, "Member 'OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters::OutBaseOffsetInMeters' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetBaseRotationAndPositionOffset
// 0x0018 (0x0018 - 0x0000)
struct OculusFunctionLibrary_GetBaseRotationAndPositionOffset final
{
public:
	struct FRotator                               OutRot;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutPosOffset;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetBaseRotationAndPositionOffset) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetBaseRotationAndPositionOffset");
static_assert(sizeof(OculusFunctionLibrary_GetBaseRotationAndPositionOffset) == 0x000018, "Wrong size on OculusFunctionLibrary_GetBaseRotationAndPositionOffset");
static_assert(offsetof(OculusFunctionLibrary_GetBaseRotationAndPositionOffset, OutRot) == 0x000000, "Member 'OculusFunctionLibrary_GetBaseRotationAndPositionOffset::OutRot' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetBaseRotationAndPositionOffset, OutPosOffset) == 0x00000C, "Member 'OculusFunctionLibrary_GetBaseRotationAndPositionOffset::OutPosOffset' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetCurrentDisplayFrequency
// 0x0004 (0x0004 - 0x0000)
struct OculusFunctionLibrary_GetCurrentDisplayFrequency final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetCurrentDisplayFrequency) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetCurrentDisplayFrequency");
static_assert(sizeof(OculusFunctionLibrary_GetCurrentDisplayFrequency) == 0x000004, "Wrong size on OculusFunctionLibrary_GetCurrentDisplayFrequency");
static_assert(offsetof(OculusFunctionLibrary_GetCurrentDisplayFrequency, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_GetCurrentDisplayFrequency::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetDeviceName
// 0x0010 (0x0010 - 0x0000)
struct OculusFunctionLibrary_GetDeviceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetDeviceName) == 0x000008, "Wrong alignment on OculusFunctionLibrary_GetDeviceName");
static_assert(sizeof(OculusFunctionLibrary_GetDeviceName) == 0x000010, "Wrong size on OculusFunctionLibrary_GetDeviceName");
static_assert(offsetof(OculusFunctionLibrary_GetDeviceName, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_GetDeviceName::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetDeviceType
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_GetDeviceType final
{
public:
	EOculusDeviceType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetDeviceType) == 0x000001, "Wrong alignment on OculusFunctionLibrary_GetDeviceType");
static_assert(sizeof(OculusFunctionLibrary_GetDeviceType) == 0x000001, "Wrong size on OculusFunctionLibrary_GetDeviceType");
static_assert(offsetof(OculusFunctionLibrary_GetDeviceType, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_GetDeviceType::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetFixedFoveatedRenderingLevel
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_GetFixedFoveatedRenderingLevel final
{
public:
	EFixedFoveatedRenderingLevel                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetFixedFoveatedRenderingLevel) == 0x000001, "Wrong alignment on OculusFunctionLibrary_GetFixedFoveatedRenderingLevel");
static_assert(sizeof(OculusFunctionLibrary_GetFixedFoveatedRenderingLevel) == 0x000001, "Wrong size on OculusFunctionLibrary_GetFixedFoveatedRenderingLevel");
static_assert(offsetof(OculusFunctionLibrary_GetFixedFoveatedRenderingLevel, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_GetFixedFoveatedRenderingLevel::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetGPUFrameTime
// 0x0004 (0x0004 - 0x0000)
struct OculusFunctionLibrary_GetGPUFrameTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetGPUFrameTime) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetGPUFrameTime");
static_assert(sizeof(OculusFunctionLibrary_GetGPUFrameTime) == 0x000004, "Wrong size on OculusFunctionLibrary_GetGPUFrameTime");
static_assert(offsetof(OculusFunctionLibrary_GetGPUFrameTime, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_GetGPUFrameTime::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetGPUUtilization
// 0x0008 (0x0008 - 0x0000)
struct OculusFunctionLibrary_GetGPUUtilization final
{
public:
	bool                                          IsGPUAvailable;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1671[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GPUUtilization;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetGPUUtilization) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetGPUUtilization");
static_assert(sizeof(OculusFunctionLibrary_GetGPUUtilization) == 0x000008, "Wrong size on OculusFunctionLibrary_GetGPUUtilization");
static_assert(offsetof(OculusFunctionLibrary_GetGPUUtilization, IsGPUAvailable) == 0x000000, "Member 'OculusFunctionLibrary_GetGPUUtilization::IsGPUAvailable' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetGPUUtilization, GPUUtilization) == 0x000004, "Member 'OculusFunctionLibrary_GetGPUUtilization::GPUUtilization' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetGuardianDimensions
// 0x0010 (0x0010 - 0x0000)
struct OculusFunctionLibrary_GetGuardianDimensions final
{
public:
	EBoundaryType                                 BoundaryType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1672[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetGuardianDimensions) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetGuardianDimensions");
static_assert(sizeof(OculusFunctionLibrary_GetGuardianDimensions) == 0x000010, "Wrong size on OculusFunctionLibrary_GetGuardianDimensions");
static_assert(offsetof(OculusFunctionLibrary_GetGuardianDimensions, BoundaryType) == 0x000000, "Member 'OculusFunctionLibrary_GetGuardianDimensions::BoundaryType' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetGuardianDimensions, ReturnValue) == 0x000004, "Member 'OculusFunctionLibrary_GetGuardianDimensions::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetGuardianPoints
// 0x0018 (0x0018 - 0x0000)
struct OculusFunctionLibrary_GetGuardianPoints final
{
public:
	EBoundaryType                                 BoundaryType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePawnSpace;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1673[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetGuardianPoints) == 0x000008, "Wrong alignment on OculusFunctionLibrary_GetGuardianPoints");
static_assert(sizeof(OculusFunctionLibrary_GetGuardianPoints) == 0x000018, "Wrong size on OculusFunctionLibrary_GetGuardianPoints");
static_assert(offsetof(OculusFunctionLibrary_GetGuardianPoints, BoundaryType) == 0x000000, "Member 'OculusFunctionLibrary_GetGuardianPoints::BoundaryType' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetGuardianPoints, UsePawnSpace) == 0x000001, "Member 'OculusFunctionLibrary_GetGuardianPoints::UsePawnSpace' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetGuardianPoints, ReturnValue) == 0x000008, "Member 'OculusFunctionLibrary_GetGuardianPoints::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetHmdColorDesc
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_GetHmdColorDesc final
{
public:
	EColorSpace                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetHmdColorDesc) == 0x000001, "Wrong alignment on OculusFunctionLibrary_GetHmdColorDesc");
static_assert(sizeof(OculusFunctionLibrary_GetHmdColorDesc) == 0x000001, "Wrong size on OculusFunctionLibrary_GetHmdColorDesc");
static_assert(offsetof(OculusFunctionLibrary_GetHmdColorDesc, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_GetHmdColorDesc::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetNodeGuardianIntersection
// 0x0024 (0x0024 - 0x0000)
struct OculusFunctionLibrary_GetNodeGuardianIntersection final
{
public:
	ETrackedDeviceType                            DeviceType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoundaryType                                 BoundaryType;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1674[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuardianTestResult                    ReturnValue;                                       // 0x0004(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetNodeGuardianIntersection) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetNodeGuardianIntersection");
static_assert(sizeof(OculusFunctionLibrary_GetNodeGuardianIntersection) == 0x000024, "Wrong size on OculusFunctionLibrary_GetNodeGuardianIntersection");
static_assert(offsetof(OculusFunctionLibrary_GetNodeGuardianIntersection, DeviceType) == 0x000000, "Member 'OculusFunctionLibrary_GetNodeGuardianIntersection::DeviceType' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetNodeGuardianIntersection, BoundaryType) == 0x000001, "Member 'OculusFunctionLibrary_GetNodeGuardianIntersection::BoundaryType' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetNodeGuardianIntersection, ReturnValue) == 0x000004, "Member 'OculusFunctionLibrary_GetNodeGuardianIntersection::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetPlayAreaTransform
// 0x0030 (0x0030 - 0x0000)
struct OculusFunctionLibrary_GetPlayAreaTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetPlayAreaTransform) == 0x000010, "Wrong alignment on OculusFunctionLibrary_GetPlayAreaTransform");
static_assert(sizeof(OculusFunctionLibrary_GetPlayAreaTransform) == 0x000030, "Wrong size on OculusFunctionLibrary_GetPlayAreaTransform");
static_assert(offsetof(OculusFunctionLibrary_GetPlayAreaTransform, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_GetPlayAreaTransform::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetPointGuardianIntersection
// 0x0030 (0x0030 - 0x0000)
struct OculusFunctionLibrary_GetPointGuardianIntersection final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoundaryType                                 BoundaryType;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1675[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuardianTestResult                    ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetPointGuardianIntersection) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetPointGuardianIntersection");
static_assert(sizeof(OculusFunctionLibrary_GetPointGuardianIntersection) == 0x000030, "Wrong size on OculusFunctionLibrary_GetPointGuardianIntersection");
static_assert(offsetof(OculusFunctionLibrary_GetPointGuardianIntersection, Point) == 0x000000, "Member 'OculusFunctionLibrary_GetPointGuardianIntersection::Point' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPointGuardianIntersection, BoundaryType) == 0x00000C, "Member 'OculusFunctionLibrary_GetPointGuardianIntersection::BoundaryType' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPointGuardianIntersection, ReturnValue) == 0x000010, "Member 'OculusFunctionLibrary_GetPointGuardianIntersection::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetPose
// 0x0034 (0x0034 - 0x0000)
struct OculusFunctionLibrary_GetPose final
{
public:
	struct FRotator                               DeviceRotation;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DevicePosition;                                    // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NeckPosition;                                      // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOrienationForPlayerCamera;                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePositionForPlayerCamera;                       // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1676[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PositionScale;                                     // 0x0028(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetPose) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetPose");
static_assert(sizeof(OculusFunctionLibrary_GetPose) == 0x000034, "Wrong size on OculusFunctionLibrary_GetPose");
static_assert(offsetof(OculusFunctionLibrary_GetPose, DeviceRotation) == 0x000000, "Member 'OculusFunctionLibrary_GetPose::DeviceRotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, DevicePosition) == 0x00000C, "Member 'OculusFunctionLibrary_GetPose::DevicePosition' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, NeckPosition) == 0x000018, "Member 'OculusFunctionLibrary_GetPose::NeckPosition' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, bUseOrienationForPlayerCamera) == 0x000024, "Member 'OculusFunctionLibrary_GetPose::bUseOrienationForPlayerCamera' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, bUsePositionForPlayerCamera) == 0x000025, "Member 'OculusFunctionLibrary_GetPose::bUsePositionForPlayerCamera' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, PositionScale) == 0x000028, "Member 'OculusFunctionLibrary_GetPose::PositionScale' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetRawSensorData
// 0x0038 (0x0038 - 0x0000)
struct OculusFunctionLibrary_GetRawSensorData final
{
public:
	struct FVector                                AngularAcceleration;                               // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearAcceleration;                                // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearVelocity;                                    // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInSeconds;                                     // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrackedDeviceType                            DeviceType;                                        // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1677[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_GetRawSensorData) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetRawSensorData");
static_assert(sizeof(OculusFunctionLibrary_GetRawSensorData) == 0x000038, "Wrong size on OculusFunctionLibrary_GetRawSensorData");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, AngularAcceleration) == 0x000000, "Member 'OculusFunctionLibrary_GetRawSensorData::AngularAcceleration' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, LinearAcceleration) == 0x00000C, "Member 'OculusFunctionLibrary_GetRawSensorData::LinearAcceleration' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, AngularVelocity) == 0x000018, "Member 'OculusFunctionLibrary_GetRawSensorData::AngularVelocity' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, LinearVelocity) == 0x000024, "Member 'OculusFunctionLibrary_GetRawSensorData::LinearVelocity' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, TimeInSeconds) == 0x000030, "Member 'OculusFunctionLibrary_GetRawSensorData::TimeInSeconds' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, DeviceType) == 0x000034, "Member 'OculusFunctionLibrary_GetRawSensorData::DeviceType' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetSystemHmd3DofModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_GetSystemHmd3DofModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetSystemHmd3DofModeEnabled) == 0x000001, "Wrong alignment on OculusFunctionLibrary_GetSystemHmd3DofModeEnabled");
static_assert(sizeof(OculusFunctionLibrary_GetSystemHmd3DofModeEnabled) == 0x000001, "Wrong size on OculusFunctionLibrary_GetSystemHmd3DofModeEnabled");
static_assert(offsetof(OculusFunctionLibrary_GetSystemHmd3DofModeEnabled, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_GetSystemHmd3DofModeEnabled::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetUserProfile
// 0x0050 (0x0050 - 0x0000)
struct OculusFunctionLibrary_GetUserProfile final
{
public:
	struct FHmdUserProfile                        Profile;                                           // 0x0000(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1678[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_GetUserProfile) == 0x000008, "Wrong alignment on OculusFunctionLibrary_GetUserProfile");
static_assert(sizeof(OculusFunctionLibrary_GetUserProfile) == 0x000050, "Wrong size on OculusFunctionLibrary_GetUserProfile");
static_assert(offsetof(OculusFunctionLibrary_GetUserProfile, Profile) == 0x000000, "Member 'OculusFunctionLibrary_GetUserProfile::Profile' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetUserProfile, ReturnValue) == 0x000048, "Member 'OculusFunctionLibrary_GetUserProfile::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.HasInputFocus
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_HasInputFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_HasInputFocus) == 0x000001, "Wrong alignment on OculusFunctionLibrary_HasInputFocus");
static_assert(sizeof(OculusFunctionLibrary_HasInputFocus) == 0x000001, "Wrong size on OculusFunctionLibrary_HasInputFocus");
static_assert(offsetof(OculusFunctionLibrary_HasInputFocus, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_HasInputFocus::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.HasSystemOverlayPresent
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_HasSystemOverlayPresent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_HasSystemOverlayPresent) == 0x000001, "Wrong alignment on OculusFunctionLibrary_HasSystemOverlayPresent");
static_assert(sizeof(OculusFunctionLibrary_HasSystemOverlayPresent) == 0x000001, "Wrong size on OculusFunctionLibrary_HasSystemOverlayPresent");
static_assert(offsetof(OculusFunctionLibrary_HasSystemOverlayPresent, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_HasSystemOverlayPresent::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.IsDeviceTracked
// 0x0002 (0x0002 - 0x0000)
struct OculusFunctionLibrary_IsDeviceTracked final
{
public:
	ETrackedDeviceType                            DeviceType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_IsDeviceTracked) == 0x000001, "Wrong alignment on OculusFunctionLibrary_IsDeviceTracked");
static_assert(sizeof(OculusFunctionLibrary_IsDeviceTracked) == 0x000002, "Wrong size on OculusFunctionLibrary_IsDeviceTracked");
static_assert(offsetof(OculusFunctionLibrary_IsDeviceTracked, DeviceType) == 0x000000, "Member 'OculusFunctionLibrary_IsDeviceTracked::DeviceType' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_IsDeviceTracked, ReturnValue) == 0x000001, "Member 'OculusFunctionLibrary_IsDeviceTracked::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.IsGuardianConfigured
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_IsGuardianConfigured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_IsGuardianConfigured) == 0x000001, "Wrong alignment on OculusFunctionLibrary_IsGuardianConfigured");
static_assert(sizeof(OculusFunctionLibrary_IsGuardianConfigured) == 0x000001, "Wrong size on OculusFunctionLibrary_IsGuardianConfigured");
static_assert(offsetof(OculusFunctionLibrary_IsGuardianConfigured, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_IsGuardianConfigured::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.IsGuardianDisplayed
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_IsGuardianDisplayed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_IsGuardianDisplayed) == 0x000001, "Wrong alignment on OculusFunctionLibrary_IsGuardianDisplayed");
static_assert(sizeof(OculusFunctionLibrary_IsGuardianDisplayed) == 0x000001, "Wrong size on OculusFunctionLibrary_IsGuardianDisplayed");
static_assert(offsetof(OculusFunctionLibrary_IsGuardianDisplayed, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_IsGuardianDisplayed::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetBaseRotationAndBaseOffsetInMeters
// 0x001C (0x001C - 0x0000)
struct OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BaseOffsetInMeters;                                // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientPositionSelector                       Options;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1679[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters");
static_assert(sizeof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters) == 0x00001C, "Wrong size on OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters, Rotation) == 0x000000, "Member 'OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters::Rotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters, BaseOffsetInMeters) == 0x00000C, "Member 'OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters::BaseOffsetInMeters' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters, Options) == 0x000018, "Member 'OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters::Options' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetBaseRotationAndPositionOffset
// 0x001C (0x001C - 0x0000)
struct OculusFunctionLibrary_SetBaseRotationAndPositionOffset final
{
public:
	struct FRotator                               BaseRot;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PosOffset;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientPositionSelector                       Options;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_167A[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetBaseRotationAndPositionOffset");
static_assert(sizeof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset) == 0x00001C, "Wrong size on OculusFunctionLibrary_SetBaseRotationAndPositionOffset");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset, BaseRot) == 0x000000, "Member 'OculusFunctionLibrary_SetBaseRotationAndPositionOffset::BaseRot' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset, PosOffset) == 0x00000C, "Member 'OculusFunctionLibrary_SetBaseRotationAndPositionOffset::PosOffset' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset, Options) == 0x000018, "Member 'OculusFunctionLibrary_SetBaseRotationAndPositionOffset::Options' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetClientColorDesc
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_SetClientColorDesc final
{
public:
	EColorSpace                                   ColorSpace;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_SetClientColorDesc) == 0x000001, "Wrong alignment on OculusFunctionLibrary_SetClientColorDesc");
static_assert(sizeof(OculusFunctionLibrary_SetClientColorDesc) == 0x000001, "Wrong size on OculusFunctionLibrary_SetClientColorDesc");
static_assert(offsetof(OculusFunctionLibrary_SetClientColorDesc, ColorSpace) == 0x000000, "Member 'OculusFunctionLibrary_SetClientColorDesc::ColorSpace' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetColorScaleAndOffset
// 0x0024 (0x0024 - 0x0000)
struct OculusFunctionLibrary_SetColorScaleAndOffset final
{
public:
	struct FLinearColor                           ColorScale;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorOffset;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToAllLayers;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_167B[0x3];                                     // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_SetColorScaleAndOffset) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetColorScaleAndOffset");
static_assert(sizeof(OculusFunctionLibrary_SetColorScaleAndOffset) == 0x000024, "Wrong size on OculusFunctionLibrary_SetColorScaleAndOffset");
static_assert(offsetof(OculusFunctionLibrary_SetColorScaleAndOffset, ColorScale) == 0x000000, "Member 'OculusFunctionLibrary_SetColorScaleAndOffset::ColorScale' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetColorScaleAndOffset, ColorOffset) == 0x000010, "Member 'OculusFunctionLibrary_SetColorScaleAndOffset::ColorOffset' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetColorScaleAndOffset, bApplyToAllLayers) == 0x000020, "Member 'OculusFunctionLibrary_SetColorScaleAndOffset::bApplyToAllLayers' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetCPUAndGPULevels
// 0x0008 (0x0008 - 0x0000)
struct OculusFunctionLibrary_SetCPUAndGPULevels final
{
public:
	int32                                         CPULevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GPULevel;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_SetCPUAndGPULevels) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetCPUAndGPULevels");
static_assert(sizeof(OculusFunctionLibrary_SetCPUAndGPULevels) == 0x000008, "Wrong size on OculusFunctionLibrary_SetCPUAndGPULevels");
static_assert(offsetof(OculusFunctionLibrary_SetCPUAndGPULevels, CPULevel) == 0x000000, "Member 'OculusFunctionLibrary_SetCPUAndGPULevels::CPULevel' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetCPUAndGPULevels, GPULevel) == 0x000004, "Member 'OculusFunctionLibrary_SetCPUAndGPULevels::GPULevel' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetDisplayFrequency
// 0x0004 (0x0004 - 0x0000)
struct OculusFunctionLibrary_SetDisplayFrequency final
{
public:
	float                                         RequestedFrequency;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_SetDisplayFrequency) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetDisplayFrequency");
static_assert(sizeof(OculusFunctionLibrary_SetDisplayFrequency) == 0x000004, "Wrong size on OculusFunctionLibrary_SetDisplayFrequency");
static_assert(offsetof(OculusFunctionLibrary_SetDisplayFrequency, RequestedFrequency) == 0x000000, "Member 'OculusFunctionLibrary_SetDisplayFrequency::RequestedFrequency' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetFixedFoveatedRenderingLevel
// 0x0002 (0x0002 - 0x0000)
struct OculusFunctionLibrary_SetFixedFoveatedRenderingLevel final
{
public:
	EFixedFoveatedRenderingLevel                  Level;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDynamic;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_SetFixedFoveatedRenderingLevel) == 0x000001, "Wrong alignment on OculusFunctionLibrary_SetFixedFoveatedRenderingLevel");
static_assert(sizeof(OculusFunctionLibrary_SetFixedFoveatedRenderingLevel) == 0x000002, "Wrong size on OculusFunctionLibrary_SetFixedFoveatedRenderingLevel");
static_assert(offsetof(OculusFunctionLibrary_SetFixedFoveatedRenderingLevel, Level) == 0x000000, "Member 'OculusFunctionLibrary_SetFixedFoveatedRenderingLevel::Level' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetFixedFoveatedRenderingLevel, IsDynamic) == 0x000001, "Member 'OculusFunctionLibrary_SetFixedFoveatedRenderingLevel::IsDynamic' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetGuardianVisibility
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_SetGuardianVisibility final
{
public:
	bool                                          GuardianVisible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_SetGuardianVisibility) == 0x000001, "Wrong alignment on OculusFunctionLibrary_SetGuardianVisibility");
static_assert(sizeof(OculusFunctionLibrary_SetGuardianVisibility) == 0x000001, "Wrong size on OculusFunctionLibrary_SetGuardianVisibility");
static_assert(offsetof(OculusFunctionLibrary_SetGuardianVisibility, GuardianVisible) == 0x000000, "Member 'OculusFunctionLibrary_SetGuardianVisibility::GuardianVisible' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetPositionScale3D
// 0x000C (0x000C - 0x0000)
struct OculusFunctionLibrary_SetPositionScale3D final
{
public:
	struct FVector                                PosScale3D;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_SetPositionScale3D) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetPositionScale3D");
static_assert(sizeof(OculusFunctionLibrary_SetPositionScale3D) == 0x00000C, "Wrong size on OculusFunctionLibrary_SetPositionScale3D");
static_assert(offsetof(OculusFunctionLibrary_SetPositionScale3D, PosScale3D) == 0x000000, "Member 'OculusFunctionLibrary_SetPositionScale3D::PosScale3D' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetReorientHMDOnControllerRecenter
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_SetReorientHMDOnControllerRecenter final
{
public:
	bool                                          RecenterMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_SetReorientHMDOnControllerRecenter) == 0x000001, "Wrong alignment on OculusFunctionLibrary_SetReorientHMDOnControllerRecenter");
static_assert(sizeof(OculusFunctionLibrary_SetReorientHMDOnControllerRecenter) == 0x000001, "Wrong size on OculusFunctionLibrary_SetReorientHMDOnControllerRecenter");
static_assert(offsetof(OculusFunctionLibrary_SetReorientHMDOnControllerRecenter, RecenterMode) == 0x000000, "Member 'OculusFunctionLibrary_SetReorientHMDOnControllerRecenter::RecenterMode' has a wrong offset!");

}

