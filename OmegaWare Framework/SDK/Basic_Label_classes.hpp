#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Basic_Label

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"
#include "ENUM_MenuColors_structs.hpp"
#include "Engine_structs.hpp"


namespace CG
{

// WidgetBlueprintGeneratedClass Basic_Label.Basic_Label_C
// 0x00C8 (0x0328 - 0x0260)
class UBasic_Label_C : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFSDLabelWidget*                        Label;                                             // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0270(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          ToUpper;                                           // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C38[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0290(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn, HasGetValueTypeHash)
	ENUM_MenuColors                               TextColor;                                         // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	ETextJustify                                  Justification;                                     // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2C39[0x2];                                     // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDesiredWidth;                                   // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                TextMargin;                                        // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AutoTextWrap;                                      // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C3A[0x3];                                     // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WrapTextAt;                                        // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextWrappingPolicy                           WrappingPolicy;                                    // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C3B[0x3];                                     // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxLength;                                         // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   MaxLengthIndicator;                                // 0x0310(0x0018)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_Basic_Label(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void SetMargin(const struct FMargin& New_Margin);
	void SetText(const class FText& Param_Text);
	void SetTextColor(ENUM_MenuColors Param_TextColor);
	void SetJustification(ETextJustify Param_Justification);
	void SetMinDesiredWidth(float Param_MinDesiredWidth);
	void SetFontSize(int32 InFontSize);
	void SetAutoWrapText(bool Param_AutoTextWrap);
	void SetWrapTextAt(float Param_WrapTextAt);
	void SetWrappingPolicy(ETextWrappingPolicy Param_WrappingPolicy);
	void GetText(class FText* Param_Text);
	void SelectTextColor(ENUM_MenuColors FLASE, ENUM_MenuColors TURR, bool Condition);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Basic_Label_C">();
	}
	static class UBasic_Label_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBasic_Label_C>();
	}
};
static_assert(alignof(UBasic_Label_C) == 0x000008, "Wrong alignment on UBasic_Label_C");
static_assert(sizeof(UBasic_Label_C) == 0x000328, "Wrong size on UBasic_Label_C");
static_assert(offsetof(UBasic_Label_C, UberGraphFrame) == 0x000260, "Member 'UBasic_Label_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, Label) == 0x000268, "Member 'UBasic_Label_C::Label' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, Text) == 0x000270, "Member 'UBasic_Label_C::Text' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, ToUpper) == 0x000288, "Member 'UBasic_Label_C::ToUpper' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, Font) == 0x000290, "Member 'UBasic_Label_C::Font' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, TextColor) == 0x0002E8, "Member 'UBasic_Label_C::TextColor' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, Justification) == 0x0002E9, "Member 'UBasic_Label_C::Justification' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, MinDesiredWidth) == 0x0002EC, "Member 'UBasic_Label_C::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, TextMargin) == 0x0002F0, "Member 'UBasic_Label_C::TextMargin' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, AutoTextWrap) == 0x000300, "Member 'UBasic_Label_C::AutoTextWrap' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, WrapTextAt) == 0x000304, "Member 'UBasic_Label_C::WrapTextAt' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, WrappingPolicy) == 0x000308, "Member 'UBasic_Label_C::WrappingPolicy' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, MaxLength) == 0x00030C, "Member 'UBasic_Label_C::MaxLength' has a wrong offset!");
static_assert(offsetof(UBasic_Label_C, MaxLengthIndicator) == 0x000310, "Member 'UBasic_Label_C::MaxLengthIndicator' has a wrong offset!");

}

