#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Basic_Label

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"
#include "ENUM_MenuColors_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace CG::Params
{

// Function Basic_Label.Basic_Label_C.ExecuteUbergraph_Basic_Label
// 0x0008 (0x0008 - 0x0000)
struct Basic_Label_C_ExecuteUbergraph_Basic_Label final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Basic_Label_C_ExecuteUbergraph_Basic_Label) == 0x000004, "Wrong alignment on Basic_Label_C_ExecuteUbergraph_Basic_Label");
static_assert(sizeof(Basic_Label_C_ExecuteUbergraph_Basic_Label) == 0x000008, "Wrong size on Basic_Label_C_ExecuteUbergraph_Basic_Label");
static_assert(offsetof(Basic_Label_C_ExecuteUbergraph_Basic_Label, EntryPoint) == 0x000000, "Member 'Basic_Label_C_ExecuteUbergraph_Basic_Label::EntryPoint' has a wrong offset!");
static_assert(offsetof(Basic_Label_C_ExecuteUbergraph_Basic_Label, K2Node_Event_IsDesignTime) == 0x000004, "Member 'Basic_Label_C_ExecuteUbergraph_Basic_Label::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function Basic_Label.Basic_Label_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct Basic_Label_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Basic_Label_C_PreConstruct) == 0x000001, "Wrong alignment on Basic_Label_C_PreConstruct");
static_assert(sizeof(Basic_Label_C_PreConstruct) == 0x000001, "Wrong size on Basic_Label_C_PreConstruct");
static_assert(offsetof(Basic_Label_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'Basic_Label_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function Basic_Label.Basic_Label_C.SetMargin
// 0x0010 (0x0010 - 0x0000)
struct Basic_Label_C_SetMargin final
{
public:
	struct FMargin                                New_Margin;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Basic_Label_C_SetMargin) == 0x000004, "Wrong alignment on Basic_Label_C_SetMargin");
static_assert(sizeof(Basic_Label_C_SetMargin) == 0x000010, "Wrong size on Basic_Label_C_SetMargin");
static_assert(offsetof(Basic_Label_C_SetMargin, New_Margin) == 0x000000, "Member 'Basic_Label_C_SetMargin::New_Margin' has a wrong offset!");

// Function Basic_Label.Basic_Label_C.SetText
// 0x0068 (0x0068 - 0x0000)
struct Basic_Label_C_SetText final
{
public:
	class FText                                   Param_Text;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C3C[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0020(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0038(0x0018)()
	class FText                                   CallFunc_ClampTextLength_ReturnValue;              // 0x0050(0x0018)()
};
static_assert(alignof(Basic_Label_C_SetText) == 0x000008, "Wrong alignment on Basic_Label_C_SetText");
static_assert(sizeof(Basic_Label_C_SetText) == 0x000068, "Wrong size on Basic_Label_C_SetText");
static_assert(offsetof(Basic_Label_C_SetText, Param_Text) == 0x000000, "Member 'Basic_Label_C_SetText::Param_Text' has a wrong offset!");
static_assert(offsetof(Basic_Label_C_SetText, Temp_bool_Variable) == 0x000018, "Member 'Basic_Label_C_SetText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Basic_Label_C_SetText, CallFunc_TextToUpper_ReturnValue) == 0x000020, "Member 'Basic_Label_C_SetText::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(Basic_Label_C_SetText, K2Node_Select_Default) == 0x000038, "Member 'Basic_Label_C_SetText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Basic_Label_C_SetText, CallFunc_ClampTextLength_ReturnValue) == 0x000050, "Member 'Basic_Label_C_SetText::CallFunc_ClampTextLength_ReturnValue' has a wrong offset!");

// Function Basic_Label.Basic_Label_C.SetTextColor
// 0x0040 (0x0040 - 0x0000)
struct Basic_Label_C_SetTextColor final
{
public:
	ENUM_MenuColors                               Param_TextColor;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C3D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_MenuColors_OutputColor;                   // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C3E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0018(0x0028)()
};
static_assert(alignof(Basic_Label_C_SetTextColor) == 0x000008, "Wrong alignment on Basic_Label_C_SetTextColor");
static_assert(sizeof(Basic_Label_C_SetTextColor) == 0x000040, "Wrong size on Basic_Label_C_SetTextColor");
static_assert(offsetof(Basic_Label_C_SetTextColor, Param_TextColor) == 0x000000, "Member 'Basic_Label_C_SetTextColor::Param_TextColor' has a wrong offset!");
static_assert(offsetof(Basic_Label_C_SetTextColor, CallFunc_MenuColors_OutputColor) == 0x000004, "Member 'Basic_Label_C_SetTextColor::CallFunc_MenuColors_OutputColor' has a wrong offset!");
static_assert(offsetof(Basic_Label_C_SetTextColor, K2Node_MakeStruct_SlateColor) == 0x000018, "Member 'Basic_Label_C_SetTextColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function Basic_Label.Basic_Label_C.SetJustification
// 0x0001 (0x0001 - 0x0000)
struct Basic_Label_C_SetJustification final
{
public:
	ETextJustify                                  Param_Justification;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Label_C_SetJustification) == 0x000001, "Wrong alignment on Basic_Label_C_SetJustification");
static_assert(sizeof(Basic_Label_C_SetJustification) == 0x000001, "Wrong size on Basic_Label_C_SetJustification");
static_assert(offsetof(Basic_Label_C_SetJustification, Param_Justification) == 0x000000, "Member 'Basic_Label_C_SetJustification::Param_Justification' has a wrong offset!");

// Function Basic_Label.Basic_Label_C.SetMinDesiredWidth
// 0x0004 (0x0004 - 0x0000)
struct Basic_Label_C_SetMinDesiredWidth final
{
public:
	float                                         Param_MinDesiredWidth;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Label_C_SetMinDesiredWidth) == 0x000004, "Wrong alignment on Basic_Label_C_SetMinDesiredWidth");
static_assert(sizeof(Basic_Label_C_SetMinDesiredWidth) == 0x000004, "Wrong size on Basic_Label_C_SetMinDesiredWidth");
static_assert(offsetof(Basic_Label_C_SetMinDesiredWidth, Param_MinDesiredWidth) == 0x000000, "Member 'Basic_Label_C_SetMinDesiredWidth::Param_MinDesiredWidth' has a wrong offset!");

// Function Basic_Label.Basic_Label_C.SetFontSize
// 0x0060 (0x0060 - 0x0000)
struct Basic_Label_C_SetFontSize final
{
public:
	int32                                         InFontSize;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C3F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0008(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(Basic_Label_C_SetFontSize) == 0x000008, "Wrong alignment on Basic_Label_C_SetFontSize");
static_assert(sizeof(Basic_Label_C_SetFontSize) == 0x000060, "Wrong size on Basic_Label_C_SetFontSize");
static_assert(offsetof(Basic_Label_C_SetFontSize, InFontSize) == 0x000000, "Member 'Basic_Label_C_SetFontSize::InFontSize' has a wrong offset!");
static_assert(offsetof(Basic_Label_C_SetFontSize, K2Node_MakeStruct_SlateFontInfo) == 0x000008, "Member 'Basic_Label_C_SetFontSize::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function Basic_Label.Basic_Label_C.SetAutoWrapText
// 0x0001 (0x0001 - 0x0000)
struct Basic_Label_C_SetAutoWrapText final
{
public:
	bool                                          Param_AutoTextWrap;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Basic_Label_C_SetAutoWrapText) == 0x000001, "Wrong alignment on Basic_Label_C_SetAutoWrapText");
static_assert(sizeof(Basic_Label_C_SetAutoWrapText) == 0x000001, "Wrong size on Basic_Label_C_SetAutoWrapText");
static_assert(offsetof(Basic_Label_C_SetAutoWrapText, Param_AutoTextWrap) == 0x000000, "Member 'Basic_Label_C_SetAutoWrapText::Param_AutoTextWrap' has a wrong offset!");

// Function Basic_Label.Basic_Label_C.SetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct Basic_Label_C_SetWrapTextAt final
{
public:
	float                                         Param_WrapTextAt;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Label_C_SetWrapTextAt) == 0x000004, "Wrong alignment on Basic_Label_C_SetWrapTextAt");
static_assert(sizeof(Basic_Label_C_SetWrapTextAt) == 0x000004, "Wrong size on Basic_Label_C_SetWrapTextAt");
static_assert(offsetof(Basic_Label_C_SetWrapTextAt, Param_WrapTextAt) == 0x000000, "Member 'Basic_Label_C_SetWrapTextAt::Param_WrapTextAt' has a wrong offset!");

// Function Basic_Label.Basic_Label_C.SetWrappingPolicy
// 0x0001 (0x0001 - 0x0000)
struct Basic_Label_C_SetWrappingPolicy final
{
public:
	ETextWrappingPolicy                           Param_WrappingPolicy;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Label_C_SetWrappingPolicy) == 0x000001, "Wrong alignment on Basic_Label_C_SetWrappingPolicy");
static_assert(sizeof(Basic_Label_C_SetWrappingPolicy) == 0x000001, "Wrong size on Basic_Label_C_SetWrappingPolicy");
static_assert(offsetof(Basic_Label_C_SetWrappingPolicy, Param_WrappingPolicy) == 0x000000, "Member 'Basic_Label_C_SetWrappingPolicy::Param_WrappingPolicy' has a wrong offset!");

// Function Basic_Label.Basic_Label_C.GetText
// 0x0018 (0x0018 - 0x0000)
struct Basic_Label_C_GetText final
{
public:
	class FText                                   Param_Text;                                        // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(Basic_Label_C_GetText) == 0x000008, "Wrong alignment on Basic_Label_C_GetText");
static_assert(sizeof(Basic_Label_C_GetText) == 0x000018, "Wrong size on Basic_Label_C_GetText");
static_assert(offsetof(Basic_Label_C_GetText, Param_Text) == 0x000000, "Member 'Basic_Label_C_GetText::Param_Text' has a wrong offset!");

// Function Basic_Label.Basic_Label_C.SelectTextColor
// 0x0005 (0x0005 - 0x0000)
struct Basic_Label_C_SelectTextColor final
{
public:
	ENUM_MenuColors                               FLASE;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MenuColors                               TURR;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Condition;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_MenuColors                               K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Basic_Label_C_SelectTextColor) == 0x000001, "Wrong alignment on Basic_Label_C_SelectTextColor");
static_assert(sizeof(Basic_Label_C_SelectTextColor) == 0x000005, "Wrong size on Basic_Label_C_SelectTextColor");
static_assert(offsetof(Basic_Label_C_SelectTextColor, FLASE) == 0x000000, "Member 'Basic_Label_C_SelectTextColor::FLASE' has a wrong offset!");
static_assert(offsetof(Basic_Label_C_SelectTextColor, TURR) == 0x000001, "Member 'Basic_Label_C_SelectTextColor::TURR' has a wrong offset!");
static_assert(offsetof(Basic_Label_C_SelectTextColor, Condition) == 0x000002, "Member 'Basic_Label_C_SelectTextColor::Condition' has a wrong offset!");
static_assert(offsetof(Basic_Label_C_SelectTextColor, Temp_bool_Variable) == 0x000003, "Member 'Basic_Label_C_SelectTextColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Basic_Label_C_SelectTextColor, K2Node_Select_Default) == 0x000004, "Member 'Basic_Label_C_SelectTextColor::K2Node_Select_Default' has a wrong offset!");

}

