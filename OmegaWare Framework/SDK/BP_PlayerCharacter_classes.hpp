#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_structs.hpp"
#include "FSD_classes.hpp"


namespace CG
{

// BlueprintGeneratedClass BP_PlayerCharacter.BP_PlayerCharacter_C
// 0x0280 (0x10C0 - 0x0E40)
class ABP_PlayerCharacter_C : public APlayerCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Mesh_Lamp;                                         // 0x0E48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InfectedState_C*                    BP_InfectedState;                                  // 0x0E50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USingleUsableComponent*                 BeastMasterUsable;                                 // 0x0E58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EnemyControlState_C*                BP_EnemyControlState;                              // 0x0E60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   FilmFaceLight;                                     // 0x0E68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PushingState_C*                     BP_PushingState;                                   // 0x0E70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrackMovementState_C*               BP_TrackMovementState;                             // 0x0E78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SelfiePoint_C*                      SelfieSpringArmPoint;                              // 0x0E80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SelfieSpringArm;                                   // 0x0E88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Fixed_Selfie_Points;                               // 0x0E90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SelfieCameraSetup;                                 // 0x0E98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UShieldBoostUsable*                     ShieldBoostUsable;                                 // 0x0EA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AudioControl_LowHealth_C*           BP_AudioControl;                                   // 0x0EA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AttachedState_C*                    BP_AttachedState;                                  // 0x0EB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PilotingState_C*                    BP_PilotingState;                                  // 0x0EB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DeadState_C*                        BP_DeadState;                                      // 0x0EC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PhotographyState_C*                 BP_PhotographyState;                               // 0x0EC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PassedOut_C*                        BP_PassedOut;                                      // 0x0ED0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_IntoxicationComponent_C*            BP_IntoxicationComponent;                          // 0x0ED8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrozenState_C*                      BP_FrozenState;                                    // 0x0EE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScannerArrow;                                      // 0x0EE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GrabbedState_C*                     BP_GrabbedState;                                   // 0x0EF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0EF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0F00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   FP_PointLight_CloseShine_Ground;                   // 0x0F08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ShoulderCamLocation;                               // 0x0F10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    ShoulderCamArm;                                    // 0x0F18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   DebugPointLight;                                   // 0x0F20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SelfiePoint_C*                      BP_SelfiePoint6;                                   // 0x0F28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SelfiePoint_C*                      BP_SelfiePoint5;                                   // 0x0F30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SelfiePoint_C*                      BP_SelfiePoint4;                                   // 0x0F38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SelfiePoint_C*                      BP_SelfiePoint3;                                   // 0x0F40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SelfiePoint_C*                      BP_SelfiePoint2;                                   // 0x0F48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SelfiePoint_C*                      BP_SelfiePoint1;                                   // 0x0F50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SelfiePoint_C*                      BP_SelfiePoint;                                    // 0x0F58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SelfiePoint_C*                      BP_SelfiePoint8;                                   // 0x0F60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DropShadow;                                        // 0x0F68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFragileDebrisCleaner*                  FragileDebrisCleanerCore;                          // 0x0F70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFragileDebrisCleaner*                  FragileDebrisCleanerFeet;                          // 0x0F78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Ambient_Dust;                                    // 0x0F80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FlyingState_C*                      BP_FlyingState;                                    // 0x0F88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    TP_SpotLight_shadow;                               // 0x0F90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TP_SpotLight;                                      // 0x0F98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    FP_SpotLight_Light;                                // 0x0FA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FP_SpotLight;                                      // 0x0FA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   EmergencyLight;                                    // 0x0FB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   FP_PointLight_CloseShine;                          // 0x0FB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_NoMovementState_C*                  BP_NoMovementState;                                // 0x0FC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ZipLineState_C*                     BP_ZipLineState;                                   // 0x0FC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_UsingState_C*                       BP_UsingState;                                     // 0x0FD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ShieldRegenAudio;                                  // 0x0FD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadarPointComponent*                   RadarPoint;                                        // 0x0FE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ParalyzedState_C*                   BP_ParalyzedState;                                 // 0x0FE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight_SpotCloseShine;                         // 0x0FF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DownedState_C*                      BP_DownedState;                                    // 0x0FF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FallingState_C*                     BP_FallingState;                                   // 0x1000(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_WalkingState_C*                     BP_WalkingState;                                   // 0x1008(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_LightCone;                                      // 0x1010(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh_Lamp_rim;                                     // 0x1018(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       UsableCollision;                                   // 0x1020(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Emergency_Timeline_Light_Intensity_49385F0B40EDFCE34D2340AC7114B889; // 0x1028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Emergency_Timeline__Direction_49385F0B40EDFCE34D2340AC7114B889; // 0x102C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F0[0x3];                                     // 0x102D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Emergency_Timeline;                                // 0x1030(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShieldRegenTimeline_Volume_007E924B43B618D88D08859A06A1CF61; // 0x1038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShieldRegenTimeline_Pitch_007E924B43B618D88D08859A06A1CF61; // 0x103C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ShieldRegenTimeline__Direction_007E924B43B618D88D08859A06A1CF61; // 0x1040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F1[0x7];                                     // 0x1041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ShieldRegenTimeline;                               // 0x1048(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShieldRegenTime;                                   // 0x1050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastDamageTime;                                    // 0x1054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_SelfiePoint_C*>              FixedSelfiePointList;                              // 0x1058(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UBP_SelfiePoint_C*                      ActiveSelfiePoint;                                 // 0x1068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasHUDVisible;                                     // 0x1070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32F2[0x7];                                     // 0x1071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UReverbEffect*                          PreDownReverb;                                     // 0x1078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScaledEffect                          MixerConfetti;                                     // 0x1080(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UParticleSystem*                        InstantReviveParticles;                            // 0x1090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             InstantReviveCue;                                  // 0x1098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftShiftPressed;                                  // 0x10A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LeftCtrPressed;                                    // 0x10A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32F3[0x6];                                     // 0x10A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SelfieZoomTimer;                                   // 0x10A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SelfieMoveRightTimer;                              // 0x10B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SelfieMoveUpTimer;                                 // 0x10B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerCharacter(int32 EntryPoint);
	void Update_MissionStats();
	void Cheat_Medical();
	void ReceivePossessed(class AController* NewController);
	void TickSelfieMoveRight();
	void SelfieMoveRight(float InDirection);
	void TickSelfieMoveUp();
	void SelfieMoveUp(float InDirection);
	void TickSelfieZoom();
	void SelfieZoom(float InDelta);
	void InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1(float AxisValue);
	void InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0(float AxisValue);
	void Receive_ShowFieldMedicInstantReviveEffects();
	void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_1_HitSig__DelegateSignature(float Damage, const struct FDamageData& DamageData, bool AnyHealthLost);
	void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_0_HitSig__DelegateSignature(float Damage, const struct FDamageData& DamageData, bool AnyHealthLost);
	void PrepareForEndScreen();
	void MixerSpawnConfetti(const struct FVector& Location, const struct FRotator& Rotation);
	void MixerServerSpawnConfettii(const struct FVector& Location, const struct FRotator& Rotation);
	void MixerClientSpawnConfettii(const struct FVector& Location, const struct FRotator& Rotation);
	void On_Temporary_Buff_Changed(class UTemporaryBuff* buff, class APlayerCharacter* AffectedPlayer);
	void ResetSaveGameIDInEditor();
	void ReceiveOnHeadlightOn();
	void SetDustVisible(bool Visible);
	void Init_Selfie_Cam();
	void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_2_DamageSig__DelegateSignature(float Amount);
	void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_0_DamageSig__DelegateSignature(float Amount);
	void CharacterState_Changed(ECharacterState NewState);
	void BP_OnUpdateMeshes();
	void StopRegenAudio();
	void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_0_ArmorHealedSig__DelegateSignature(float Amount);
	void ReceiveBeginPlay();
	void BP_OnControllerReady();
	void InpActEvt_Delete_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Delete_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Insert_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_Insert_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_End_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_End_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Home_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_Home_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_PageUp_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_PageUp_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_PageDown_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_PageDown_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_LeftControl_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_LeftControl_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_LeftShift_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_LeftShift_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void InpActEvt_P_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void Emergency_Timeline__UpdateFunc();
	void Emergency_Timeline__FinishedFunc();
	void ShieldRegenTimeline__UpdateFunc();
	void ShieldRegenTimeline__FinishedFunc();
	void UpdateHeadLight();
	void CharacterAudioThrottled(class UDialogDataAsset* Shout);
	void ChromaEffect(uint8 Effect);
	class USceneComponent* GetDownCameraRotationPoint();
	class USceneComponent* GetDownCameraAttachPoint();
	void SetActiveSelfiePoint(class UBP_SelfiePoint_C* InSelfiePoint);
	void GotoNextSelfiePoint(bool ForceExitSelfieMode);
	void UpdateWeaponLicenseStat();

	bool DamageCausesReaction(class UDamageClass* DamageClass) const;
	class UUsableComponent* GetBeastMasterUsableComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerCharacter_C">();
	}
	static class ABP_PlayerCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerCharacter_C>();
	}
};
static_assert(alignof(ABP_PlayerCharacter_C) == 0x000010, "Wrong alignment on ABP_PlayerCharacter_C");
static_assert(sizeof(ABP_PlayerCharacter_C) == 0x0010C0, "Wrong size on ABP_PlayerCharacter_C");
static_assert(offsetof(ABP_PlayerCharacter_C, UberGraphFrame) == 0x000E40, "Member 'ABP_PlayerCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Mesh_Lamp) == 0x000E48, "Member 'ABP_PlayerCharacter_C::Mesh_Lamp' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_InfectedState) == 0x000E50, "Member 'ABP_PlayerCharacter_C::BP_InfectedState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BeastMasterUsable) == 0x000E58, "Member 'ABP_PlayerCharacter_C::BeastMasterUsable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_EnemyControlState) == 0x000E60, "Member 'ABP_PlayerCharacter_C::BP_EnemyControlState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FilmFaceLight) == 0x000E68, "Member 'ABP_PlayerCharacter_C::FilmFaceLight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_PushingState) == 0x000E70, "Member 'ABP_PlayerCharacter_C::BP_PushingState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_TrackMovementState) == 0x000E78, "Member 'ABP_PlayerCharacter_C::BP_TrackMovementState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SelfieSpringArmPoint) == 0x000E80, "Member 'ABP_PlayerCharacter_C::SelfieSpringArmPoint' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SelfieSpringArm) == 0x000E88, "Member 'ABP_PlayerCharacter_C::SelfieSpringArm' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Fixed_Selfie_Points) == 0x000E90, "Member 'ABP_PlayerCharacter_C::Fixed_Selfie_Points' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SelfieCameraSetup) == 0x000E98, "Member 'ABP_PlayerCharacter_C::SelfieCameraSetup' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ShieldBoostUsable) == 0x000EA0, "Member 'ABP_PlayerCharacter_C::ShieldBoostUsable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_AudioControl) == 0x000EA8, "Member 'ABP_PlayerCharacter_C::BP_AudioControl' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_AttachedState) == 0x000EB0, "Member 'ABP_PlayerCharacter_C::BP_AttachedState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_PilotingState) == 0x000EB8, "Member 'ABP_PlayerCharacter_C::BP_PilotingState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_DeadState) == 0x000EC0, "Member 'ABP_PlayerCharacter_C::BP_DeadState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_PhotographyState) == 0x000EC8, "Member 'ABP_PlayerCharacter_C::BP_PhotographyState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_PassedOut) == 0x000ED0, "Member 'ABP_PlayerCharacter_C::BP_PassedOut' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_IntoxicationComponent) == 0x000ED8, "Member 'ABP_PlayerCharacter_C::BP_IntoxicationComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_FrozenState) == 0x000EE0, "Member 'ABP_PlayerCharacter_C::BP_FrozenState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ScannerArrow) == 0x000EE8, "Member 'ABP_PlayerCharacter_C::ScannerArrow' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_GrabbedState) == 0x000EF0, "Member 'ABP_PlayerCharacter_C::BP_GrabbedState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PointLight) == 0x000EF8, "Member 'ABP_PlayerCharacter_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SpotLight) == 0x000F00, "Member 'ABP_PlayerCharacter_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FP_PointLight_CloseShine_Ground) == 0x000F08, "Member 'ABP_PlayerCharacter_C::FP_PointLight_CloseShine_Ground' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ShoulderCamLocation) == 0x000F10, "Member 'ABP_PlayerCharacter_C::ShoulderCamLocation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ShoulderCamArm) == 0x000F18, "Member 'ABP_PlayerCharacter_C::ShoulderCamArm' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DebugPointLight) == 0x000F20, "Member 'ABP_PlayerCharacter_C::DebugPointLight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_SelfiePoint6) == 0x000F28, "Member 'ABP_PlayerCharacter_C::BP_SelfiePoint6' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_SelfiePoint5) == 0x000F30, "Member 'ABP_PlayerCharacter_C::BP_SelfiePoint5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_SelfiePoint4) == 0x000F38, "Member 'ABP_PlayerCharacter_C::BP_SelfiePoint4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_SelfiePoint3) == 0x000F40, "Member 'ABP_PlayerCharacter_C::BP_SelfiePoint3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_SelfiePoint2) == 0x000F48, "Member 'ABP_PlayerCharacter_C::BP_SelfiePoint2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_SelfiePoint1) == 0x000F50, "Member 'ABP_PlayerCharacter_C::BP_SelfiePoint1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_SelfiePoint) == 0x000F58, "Member 'ABP_PlayerCharacter_C::BP_SelfiePoint' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_SelfiePoint8) == 0x000F60, "Member 'ABP_PlayerCharacter_C::BP_SelfiePoint8' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DropShadow) == 0x000F68, "Member 'ABP_PlayerCharacter_C::DropShadow' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FragileDebrisCleanerCore) == 0x000F70, "Member 'ABP_PlayerCharacter_C::FragileDebrisCleanerCore' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FragileDebrisCleanerFeet) == 0x000F78, "Member 'ABP_PlayerCharacter_C::FragileDebrisCleanerFeet' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, P_Ambient_Dust) == 0x000F80, "Member 'ABP_PlayerCharacter_C::P_Ambient_Dust' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_FlyingState) == 0x000F88, "Member 'ABP_PlayerCharacter_C::BP_FlyingState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, TP_SpotLight_shadow) == 0x000F90, "Member 'ABP_PlayerCharacter_C::TP_SpotLight_shadow' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, TP_SpotLight) == 0x000F98, "Member 'ABP_PlayerCharacter_C::TP_SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FP_SpotLight_Light) == 0x000FA0, "Member 'ABP_PlayerCharacter_C::FP_SpotLight_Light' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FP_SpotLight) == 0x000FA8, "Member 'ABP_PlayerCharacter_C::FP_SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, EmergencyLight) == 0x000FB0, "Member 'ABP_PlayerCharacter_C::EmergencyLight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FP_PointLight_CloseShine) == 0x000FB8, "Member 'ABP_PlayerCharacter_C::FP_PointLight_CloseShine' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_NoMovementState) == 0x000FC0, "Member 'ABP_PlayerCharacter_C::BP_NoMovementState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_ZipLineState) == 0x000FC8, "Member 'ABP_PlayerCharacter_C::BP_ZipLineState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_UsingState) == 0x000FD0, "Member 'ABP_PlayerCharacter_C::BP_UsingState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ShieldRegenAudio) == 0x000FD8, "Member 'ABP_PlayerCharacter_C::ShieldRegenAudio' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, RadarPoint) == 0x000FE0, "Member 'ABP_PlayerCharacter_C::RadarPoint' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_ParalyzedState) == 0x000FE8, "Member 'ABP_PlayerCharacter_C::BP_ParalyzedState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PointLight_SpotCloseShine) == 0x000FF0, "Member 'ABP_PlayerCharacter_C::PointLight_SpotCloseShine' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_DownedState) == 0x000FF8, "Member 'ABP_PlayerCharacter_C::BP_DownedState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_FallingState) == 0x001000, "Member 'ABP_PlayerCharacter_C::BP_FallingState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_WalkingState) == 0x001008, "Member 'ABP_PlayerCharacter_C::BP_WalkingState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SM_LightCone) == 0x001010, "Member 'ABP_PlayerCharacter_C::SM_LightCone' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Mesh_Lamp_rim) == 0x001018, "Member 'ABP_PlayerCharacter_C::Mesh_Lamp_rim' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, UsableCollision) == 0x001020, "Member 'ABP_PlayerCharacter_C::UsableCollision' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Emergency_Timeline_Light_Intensity_49385F0B40EDFCE34D2340AC7114B889) == 0x001028, "Member 'ABP_PlayerCharacter_C::Emergency_Timeline_Light_Intensity_49385F0B40EDFCE34D2340AC7114B889' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Emergency_Timeline__Direction_49385F0B40EDFCE34D2340AC7114B889) == 0x00102C, "Member 'ABP_PlayerCharacter_C::Emergency_Timeline__Direction_49385F0B40EDFCE34D2340AC7114B889' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Emergency_Timeline) == 0x001030, "Member 'ABP_PlayerCharacter_C::Emergency_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ShieldRegenTimeline_Volume_007E924B43B618D88D08859A06A1CF61) == 0x001038, "Member 'ABP_PlayerCharacter_C::ShieldRegenTimeline_Volume_007E924B43B618D88D08859A06A1CF61' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ShieldRegenTimeline_Pitch_007E924B43B618D88D08859A06A1CF61) == 0x00103C, "Member 'ABP_PlayerCharacter_C::ShieldRegenTimeline_Pitch_007E924B43B618D88D08859A06A1CF61' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ShieldRegenTimeline__Direction_007E924B43B618D88D08859A06A1CF61) == 0x001040, "Member 'ABP_PlayerCharacter_C::ShieldRegenTimeline__Direction_007E924B43B618D88D08859A06A1CF61' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ShieldRegenTimeline) == 0x001048, "Member 'ABP_PlayerCharacter_C::ShieldRegenTimeline' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ShieldRegenTime) == 0x001050, "Member 'ABP_PlayerCharacter_C::ShieldRegenTime' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, LastDamageTime) == 0x001054, "Member 'ABP_PlayerCharacter_C::LastDamageTime' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FixedSelfiePointList) == 0x001058, "Member 'ABP_PlayerCharacter_C::FixedSelfiePointList' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ActiveSelfiePoint) == 0x001068, "Member 'ABP_PlayerCharacter_C::ActiveSelfiePoint' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, WasHUDVisible) == 0x001070, "Member 'ABP_PlayerCharacter_C::WasHUDVisible' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PreDownReverb) == 0x001078, "Member 'ABP_PlayerCharacter_C::PreDownReverb' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, MixerConfetti) == 0x001080, "Member 'ABP_PlayerCharacter_C::MixerConfetti' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, InstantReviveParticles) == 0x001090, "Member 'ABP_PlayerCharacter_C::InstantReviveParticles' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, InstantReviveCue) == 0x001098, "Member 'ABP_PlayerCharacter_C::InstantReviveCue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, LeftShiftPressed) == 0x0010A0, "Member 'ABP_PlayerCharacter_C::LeftShiftPressed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, LeftCtrPressed) == 0x0010A1, "Member 'ABP_PlayerCharacter_C::LeftCtrPressed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SelfieZoomTimer) == 0x0010A8, "Member 'ABP_PlayerCharacter_C::SelfieZoomTimer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SelfieMoveRightTimer) == 0x0010B0, "Member 'ABP_PlayerCharacter_C::SelfieMoveRightTimer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SelfieMoveUpTimer) == 0x0010B8, "Member 'ABP_PlayerCharacter_C::SelfieMoveUpTimer' has a wrong offset!");

}

