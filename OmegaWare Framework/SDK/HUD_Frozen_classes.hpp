#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUD_Frozen

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_structs.hpp"
#include "FSD_classes.hpp"


namespace CG
{

// WidgetBlueprintGeneratedClass HUD_Frozen.HUD_Frozen_C
// 0x0078 (0x02F8 - 0x0280)
class UHUD_Frozen_C final : public UFSDUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBasic_Menu_ColorBarVertical_C*         Basic_Menu_ColorBarVertical;                       // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBasic_Menu_ColorBarVertical_C*         Basic_Menu_ColorBarVertical_C_0;                   // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_0;                                          // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_1;                                          // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_AdvancedLabel_C*                    InstructionsLabel;                                 // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_AdvancedLabel_C*                    UI_AdvancedLabel;                                  // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_FrozenInputSequence_C*              UI_FrozenInputSequence;                            // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           UnfreezeProgressBar;                               // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_214;                                // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         CurrentProgress;                                   // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3634[0x4];                                     // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InputSequenceText;                                 // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UCharacterBreakOutState*>        BreakoutStates;                                    // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_HUD_Frozen(int32 EntryPoint);
	void CustomEvent_0(EThawInputDirection Direction);
	void OnBreakOutInputSuccess_Event_0(EThawInputDirection Direction);
	void ThawInputUpdated(const TArray<EThawInputDirection>& Inputs, bool Initial);
	void SetProgress(float Param_CurrentProgress);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnCharacterStateChanged_Event(ECharacterState NewState);
	void Construct();
	void PreConstruct(bool IsDesignTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HUD_Frozen_C">();
	}
	static class UHUD_Frozen_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUD_Frozen_C>();
	}
};
static_assert(alignof(UHUD_Frozen_C) == 0x000008, "Wrong alignment on UHUD_Frozen_C");
static_assert(sizeof(UHUD_Frozen_C) == 0x0002F8, "Wrong size on UHUD_Frozen_C");
static_assert(offsetof(UHUD_Frozen_C, UberGraphFrame) == 0x000280, "Member 'UHUD_Frozen_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UHUD_Frozen_C, Basic_Menu_ColorBarVertical) == 0x000288, "Member 'UHUD_Frozen_C::Basic_Menu_ColorBarVertical' has a wrong offset!");
static_assert(offsetof(UHUD_Frozen_C, Basic_Menu_ColorBarVertical_C_0) == 0x000290, "Member 'UHUD_Frozen_C::Basic_Menu_ColorBarVertical_C_0' has a wrong offset!");
static_assert(offsetof(UHUD_Frozen_C, Border_0) == 0x000298, "Member 'UHUD_Frozen_C::Border_0' has a wrong offset!");
static_assert(offsetof(UHUD_Frozen_C, Border_1) == 0x0002A0, "Member 'UHUD_Frozen_C::Border_1' has a wrong offset!");
static_assert(offsetof(UHUD_Frozen_C, InstructionsLabel) == 0x0002A8, "Member 'UHUD_Frozen_C::InstructionsLabel' has a wrong offset!");
static_assert(offsetof(UHUD_Frozen_C, UI_AdvancedLabel) == 0x0002B0, "Member 'UHUD_Frozen_C::UI_AdvancedLabel' has a wrong offset!");
static_assert(offsetof(UHUD_Frozen_C, UI_FrozenInputSequence) == 0x0002B8, "Member 'UHUD_Frozen_C::UI_FrozenInputSequence' has a wrong offset!");
static_assert(offsetof(UHUD_Frozen_C, UnfreezeProgressBar) == 0x0002C0, "Member 'UHUD_Frozen_C::UnfreezeProgressBar' has a wrong offset!");
static_assert(offsetof(UHUD_Frozen_C, WidgetSwitcher_214) == 0x0002C8, "Member 'UHUD_Frozen_C::WidgetSwitcher_214' has a wrong offset!");
static_assert(offsetof(UHUD_Frozen_C, CurrentProgress) == 0x0002D0, "Member 'UHUD_Frozen_C::CurrentProgress' has a wrong offset!");
static_assert(offsetof(UHUD_Frozen_C, InputSequenceText) == 0x0002D8, "Member 'UHUD_Frozen_C::InputSequenceText' has a wrong offset!");
static_assert(offsetof(UHUD_Frozen_C, BreakoutStates) == 0x0002E8, "Member 'UHUD_Frozen_C::BreakoutStates' has a wrong offset!");

}

