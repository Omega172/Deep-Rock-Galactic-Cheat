#pragma once

/**
 * Name: Deep_Rock_Galactic
 * Version: 1.38.94396.0
 */

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
	// --------------------------------------------------
	// # Classes
	// --------------------------------------------------
	/**
	 * Class FSD.AcceptInviteBlueprintCallProxy
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UAcceptInviteBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
	{
	public:
		class FScriptMulticastDelegate                             OnSuccess;                                               // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailure;                                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UObject*                                             WorldContextObject;                                      // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8HVD[0x30];                                  // 0x0058(0x0030) MISSED OFFSET (PADDING)

	public:
		class UAcceptInviteBlueprintCallProxy* AcceptInvite(class UObject* WorldContextObject, const class FString& ListName, const class FString& UserId);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Objective
	 * Size -> 0x00D0 (FullSize[0x0180] - InheritedSize[0x00B0])
	 */
	class UObjective : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnObjectiveUpdated;                                      // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V91M[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ObjectiveWidgetClass;                                    // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FMissionShouts                                      MissionShouts;                                           // 0x00D0(0x0038) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FText                                                MissionDescription;                                      // 0x0108(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		int32_t                                                    CompletionRewardInCredits;                               // 0x0120(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CompletionRewardInXP;                                    // 0x0124(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ScaleObjectiveToMission;                                 // 0x0128(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasReturnObjective;                                     // 0x0129(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RequiredReturnObjectiveCompleted;                        // 0x012A(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowObjectiveInHUD;                                      // 0x012B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YIW7[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMissionStat*                                        ObjectiveCompletedStat;                                  // 0x0130(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              OptionalObjectiveWidgetClass[0x28];                      // 0x0138(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		int32_t                                                    IsPrimaryObjective;                                      // 0x0160(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsNeededForMissionCompletion;                           // 0x0164(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G08Q[0x3];                                   // 0x0165(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MissionScale;                                            // 0x0168(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T4S8[0x4];                                   // 0x016C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UBiome*>                                      BannedInBiomes;                                          // 0x0170(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void SignalObjectiveUpdated();
		void Receive_StartTracking();
		void OnRep_IsPrimaryObjective();
		bool IsTutorialObjective();
		bool IsPrimary();
		bool IsObjectiveResource(class UResourceData* InResource);
		bool IsNeededForMissionCompletion();
		bool IsFinalBattle();
		bool IsCompleted();
		bool HasReplicated();
		void HandleMissionEnded(bool MissionSuccess);
		class UClass* GetWidgetClassOrDefault(class UClass* DefaultWidgetClass);
		int32_t GetRewardXP();
		struct FCreditsReward GetRewardCredits();
		class UClass* GetOptionalMissionWidget();
		class FText GetObjectiveText();
		class UTexture2D* GetObjectiveIconFromClass(class UClass* objectiveClass);
		class UTexture2D* GetObjectiveIcon();
		class FText GetObjectiveDescriptionFromClass(class UClass* objectiveClass, float missionLength);
		class FText GetObjectiveDescription(float missionLength);
		int32_t GetObjectiveAmountFromClass(class UClass* objectiveClass, float missionLength);
		int32_t GetObjectiveAmount(float missionLength);
		struct FObjectiveMissionIcon GetMissionIcon();
		class FText GetInMissionText();
		class FText GetInMissionCounterText();
		class UTexture2D* GetInMissionCounterIcon();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ActivationOjective
	 * Size -> 0x0008 (FullSize[0x0188] - InheritedSize[0x0180])
	 */
	class UActivationOjective : public UObjective
	{
	public:
		int32_t                                                    ObjectivesFound;                                         // 0x0180(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ObjectivesToFind;                                        // 0x0184(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_ObjectivesToFind(int32_t prevAmount);
		void OnRep_ObjectivesFound(int32_t prevAmount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ActivationObject
	 * Size -> 0x0010 (FullSize[0x0230] - InheritedSize[0x0220])
	 */
	class AActivationObject : public AActor
	{
	public:
		class USingleUsableComponent*                              Usable;                                                  // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasBeenUsed;                                             // 0x0228(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EFPX[0x7];                                   // 0x0229(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnUsedBy(class APlayerCharacter* User, EInputKeys Key);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Reward
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UReward : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ActivityCardReward
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UActivityCardReward : public UReward
	{
	public:
		class UGameActivityType*                                   Activity;                                                // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameActivityType
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UGameActivityType : public UDataAsset
	{
	public:
		class FString                                              ActivityId;                                              // 0x0030(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EActivityType                                              ActivityType;                                            // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N0DQ[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGameActivitySubTask>                        SubTasks;                                                // 0x0048(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameActivityMissionType
	 * Size -> 0x0028 (FullSize[0x0080] - InheritedSize[0x0058])
	 */
	class UGameActivityMissionType : public UGameActivityType
	{
	public:
		unsigned char                                              ActivityMission[0x28];                                   // 0x0058(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ActivitySubSystem
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UActivitySubSystem : public UGameInstanceSubsystem
	{
	public:
		unsigned char                                              UnknownData_IP7K[0x28];                                  // 0x0030(0x0028) MISSED OFFSET (PADDING)

	public:
		void StartActivity(class APlayerState* PlayerState, class UGameActivityType* Activity);
		void ShowPlayerReviewUI(bool ReviewActiveMatch);
		bool PlayerReviewUIAvailable(bool ReviewActiveMatch);
		void EndActivity(class APlayerState* PlayerState, class UGameActivityType* Activity);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameActivitySettings
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UGameActivitySettings : public UDataAsset
	{
	public:
		unsigned char                                              GameActivites[0x10];                                     // 0x0030(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameActivityAssignmentType
	 * Size -> 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
	 */
	class UGameActivityAssignmentType : public UGameActivityType
	{
	public:
		unsigned char                                              UnknownData_QKHY[0x8];                                   // 0x0058(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ActorFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UActorFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void UnlockSpecificCharacters(TArray<class APlayerCharacter*> Characters, ECharacterState UnlockIf, ECharacterState UnlockTo);
		void UnlockCharacters(class UObject* WorldContextObject);
		float TimeSince(class UObject* WorldContextObject, float Time);
		void SetScalarParameters(const class FName& ParameterName, float Value, TArray<class UMaterialInstanceDynamic*> Materials);
		void PlayCueOnClient(class APlayerController* Target, class USoundCue* cue);
		void PlayCueOnAll(class UObject* WorldContextObject, class USoundCue* cue);
		float PingPong(float Time, float Length, bool normalize);
		float MoveTowards(float Current, float End, float step);
		void LockSpecificCharactersIfState(TArray<class APlayerCharacter*> Characters, ECharacterState stateToLock);
		void LockSpecificCharacters(TArray<class APlayerCharacter*> Characters);
		bool LockSpecificCharacterIfState(class APlayerCharacter* Character, ECharacterState LockIf, ECharacterState LockTo);
		void LockCharacters(class UObject* WorldContextObject);
		class UClass* LoadWindowWidgetClass();
		class UClass* LoadWidgetClass();
		class UClass* LoadClass();
		void KillActorWithEffects(class AActor* Actor, class USceneComponent* visualsToHide, class USoundCue* deathSound, class UFXSystemAsset* deathParticles, float particleScale, class UPathfinderCollisionComponent* pathColliderToDisable);
		bool IsWeakPoint(class UFSDPhysicalMaterial* Material);
		bool IsSingleplayer(class UObject* WorldContextObject);
		bool IsInRangeOfLocalPlayer(class AActor* toActor, float MinDistance, float MaxDistance);
		bool IsCloseToLocalPlayer(class AActor* toActor, float Distance);
		int32_t GetTotalHeroLevels(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		struct FGuid GetSaveGameIDFromCharacterID(class UPlayerCharacterID* characterID);
		struct FGuid GetSavegameID(class UClass* objectClass);
		TArray<class APlayerCharacter*> GetPlayersInRange(class UObject* WorldContextObject, const struct FVector& Origin, float Radius, bool MustBeAlive);
		class UItemID* GetItemID(class UClass* itemClass);
		float GetHeroXP(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		class FText GetHeroSwitchToMessage(class UClass* playerClass);
		class FString GetHeroSourceName(class UClass* playerClass);
		float GetHeroProgress(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		class FText GetHeroName(class UClass* playerClass);
		int32_t GetHeroLevel(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		class UInventoryList* GetHeroInventoryList(class UPlayerCharacterID* characterID);
		struct FHeroInfo GetHeroInfo(class UClass* playerClass);
		class UTexture2D* GetHeroImageSmall(class UClass* playerClass);
		class UTexture2D* GetHeroImageFullSize(class UClass* playerClass);
		class UTexture2D* GetHeroImage(class UClass* playerClass);
		struct FLinearColor GetHeroColor(class UClass* playerClass);
		class UActorComponent* GetComponentFromClass(class UClass* Actor, class UClass* ComponentClass);
		class UActorComponent* GetComponentByClass(class AActor* Actor, class UClass* ComponentClass);
		class UPlayerCharacterID* GetCharacterIDFromCharacter(class APlayerCharacter* Character);
		class UPlayerCharacterID* GetCharacterID(class UClass* playerClass);
		TArray<class APlayerCharacter*> GetAllPlayerCharacters(class UObject* WorldContext);
		struct FVector GetActorTargetCenter(class AActor* TargetActor);
		void FSDRemoveBlendable(class UPostProcessComponent* PostProcessComponent);
		void FSDRemoveAllWidgets(class UObject* WorldContextObject);
		void FSDDumpCallStack(const class FString& Msg);
		class APlayerCharacter* FindNearestPlayerCharacter(class UObject* WorldContextObject, const struct FVector& fromLocation, float MaxRadius, bool MustBeAlive, bool MustBeUnparalyzed, bool MustHaveLineOfSight);
		struct FVector FindLatejoinDroppodLocation(class AFSDGameMode* GameMode);
		class AActor* FindClosestEnemyFromLocation(const struct FVector& fromLocation, float range, bool LineOfSightCheck, class UObject* WorldContextObject, TArray<class AActor*> IgnoredActors, const struct FVector& Offset, bool onlyTargetable);
		class AActor* FindClosestEnemyFromActorWithSkipChance(class AActor* FromActor, float range, float SkipChance, bool LineOfSightCheck, const struct FGameplayTagQuery& tagQuery, const struct FVector& Offset);
		class AActor* FindClosestEnemyFromActor(class AActor* FromActor, float range, bool LineOfSightCheck, const struct FGameplayTagQuery& tagQuery, const struct FVector& Offset);
		struct FVector FindCharacterTeleportLocation(class UObject* WorldContextObject, const struct FVector& closeToLocation, float desiredDistance);
		void FadeMaterials(class UObject* WorldContextObject, class UMeshComponent* Mesh, float Duration);
		float EvaluateRuntimeCurve(class UObject* WorldContextObject, const struct FRuntimeFloatCurve& Curve, float Time);
		void DissolveMaterials(class UObject* WorldContextObject, class UMeshComponent* Mesh, float Duration);
		TArray<class UMaterialInstanceDynamic*> CreateDynamicMaterialInstances(class UMeshComponent* Mesh);
		float AddHeroXP(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, float Amount);
		void AddEnemyKill(class APlayerCharacter* Instigator, class UEnemyComponent* EnemyComponent, class AFSDGameState* GameState);
		bool ActorMatchesTagQuery(const struct FGameplayTagQuery& Query, class AActor* InActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ActorStateComponent
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UActorStateComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnBeginState;                                            // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTickState;                                             // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndState;                                              // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UActorStateComponent*                                CurrentState;                                            // 0x00E0(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UActorStateComponent*                                NextState;                                               // 0x00E8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UActorStateComponent*                                MasterState;                                             // 0x00F0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StateActiveTime;                                         // 0x00F8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YJVS[0x4];                                   // 0x00FC(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_CurrentState(class UActorStateComponent* previousState);
		bool IsStateActive();
		void GotoState();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ActorTrackingCheatInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UActorTrackingCheatInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ActorTrackingComponent
	 * Size -> 0x0018 (FullSize[0x0210] - InheritedSize[0x01F8])
	 */
	class UActorTrackingComponent : public USceneComponent
	{
	public:
		class UClass*                                              WidgetType;                                              // 0x01F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       VisibleOnHoldTAB;                                        // 0x0200(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       VisibleFromStart;                                        // 0x0201(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIconHidden;                                             // 0x0202(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K47S[0x1];                                   // 0x0203(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UActorTrackingWidget>                 Widget;                                                  // 0x0204(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E24F[0x4];                                   // 0x020C(0x0004) MISSED OFFSET (PADDING)

	public:
		void ToggleIcon(bool Visible);
		void ShowAlwaysOn();
		void OnHoldTAB(bool IsDown);
		bool IsIconVisible();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ActorTrackingSubsystem
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UActorTrackingSubsystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_34O6[0x30];                                  // 0x0030(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DropSpikeTrackingSubsystem
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UDropSpikeTrackingSubsystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_CJBS[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		void IncrementSpikeCount();
		int32_t GetSpikeCount();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDUserWidget
	 * Size -> 0x0020 (FullSize[0x0280] - InheritedSize[0x0260])
	 */
	class UFSDUserWidget : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnVisibilityChangedFSD;                                  // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KKNU[0x8];                                   // 0x0270(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerCharacter*                                    Character;                                               // 0x0278(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetOpacity(float alpha);
		void ScaleByBaseResolution();
		void Refresh();
		void ReceiveNewVisibility(ESlateVisibility NewVisibility);
		void OnCloseMenuReleased(bool* Handled);
		void OnCloseMenuPressed(bool* Handled);
		bool HasCharacter();
		float GetOpacity();
		class AFSDPlayerState* GetFSDPlayerState();
		class AItem* GetEquippedItem();
		float GetBaseResolutionScale();
		void BP_OnRefresh();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ActorTrackingWidget
	 * Size -> 0x0030 (FullSize[0x02B0] - InheritedSize[0x0280])
	 */
	class UActorTrackingWidget : public UFSDUserWidget
	{
	public:
		TWeakObjectPtr<class USceneComponent>                      TargetComponent;                                         // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WorldHeightOffset;                                       // 0x0288(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ScaleBy;                                                 // 0x028C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FMargin                                             ScreenMargin;                                            // 0x0290(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    WidgetZOrder;                                            // 0x02A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTrackCenterOfMass;                                      // 0x02A4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHideWhenPlayerNearby;                                   // 0x02A5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHideWhenPlayerFarAway;                                  // 0x02A6(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ODCQ[0x1];                                   // 0x02A7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastTargetDistanceUpdate;                                // 0x02A8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S825[0x4];                                   // 0x02AC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetTargetComponent(class USceneComponent* Component);
		void SetTarget(class AActor* Actor);
		void OnTargetSet(class AActor* NewTarget);
		void OnTargetDistanceChanged(float Distance);
		void OnShow();
		void OnInViewChanged(bool inView, float Angle);
		class AActor* GetTarget();
		struct FVector2D GetRenderTranslation();
		bool FindScreenPosition(class APlayerController* PlayerController, const struct FVector& WorldLocation, const struct FMargin& Margin, struct FVector* ScreenCord, float* Angle);
		class UActorTrackingWidget* CreateTrackingWidget(class APlayerController* PlayerController, class UClass* WidgetType, class USceneComponent* TargetComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AdicPuddle
	 * Size -> 0x0030 (FullSize[0x0250] - InheritedSize[0x0220])
	 */
	class AAdicPuddle : public AActor
	{
	public:
		TWeakObjectPtr<class UPrimitiveComponent>                  TriggerCollider;                                         // 0x0220(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    SphereTrigger;                                           // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundBase*                                          SpawnSound;                                              // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              InflictedStatusEffect;                                   // 0x0238(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1MWO[0x8];                                   // 0x0240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LifeTime;                                                // 0x0248(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9FDF[0x4];                                   // 0x024C(0x0004) MISSED OFFSET (PADDING)

	public:
		void Receive_OnPlayerBeginOverlap(class APlayerCharacter* Player);
		void OnPuddleEndOverLap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnPuddleBeginOverLap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OverlapTrackingSubsystem
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UOverlapTrackingSubsystem : public UWorldSubsystem
	{
	public:
		TArray<struct FOverlapPair>                                Overlaps;                                                // 0x0030(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AdventureObjective
	 * Size -> 0x0000 (FullSize[0x0180] - InheritedSize[0x0180])
	 */
	class UAdventureObjective : public UObjective
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AfflictionEffect
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAfflictionEffect : public UObject
	{
	public:
		bool ShouldInstantiate();
		void ReceiveEndEffect(class UPawnAfflictionComponent* Target);
		void ReceiveBeginEffect(class UPawnAfflictionComponent* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AfflictionFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAfflictionFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void PlayEnemyExplosionEffects(class AFSDPawn* enemy);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PawnFrozenUniqueAfflictionEffect
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPawnFrozenUniqueAfflictionEffect : public UAfflictionEffect
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PawnBurningUniqueAfflictionEffect
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPawnBurningUniqueAfflictionEffect : public UAfflictionEffect
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawnAtLocationParticleAfflictionEffect
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USpawnAtLocationParticleAfflictionEffect : public UAfflictionEffect
	{
	public:
		struct FScaledEffect                                       ScaledParticleEffect;                                    // 0x0028(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AttachedParticlesAfflictionEffect
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UAttachedParticlesAfflictionEffect : public UAfflictionEffect
	{
	public:
		class UFXSystemAsset*                                      ParticleEffect;                                          // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFXSystemAsset*>                              ParticleEffects;                                         // 0x0030(0x0010) Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		EAfflictionSocket                                          Socket;                                                  // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ScaleToActor;                                            // 0x0041(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseVisibilityHack;                                       // 0x0042(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseBoneFilter;                                           // 0x0043(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6CSJ[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterShoutAfflictionEffect
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UCharacterShoutAfflictionEffect : public UAfflictionEffect
	{
	public:
		class UDialogDataAsset*                                    Shout;                                                   // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CameraParticleAfflictionEffect
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UCameraParticleAfflictionEffect : public UAfflictionEffect
	{
	public:
		class UParticleSystem*                                     ParticleEffect;                                          // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShieldLinkedAfflictionEffect
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UShieldLinkedAfflictionEffect : public UAfflictionEffect
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SoundAfflictionEffect
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class USoundAfflictionEffect : public UAfflictionEffect
	{
	public:
		class USoundCue*                                           BeginSound;                                              // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           EndSound;                                                // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Attach;                                                  // 0x0038(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8OX3[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                AttachBone;                                              // 0x003C(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FadeOnLoopEndDuration;                                   // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AttachMeshesAfflictionEffect
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UAttachMeshesAfflictionEffect : public UAfflictionEffect
	{
	public:
		TArray<struct FAttachMeshesAfflictionItem>                 AttachItems;                                             // 0x0028(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UParticleSystem*                                     OnRemoveEffect;                                          // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ScalingMeshAfflictionEffect
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UScalingMeshAfflictionEffect : public UAfflictionEffect
	{
	public:
		EFrozenAfflictionType                                      AfflictionType;                                          // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X7D2[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FScalingMeshAfflictionItem>                  IceParts;                                                // 0x0030(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  MaterialOverride;                                        // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ParticleBone;                                            // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMaterialInterface*>                          IceMaterials;                                            // 0x0050(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BurningAfflictionEffect
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UBurningAfflictionEffect : public UAfflictionEffect
	{
	public:
		EFrozenBitsSize                                            FireParticleSize;                                        // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R701[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StaggeredAfflictionEffect
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UStaggeredAfflictionEffect : public UAfflictionEffect
	{
	public:
		float                                                      StaggerStrength;                                         // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VSCT[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoneParticlesAfflictionEffect
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UBoneParticlesAfflictionEffect : public UAfflictionEffect
	{
	public:
		TArray<class UParticleSystem*>                             Particles;                                               // 0x0028(0x0010) Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class USoundCue*                                           Sound;                                                   // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimatedItemParticleAfflictionEffect
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UAnimatedItemParticleAfflictionEffect : public UAfflictionEffect
	{
	public:
		EItemCategory                                              ItemCategory;                                            // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D530[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     ParticleEffect;                                          // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                Socket;                                                  // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerCharacterMontageAfflictionEffect
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UPlayerCharacterMontageAfflictionEffect : public UAfflictionEffect
	{
	public:
		class UAnimMontage*                                        FP_Montage;                                              // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_Montage;                                              // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlendOut;                                                // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EZ3H[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        RandomStarts;                                            // 0x0040(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemySkinAfflictionEffect
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UEnemySkinAfflictionEffect : public UAfflictionEffect
	{
	public:
		TArray<class UMaterialInterface*>                          NewMaterials;                                            // 0x0028(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyScaleAfflictionEffect
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UEnemyScaleAfflictionEffect : public UAfflictionEffect
	{
	public:
		float                                                      Scale;                                                   // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RevertOnEndEffect;                                       // 0x002C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K52F[0x3];                                   // 0x002D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HeroEnemyAfflictionEffect
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UHeroEnemyAfflictionEffect : public UAfflictionEffect
	{
	public:
		struct FGameplayTag                                        TagToAdd;                                                // 0x0028(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AfflictionSettings
	 * Size -> 0x0128 (FullSize[0x0158] - InheritedSize[0x0030])
	 */
	class UAfflictionSettings : public UDataAsset
	{
	public:
		struct FScaledMeshAfflictionTypeItem                       FrozenScaledMeshAffliction;                              // 0x0030(0x0058) Edit, NativeAccessSpecifierPrivate
		struct FScaledMeshAfflictionTypeItem                       InfectedScaledMeshAffliction;                            // 0x0088(0x0058) Edit, NativeAccessSpecifierPrivate
		class USoundCue*                                           BurningSound;                                            // 0x00E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           EletrocutedSound;                                        // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HeavyStaggerMinTime;                                     // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MediumStaggerMinTime;                                    // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnAffliction*                                     HeavyStaggerAffliction;                                  // 0x00F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnAffliction*                                     MediumStaggerAffliction;                                 // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnAffliction*                                     ShortStaggerAffliction;                                  // 0x0108(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnAffliction*                                     EliteAffliction;                                         // 0x0110(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UFXSystemAsset*>                              BurningParticles;                                        // 0x0118(0x0010) Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UFXSystemAsset*>                              EletrocutedParticles;                                    // 0x0128(0x0010) Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UFXSystemAsset*>                              ExplodingParticles;                                      // 0x0138(0x0010) Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class USoundCue*>                                   ExplodingSounds;                                         // 0x0148(0x0010) Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDPawn
	 * Size -> 0x0078 (FullSize[0x02F8] - InheritedSize[0x0280])
	 */
	class AFSDPawn : public APawn
	{
	public:
		unsigned char                                              UnknownData_V3CF[0x18];                                  // 0x0280(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFrozenEvent;                                           // 0x0298(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UStatusEffectsComponent*                             StatusEffects;                                           // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEnemyTemperatureComponent*                          Temperature;                                             // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x02B8(0x0020) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class UEnemyDescriptor*                                    SpawnedFromDescriptor;                                   // 0x02D8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFrozen;                                                // 0x02E0(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanFlee;                                                 // 0x02E1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       FleeInsteadOfBackingOff;                                 // 0x02E2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFleeing;                                               // 0x02E3(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4QO5[0x4];                                   // 0x02E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPawnStatsComponent*                                 PawnStatsInstance;                                       // 0x02E8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ET3Q[0x8];                                   // 0x02F0(0x0008) MISSED OFFSET (PADDING)

	public:
		void UnFreeze();
		void StopFleeing();
		void StartFleeing(const struct FVector& fromLocation);
		void SetAlerted(bool isAlerted);
		void Receive_Alerted();
		void OnUnFrozen();
		void OnStoppedFleeing();
		void OnStartedFleeing();
		void OnRep_IsFrozen();
		void OnFrozen(class AActor* Source);
		void OnFirstHostileDamageTaken();
		void OnEnemyScaled(float NewScale);
		void OnArmorShattered(const struct FVector& Location);
		void OnAlerted();
		void MakeRagdollMesh(class USkeletalMeshComponent* Mesh);
		void MakeElite();
		bool IsElite();
		bool GetIsAlerted();
		class UHealthComponentBase* GetHealthComponent();
		class AFSDAIController* GetFSDAIController();
		EPawnAttitude GetAttitude();
		void Freeze(class AActor* Source);
		void ExplodePawn();
		void BackOffFromLocation(const struct FVector& fromLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DeepPathfinderCharacter
	 * Size -> 0x0098 (FullSize[0x0390] - InheritedSize[0x02F8])
	 */
	class ADeepPathfinderCharacter : public AFSDPawn
	{
	public:
		unsigned char                                              UnknownData_IOVF[0x10];                                  // 0x02F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDeepPathfinderMovement*                             PathfinderMovement;                                      // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CenterMassSocketName;                                    // 0x0318(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDeepPatherFinderCharacterAfflictionComponent*       Affliction;                                              // 0x0320(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AnimationOffset;                                         // 0x0328(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanPlayerStandOn;                                        // 0x032C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseDormancy;                                             // 0x032D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_54K9[0x2];                                   // 0x032E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StaggerDurationMultiplier;                               // 0x0330(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StaggerImunityWindow;                                    // 0x0334(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B8MF[0x1];                                   // 0x0338(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       StaggerPauseLogic;                                       // 0x0339(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsHidden;                                                // 0x033A(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsStaggered;                                             // 0x033B(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       FrozenPauseLogic;                                        // 0x033C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WL3G[0xB];                                   // 0x033D(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPawnAffliction*                                     CurrentStaggerAffliction;                                // 0x0348(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_268U[0x10];                                  // 0x0350(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AttackerRadius;                                          // 0x0360(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7XQE[0x4];                                   // 0x0364(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInterface*>                          CachedMaterials;                                         // 0x0368(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		float                                                      AllowedInFormationChance;                                // 0x0378(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PK4C[0x14];                                  // 0x037C(0x0014) MISSED OFFSET (PADDING)

	public:
		bool TryJoinFormation();
		void SetHidden(bool shouldHide);
		void OnPausedMovementElapsed();
		void OnControlledByPlayer(bool IsControlled, bool IsLocallyControlled);
		void LeaveFormation();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyDeepPathfinderCharacter
	 * Size -> 0x0020 (FullSize[0x03B0] - InheritedSize[0x0390])
	 */
	class AEnemyDeepPathfinderCharacter : public ADeepPathfinderCharacter
	{
	public:
		unsigned char                                              UnknownData_LQVA[0x8];                                   // 0x0390(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnemyHealthComponent*                               HealthComponent;                                         // 0x0398(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FQueuedMontage                                      QueuedMontage;                                           // 0x03A0(0x0010) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		void SwitchToDynamicBaseShader(class UMaterialInterface* baseShader, class UMeshComponent* MeshComponent);
		void OnRep_QueuedMontage();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AFlyingBug
	 * Size -> 0x0080 (FullSize[0x0430] - InheritedSize[0x03B0])
	 */
	class AAFlyingBug : public AEnemyDeepPathfinderCharacter
	{
	public:
		class UEnemyComponent*                                     EnemyComponent;                                          // 0x03B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnStatsComponent*                                 PawnStats;                                               // 0x03B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOutlineComponent*                                   outline;                                                 // 0x03C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnSensingComponent*                               Senses;                                                  // 0x03C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnAlertComponent*                                 Alert;                                                   // 0x03D0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    ExplosionSphere;                                         // 0x03D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAudioComponent*                                     WingSoundComponent;                                      // 0x03E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFrozenPawnImpactComponent*                          FrozenImpact;                                            // 0x03E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHitReactionComponent*                               HitReactions;                                            // 0x03F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7E0F[0x10];                                  // 0x03F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              RotateTarget;                                            // 0x0408(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          ChatterSound;                                            // 0x0410(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceForAttackMode;                                   // 0x0418(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinChatterDelay;                                         // 0x041C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxChatterDelay;                                         // 0x0420(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttackModeRotationSpeed;                                 // 0x0424(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UsesAttackStance;                                        // 0x0428(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SetLifeTime;                                             // 0x0429(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AttackStance;                                            // 0x042A(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       LookStraight;                                            // 0x042B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseDefaultRagdoll;                                       // 0x042C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2GKH[0x3];                                   // 0x042D(0x0003) MISSED OFFSET (PADDING)

	public:
		void StartFizzle();
		void SetRotateTarget(class AActor* aTarget);
		void SetExternallyControlled(bool isExternallyControlled);
		void SetAttackStance(bool isAttackStance);
		void PlayVoice();
		void OnStartFalling();
		void OnRep_AttackStance();
		void OnRagdoll();
		void OnFreezeImpact();
		void OnBugDeath(class UHealthComponentBase* Health);
		float GetMidZpointFromCielingAndFloor(float* distanceFromCieling, float* distanceFromFloor);
		bool GetIsInAttackStance();
		void All_Ragdoll(const struct FVector_NetQuantize& Location, const struct FVector_NetQuantize& Impulse, unsigned char BoneIndex);
		void AlertNearbyEnemies();
		void AddImpulseAndRagdoll(class UHealthComponent* Health, float damageAmount, const struct FDamageData& DamageData, TArray<class UDamageTag*> damageTags);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyAnimInstance
	 * Size -> 0x0050 (FullSize[0x0308] - InheritedSize[0x02B8])
	 */
	class UEnemyAnimInstance : public UAnimInstance
	{
	public:
		class FScriptMulticastDelegate                             OnRangedAttackNotify;                                    // 0x02B8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMeleeAttackNotify;                                     // 0x02C8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStopLeadingNotify;                                     // 0x02D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsAttackingChanged;                                    // 0x02E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       IsAttacking;                                             // 0x02F8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsAlive;                                                 // 0x02F9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VB9X[0x2];                                   // 0x02FA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RandomStartPosition;                                     // 0x02FC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHealthComponentBase*                                HealthComponent;                                         // 0x0300(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool IsSlotPlayingAnyAnimation(const class FName& SlotNodeName);
		bool IsNotAttacking();
		bool IsDead();
		class USkeletalMeshComponent* GetSkeletalMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SimpleMovingEnemyAnimInstance
	 * Size -> 0x0038 (FullSize[0x0340] - InheritedSize[0x0308])
	 */
	class USimpleMovingEnemyAnimInstance : public UEnemyAnimInstance
	{
	public:
		unsigned char                                              UnknownData_ZVQF[0x4];                                   // 0x0308(0x0004) Fix Super Size
		struct FVector                                             Velocity;                                                // 0x030C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WalkCycleSpeed;                                          // 0x0318(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartMovingSpeed;                                        // 0x031C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StopMovingSpeed;                                         // 0x0320(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WalkCycleMinRate;                                        // 0x0324(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WalkCyclePlayRate;                                       // 0x0328(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MeshScale;                                               // 0x032C(0x0004) Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsMoving;                                                // 0x0330(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CWKI[0xF];                                   // 0x0331(0x000F) MISSED OFFSET (PADDING)

	public:
		void SetMeshScale(float NewScale);
		bool IsNotMoving();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlyingBugAnimInstance
	 * Size -> 0x0000 (FullSize[0x0340] - InheritedSize[0x0340])
	 */
	class UFlyingBugAnimInstance : public USimpleMovingEnemyAnimInstance
	{
	public:
		void SetDeathAnimation(EFlyingBugDeathAnimationCategory deathAnim);
		bool IsNotStaggered();
		bool IsNotInAttackMode();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AIFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAIFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetAICanSense(bool canSense);
		int32_t MakeEnemiesFleeFromArea(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int32_t maxEnemiesAffected);
		void MakeEnemiesBackOutOfArea(class UObject* WorldContextObject, const struct FVector& Center, float Radius);
		bool IsEnemyAlertet(class APawn* enemy);
		class APlayerCharacter* GetPlayerTarget(class AActor* From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, class AActor* ignoreTarget, bool IsFlying);
		bool GetAttackableTargetsInRange(class AActor* From, TArray<class UAttackerPositioningComponent*>* outArray, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, class AActor* ignoreTarget, bool IsFlying);
		class UAttackerPositioningComponent* GetAttackableTarget(class AActor* From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, class AActor* ignoreTarget, bool IsFlying);
		class APlayerCharacter* ConsiderChangingTarget(class APlayerCharacter* CurrentTarget, class AActor* From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool CurrentTargetMustBeAlive, bool IsFlying);
		void AlertEnemy(class APawn* enemy);
		void AlertEnemiesInRange(class UObject* WorldContextObject, const struct FVector& Origin, float range, class APawn* alerter);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AIPlayerControlComponent
	 * Size -> 0x00B0 (FullSize[0x0160] - InheritedSize[0x00B0])
	 */
	class UAIPlayerControlComponent : public UActorComponent
	{
	public:
		struct FRotator                                            AngularAcceleration;                                     // 0x00B0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            AngularDampening;                                        // 0x00BC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            MaxAngularVelocity;                                      // 0x00C8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            MaxRotation;                                             // 0x00D4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      SpeedTarget;                                             // 0x00E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpeedMin;                                                // 0x00E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpeedMax;                                                // 0x00E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AccelerationBase;                                        // 0x00EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AccelerationMultiplier;                                  // 0x00F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DecelerationMultiplier;                                  // 0x00F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AccelerationOnSlopeMultiplier;                           // 0x00F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DecelerationOnSlopeMultiplier;                           // 0x00FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InitialConnectionBlendTime;                              // 0x0100(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2GAB[0x4];                                   // 0x0104(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        GetOnMontageAI;                                          // 0x0108(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        GetOnMontagePlayer;                                      // 0x0110(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        LetGoMontageAI;                                          // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        LetGoMontagePlayer;                                      // 0x0120(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    GetOnShout;                                              // 0x0128(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    LetGoShout;                                              // 0x0130(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UControlEnemyUsable*                                 Usable;                                                  // 0x0138(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6N45[0x20];                                  // 0x0140(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AlignEnemyComponent
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UAlignEnemyComponent : public UActorComponent
	{
	public:
		bool                                                       RotateWhileStationary;                                   // 0x00B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IncludePitch;                                            // 0x00B1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U969[0x6];                                   // 0x00B2(0x0006) MISSED OFFSET (PADDING)

	public:
		void SetRotateWhileStationary(bool Value);
		void OnRep_RotateWhileStationary();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyGroupDescriptor
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UEnemyGroupDescriptor : public UDataAsset
	{
	public:
		TArray<struct FEnemyGroupDescriptorItem>                   Enemies;                                                 // 0x0030(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       UseCustomDiversity;                                      // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M50R[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRandInterval                                       Diversity;                                               // 0x0048(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AmberEventEnemyPool
	 * Size -> 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
	 */
	class UAmberEventEnemyPool : public UEnemyGroupDescriptor
	{
	public:
		float                                                      MaxTimeBetweenSpawn;                                     // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinTimeBetweenSpawn;                                     // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxEnemyCap;                                             // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AmbersNeededdToComplete;                                 // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AmbersNeededOnePlayer;                                   // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AAG1[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameEvent
	 * Size -> 0x0148 (FullSize[0x0368] - InheritedSize[0x0220])
	 */
	class AGameEvent : public AActor
	{
	public:
		unsigned char                                              UnknownData_KLLL[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             EventTriggeredDelegate;                                  // 0x0228(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             EventFinishedDelegate;                                   // 0x0238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             StageCompleteDelegate;                                   // 0x0248(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ProgressChangedDelegate;                                 // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProgressBarChanged;                                    // 0x0268(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             TimeProgressChanged;                                     // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ObjectivesPerStageChanged;                               // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class AEventStarterButton*>                         StarterObjects;                                          // 0x0298(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bGameEventSetup;                                         // 0x02A8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZJYO[0x7];                                   // 0x02A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                EventName;                                               // 0x02B0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                ObjectiveText;                                           // 0x02C8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FName                                                AnalyticsName;                                           // 0x02E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x02E8(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UChildActorComponent*                                StartEventObject;                                        // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    EventTriggeredShout;                                     // 0x0310(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    EventFinishedShout;                                      // 0x0318(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    EventFailedShout;                                        // 0x0320(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EventTriggeredShoutDelay;                                // 0x0328(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EventFinishedShoutDelay;                                 // 0x032C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StageProgress;                                           // 0x0330(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeLimit;                                               // 0x0334(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayUITime;                                             // 0x0338(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MRYI[0x4];                                   // 0x033C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    objectivesPerStage;                                      // 0x0340(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V88V[0x4];                                   // 0x0344(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       EventStartersActive;                                     // 0x0348(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       StopScriptedWavesWhileActive;                            // 0x0349(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       StopNormalWavesWhileActive;                              // 0x034A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       EventStarted;                                            // 0x034B(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       FailedEvent;                                             // 0x034C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowRemainingTimeOnHUD;                                  // 0x034D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowScoreStatusOnHUD;                                    // 0x034E(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowProgressBar;                                         // 0x034F(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ProgressBarPct;                                          // 0x0350(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D98D[0x1];                                   // 0x0354(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       SkipEventStarters;                                       // 0x0355(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AHHX[0x2];                                   // 0x0356(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      EventParticipants;                                       // 0x0358(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate

	public:
		void TrySetupGameEvent();
		void TriggerEvent();
		void StartShout();
		void StageObjectiveCompleted();
		class ARessuplyPod* SpawnEventPod(class UClass* podClass, const struct FVector& aSpawnLocation, int32_t Delay);
		class AActor* SpawnEventActor(class UClass* eventActorClass, const struct FTransform& aSpawnLocation);
		void SetStageProgress(float Progress);
		void SetProgressBarPct(float InPct);
		void SetObjectivesPerStage(int32_t objectivesPerStage);
		void RemoveParticipant(class AActor* participant);
		void OnStarterObjectUsed(class AEventStarterButton* eventStarter);
		void OnStageProgress(float Progress);
		void OnStageComplete(int32_t Stage);
		void OnRep_StageProgress();
		void OnRep_ObjectivesPerStage();
		void OnRep_IsEventStartersActive();
		void OnRep_FailedEvent();
		void OnRep_EventStarted();
		void OnRep_EventParticipants();
		void OnEventTriggered();
		void OnEventFinished(bool eventSuccess);
		void OnEventBooted();
		bool IsEventCompleted();
		bool IsEventActive();
		float GetStageProgress();
		bool GetShowTimeOnHUD();
		bool GetShowScoreOnHUD();
		bool GetShowProgressBar();
		class FText GetObjectiveText();
		int32_t GetObjectivesPerStage();
		class FText GetEventName();
		bool GetEventFailed();
		float GetDelayUITime();
		void EndShout();
		struct FTransform DebreePositionPoint(class AProceduralSetup* Setup, const struct FVector& fromLocation, float MinDistance, float desiredDistance, class UDebrisPositioning* DebrisPositioning, class UClass* terrainPlacement, float maxPathLength);
		void BootUpEvent();
		void AddStageProgress(float progressToAdd);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AmberEvent
	 * Size -> 0x0050 (FullSize[0x03B8] - InheritedSize[0x0368])
	 */
	class AAmberEvent : public AGameEvent
	{
	public:
		class UDamageComponent*                                    EndExplosionDamage;                                      // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAmberEventEnemyPool*>                        EnemyPools;                                              // 0x0370(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class AFSDPawn*>                                    spawnedEnemies;                                          // 0x0380(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AFAM[0x8];                                   // 0x0390(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UAmberEventEnemyPool>                 CurrentPool;                                             // 0x0398(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialDelayBeforeSpawn;                                 // 0x03A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxSpawnRange;                                           // 0x03A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HXEU[0x10];                                  // 0x03A8(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnSpawnedDeath(class UHealthComponentBase* spawnedHealthComponent);
		void OnEnemySpawned(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AmmoCountWidget
	 * Size -> 0x0028 (FullSize[0x0288] - InheritedSize[0x0260])
	 */
	class UAmmoCountWidget : public UUserWidget
	{
	public:
		class APlayerCharacter*                                    Character;                                               // 0x0260(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AItem*                                               Item;                                                    // 0x0268(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemAggregator*                                     Aggregator;                                              // 0x0270(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowClipAndTotalAsOne;                                   // 0x0278(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5KT9[0xB];                                   // 0x0279(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CountThreshold;                                          // 0x0284(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnVisibleChanged(bool Visible, bool showClipCount);
		void OnTotalVisibleChanged(bool Visible);
		void OnTotalChanged(int32_t Total);
		void OnItemTotalChanged(int32_t Value);
		void OnItemEquipped(class AItem* NewItem);
		void OnItemAmountChanged(int32_t Value);
		void OnAmountChanged(int32_t Count);
		void DoItemEquipped();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CustomAmmoCountWidget
	 * Size -> 0x0008 (FullSize[0x0268] - InheritedSize[0x0260])
	 */
	class UCustomAmmoCountWidget : public UUserWidget
	{
	public:
		TWeakObjectPtr<class AItem>                                Item;                                                    // 0x0260(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReceiveItemSet();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Item
	 * Size -> 0x0150 (FullSize[0x0370] - InheritedSize[0x0220])
	 */
	class AItem : public AActor
	{
	public:
		unsigned char                                              UnknownData_O1VT[0x48];                                  // 0x0220(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             FPCameraOffset;                                          // 0x0268(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G7PY[0x4];                                   // 0x0274(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAudioWithCooldown                                  AudioFriendlyFire;                                       // 0x0278(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OVBI[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnEqipped;                                               // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUnequipped;                                            // 0x02A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       EnableDangerousSaveGameIDEditing;                        // 0x02B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UGB0[0x3];                                   // 0x02B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               SavegameID;                                              // 0x02B4(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2F5V[0x4];                                   // 0x02C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItemID*                                             ItemID;                                                  // 0x02C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class APlayerCharacter*                                    Character;                                               // 0x02D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUpgradableItemComponent*                            UpgradableItem;                                          // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              CameraShake;                                             // 0x02E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CameraShakeOnStartUsing;                                 // 0x02E8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CameraShakeOnEquip;                                      // 0x02E9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9JIK[0xE];                                   // 0x02EA(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         HeatCurve;                                               // 0x02F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ManualHeatPerUse;                                        // 0x0300(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeatOnStartUse;                                          // 0x0304(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CooldownRate;                                            // 0x0308(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ManualCooldownDelay;                                     // 0x030C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UnjamDuration;                                           // 0x0310(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RALO[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentTemperature;                                      // 0x0318(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7NF9[0x4];                                   // 0x031C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          AudioTemperature;                                        // 0x0320(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AudioTemperatureFadeout;                                 // 0x0328(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                TemperatureFloatParam;                                   // 0x032C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H5Q8[0x4];                                   // 0x0334(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     TemperatureAudioComponent;                               // 0x0338(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       overHeated;                                              // 0x0340(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9IZF[0x7];                                   // 0x0341(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDialogDataAsset*                                    ShoutOverheated;                                         // 0x0348(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAimAssistEnabled;                                       // 0x0350(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1HVK[0x3];                                   // 0x0351(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MovementRateWhileUsing;                                  // 0x0354(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanPlayLedgeClimbWhileUsing;                             // 0x0358(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanInspectItem;                                          // 0x0359(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanSprintWithItem;                                       // 0x035A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W7WH[0x5];                                   // 0x035B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CustomIconWidget;                                        // 0x0360(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AdvancedVibrationSendLevel;                              // 0x0368(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsEquipped;                                              // 0x036C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsUsing;                                                 // 0x036D(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PONZ[0x2];                                   // 0x036E(0x0002) MISSED OFFSET (PADDING)

	public:
		void UpdateSkin();
		class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, float PriorityOverride, const class FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool SendVibration);
		class UAudioComponent* SpawnSoundAtLocation(class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool SendVibration);
		class UAudioComponent* SpawnSound2D(class USoundBase* Sound, float PriorityOverride, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, bool SendVibration);
		void Server_StartUsing(bool IsUsing);
		void Resupply(float percentage);
		void RemovedFromInventory(class ACharacter* oldCharacter);
		void RecieveUnequipped();
		void RecieveStopUsing();
		void RecieveStartUsing();
		void RecieveEquipped();
		void RecieveCycledItem();
		void Recieve_UpdateMeshses(bool IsFirstPerson);
		void ReceiveResupply(float percentage);
		void Receive_Overheated();
		class UStaticMeshComponent* Receive_GetTPAnimationEventMesh();
		class UFirstPersonStaticMeshComponent* Receive_GetFPAnimationEventMesh();
		void OnTemperatureChanged(float Temperature, bool overHeated);
		void OnSkinChanged(class USkinEffect* Skin);
		void OnRep_IsUsing(bool OldValue);
		void OnOwnerDestroyed(class AActor* owningActor);
		bool IsLocallyControlled();
		bool IsFirstPerson();
		class UClass* GetWeaponViewClass();
		struct FItemLoadoutAnimations GetLoadoutAnimations();
		class FText GetItemName();
		class UTexture2D* GetItemIconLine();
		class UTexture2D* GetItemIconBG();
		class AItem* GetItemDefaultObject(class UClass* itemClass);
		class FText GetItemCategory();
		class USceneComponent* GetHeatingAudioSceneComponent();
		class UItemCharacterAnimationSet* GetCharacterAnimationSet();
		class FString GetAnalyticsItemName();
		class FString GetAnalyticsItemCategory();
		void AddedToInventory(class APlayerCharacter* ItemOwner);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimatedItem
	 * Size -> 0x0060 (FullSize[0x03D0] - InheritedSize[0x0370])
	 */
	class AAnimatedItem : public AItem
	{
	public:
		class USkinnableComponent*                                 Skinnable;                                               // 0x0370(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerAnimInstance*                                 FPAnimInstance;                                          // 0x0378(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerAnimInstance*                                 TPAnimInstance;                                          // 0x0380(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              FPMesh;                                                  // 0x0388(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              TPMesh;                                                  // 0x0390(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FP_EquipAnimation;                                       // 0x0398(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FP_IdleAnimation;                                        // 0x03A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_EquipAnimation;                                       // 0x03A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_IdleAnimation;                                        // 0x03B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EquipDuration;                                           // 0x03B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LOTM[0x4];                                   // 0x03BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItemCharacterAnimationSet*                          CharacterAnimationSet;                                   // 0x03C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R1RF[0x8];                                   // 0x03C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnReceiveEquippedFinished();
		struct FTransform GetMuzzle();
		class USkeletalMeshComponent* GetItemMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AmmoDrivenWeapon
	 * Size -> 0x0380 (FullSize[0x0750] - InheritedSize[0x03D0])
	 */
	class AAmmoDrivenWeapon : public AAnimatedItem
	{
	public:
		unsigned char                                              UnknownData_TKNQ[0x20];                                  // 0x03D0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnClipCountChanged;                                      // 0x03F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTryReloadEvent;                                        // 0x0400(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReloadingEvent;                                        // 0x0410(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShotFiredEvent;                                        // 0x0420(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStoppedUsingEvent;                                     // 0x0430(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HBXK[0x10];                                  // 0x0440(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponFireComponent*                                WeaponFire;                                              // 0x0450(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAmmoDriveWeaponAggregator*                          Aggregator;                                              // 0x0458(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       LoopFireAnimation;                                       // 0x0460(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4YXR[0x3];                                   // 0x0461(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LoopFireAnimationBlendoutTime;                           // 0x0464(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4YGN[0x18];                                  // 0x0468(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        FP_FireAnimation;                                        // 0x0480(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_FireAnimation;                                        // 0x0488(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FP_ReloadAnimation;                                      // 0x0490(0x0008) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FItemAnimationItem                                  OverheatAnimation;                                       // 0x0498(0x0018) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FItemAnimationItem>                          GunslingAnimations;                                      // 0x04B0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_ReloadAnimation;                                      // 0x04C0(0x0008) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_Fire;                                                // 0x04C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_FireLastBullet;                                      // 0x04D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_Reload;                                              // 0x04D8(0x0008) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_Reload_TP;                                           // 0x04E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      MuzzleParticles;                                         // 0x04E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      TPMuzzleParticles;                                       // 0x04F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseTriggeredMuzzleParticles;                             // 0x04F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TCQM[0xF];                                   // 0x04F9(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTracerData                                         Tracer;                                                  // 0x0508(0x0030) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      CasingParticles;                                         // 0x0538(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseTriggeredCasingParticleSystem;                        // 0x0540(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D28B[0xF];                                   // 0x0541(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULightComponent*                                     MuzzleFlashLight;                                        // 0x0550(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  MuzzleFlashLightCurve;                                   // 0x0558(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R1XJ[0x8];                                   // 0x05E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           FireSound;                                               // 0x05E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           RicochetSound;                                           // 0x05F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      RicochetParticle;                                        // 0x05F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FireSoundDelayToTail;                                    // 0x0600(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JY2O[0xC];                                   // 0x0604(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           FireSoundTail;                                           // 0x0610(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFireSoundTail2D;                                       // 0x0618(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AVTC[0x7];                                   // 0x0619(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UForceFeedbackEffect*                                FireForceFeedbackEffect;                                 // 0x0620(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UAudioComponent>                      FireSoundInstance;                                       // 0x0628(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FireSoundFadeDuration;                                   // 0x0630(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1IJF[0x4];                                   // 0x0634(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ReloadSound;                                             // 0x0638(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BulletsRemainingForNearEmptySound;                       // 0x0640(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PlayEmptySoundsIn3D;                                     // 0x0644(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NDVQ[0x3];                                   // 0x0645(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           NearEmptySound;                                          // 0x0648(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           WeaponEmptySound;                                        // 0x0650(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    ShoutShotFired;                                          // 0x0658(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    ShoutOutOfAmmo;                                          // 0x0660(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    ShoutReloading;                                          // 0x0668(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxAmmo;                                                 // 0x0670(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ClipSize;                                                // 0x0674(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ShotCost;                                                // 0x0678(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RateOfFire;                                              // 0x067C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BurstCount;                                              // 0x0680(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurstCycleTime;                                          // 0x0684(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReloadDuration;                                          // 0x0688(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AmmoCount;                                               // 0x068C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ClipCount;                                               // 0x0690(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ManualHeatReductionAmmo;                                 // 0x0694(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FireInputBufferTime;                                     // 0x0698(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2XA4[0x4];                                   // 0x069C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AutoReloadDuration;                                      // 0x06A0(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2NGZ[0x4];                                   // 0x06A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           AutoReloadCompleteCue;                                   // 0x06A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnItemAutoReloaded;                                      // 0x06B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FUOR[0x4];                                   // 0x06C0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SupplyStatusWeight;                                      // 0x06C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CycleTimeLeft;                                           // 0x06C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseCustomReloadDelay;                                    // 0x06CC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PQMU[0x3];                                   // 0x06CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CustomReloadDelay;                                       // 0x06D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9J6T[0x8];                                   // 0x06D4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReloadTimeLeft;                                          // 0x06DC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AutomaticReload;                                         // 0x06E0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanReload;                                               // 0x06E1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DLX9[0x2];                                   // 0x06E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HoldToFirePercentOfFireRatePenalty;                      // 0x06E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XY97[0x4];                                   // 0x06E8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRecoilSettings                                     RecoilSettings;                                          // 0x06EC(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       ApplyRecoilAtEndOfBurst;                                 // 0x0714(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EOJN[0x3];                                   // 0x0715(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EndOfBurstRecoilMultiplier;                              // 0x0718(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasAutomaticFire;                                        // 0x071C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFiring;                                                // 0x071D(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EXQO[0x1];                                   // 0x071E(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ManualHeatReductionOnReload;                             // 0x071F(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxManualHeatReductionCharges;                           // 0x0720(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ManualHeatReductionValue;                                // 0x0724(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4PZ7[0x1A];                                  // 0x0728(0x001A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EAmmoWeaponState                                           WeaponState;                                             // 0x0742(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZC0Y[0xD];                                   // 0x0743(0x000D) MISSED OFFSET (PADDING)

	public:
		void Upgraded_Blueprint_Implementation(TArray<class UItemUpgrade*> upgrades);
		void UpdateHoldToFire();
		void Server_StopReload(float BlendOutTime);
		void Server_ReloadWeapon();
		void Server_PlayBurstFire(unsigned char shotCount);
		void Server_Gunsling(unsigned char Index);
		void ResupplyAmmo(int32_t Amount);
		void RecieveFiredWeapon();
		void Receive_ReloadEnd();
		void Receive_ReloadBegin();
		void Receive_IsFiringChanged(bool NewValue);
		void OnWeaponFireEnded();
		void OnWeaponFired(const struct FVector& Location);
		void OnRicochet(const struct FVector& Origin, const struct FVector& Location, const struct FVector& Normal);
		void OnRep_IsFiring();
		bool IsClipFull();
		void InstantlyReload();
		void CustomEvent1(class UItemUpgrade* Event);
		void Client_RefillAmmo(float percentage);
		void All_StopReload(float BlendOutTime);
		void All_StartReload();
		void All_PlayBurstFire(unsigned char shotCount);
		void All_Gunsling(unsigned char Index);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemAggregator
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UItemAggregator : public UActorComponent
	{
	public:
		class FText                                                CounterText;                                             // 0x00B0(0x0018) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		void UnbindAllEvents();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ClipBasedItemAggregator
	 * Size -> 0x0078 (FullSize[0x0140] - InheritedSize[0x00C8])
	 */
	class UClipBasedItemAggregator : public UItemAggregator
	{
	public:
		class FScriptMulticastDelegate                             OnClipAmountChanged;                                     // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTotalAmountChanged;                                    // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClipAndTotalChanged;                                   // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReloadTimeChanged;                                     // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReloadComplete;                                        // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReloadStarted;                                         // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMaxAmmoCapacityChanged;                                // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       ShowTotalAmount;                                         // 0x0138(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ShowClipAndTotalAsOne;                                   // 0x0139(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TMFC[0x6];                                   // 0x013A(0x0006) MISSED OFFSET (PADDING)

	public:
		void ReloadStarted();
		void ReloadComplete();
		int32_t GetTotalAmount();
		int32_t GetClipAmount();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AmmoDriveWeaponAggregator
	 * Size -> 0x0008 (FullSize[0x0148] - InheritedSize[0x0140])
	 */
	class UAmmoDriveWeaponAggregator : public UClipBasedItemAggregator
	{
	public:
		class AAmmoDrivenWeapon*                                   Weapon;                                                  // 0x0140(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AmmoDrivenWeaponAnimInstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class UAmmoDrivenWeaponAnimInstance : public UAnimInstance
	{
	public:
		class AAmmoDrivenWeapon*                                   Weapon;                                                  // 0x02B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFiring;                                                // 0x02C0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JIRW[0x3];                                   // 0x02C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ClipFullPercentage;                                      // 0x02C4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       overHeated;                                              // 0x02C8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UGZH[0x3];                                   // 0x02C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Temperature;                                             // 0x02CC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool IsFull();
		bool isEmpty();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlatformGunAnimInstance
	 * Size -> 0x0010 (FullSize[0x02E0] - InheritedSize[0x02D0])
	 */
	class UPlatformGunAnimInstance : public UAmmoDrivenWeaponAnimInstance
	{
	public:
		float                                                      SpinRate;                                                // 0x02D0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NormalSpinRate;                                          // 0x02D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LerpSpeed;                                               // 0x02D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FiredSpinRate;                                           // 0x02DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void WeaponFired();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnchorTurner
	 * Size -> 0x00A0 (FullSize[0x02C0] - InheritedSize[0x0220])
	 */
	class AAnchorTurner : public AActor
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    PushCollider1;                                           // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    PushCollider2;                                           // 0x0238(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    PushCollider3;                                           // 0x0240(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    PushCollider4;                                           // 0x0248(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpunUp;                                                // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DR2D[0x20];                                  // 0x0260(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             AttatchmentOffset;                                       // 0x0280(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_852Q[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        AttachmentPoints;                                        // 0x0290(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      PerPlayerMultiplier;                                     // 0x02A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnSpeed;                                               // 0x02A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Progress;                                                // 0x02A8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxProgress;                                             // 0x02AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DHVH[0x4];                                   // 0x02B0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       Finished;                                                // 0x02B4(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BA3O[0x3];                                   // 0x02B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DecaySpeed;                                              // 0x02B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DCU7[0x4];                                   // 0x02BC(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_Finished();
		void OnLeftPushpoint(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnEnteredPushpoint(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void GeneratorSpunUp();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnchorTurnerAnimInstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class UAnchorTurnerAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_3ISY[0x4];                                   // 0x02B8(0x0004) Fix Super Size
		float                                                      Percent;                                                 // 0x02BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnSpeed;                                               // 0x02C0(0x0004) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsFinished;                                              // 0x02C4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2ENS[0xB];                                   // 0x02C5(0x000B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemAquisitionBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UItemAquisitionBase : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StoreBoughtAquisition
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UStoreBoughtAquisition : public UItemAquisitionBase
	{
	public:
		int32_t                                                    CreditsCost;                                             // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S8E7[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UResourceData*, float>                          ResourceCost;                                            // 0x0038(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		int32_t                                                    RequiredPlayerRank;                                      // 0x0088(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X718[0x4];                                   // 0x008C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DLCAquisition
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UDLCAquisition : public UItemAquisitionBase
	{
	public:
		class UDLCBase*                                            RequiredDLC;                                             // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UnlockedAquisition
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UUnlockedAquisition : public UItemAquisitionBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SchematicAquisition
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USchematicAquisition : public UItemAquisitionBase
	{
	public:
		class USchematicPricingTier*                               PricingTier;                                             // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USchematicRarity*                                    Rarity;                                                  // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USchematic*>                                  Schematics;                                              // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TreassureAquisition
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UTreassureAquisition : public UItemAquisitionBase
	{
	public:
		class UItemAquisitionSource*                               Source;                                                  // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BaseArmorDamageComponent
	 * Size -> 0x0060 (FullSize[0x0110] - InheritedSize[0x00B0])
	 */
	class UBaseArmorDamageComponent : public UActorComponent
	{
	public:
		bool                                                       ArmorDamageEnabled;                                      // 0x00B0(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IE32[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnArmorShatteredEvent;                                   // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FArmorDamageEffects                                 ArmorBreakEffects;                                       // 0x00C8(0x0030) Edit, Protected, NativeAccessSpecifierProtected
		TArray<class UFSDPhysicalMaterial*>                        ArmorPhysMats;                                           // 0x00F8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x0108(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SimpleArmorDamageComponent
	 * Size -> 0x0090 (FullSize[0x01A0] - InheritedSize[0x0110])
	 */
	class USimpleArmorDamageComponent : public UBaseArmorDamageComponent
	{
	public:
		class FScriptMulticastDelegate                             OnRadialArmorPartsDestroyedEvent;                        // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      ArmorStrength;                                           // 0x0120(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6GEQ[0x4];                                   // 0x0124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, struct FDestructableBodypartItem>        PhysBoneToArmor;                                         // 0x0128(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		struct FArmorDamageInfo                                    ArmorDamageInfo;                                         // 0x0178(0x0008) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QX0P[0x20];                                  // 0x0180(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnRep_ArmorDamageInfo(const struct FArmorDamageInfo& OldArmorDamageInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ArmorHealthDamageComponent
	 * Size -> 0x00A0 (FullSize[0x01B0] - InheritedSize[0x0110])
	 */
	class UArmorHealthDamageComponent : public UBaseArmorDamageComponent
	{
	public:
		class FScriptMulticastDelegate                             OnArmorPartDestroyedEvent;                               // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnArmorPartDamagedEvent;                                 // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSocketPartDestroyedEvent;                              // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSocketPartDamagedEvent;                                // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<class FName, struct FArmorHealthItem>                 PhysBoneToArmor;                                         // 0x0150(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FArmorDamageInfo                                    ArmorDamageInfo;                                         // 0x01A0(0x0008) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      RadialSocketDamageMultiplier;                            // 0x01A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AffectedByAmorBreak;                                     // 0x01AC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_463N[0x3];                                   // 0x01AD(0x0003) MISSED OFFSET (PADDING)

	public:
		bool SetHealthOnBodypartItem(const class FName& BoneName, float newHealth);
		void SetHealthOnAllItems(float newHealth);
		bool SetArmorDamageEnabledOnItem(const class FName& BoneName, bool Enabled);
		void RegrowAllArmor(float baseHealth);
		void PopAllWeakPoints();
		void OnRep_ArmorDamageInfo(const struct FArmorDamageInfo& OldValue);
		void DealSocketArmorDamage(float Damage, float armorDamageMultiplier, class UPrimitiveComponent* collider, bool shatter, EArmorDamageType DamageType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CompositeArmorComponent
	 * Size -> 0x0048 (FullSize[0x0158] - InheritedSize[0x0110])
	 */
	class UCompositeArmorComponent : public UBaseArmorDamageComponent
	{
	public:
		class FScriptMulticastDelegate                             OnArmorPartDestroyedEvent;                               // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnArmorPartDamagedEvent;                                 // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      BreakParticle;                                           // 0x0130(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AffectedByAmorBreak;                                     // 0x0138(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W70A[0x7];                                   // 0x0139(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FCompositeArmorItem>                         ArmorItems;                                              // 0x0140(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FArmorDamageInfo                                    ArmorDamageInfo;                                         // 0x0150(0x0008) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		void OnRep_ArmorDamageInfo(const struct FArmorDamageInfo& OldValue);
		void AddArmorPart(class UPrimitiveComponent* Primitive, float Health, bool overrideAffectedByArmomrBreak, bool NewAffectedByArmorBreak);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SavablePrimaryDataAsset
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class USavablePrimaryDataAsset : public UPrimaryDataAsset
	{
	public:
		unsigned char                                              UnknownData_HW3S[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BuildRestrictions;                                       // 0x0038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PlatformRestrictions;                                    // 0x003C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableDangerousSaveGameIDEditing;                        // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UWWA[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               SavegameID;                                              // 0x0044(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3JEP[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBuildRestriction*                                   BuildRestriction;                                        // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanityItem
	 * Size -> 0x00C0 (FullSize[0x0120] - InheritedSize[0x0060])
	 */
	class UVanityItem : public USavablePrimaryDataAsset
	{
	public:
		unsigned char                                              UnknownData_AO55[0x18];                                  // 0x0060(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                ItemName;                                                // 0x0078(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class FText                                                ItemDescription;                                         // 0x0090(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class FString                                              NotesInternal;                                           // 0x00A8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemAquisitionBase*                                 Aquisition;                                              // 0x00B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVanityEventSourceDataAsset*                         EventSourceAsset;                                        // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UIconGenerationCameraKey*                            IconGenerationCameraKey;                                 // 0x00C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              RestrictToCharacters[0x50];                              // 0x00D0(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		bool RemoveFromOwned(class UObject* WorldContext);
		void PreviewItem(class AFSDPlayerState* PlayerState, bool Show);
		bool IsOwned(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		bool IsEquipped(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		bool HasEventSource();
		void GiftItem(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		EVanitySlot GetVanitySlot();
		TArray<struct FCraftingCost> GetResourceCost();
		int32_t GetRequiredPlayerRank();
		bool GetIsUnLockedFromStart();
		class UTexture* GetIcon();
		struct FCraftingCost GetFashioniteCost();
		struct FVanityEventSource GetEventSource();
		int32_t GetCraftingCreditsCost();
		class FText GetCraftableName();
		class FText GetCraftableDescription();
		void CraftItemWithFashionite(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		void CraftItem(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		void ChangeToItem(class UCharacterVanityComponent* Gear);
		bool CanCraftWithFashionite(class UObject* WorldContextObject);
		bool CanCraft(class UObject* WorldContextObject);
		void ApplyItemPermanently(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		void ApplyItem(class APlayerCharacter* Player, bool isPermanent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ArmorMaterialVanityItem
	 * Size -> 0x0070 (FullSize[0x0190] - InheritedSize[0x0120])
	 */
	class UArmorMaterialVanityItem : public UVanityItem
	{
	public:
		unsigned char                                              Material[0x28];                                          // 0x0120(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UDynamicIcon*                                        DynamicIcon;                                             // 0x0148(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UArmorVanityItem*                                    LockedToArmor;                                           // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UArmorVanityItem*>                            BannedArmors;                                            // 0x0158(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              ClothMaterial[0x28];                                     // 0x0168(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		class UMaterialInstanceConstant* SetArmorMaterialToTwoSided(class UMaterialInstance* Parent);
		class UMaterialInstanceDynamic* CreateIcon(class UObject* Owner);
		void CreateClothMaterialForAmorVanity(class UArmorMaterialVanityItem* armorVanity);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ArmorPiece
	 * Size -> 0x0088 (FullSize[0x02A8] - InheritedSize[0x0220])
	 */
	class AArmorPiece : public AActor
	{
	public:
		unsigned char                                              UnknownData_8Z2X[0x18];                                  // 0x0220(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUpgradableGearComponent*                            Upgradable;                                              // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class UPawnStat*, float>                              StatModifiers;                                           // 0x0240(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UClass*                                              LoadoutProxy;                                            // 0x0290(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemID*                                             ItemID;                                                  // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              WeaponPreviewClass;                                      // 0x02A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UClass* GetWeaponViewClass();
		class AArmorPiece* GetArmorPieceDefaultObject(class UClass* armorPieceClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ArmorVanityItem
	 * Size -> 0x0128 (FullSize[0x0248] - InheritedSize[0x0120])
	 */
	class UArmorVanityItem : public UVanityItem
	{
	public:
		unsigned char                                              TPArmorMesh[0x50];                                       // 0x0120(0x0050) UNKNOWN PROPERTY: MapProperty
		unsigned char                                              UnknownData_1IOP[0x8];                                   // 0x0170(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              FPArmorMesh[0x50];                                       // 0x0178(0x0050) UNKNOWN PROPERTY: MapProperty
		unsigned char                                              UnknownData_03VG[0x1];                                   // 0x01C8(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       AllowSleevelessUse;                                      // 0x01C9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K1LG[0x6];                                   // 0x01CA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              AnimInstance[0x28];                                      // 0x01D0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		bool                                                       CropBeard;                                               // 0x01F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VQDN[0x3];                                   // 0x01F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ArmorThickness;                                          // 0x01FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              MaterialOverride[0x28];                                  // 0x0200(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		bool                                                       CanOnlyUseDefaultArmorMaterial;                          // 0x0228(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZCBU[0x7];                                   // 0x0229(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UArmorMaterialVanityItem*                            DefaultArmorMaterial;                                    // 0x0230(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FTattooArmorItem>                            Tattoos;                                                 // 0x0238(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void SetNewArmorType(class UCharacterVanityComponent* Gear);
		void PreviewArmor(class AFSDPlayerState* PlayerState, bool Show, bool useDefaultArmorMaterial);
		bool HasSleevelessArmorType();
		EArmorMeshType GetFPMeshType();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AssetLoader
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAssetLoader : public UGameInstanceSubsystem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AsyncLevelPersistanceActor
	 * Size -> 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
	 */
	class AAsyncLevelPersistanceActor : public AActor
	{
	public:
		TArray<class UObject*>                                     References;                                              // 0x0220(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1VVK[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AsyncManager
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UAsyncManager : public UGameInstanceSubsystem
	{
	public:
		TArray<class UObject*>                                     PermanentReferences;                                     // 0x0030(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KRC1[0x18];                                  // 0x0040(0x0018) MISSED OFFSET (PADDING)

	public:
		class UObject* SyncLoadAsset();
		void ReleaseAllHandles();
		class UClass* Receive_SyncLoadClass();
		void AsyncLoadSoftObjects(EAsyncPersistence persistence, const class FScriptDelegate& OnLoadComplete, EAsyncLoadPriority Priority);
		void AsyncLoadSoftObject(EAsyncPersistence persistence, const class FScriptDelegate& OnLoadComplete, EAsyncLoadPriority Priority);
		void AsyncLoadSoftClass(EAsyncPersistence persistence, const class FScriptDelegate& OnLoadComplete, EAsyncLoadPriority Priority);
		void AsyncLoadAssets(TArray<struct FSoftObjectPath> Items, EAsyncPersistence persistence, const class FScriptDelegate& OnLoadComplete, EAsyncLoadPriority Priority);
		void AsyncLoadAsset(const struct FSoftObjectPath& Item, EAsyncPersistence persistence, const class FScriptDelegate& OnLoadComplete, EAsyncLoadPriority Priority);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AttackBaseComponent
	 * Size -> 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
	 */
	class UAttackBaseComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_PDAD[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                AttackName;                                              // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxSurfaceAngle;                                         // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      range;                                                   // 0x00CC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinRange;                                                // 0x00D4(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxRange;                                                // 0x00D8(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EZYT[0x14];                                  // 0x00DC(0x0014) MISSED OFFSET (PADDING)

	public:
		class UAttackBaseComponent* ReplaceAttackComponent(class UAttackBaseComponent* componentToReplace, class UClass* newComponentClass);
		void ReceiveCompleteAttack();
		void ReceiveAttackTarget(class AActor* Target);
		void ReceiveAbortAttack();
		float GetMinRange();
		float GetMaxRange();
		void CompleteAttack(bool success);
		void AttackTarget(class AActor* Target);
		void AbortAttack();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AttackEffect
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAttackEffect : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AttackCooldownComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UAttackCooldownComponent : public UActorComponent
	{
	public:
		TArray<struct FAttackCooldown>                             AttackCooldowns;                                         // 0x00B0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void SetCooldown(const class FName& AttackName, float cooldownSeconds);
		bool IsAttackOffCooldown(const class FName& AttackName);
		bool IsAnyAttackOffCooldown();
		void AttackUsed(const class FName& Name);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AttackerManagerComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UAttackerManagerComponent : public UActorComponent
	{
	public:
		TArray<class UAttackerPositioningComponent*>               Components;                                              // 0x00B0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AttackerPositioningComponent
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class UAttackerPositioningComponent : public UActorComponent
	{
	public:
		bool                                                       DebugPositions;                                          // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JZBW[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxAttackers;                                            // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FAttackerInfo>                               Attackers;                                               // 0x00B8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            FreePositions;                                           // 0x00C8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FAttackerInfo>                               FlyingAttackers;                                         // 0x00D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            FlyingFreePositions;                                     // 0x00E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		float                                                      CharacterPersonalSphere;                                 // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CharacterHalfHeight;                                     // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CostModifier;                                            // 0x0100(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A98C[0x4];                                   // 0x0104(0x0004) MISSED OFFSET (PADDING)

	public:
		void UnregisterAttacker(class AActor* Attacker, bool IsFlying);
		void RegisterAttacker(class AActor* Attacker, bool IsFlying);
		void OnFlyingAttackerDeath(class UHealthComponentBase* HealthComponent);
		void OnAttackerDeath(class UHealthComponentBase* HealthComponent);
		struct FVector GetFlyingAttackerPosition(class AActor* Attacker, float AttackerRadius);
		struct FVector GetAttackerPosition(class AActor* Attacker, float AttackerRadius);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerAttackPositionComponent
	 * Size -> 0x0010 (FullSize[0x0118] - InheritedSize[0x0108])
	 */
	class UPlayerAttackPositionComponent : public UAttackerPositioningComponent
	{
	public:
		unsigned char                                              UnknownData_1GBL[0x4];                                   // 0x0108(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OnZiplineFlyingModifier;                                 // 0x010C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OnZiplineWalkingModifier;                                // 0x0110(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4CE2[0x4];                                   // 0x0114(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetGameplayModifier(float modifier);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ObjectAttackerPositioning
	 * Size -> 0x0008 (FullSize[0x0110] - InheritedSize[0x0108])
	 */
	class UObjectAttackerPositioning : public UAttackerPositioningComponent
	{
	public:
		class UHealthComponentBase*                                Health;                                                  // 0x0108(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CustomObjectAttackerPositioning
	 * Size -> 0x0018 (FullSize[0x0120] - InheritedSize[0x0108])
	 */
	class UCustomObjectAttackerPositioning : public UAttackerPositioningComponent
	{
	public:
		class UHealthComponentBase*                                Health;                                                  // 0x0108(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     AttackerPositions;                                       // 0x0110(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyAttackerPositioningComponent
	 * Size -> 0x0000 (FullSize[0x0108] - InheritedSize[0x0108])
	 */
	class UEnemyAttackerPositioningComponent : public UAttackerPositioningComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EscortMuleAttackerPositioning
	 * Size -> 0x0018 (FullSize[0x0120] - InheritedSize[0x0108])
	 */
	class UEscortMuleAttackerPositioning : public UAttackerPositioningComponent
	{
	public:
		class UHealthComponentBase*                                Health;                                                  // 0x0108(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     AttackerPositions;                                       // 0x0110(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void SetNewMaxAttackers(int32_t newMaxAttackers);
		void SetCostModifier(float newModifier);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AttackingPointInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAttackingPointInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AudioFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAudioFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		float SetSoundClassVolume(class USoundClass* SoundClass, float Volume);
		void PushTimedSoundMix(class UObject* contextObject, class USoundMix* mix, float Duration);
		float GetSoundClassVolume(class USoundClass* SoundClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SoundClassWidget
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class USoundClassWidget : public UUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AutoCannon
	 * Size -> 0x00C8 (FullSize[0x0818] - InheritedSize[0x0750])
	 */
	class AAutoCannon : public AAmmoDrivenWeapon
	{
	public:
		float                                                      StartingFireRate;                                        // 0x0750(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxFireRate;                                             // 0x0754(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  FireRateCurve;                                           // 0x0758(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      FireTimeReductionScale;                                  // 0x07E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FireTimeIncreaseScale;                                   // 0x07E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxFireTimeCap;                                          // 0x07E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageBonusAtFullROF;                                    // 0x07EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       StatusEffectAtFullROF;                                   // 0x07F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0WSG[0x3];                                   // 0x07F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FireTimeOffsetForMaxRateOfFireBonus;                     // 0x07F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartLoopingSoundAt;                                     // 0x07F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A4H8[0x4];                                   // 0x07FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              StatusAtFullROF;                                         // 0x0800(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_Fire_3;                                              // 0x0808(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentFireTime;                                         // 0x0810(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RHG1[0x4];                                   // 0x0814(0x0004) MISSED OFFSET (PADDING)

	public:
		void Server_SetStatusActive(bool IsActive);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AutoCannonAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UAutoCannonAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_JMC9[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AutoCarverComponent
	 * Size -> 0x0040 (FullSize[0x0520] - InheritedSize[0x04E0])
	 */
	class UAutoCarverComponent : public UStaticMeshComponent
	{
	public:
		class UTerrainMaterialBase*                                TerrainMaterial;                                         // 0x04E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Frequency;                                               // 0x04E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ExpensiveNoise;                                          // 0x04EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinDistanceMoved;                                        // 0x04F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECarveFilterType                                           Filter;                                                  // 0x04F4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MI7O[0x3];                                   // 0x04F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCarveDoneEvent;                                        // 0x04F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZVB0[0x18];                                  // 0x0508(0x0018) MISSED OFFSET (PADDING)

	public:
		void ForceCarve();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.STLMeshCarverComponent
	 * Size -> 0x0020 (FullSize[0x0470] - InheritedSize[0x0450])
	 */
	class USTLMeshCarverComponent : public UPrimitiveComponent
	{
	public:
		class UTerrainMaterialBase*                                TerrainMaterial;                                         // 0x0450(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USTLMeshCarver*                                      MeshCarver;                                              // 0x0458(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECarveFilterType                                           Filter;                                                  // 0x0460(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PreviewEnabled;                                          // 0x0461(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CQPP[0xE];                                   // 0x0462(0x000E) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MeshCarverComponent
	 * Size -> 0x0020 (FullSize[0x0500] - InheritedSize[0x04E0])
	 */
	class UMeshCarverComponent : public UStaticMeshComponent
	{
	public:
		class UTerrainMaterialBase*                                TerrainMaterial;                                         // 0x04E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECarveFilterType                                           Filter;                                                  // 0x04E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YEB2[0x3];                                   // 0x04E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExpensiveNoise;                                          // 0x04EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECarveOptionsCellSize                                      CarverSize;                                              // 0x04F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AL8F[0xF];                                   // 0x04F1(0x000F) MISSED OFFSET (PADDING)

	public:
		void Carve();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LevelGenerationCarverComponent
	 * Size -> 0x0050 (FullSize[0x04A0] - InheritedSize[0x0450])
	 */
	class ULevelGenerationCarverComponent : public UPrimitiveComponent
	{
	public:
		class USTLMeshCarver*                                      MeshCarver;                                              // 0x0450(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         ConvexCarver;                                            // 0x0458(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshCarver*                                   StaticMeshCarver;                                        // 0x0460(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainMaterialBase*                                TerrainMaterial;                                         // 0x0468(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECarveFilterType                                           Filter;                                                  // 0x0470(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2CMH[0x3];                                   // 0x0471(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ConvexExpensiveNoise;                                    // 0x0474(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECarveOptionsCellSize                                      CarveCellSize;                                           // 0x0478(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PreviewEnabled;                                          // 0x0479(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CarvingDisabled;                                         // 0x047A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DestroyOwnerOnCarve;                                     // 0x047B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DestroySelfAndChilded;                                   // 0x047C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WHHY[0x13];                                  // 0x047D(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       SelfActivate;                                            // 0x0490(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JRX1[0xF];                                   // 0x0491(0x000F) MISSED OFFSET (PADDING)

	public:
		void OnCarvedCallback();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GenerationCleanupComponent
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UGenerationCleanupComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_1U6H[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnCarverCallback();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandomizedInstantMeshCarver
	 * Size -> 0x0048 (FullSize[0x0268] - InheritedSize[0x0220])
	 */
	class ARandomizedInstantMeshCarver : public AActor
	{
	public:
		TArray<class UStaticMesh*>                                 CarvingMeshes;                                           // 0x0220(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		TArray<class USTLMeshCarver*>                              STLCarvingMeshes;                                        // 0x0230(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UStaticMeshCarver*>                           StaticMeshCarvers;                                       // 0x0240(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FRandRange                                          RandomScale;                                             // 0x0250(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UTerrainMaterialBase*                                TerrainMaterial;                                         // 0x0258(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECarveFilterType                                           Filter;                                                  // 0x0260(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X6GW[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LevelGenerationCarverComponent2
	 * Size -> 0x0030 (FullSize[0x0480] - InheritedSize[0x0450])
	 */
	class ULevelGenerationCarverComponent2 : public UPrimitiveComponent
	{
	public:
		class UClass*                                              Carver;                                                  // 0x0450(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CarvingDisabled;                                         // 0x0458(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NHVE[0x3];                                   // 0x0459(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PreviewSeed;                                             // 0x045C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FBakeSettings                                       CarverSettings;                                          // 0x0460(0x0010) Edit, NativeAccessSpecifierPublic
		bool                                                       SelfActivate;                                            // 0x0470(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7HMS[0x7];                                   // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCSGPreviewComponent*                                PreviewComponent;                                        // 0x0478(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AvoidCeilingComponent
	 * Size -> 0x0048 (FullSize[0x00F8] - InheritedSize[0x00B0])
	 */
	class UAvoidCeilingComponent : public UActorComponent
	{
	public:
		float                                                      MaxDuckDistance;                                         // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TraceVerticalStart;                                      // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinVerticalSpace;                                        // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DuckSpeed;                                               // 0x00BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     ComponentToMove;                                         // 0x00C0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDuckingEnabled;                                        // 0x00C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VZEK[0x2F];                                  // 0x00C9(0x002F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WindowWidget
	 * Size -> 0x0040 (FullSize[0x02A0] - InheritedSize[0x0260])
	 */
	class UWindowWidget : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnWindowClosed;                                          // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TWAE[0x28];                                  // 0x0270(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHandleCloseCommand;                                     // 0x0298(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bResolutionDownscaleWhenOpen;                            // 0x0299(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_81AC[0x6];                                   // 0x029A(0x0006) MISSED OFFSET (PADDING)

	public:
		void WindowDelegate__DelegateSignature(class UWindowWidget* Window);
		void ReceiveSelectPreviousCommand();
		void ReceiveSelectNextCommand();
		void ReceiveSelectCharacterCommand();
		void ReceiveOkCommand();
		void ReceiveCloseCommand();
		bool ReceiveCanCloseWindow(const class FName& InActionName, const struct FKey& InKey, bool InIsMouseEvent);
		void OnShown();
		void OnNewTopWindow();
		void OnClosed();
		void ConsumeCommand();
		void CloseThisWindow();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BarMenuWidget
	 * Size -> 0x0008 (FullSize[0x02A8] - InheritedSize[0x02A0])
	 */
	class UBarMenuWidget : public UWindowWidget
	{
	public:
		TWeakObjectPtr<class ASpaceRigBar>                         SpaceRigBar;                                             // 0x02A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BarrierProjectile
	 * Size -> 0x0000 (FullSize[0x0220] - InheritedSize[0x0220])
	 */
	class ABarrierProjectile : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDPhysicsActor
	 * Size -> 0x0018 (FullSize[0x0238] - InheritedSize[0x0220])
	 */
	class AFSDPhysicsActor : public AActor
	{
	public:
		int32_t                                                    MovementUpdateFrequency;                                 // 0x0220(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MovementUpdateEventTriggeredFrequency;                   // 0x0224(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_39R3[0x10];                                  // 0x0228(0x0010) MISSED OFFSET (PADDING)

	public:
		void ForceMovementUpdate();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CarriableItem
	 * Size -> 0x0030 (FullSize[0x0268] - InheritedSize[0x0238])
	 */
	class ACarriableItem : public AFSDPhysicsActor
	{
	public:
		unsigned char                                              UnknownData_2PDI[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAttachedChangeDelegate;                                // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCarriableDeposited;                                    // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		bool                                                       StrictDeposit;                                           // 0x0260(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDopositable;                                           // 0x0261(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_26YT[0x6];                                   // 0x0262(0x0006) MISSED OFFSET (PADDING)

	public:
		void Throw(const struct FVector& force);
		void Receive_OnDeposited(class APlayerCharacter* fromPlayer, class AActor* toActor);
		void OnAttachChanged(bool Attached);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BasicThrowableItem
	 * Size -> 0x0058 (FullSize[0x02C0] - InheritedSize[0x0268])
	 */
	class ABasicThrowableItem : public ACarriableItem
	{
	public:
		class UBoxComponent*                                       BoxComp;                                                 // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    UseSphere;                                               // 0x0270(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCarriableComponent*                                 CarriableComp;                                           // 0x0278(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInstantUsable*                                      UsableComp;                                              // 0x0280(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                WorldMeshComp;                                           // 0x0288(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFirstPersonStaticMeshComponent*                     ViewMeshComp;                                            // 0x0290(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JQS0[0x10];                                  // 0x0298(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ImpactSound;                                             // 0x02A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SquaredMinImpactForce;                                   // 0x02B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ImpactAudioResetTime;                                    // 0x02B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SquaredMinThrowforce;                                    // 0x02B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_84IK[0x4];                                   // 0x02BC(0x0004) MISSED OFFSET (PADDING)

	public:
		void ThrowItem(const struct FVector& throwForce);
		void ResetImpactSound();
		void OnUsed(class APlayerCharacter* User, EInputKeys Key);
		void OnUsableChanged(bool CanUse);
		void OnPickedUp();
		void OnDropped();
		void OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BasicDepositableItem
	 * Size -> 0x0008 (FullSize[0x02C8] - InheritedSize[0x02C0])
	 */
	class ABasicDepositableItem : public ABasicThrowableItem
	{
	public:
		class UResourceData*                                       DepositableResource;                                     // 0x02C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponFireComponent
	 * Size -> 0x0060 (FullSize[0x0110] - InheritedSize[0x00B0])
	 */
	class UWeaponFireComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_HB54[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnWeaponFired;                                           // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponFireEnded;                                       // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRicochetEvent;                                         // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_85WC[0x10];                                  // 0x00E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              Weapon[0x10];                                            // 0x00F8(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		unsigned char                                              UnknownData_6JPO[0x8];                                   // 0x0108(0x0008) MISSED OFFSET (PADDING)

	public:
		void StopFire();
		void Server_SetShotPower(float shotPower);
		void Fire(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& Direction, bool playFireFX);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BasicWeaponFireComponent
	 * Size -> 0x0000 (FullSize[0x0110] - InheritedSize[0x0110])
	 */
	class UBasicWeaponFireComponent : public UWeaponFireComponent
	{
	public:
		void Server_FireWeapon();
		void Server_EndFire();
		void All_WeaponFired();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BeardColorVanityItem
	 * Size -> 0x0028 (FullSize[0x0148] - InheritedSize[0x0120])
	 */
	class UBeardColorVanityItem : public UVanityItem
	{
	public:
		class UMaterialInterface*                                  HairColor;                                               // 0x0120(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  EyebrowColor;                                            // 0x0128(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  MoustacheColor;                                          // 0x0130(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  SideburnColor;                                           // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  BeardColor;                                              // 0x0140(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BeardVanityItem
	 * Size -> 0x0088 (FullSize[0x01A8] - InheritedSize[0x0120])
	 */
	class UBeardVanityItem : public UVanityItem
	{
	public:
		unsigned char                                              Mesh[0x28];                                              // 0x0120(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      BeardThickness;                                          // 0x0148(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RequiresSlimArmor;                                       // 0x014C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseHairColor;                                            // 0x014D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseArmorColor;                                           // 0x014E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HideEyebrows;                                            // 0x014F(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HideSideburns;                                           // 0x0150(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HideMoustache;                                           // 0x0151(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HideAll;                                                 // 0x0152(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W46Q[0x5];                                   // 0x0153(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              AnimInstance[0x28];                                      // 0x0158(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              MaterialOverride[0x28];                                  // 0x0180(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SavableDataAsset
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class USavableDataAsset : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_C7R5[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       EnableDangerousSaveGameIDEditing;                        // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C5H7[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               SavegameID;                                              // 0x003C(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O90N[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBuildRestriction*                                   BuildRestriction;                                        // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FGuid GetSavegameID();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BEEMissionTemplate
	 * Size -> 0x0060 (FullSize[0x00B8] - InheritedSize[0x0058])
	 */
	class UBEEMissionTemplate : public USavableDataAsset
	{
	public:
		int32_t                                                    MissionCount;                                            // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2HR0[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDifficultySetting*>                          Difficulties;                                            // 0x0060(0x0010) Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FBEETemplateItem>                            missions;                                                // 0x0070(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    CreditsPerPrimaryObjective;                              // 0x0080(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CreditsPerSecondaryObjective;                            // 0x0084(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    XPPerPrimaryObjective;                                   // 0x0088(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    XPPerSecondaryObjective;                                 // 0x008C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HazardBonus;                                             // 0x0090(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WSMV[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRandInterval                                       MutatorCount;                                            // 0x0098(0x0010) Edit, NativeAccessSpecifierPublic
		struct FRandInterval                                       WarningCount;                                            // 0x00A8(0x0010) Edit, NativeAccessSpecifierPublic

	public:
		bool IsDurationAllowed(class UMissionTemplate* mission, class UMissionDuration* Duration);
		bool IsComplexityAllowed(class UMissionTemplate* mission, class UMissionComplexity* Complexity);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BEESettings
	 * Size -> 0x00B0 (FullSize[0x00E0] - InheritedSize[0x0030])
	 */
	class UBEESettings : public UDataAsset
	{
	public:
		class UBEEMissionTemplate*                                 MissionTemplate;                                         // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UMutator*>                                    BaseMutators;                                            // 0x0038(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UMissionMutator*>                             Mutators;                                                // 0x0048(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UMissionWarning*>                             Warnings;                                                // 0x0058(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UDialogDataAsset*>                            BEEMissionCompleteShouts;                                // 0x0068(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FBEELoaderSequence>                          LoaderSequnces;                                          // 0x0078(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UMissionNameBank*                                    DeepDiveNameBank;                                        // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              MissionBar[0x28];                                        // 0x0090(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              MissionEndScreen[0x28];                                  // 0x00B8(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BeltDrivenWeapon
	 * Size -> 0x0030 (FullSize[0x0780] - InheritedSize[0x0750])
	 */
	class ABeltDrivenWeapon : public AAmmoDrivenWeapon
	{
	public:
		class UAudioComponent*                                     BarrelAudio;                                             // 0x0750(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           BarrelSound;                                             // 0x0758(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BarrelFadeIn;                                            // 0x0760(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BarrelFadeOut;                                           // 0x0764(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         BarrelPitchCurve;                                        // 0x0768(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BarrelSpinUpTime;                                        // 0x0770(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BarrelSpinDownTime;                                      // 0x0774(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentSpinRate;                                         // 0x0778(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Simulate_SpinBarrel;                                     // 0x077C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MB20[0x3];                                   // 0x077D(0x0003) MISSED OFFSET (PADDING)

	public:
		void Server_StopBarrel();
		void Server_StartBarrel();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GatlingGun
	 * Size -> 0x0068 (FullSize[0x07E8] - InheritedSize[0x0780])
	 */
	class AGatlingGun : public ABeltDrivenWeapon
	{
	public:
		unsigned char                                              UnknownData_RLQK[0x8];                                   // 0x0780(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       BarrelProximityDamageEnabled;                            // 0x0788(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0KCV[0x3];                                   // 0x0789(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BarrelProximityDamageDistance;                           // 0x078C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BarrelProximityDamageRadius;                             // 0x0790(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BarrelProximityDamageLength;                             // 0x0794(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenProximityDamageTicks;                         // 0x0798(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7IIN[0x14];                                  // 0x079C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DamageMultiplierAtMaxStabilization;                      // 0x07B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NNNE[0x4];                                   // 0x07B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFXSystemAsset*                                      HotShellsTracerParticles;                                // 0x07B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LLMX[0x8];                                   // 0x07C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HeatRemovedOnKill;                                       // 0x07C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CriticalOverheatEnabled;                                 // 0x07CC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HotShellsOn;                                             // 0x07CD(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_99BY[0x2];                                   // 0x07CE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HotShellsTemperatureRequired;                            // 0x07D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S4GI[0x4];                                   // 0x07D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageComponent*                                    DamageComponent;                                         // 0x07D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    BarrelProximityDamageComponent;                          // 0x07E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Server_SetHotShellsOn(bool hotShellsIsOn);
		void OnRep_HotShellsTracerOn();
		void OnGatlingTemperatureChanged(float Temperature, bool isOverheated);
		void OnEnemyKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);
		void Client_RemoveHeat();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BeltDrivenAnimInstance
	 * Size -> 0x0030 (FullSize[0x0300] - InheritedSize[0x02D0])
	 */
	class UBeltDrivenAnimInstance : public UAmmoDrivenWeaponAnimInstance
	{
	public:
		float                                                      BarrelSpinRate;                                          // 0x02D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentBarrelSpinRate;                                   // 0x02D4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             ExternalForce;                                           // 0x02D8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExternalForceScale;                                      // 0x02E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ExternalForceBoneName;                                   // 0x02E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WIFO[0x10];                                  // 0x02F0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Biome
	 * Size -> 0x0428 (FullSize[0x0458] - InheritedSize[0x0030])
	 */
	class UBiome : public UDataAsset
	{
	public:
		class FText                                                BiomeName;                                               // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                BiomeShortName;                                          // 0x0048(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                BiomeDescription;                                        // 0x0060(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FColor                                              BiomeColor;                                              // 0x0078(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BiomeIndex;                                              // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              BiomeAnalyticsIndex;                                     // 0x0080(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsTutorialBiome;                                         // 0x0090(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1XZ4[0x7];                                   // 0x0091(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              BiomeMovie[0x28];                                        // 0x0098(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BiomePicture[0x28];                                      // 0x00C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BiomeIcon[0x28];                                         // 0x00E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BiomeLargeImage[0x28];                                   // 0x0110(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BiomeWorldMap[0x28];                                     // 0x0138(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BiomeMissionBar[0x28];                                   // 0x0160(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BiomeMapWidget[0x28];                                    // 0x0188(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		struct FHeatSource                                         BiomeHeatSource;                                         // 0x01B0(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRandRange                                          DepthRange;                                              // 0x01B8(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              AtmosphericParticles[0x28];                              // 0x01C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              CaveScriptComponents[0x10];                              // 0x01E8(0x0010) UNKNOWN PROPERTY: ArrayProperty
		float                                                      ExtraCaveSize;                                           // 0x01F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7P81[0x4];                                   // 0x01FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDebrisSet*>                                  Debris;                                                  // 0x0200(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              DebrisActor[0x28];                                       // 0x0210(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              PostProcessActorClass[0x28];                             // 0x0238(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UTerrainMaterial*                                    RockMaterial;                                            // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTerrainMaterial*                                    DirtMaterial;                                            // 0x0268(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTerrainMaterial*                                    BurnedMaterialOverride;                                  // 0x0270(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              FlavorMaterials[0x10];                                   // 0x0278(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TArray<struct FBiomeNoiseItem>                             RoomNoises;                                              // 0x0288(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UMissionStat*                                        MissionCompleted;                                        // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFloodFillSettings*                                  CeilingNoise;                                            // 0x02A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDetailNoise*                                        CeilingDetailNoise;                                      // 0x02A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFloodFillSettings*                                  WallNoise;                                               // 0x02B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDetailNoise*                                        WallDetailNoise;                                         // 0x02B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFloodFillSettings*                                  FloorNoise;                                              // 0x02C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDetailNoise*                                        FloorDetailNoise;                                        // 0x02C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFloodFillSettings*                                  PillarNoise;                                             // 0x02D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDetailNoise*                                        PillarDetailNoise;                                       // 0x02D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPillarSettings*                                     PillarSettings;                                          // 0x02E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UTunnelSetting*>                              TunnelSettings;                                          // 0x02E8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UFloodFillSettings*                                  TunnelCeilingNoise;                                      // 0x02F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFloodFillSettings*                                  TunnelWallNoise;                                         // 0x0300(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFloodFillSettings*                                  TunnelFloorNoise;                                        // 0x0308(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FResourceSpawner>                            Resources;                                               // 0x0310(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FBiomeEnemyEntry>                            Enemies;                                                 // 0x0320(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UEnemyDescriptor*>                            BannedEnemies;                                           // 0x0330(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UEnemyDescriptor*>                            StationaryEnemies;                                       // 0x0340(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UCritterDescriptor*>                          Critters;                                                // 0x0350(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              AmbientSounds[0x28];                                     // 0x0360(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		bool                                                       Use3DAmbient;                                            // 0x0388(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OPIA[0x7];                                   // 0x0389(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReverbSettings                                     ReverbSettings;                                          // 0x0390(0x0020) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      SmallCaveReverbVolume;                                   // 0x03B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OF0Y[0x4];                                   // 0x03B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UReverbEffect*                                       SmallCaveReverb;                                         // 0x03B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MediumCaveReverbVolume;                                  // 0x03C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F19N[0x4];                                   // 0x03C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UReverbEffect*                                       MediumCaveReverb;                                        // 0x03C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LargeCaveReverbVolume;                                   // 0x03D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_25QO[0x4];                                   // 0x03D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UReverbEffect*                                       LargeCaveReverb;                                         // 0x03D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TunnelAmbience[0x28];                                    // 0x03E0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BiomeLoaderLevelSequence[0x28];                          // 0x0408(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FString                                              BiomeLoaderLevelName;                                    // 0x0430(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FText>                                        Quotes;                                                  // 0x0440(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      PlanetZoneSelectionWeight;                               // 0x0450(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SE1P[0x4];                                   // 0x0454(0x0004) MISSED OFFSET (PADDING)

	public:
		void StartPreload(class UObject* WorldContext);
		class UTerrainMaterial* GetRockMaterial();
		void GetPostProcessActorClass_Soft();
		class UMaterialInstance* GetFlavorMaterial();
		class UTerrainMaterial* GetDirtMaterial();
		void GetDebrisActorSoftClass();
		class UTexture2D* GetBiomeWorldMap();
		class UTexture2D* GetBiomePicture();
		class FText GetBiomeName();
		class UTexture2D* GetBiomeMissionBar();
		class UClass* GetBiomeMapWidget();
		TArray<struct FSoftObjectPath> GetBiomeMapAssetList();
		class UTexture2D* GetBiomeLargeImage();
		int32_t GetBiomeIndex();
		class UTexture2D* GetBiomeIcon();
		class FString GetBiomeAnalyticsIndex();
		class UParticleSystem* GetAtmosphericParticles();
		class USoundCue* GetAmbientSounds();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BobbingComponent
	 * Size -> 0x0038 (FullSize[0x0230] - InheritedSize[0x01F8])
	 */
	class UBobbingComponent : public USceneComponent
	{
	public:
		class FScriptMulticastDelegate                             OnMovedIntoSomethingEvent;                               // 0x01F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class AActor*                                              OwnerActor;                                              // 0x0208(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DoOrientationChecks;                                     // 0x0210(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UJ92[0x3];                                   // 0x0211(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BobSpeed;                                                // 0x0214(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BobSize;                                                 // 0x0218(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OrentationChecksPerSecond;                               // 0x021C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KGF7[0x10];                                  // 0x0220(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetOwner(class AActor* AActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BodyRotationManagerComponent
	 * Size -> 0x00C8 (FullSize[0x0178] - InheritedSize[0x00B0])
	 */
	class UBodyRotationManagerComponent : public UActorComponent
	{
	public:
		struct FRuntimeFloatCurve                                  KnockBackCurve;                                          // 0x00B0(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KTTG[0x18];                                  // 0x0138(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class USceneComponent>                      RotationComponent;                                       // 0x0150(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LerpSpeed;                                               // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IF9E[0x1C];                                  // 0x015C(0x001C) MISSED OFFSET (PADDING)

	public:
		void ApplyKnockBack(float force, float Duration, const struct FVector& Direction);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PuddleTrackerComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UPuddleTrackerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_Z4FG[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnPuddleDestroyed(class AActor* DestroyedActor);
		void GetPuddles(TArray<class AActor*>* Locations);
		void GetPuddleLocations(TArray<struct FVector>* Locations);
		void AddPuddle(class AActor* puddle);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TentacleManagerComponent
	 * Size -> 0x0138 (FullSize[0x01E8] - InheritedSize[0x00B0])
	 */
	class UTentacleManagerComponent : public UActorComponent
	{
	public:
		TWeakObjectPtr<class UNiagaraComponent>                    Tentacles;                                               // 0x00B0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CZFY[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  SpeedCurve;                                              // 0x00C0(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  ReachCurve;                                              // 0x0148(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		class FName                                                Param_Speed;                                             // 0x01D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                Param_Reach;                                             // 0x01D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3TNR[0x8];                                   // 0x01E0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoltActionWeapon
	 * Size -> 0x0130 (FullSize[0x0880] - InheritedSize[0x0750])
	 */
	class ABoltActionWeapon : public AAmmoDrivenWeapon
	{
	public:
		class FScriptMulticastDelegate                             FullyFocusedEvent;                                       // 0x0750(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             FocusLostEvent;                                          // 0x0760(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UDamageComponent*                                    DamageComponent;                                         // 0x0770(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHitscanBaseComponent*                               HitscanComponent;                                        // 0x0778(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              FocusedHitSTE;                                           // 0x0780(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RequireWeakspotForFocusedHitSTE;                         // 0x0788(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsNoGravityOnFocusEnabled;                               // 0x0789(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PKOY[0x2];                                   // 0x078A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NoGravityOnFocusDuration;                                // 0x078C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NoGravityFocusFallFriction;                              // 0x0790(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NoGravityFocusGravityScale;                              // 0x0794(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RY71[0x4];                                   // 0x0798(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ZoomSpreadAmount;                                        // 0x079C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ZoomMinSpreadWhileMoving;                                // 0x07A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C232[0x4];                                   // 0x07A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChargeSpeed;                                             // 0x07A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeAmmoCost;                                          // 0x07AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeRecoilMult;                                        // 0x07B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F32M[0x14];                                  // 0x07B4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ZoomedInAudio;                                           // 0x07C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     ChargedShotTrailParticles;                               // 0x07D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTracerData                                         ChargedShotTracer;                                       // 0x07D8(0x0030) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class USoundCue*                                           ButtonDownFireSound;                                     // 0x0808(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ChargedShotFireSound;                                    // 0x0810(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargedFoVChange;                                        // 0x0818(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargedFoVFadeSpeed;                                     // 0x081C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinCharge;                                               // 0x0820(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SlowMovementAtCharge;                                    // 0x0824(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FullChargeDamageBonus;                                   // 0x0828(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AimedShotStaggerChance;                                  // 0x082C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AimedShotWeakpointDamageBonusMultiplier;                 // 0x0830(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AimedWeakspotKilLRange;                                  // 0x0834(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5O84[0x4];                                   // 0x0838(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TargetKilledReloadTimeBoost;                             // 0x083C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetKilledReloadTimeBoostDuration;                     // 0x0840(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GMO6[0xE];                                   // 0x0844(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       LastShotWasAimed;                                        // 0x0852(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_57O2[0x11];                                  // 0x0853(0x0011) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsMovementSlowed;                                        // 0x0864(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U63I[0x13];                                  // 0x0865(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ChargeAffectsDamage;                                     // 0x0878(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Charging;                                                // 0x0879(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SOOJ[0x2];                                   // 0x087A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChargeProgress;                                          // 0x087C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetOverheated(bool isOverheated);
		void Server_SetIsMovementSlowed(bool bisMovementSlowed);
		void Server_SetIsLatestShotFocused(bool bisShotFocused);
		void Server_SetIsChargingShot(bool bisCharging);
		void OnTimerElapsed();
		void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysicalMaterial, bool wasDirectHit);
		void OnTargetDamaged(class UHealthComponentBase* Health, float Amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial);
		void OnShotPowerSet();
		void OnMovementSlowed(bool isSlowed);
		void Client_OnTargetKilled(bool BoostReloadTime);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoltActionWeaponAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UBoltActionWeaponAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_VGQQ[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Bomber
	 * Size -> 0x00D8 (FullSize[0x0508] - InheritedSize[0x0430])
	 */
	class ABomber : public AAFlyingBug
	{
	public:
		class UAudioComponent*                                     GooSoundComponent;                                       // 0x0430(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            AcidEmitterLeft;                                         // 0x0438(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            AcidEmitterRight;                                        // 0x0440(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZPD8[0x28];                                  // 0x0448(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AcidProjectile;                                          // 0x0470(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      deathParticles;                                          // 0x0478(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          deathSound;                                              // 0x0480(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          DeathPanicSound;                                         // 0x0488(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     BleedParticles;                                          // 0x0490(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          BladderDestroyedNoise;                                   // 0x0498(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UParticleSystemComponent>             BleedParticlesComponent;                                 // 0x04A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UAudioComponent>                      PanicAudioComponent;                                     // 0x04A8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RagdollForceModifier;                                    // 0x04B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeathYRotationSpeed;                                     // 0x04B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeathXRotationSpeed;                                     // 0x04B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SearchRange;                                             // 0x04BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NewPointMax;                                             // 0x04C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NewPointMin;                                             // 0x04C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeathSpeed;                                              // 0x04C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeathAcceleration;                                       // 0x04CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AcidRate;                                                // 0x04D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PostDeathAcidTime;                                       // 0x04D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_00G8[0x18];                                  // 0x04D8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       HasDied;                                                 // 0x04F0(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsRightDestroyed;                                        // 0x04F1(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsLeftDestroyed;                                         // 0x04F2(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       dropAcid;                                                // 0x04F3(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       NoDeathSpiral;                                           // 0x04F4(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C7UD[0x13];                                  // 0x04F5(0x0013) MISSED OFFSET (PADDING)

	public:
		void StopSpinAndDie();
		void SetDropAcid(bool dropAcid);
		void OnStartDeathPanic();
		void OnRep_DropAcid();
		void OnRep_Death();
		void OnRagdollHitGround(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnBladderDamage(float Amount);
		void OnArmorDestroyed(const class FName& Name);
		void HideMesh();
		bool GetDropAcid();
		bool AreBladdersDestroyed();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BomberAnimInstance
	 * Size -> 0x0010 (FullSize[0x0350] - InheritedSize[0x0340])
	 */
	class UBomberAnimInstance : public UFlyingBugAnimInstance
	{
	public:
		bool                                                       ShouldBomb;                                              // 0x0340(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShouldSpiral;                                            // 0x0341(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsBombing;                                               // 0x0342(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSpiraling;                                             // 0x0343(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_19SS[0xC];                                   // 0x0344(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoolUserSettingAsset
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UBoolUserSettingAsset : public UDataAsset
	{
	public:
		class FText                                                SettingDisplayTitle;                                     // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FName                                                SettingID;                                               // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SettingDefaultValue;                                     // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K5P5[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetValue(bool InValue);
		bool GetValue();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Bosco
	 * Size -> 0x0358 (FullSize[0x06E8] - InheritedSize[0x0390])
	 */
	class ABosco : public ADeepPathfinderCharacter
	{
	public:
		unsigned char                                              UnknownData_CX4X[0x38];                                  // 0x0390(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHealthComponent*                                    HealthComponent;                                         // 0x03C8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBoscoAbillityComponent*                             PrimaryAbility;                                          // 0x03D0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBoscoAbillityComponent*                             SecondaryAbility;                                        // 0x03D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UBoscoAbillityComponent*>                     Abilities;                                               // 0x03E0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UDamageComponent*                                    Damage;                                                  // 0x03F0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnSensingComponent*                               Senses;                                                  // 0x03F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDroneMiningToolBase*                                MiningTool;                                              // 0x0400(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBobbingComponent*                                   BobbingComponent;                                        // 0x0408(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              BoscoMesh;                                               // 0x0410(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHitscanComponent*                                   DroneHitScan;                                            // 0x0418(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USpotLightComponent*                                 SpotLightComponent;                                      // 0x0420(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPointLightComponent*                                PointLightComponent;                                     // 0x0428(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            LTrail;                                                  // 0x0430(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            RTrail;                                                  // 0x0438(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAudioComponent*                                     MomentumSound;                                           // 0x0440(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    DefendDrilldozerShout;                                   // 0x0448(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    DefendGenericShout;                                      // 0x0450(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    MineOrderShout;                                          // 0x0458(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    KillOrderShout;                                          // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    GoToOrderShout;                                          // 0x0468(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    ReviveOrderShout;                                        // 0x0470(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    PickupGemShout;                                          // 0x0478(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    ReviveThankShout;                                        // 0x0480(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    GeneralCallShout;                                        // 0x0488(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    VacuumShout;                                             // 0x0490(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundBase*                                          MineResponse;                                            // 0x0498(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundBase*                                          CombatResponse;                                          // 0x04A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundBase*                                          LightResponse;                                           // 0x04A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundBase*                                          ReviveResponse;                                          // 0x04B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundBase*                                          AbillityResponse;                                        // 0x04B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundBase*                                          CurrentResponse;                                         // 0x04C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ResponseTime;                                            // 0x04C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6V0K[0x4];                                   // 0x04CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnReviveused;                                            // 0x04D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       ShouldSelfDestructOnMultiplePlayers;                     // 0x04E0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F32J[0x7];                                   // 0x04E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStateChanged;                                          // 0x04E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H36M[0x20];                                  // 0x04F8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               LosMatchTags;                                            // 0x0518(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      SeeTargetTime;                                           // 0x0538(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G9MT[0x4];                                   // 0x053C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          AbillityErrorSound;                                      // 0x0540(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      INcreasedMiningArea;                                     // 0x0548(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeToResetMiningBoost;                                  // 0x054C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MiningBoosMultiplier;                                    // 0x0550(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MQB3[0x4];                                   // 0x0554(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UItemUpgrade*>                                upgrades;                                                // 0x0558(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UBoscoProjectileAbillity*                            RocketAbillity;                                          // 0x0568(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoscoProjectileAbillity*                            CryoGrenadeAbillity;                                     // 0x0570(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGuid                                               SavegameID;                                              // 0x0578(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemID*                                             ItemID;                                                  // 0x0588(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUpgradableBoscoComponent*                           Upgradable;                                              // 0x0590(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequenceBase*                                   SaluteAnimation;                                         // 0x0598(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequenceBase*                                   PickupGemAnimation;                                      // 0x05A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequenceBase*                                   DropGemAnimation;                                        // 0x05A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UAnimSequenceBase*>                           HitReaction;                                             // 0x05B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      SaluteDuration;                                          // 0x05C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CZB9[0x4];                                   // 0x05C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDroneSkinnableComponent*                            Skinnable;                                               // 0x05C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FBoscoLightSetting>                          LightSettings;                                           // 0x05D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    TargetLightSetting;                                      // 0x05E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0600[0x4];                                   // 0x05E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UBoscoAbillity*>                              CombatAbillities;                                        // 0x05E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class AActor*                                              RotateTarget;                                            // 0x05F8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LookAtLocation;                                          // 0x0600(0x000C) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LI9X[0x4];                                   // 0x060C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ShootSound;                                              // 0x0610(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShootSoundFadeout;                                       // 0x0618(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZFCA[0x4];                                   // 0x061C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ShootSoundTail;                                          // 0x0620(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     ShootSoundInstance;                                      // 0x0628(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     MuzzleEffect;                                            // 0x0630(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     TracerEffect;                                            // 0x0638(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FireRate;                                                // 0x0640(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MinShotsInBurst;                                         // 0x0644(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxShotsInBurst;                                         // 0x0648(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxRandomBurstCooldown;                                  // 0x064C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinRandomBurstCooldown;                                  // 0x0650(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxFiringAngle;                                          // 0x0654(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxEngagementRange;                                      // 0x0658(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinTracerDistance;                                       // 0x065C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TracerSpeed;                                             // 0x0660(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CGHS[0x4];                                   // 0x0664(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          ReviveSirens;                                            // 0x0668(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UAudioComponent>                      ReviveSirensComponent;                                   // 0x0670(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceToFacePlayer;                                    // 0x0678(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotationSpeed;                                           // 0x067C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PrepareToMineRange;                                      // 0x0680(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MiningRange;                                             // 0x0684(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y0AH[0x28];                                  // 0x0688(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxRevives;                                              // 0x06B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7IBP[0x10];                                  // 0x06B4(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsFiring;                                                // 0x06C4(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInRangeToMine;                                         // 0x06C5(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsPreparedToMine;                                        // 0x06C6(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsMining;                                                // 0x06C7(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsReviving;                                              // 0x06C8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsRotateMode;                                            // 0x06C9(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UCY7[0xE];                                   // 0x06CA(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ABoscoController*                                    DroneController;                                         // 0x06D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDroneAIState                                              CurrentState;                                            // 0x06E0(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_37I5[0x7];                                   // 0x06E1(0x0007) MISSED OFFSET (PADDING)

	public:
		void UsePlayerActivatedAbillity(EAbilityIndex Index, class AActor* aTarget, const struct FVector& aLocation);
		void UseABillity();
		void StopShootingSound();
		void StateChanged(EDroneAIState aCurrentState);
		void StartSelfDestruct();
		void SetIsReviving(bool aIsReviving);
		void SetIsRepairing(bool isRepairing);
		void SelfDestruct();
		void ReviveCounterChanged(int32_t remainingCharges);
		void Respond();
		void PlaySalute();
		void OnWeaponFired(const struct FVector& Location);
		void OnTargetBurrowChange(bool burrowed);
		void OnRep_State(EDroneAIState prevState);
		void OnReadyToShoot();
		void OnNotReadyToShoot();
		void OnHit(float Amount, float BaseAmount, const struct FDamageData& DamageData);
		void OnGrabbedGem();
		void MineEffects(class UTerrainMaterial* aTerrainMaterial, const struct FVector_NetQuantize& aLocation, const struct FRotator& aRotation);
		class UUpgradableBoscoComponent* GetUpgradeComponent();
		int32_t GetReviveCharges();
		class UBoscoAbillityComponent* GetPlayerAbillity();
		EDroneAIState GetCurrentState();
		bool GetCarryInterrupted();
		bool DoPickupGemAnimation();
		void All_OnSelfDestruct();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoscoAnimInstance
	 * Size -> 0x0038 (FullSize[0x02F0] - InheritedSize[0x02B8])
	 */
	class UBoscoAnimInstance : public UAnimInstance
	{
	public:
		class FScriptMulticastDelegate                             OnWeaponsReady;                                          // 0x02B8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponsNotReady;                                       // 0x02C8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		float                                                      DigAnimPlayRate;                                         // 0x02D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDroneAIState                                              CurrentState;                                            // 0x02DC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsReadyToMine;                                           // 0x02DD(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsMining;                                                // 0x02DE(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFiring;                                                // 0x02DF(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsReviving;                                              // 0x02E0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsCarryingGem;                                           // 0x02E1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CN4M[0xE];                                   // 0x02E2(0x000E) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoscoWeaponsFoldedOutNotify
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UBoscoWeaponsFoldedOutNotify : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoscoWeaponsFoldedInNotify
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UBoscoWeaponsFoldedInNotify : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AbilityExitStrategy
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAbilityExitStrategy : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StandardExitStrategy
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UStandardExitStrategy : public UAbilityExitStrategy
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ChaseIfTargetSurvived
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UChaseIfTargetSurvived : public UStandardExitStrategy
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.KeepCleaningStrategy
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKeepCleaningStrategy : public UStandardExitStrategy
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoscoAbillity
	 * Size -> 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
	 */
	class UBoscoAbillity : public UDataAsset
	{
	public:
		class FName                                                AbillityName;                                            // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequenceBase*                                   AbillityAnimation;                                       // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    VoiceOnUse;                                              // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EBoscoAbillityTargetPreference                             TargetType;                                              // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PYK4[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbilityExitStrategy*                                ExitStrategy;                                            // 0x0050(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CoolDown;                                                // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WindUp;                                                  // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Duration;                                                // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      range;                                                   // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RechargeTime;                                            // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxCharges;                                              // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       TargetActorIfValid;                                      // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       RotateTowardsTarget;                                     // 0x0071(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HGLH[0x6];                                   // 0x0072(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoscoSpawnActorAbillity
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class UBoscoSpawnActorAbillity : public UBoscoAbillity
	{
	public:
		class UClass*                                              SpawnedActorClass;                                       // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoscoProjectileAbillity
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class UBoscoProjectileAbillity : public UBoscoAbillity
	{
	public:
		class UClass*                                              ProjectileClass;                                         // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoscoAbillityComponent
	 * Size -> 0x00B0 (FullSize[0x0160] - InheritedSize[0x00B0])
	 */
	class UBoscoAbillityComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_T1LM[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAbillityChargeProgress;                                // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAbillityChargeUsed;                                    // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAbilityDataUpdated;                                    // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FBoscoAbilityTarget                                 Target;                                                  // 0x00E8(0x0018) Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<class UItemUpgrade*>                                upgrades;                                                // 0x0100(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UClass*                                              ProjectileClass;                                         // 0x0110(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              StreamClass;                                             // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ABosco>                               AbillityOwner;                                           // 0x0120(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UItemUpgrade*>                                ProjectileUpgrades;                                      // 0x0128(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UBoscoProjectileAbillity*                            AbilityData;                                             // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7CI7[0x18];                                  // 0x0140(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       InitializeAtBeginPlay;                                   // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QVN2[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		int32_t GetMaxCharges(bool Total);
		bool GetIsSet();
		int32_t GetCharges();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoscoCarryingDetailComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UBoscoCarryingDetailComponent : public UActorComponent
	{
	public:
		struct FRotator                                            CustomRotaion;                                           // 0x00B0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W1TJ[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDAIController
	 * Size -> 0x0030 (FullSize[0x0358] - InheritedSize[0x0328])
	 */
	class AFSDAIController : public AAIController
	{
	public:
		class FScriptMulticastDelegate                             OnMessageBehaviorTreeEvent;                              // 0x0328(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAlertedEvent;                                          // 0x0338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		ECollisionChannel                                          LOSTraceChannel;                                         // 0x0348(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DCG9[0x3];                                   // 0x0349(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APlayerCharacter>                     TargetedPlayer;                                          // 0x034C(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4CK5[0x4];                                   // 0x0354(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetAlerted(bool isAlerted);
		void ResumeLogic();
		void RegisterBlackboardChanges(const class FName& Key);
		void Recieve_BlackboardValueChanged(const class FName& KeyName);
		void PauseLogic();
		void OnAttackingChanged(bool attacking);
		bool GetIsAlerted();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoscoController
	 * Size -> 0x0318 (FullSize[0x0670] - InheritedSize[0x0358])
	 */
	class ABoscoController : public AFSDAIController
	{
	public:
		class UBehaviorTree*                                       BehaviourTree;                                           // 0x0358(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CheckOutOfTheWayInterval;                                // 0x0360(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UWCA[0x8];                                   // 0x0364(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DistCountAsSameHit;                                      // 0x036C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFollowTargetChangedDelegate;                           // 0x0370(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    HearthstoneCrystalMaterial;                              // 0x0380(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UTerrainMaterial*>                            PlagueMaterials;                                         // 0x0388(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CZ8P[0x8];                                   // 0x0398(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      VacuumableTypes;                                         // 0x03A0(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class AActor>>                       VacuumTargets;                                           // 0x03B0(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UE0V[0xA8];                                  // 0x03C0(0x00A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SearchForEnemiesInterval;                                // 0x0468(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FUQZ[0x4];                                   // 0x046C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SaluteDelay;                                             // 0x0470(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_28ZP[0x4];                                   // 0x0474(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SaluteCooldown;                                          // 0x0478(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_15VL[0x4];                                   // 0x047C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CheckGraberInterval;                                     // 0x0480(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2EWK[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxThrowStrength;                                        // 0x0488(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxThrowRange;                                           // 0x048C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RepairRange;                                             // 0x0490(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceCountedAsClose;                                  // 0x0494(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   TargetQuery;                                             // 0x0498(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   AttackOnOrderQuery;                                      // 0x04E0(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   AttackOnSightQuery;                                      // 0x0528(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   DefendTageQuery;                                         // 0x0570(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   VacuumTagQuery;                                          // 0x05B8(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      ReviveHealthPercentage;                                  // 0x0600(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H4Z7[0x4];                                   // 0x0604(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDroneUseComponent*                                  CurrentUse;                                              // 0x0608(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              TryingToPickItem;                                        // 0x0610(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R4FM[0x58];                                  // 0x0618(0x0058) MISSED OFFSET (PADDING)

	public:
		void ReviveTarget();
		void ResetToFollowState();
		void RegisterPlayer(class APlayerCharacter* APlayerCharacter);
		void PickupItem();
		void OnUseDone(int32_t TimesUsed);
		void OnSecondaryLaserPointer(const struct FLaserPointerTarget& HitInfo);
		void OnPlayerShout(class APlayerCharacter* APlayerCharacter);
		void OnPlayerSalute(class APlayerCharacter* aCharacater);
		void OnPlayerLeave(class AFSDPlayerState* APlayerState);
		void OnLaserPointer(const struct FLaserPointerTarget& HitInfo);
		void OnJobFinished();
		void OnEscortTargetDied(class UHealthComponentBase* Health);
		void OnCarriedUsed(class APlayerCharacter* usedBy, EInputKeys Key);
		struct FVector GetPointNearPlayers();
		class AActor* GetFollowTarget();
		void GenerateRelativeLocation(class AActor* aTarget, float aRange, float aHeightRestriction, float aMinRange, bool aTryToStayOutOfTheWay, bool aStayBehind);
		void ConfirmPickup();
		void CarriableDrop();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SimpleBossFight
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class USimpleBossFight : public UObject
	{
	public:
		unsigned char                                              UnknownData_UFOO[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBossFight                                          BossFight;                                               // 0x0030(0x0018) BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, ExposeOnSpawn, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BossFightSubSystem
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UBossFightSubSystem : public UGameInstanceSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnNewBossFight;                                          // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnBossFightRemoved;                                      // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnCustomWidgetAdded;                                     // 0x0050(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnCustomWidgetRemoved;                                   // 0x0060(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              ActiveBossFights[0x10];                                  // 0x0070(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		void RemoveCustomBossFightWidget(class UUserWidget* InWidget);
		void RegisterBossFight();
		void DeregisterBossFight(class AActor* boss);
		void CustomWidgetDelegate__DelegateSignature(class UUserWidget* InWidget);
		void BossFightDelegate__DelegateSignature();
		void AddCustomBossFightWidget(class UUserWidget* InWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BossFightInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBossFightInterface : public UInterface
	{
	public:
		bool IsStillValid();
		class UClass* GetWidgetClass();
		class AActor* GetBossActor();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BossFightWidget
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class UBossFightWidget : public UUserWidget
	{
	public:
		unsigned char                                              BossFight[0x10];                                         // 0x0260(0x0010) UNKNOWN PROPERTY: InterfaceProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Grenade
	 * Size -> 0x00C8 (FullSize[0x02E8] - InheritedSize[0x0220])
	 */
	class AGrenade : public AActor
	{
	public:
		unsigned char                                              UnknownData_1XJ9[0x18];                                  // 0x0220(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CrossHairType;                                           // 0x0238(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UProjectileMovementComponent*                        Movement;                                                // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CoolDown;                                                // 0x0248(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Duration;                                                // 0x024C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanCook;                                                 // 0x0250(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2IMS[0x3];                                   // 0x0251(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      cookTime;                                                // 0x0254(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector2D>                                   CookTickTimeline;                                        // 0x0258(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class USoundCue*                                           CookingSound;                                            // 0x0268(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExplosionDelay;                                          // 0x0270(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ExplodeOnImpact;                                         // 0x0274(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LNH8[0x3];                                   // 0x0275(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            ThrowDirectionOffset;                                    // 0x0278(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MaxGrenades;                                             // 0x0284(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasExploded;                                             // 0x0288(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1U5B[0x7];                                   // 0x0289(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItemID*                                             ItemID;                                                  // 0x0290(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              WeaponPreviewClass;                                      // 0x0298(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              LoadoutProxy;                                            // 0x02A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         HandAttachMesh;                                          // 0x02A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGrenadeProjectionSettings*                          ProjectionSettings;                                      // 0x02B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_91QY[0x10];                                  // 0x02B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ImpactGroundSound;                                       // 0x02C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     ImpactGroundParticles;                                   // 0x02D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGrenadeAnimationSet*                                GrenadeAnimationSetOverride;                             // 0x02D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0A4W[0x8];                                   // 0x02E0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_HasExploded();
		void OnExploded();
		bool IsNonFriendlyPawn(class AActor* Actor);
		bool IsNonFriendly(class AActor* Actor);
		class UClass* GetWeaponViewClass();
		class AGrenade* GetGrenadeDefaultObject(class UClass* GrenadeClass);
		void ActorWasHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BouncyBoomerang
	 * Size -> 0x0208 (FullSize[0x04F0] - InheritedSize[0x02E8])
	 */
	class ABouncyBoomerang : public AGrenade
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x02E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    DamageComponent;                                         // 0x02F0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BouncesLeft;                                             // 0x02F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConeRange;                                               // 0x02FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConeWidth;                                               // 0x0300(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BounceRange;                                             // 0x0304(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ToTargetSpeed;                                           // 0x0308(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnToTargetSpeed;                                       // 0x030C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PathToDistPercent;                                       // 0x0310(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             DefaultLocalBounceVector;                                // 0x0314(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BounceVectorRandomness;                                  // 0x0320(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialBounceVectorCof;                                  // 0x032C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ArcTimeScale;                                            // 0x0330(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GoBackAcceleration;                                      // 0x0334(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GoBackHardness;                                          // 0x0338(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TerrainCheckUpdateRate;                                  // 0x033C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HitEnemyRange;                                           // 0x0340(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HitPlayerRange;                                          // 0x0344(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CatchSoundRange;                                         // 0x0348(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HitTerrainRange;                                         // 0x034C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VQ6X[0x4];                                   // 0x0350(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CatchLocationOffset;                                     // 0x0354(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      OnDamageStatusEffects;                                   // 0x0360(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      EnemyHitNiagaraSystem;                                   // 0x0370(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     EnemyHitParticleSystem;                                  // 0x0378(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ImpactSound;                                             // 0x0380(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ReturnCatchSound;                                        // 0x0388(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ThrowBoomerangSound;                                     // 0x0390(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     MeshPivot;                                               // 0x0398(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     YawPivot;                                                // 0x03A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MeshRotationRate;                                        // 0x03A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2GMQ[0x4];                                   // 0x03AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFSDPawn*                                            TargetEnemy;                                             // 0x03B0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFSDPawn*                                            PredictedNextEnemy;                                      // 0x03B8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   RandomSeed;                                              // 0x03C0(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBoomerangState                                            State;                                                   // 0x03C4(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZW5F[0x3];                                   // 0x03C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBoomerangSyncer                                    PosVel;                                                  // 0x03C8(0x002C) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HBCK[0x4];                                   // 0x03F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBoomerangMover                                     Mover;                                                   // 0x03F8(0x0060) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QWYW[0x98];                                  // 0x0458(0x0098) MISSED OFFSET (PADDING)

	public:
		void OnRep_TargetEnemy(class AFSDPawn* lastEnemy);
		void OnRep_State();
		void OnRep_RandomSeed();
		void OnRep_PosVel();
		void CheckIfCollidingWithTerrain();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoxFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBoxFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FCoreUObject_FBox CreateBoxAt(const struct FVector& Location, const struct FVector& Size);
		struct FVector ClosestPointToBox(const struct FVector& Pos, const struct FCoreUObject_FBox& Box);
		float BoxSize(const struct FCoreUObject_FBox& Box);
		struct FVector BoxExtends(const struct FCoreUObject_FBox& Box);
		struct FVector BoxCenter(const struct FCoreUObject_FBox& Box);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GenerationComponent
	 * Size -> 0x0000 (FullSize[0x0450] - InheritedSize[0x0450])
	 */
	class UGenerationComponent : public UPrimitiveComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoxGenerationComponent
	 * Size -> 0x0020 (FullSize[0x0470] - InheritedSize[0x0450])
	 */
	class UBoxGenerationComponent : public UGenerationComponent
	{
	public:
		struct FVector                                             Extends;                                                 // 0x0450(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsCarver;                                                // 0x045C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YZAR[0x3];                                   // 0x045D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NoiseRange;                                              // 0x0460(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Visible;                                                 // 0x0464(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D53E[0x3];                                   // 0x0465(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFloodFillSettings*                                  Noise;                                                   // 0x0468(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GenerationItem
	 * Size -> 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
	 */
	class AGenerationItem : public AActor
	{
	public:
		bool                                                       Visible;                                                 // 0x0220(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AddToLevel;                                              // 0x0221(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4J1O[0x6];                                   // 0x0222(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoxGenerationItem
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ABoxGenerationItem : public AGenerationItem
	{
	public:
		class UBoxGenerationComponent*                             BoxComponent;                                            // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_AttackInRange
	 * Size -> 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
	 */
	class UBTDecorator_AttackInRange : public UBTDecorator_BlackboardBase
	{
	public:
		class FName                                                AttackName;                                              // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_CanSeeTarget
	 * Size -> 0x0058 (FullSize[0x00C0] - InheritedSize[0x0068])
	 */
	class UBTDecorator_CanSeeTarget : public UBTDecorator
	{
	public:
		bool                                                       UseAsync;                                                // 0x0068(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DebugDraw;                                               // 0x0069(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FZI3[0x2];                                   // 0x006A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxRange;                                                // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Interval;                                                // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             EyeLocationOffset;                                       // 0x0074(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                EyeSocketName;                                           // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0088(0x0028) Edit, NativeAccessSpecifierPublic
		ECollisionChannel                                          TraceChannel;                                            // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RXQM[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UseTargetable;                                           // 0x00B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F785[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_IsUnderCeiling
	 * Size -> 0x0048 (FullSize[0x00B0] - InheritedSize[0x0068])
	 */
	class UBTDecorator_IsUnderCeiling : public UBTDecorator
	{
	public:
		class FName                                                ProjectileAttackName;                                    // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                SocketName;                                              // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Acceptance;                                              // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TraceWidth;                                              // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DrawDebug;                                               // 0x0080(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y3TV[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0088(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_CheckObstruction
	 * Size -> 0x0048 (FullSize[0x00B0] - InheritedSize[0x0068])
	 */
	class UBTDecorator_CheckObstruction : public UBTDecorator
	{
	public:
		float                                                      range;                                                   // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseOwnerCenterMass;                                      // 0x006C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JAVB[0x3];                                   // 0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             EyeLocationOffset;                                       // 0x0070(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                RangedSocket;                                            // 0x007C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TOPL[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0088(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_CheckPlayerCount
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UBTDecorator_CheckPlayerCount : public UBTDecorator
	{
	public:
		int32_t                                                    playerCount;                                             // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AllowLessThanCount;                                      // 0x006C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I2XB[0x3];                                   // 0x006D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_ConditionalGuard
	 * Size -> 0x0030 (FullSize[0x0098] - InheritedSize[0x0068])
	 */
	class UBTDecorator_ConditionalGuard : public UBTDecorator
	{
	public:
		struct FBlackboardKeySelector                              GuardKey;                                                // 0x0068(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       InvertLogic;                                             // 0x0090(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BT4E[0x7];                                   // 0x0091(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_FormationGuard
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_FormationGuard : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_InRange
	 * Size -> 0x0010 (FullSize[0x00A0] - InheritedSize[0x0090])
	 */
	class UBTDecorator_InRange : public UBTDecorator_BlackboardBase
	{
	public:
		float                                                      MinRange;                                                // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxRange;                                                // 0x0094(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EFAIDistanceType                                           GeometricDistanceType;                                   // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0UNK[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_InRangeBB
	 * Size -> 0x0058 (FullSize[0x00E8] - InheritedSize[0x0090])
	 */
	class UBTDecorator_InRangeBB : public UBTDecorator_BlackboardBase
	{
	public:
		struct FBlackboardKeySelector                              MinRangeKey;                                             // 0x0090(0x0028) Edit, NativeAccessSpecifierPublic
		struct FBlackboardKeySelector                              MaxRangeKey;                                             // 0x00B8(0x0028) Edit, NativeAccessSpecifierPublic
		EFAIDistanceType                                           GeometricDistanceType;                                   // 0x00E0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VZP0[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_InRangeEx
	 * Size -> 0x0010 (FullSize[0x00A0] - InheritedSize[0x0090])
	 */
	class UBTDecorator_InRangeEx : public UBTDecorator_BlackboardBase
	{
	public:
		float                                                      MinRange;                                                // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxRange;                                                // 0x0094(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EFAIDistanceType                                           GeometricDistanceType;                                   // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3HWS[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_InRangeOfTarget
	 * Size -> 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
	 */
	class UBTDecorator_InRangeOfTarget : public UBTDecorator_BlackboardBase
	{
	public:
		float                                                      MinRange;                                                // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxRange;                                                // 0x0094(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_IsFacing
	 * Size -> 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
	 */
	class UBTDecorator_IsFacing : public UBTDecorator_BlackboardBase
	{
	public:
		float                                                      MaxAngle;                                                // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NEOW[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_LockRotation
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UBTDecorator_LockRotation : public UBTDecorator
	{
	public:
		unsigned char                                              UnknownData_ZAM7[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_MessageAI
	 * Size -> 0x0010 (FullSize[0x0078] - InheritedSize[0x0068])
	 */
	class UBTDecorator_MessageAI : public UBTDecorator
	{
	public:
		class FName                                                ActivationMessage;                                       // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                DeactivationMessage;                                     // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_ModifySpeed
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UBTDecorator_ModifySpeed : public UBTDecorator
	{
	public:
		float                                                      SpeedModifier;                                           // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YYVY[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_RandomChance
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UBTDecorator_RandomChance : public UBTDecorator
	{
	public:
		float                                                      Chance;                                                  // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H9LH[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_RandomCooldown
	 * Size -> 0x0030 (FullSize[0x0098] - InheritedSize[0x0068])
	 */
	class UBTDecorator_RandomCooldown : public UBTDecorator
	{
	public:
		struct FRandRange                                          CoolDownTime;                                            // 0x0068(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FBlackboardKeySelector                              CooldownTimeModifier;                                    // 0x0070(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_SetTagRandomCooldown
	 * Size -> 0x0018 (FullSize[0x0080] - InheritedSize[0x0068])
	 */
	class UBTDecorator_SetTagRandomCooldown : public UBTDecorator
	{
	public:
		struct FGameplayTag                                        CooldownTag;                                             // 0x0068(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRandRange                                          CooldownDuration;                                        // 0x0070(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bAddToExistingDuration;                                  // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       TriggerOnActivation;                                     // 0x0079(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZWEF[0x6];                                   // 0x007A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_TagRandomCooldown
	 * Size -> 0x0018 (FullSize[0x0080] - InheritedSize[0x0068])
	 */
	class UBTDecorator_TagRandomCooldown : public UBTDecorator
	{
	public:
		struct FGameplayTag                                        CooldownTag;                                             // 0x0068(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRandRange                                          CooldownDuration;                                        // 0x0070(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bAddToExistingDuration;                                  // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bActivatesCooldown;                                      // 0x0079(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_19XG[0x6];                                   // 0x007A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_RandomLoop
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UBTDecorator_RandomLoop : public UBTDecorator
	{
	public:
		float                                                      Chance;                                                  // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OWES[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_VariableLoop
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UBTDecorator_VariableLoop : public UBTDecorator
	{
	public:
		struct FIRandRange                                         NumLoops;                                                // 0x0068(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_SharedCooldown
	 * Size -> 0x0030 (FullSize[0x0098] - InheritedSize[0x0068])
	 */
	class UBTDecorator_SharedCooldown : public UBTDecorator
	{
	public:
		struct FRandRange                                          CoolDownTime;                                            // 0x0068(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FBlackboardKeySelector                              CooldownKey;                                             // 0x0070(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTDecorator_SharedAttackCooldown
	 * Size -> 0x0030 (FullSize[0x0098] - InheritedSize[0x0068])
	 */
	class UBTDecorator_SharedAttackCooldown : public UBTDecorator
	{
	public:
		struct FRandRange                                          CoolDownTime;                                            // 0x0068(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FBlackboardKeySelector                              CooldownKey;                                             // 0x0070(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTServer_ChaseTarget
	 * Size -> 0x0090 (FullSize[0x0100] - InheritedSize[0x0070])
	 */
	class UBTServer_ChaseTarget : public UBTService
	{
	public:
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       MustBeAlive;                                             // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       MustBeUnparalyzed;                                       // 0x0099(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PreferNewTarget;                                         // 0x009A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3J0M[0x1];                                   // 0x009B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        SwitchTargetCooldownTag;                                 // 0x009C(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9IN7[0x4];                                   // 0x00A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagQuery                                   TargetingQuery;                                          // 0x00A8(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       IsFlying;                                                // 0x00F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanShoot;                                                // 0x00F1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SH4B[0x2];                                   // 0x00F2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TargetingRange;                                          // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SwitchTargetTime;                                        // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SwitchTargetDeviation;                                   // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTService_FindClosest
	 * Size -> 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
	 */
	class UBTService_FindClosest : public UBTService
	{
	public:
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		class UTargetValidator*                                    TargetValidator;                                         // 0x0098(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       MustBeAlive;                                             // 0x00A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       OwnerIsMultiTargeter;                                    // 0x00A1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ClearTargetIfNotValid;                                   // 0x00A2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GSCA[0x1];                                   // 0x00A3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TargetingRange;                                          // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTService_FindPlayer
	 * Size -> 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
	 */
	class UBTService_FindPlayer : public UBTService
	{
	public:
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       MustBeAlive;                                             // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SwithToBetterTargets;                                    // 0x0099(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RegisterForPositioning;                                  // 0x009A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFlying;                                                // 0x009B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanShoot;                                                // 0x009C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       OwnerIsMultiTargeter;                                    // 0x009D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W8K7[0x2];                                   // 0x009E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TargetingRange;                                          // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EKSS[0x4];                                   // 0x00A4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTService_FindAttackable
	 * Size -> 0x0080 (FullSize[0x00F0] - InheritedSize[0x0070])
	 */
	class UBTService_FindAttackable : public UBTService
	{
	public:
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       MustBeAlive;                                             // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SwithToBetterTargets;                                    // 0x0099(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RegisterForPositioning;                                  // 0x009A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFlying;                                                // 0x009B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanShoot;                                                // 0x009C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_65OQ[0x3];                                   // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TargetingRange;                                          // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JW8I[0x4];                                   // 0x00A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagQuery                                   TargetQuery;                                             // 0x00A8(0x0048) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTService_SetStance
	 * Size -> 0x0030 (FullSize[0x00A0] - InheritedSize[0x0070])
	 */
	class UBTService_SetStance : public UBTService
	{
	public:
		struct FBlackboardKeySelector                              TargetLocationKey;                                       // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      Distance;                                                // 0x0098(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TGDX[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTService_CheckPathToTarget
	 * Size -> 0x0050 (FullSize[0x00C0] - InheritedSize[0x0070])
	 */
	class UBTService_CheckPathToTarget : public UBTService
	{
	public:
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              ResultKey;                                               // 0x0098(0x0028) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTService_UpdateMoveToTarget
	 * Size -> 0x0058 (FullSize[0x00C8] - InheritedSize[0x0070])
	 */
	class UBTService_UpdateMoveToTarget : public UBTService
	{
	public:
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              TargetLocationKey;                                       // 0x0098(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      LookAheadTime;                                           // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VerticalOffset;                                          // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTService_UpdateFlyingMoveToTarget
	 * Size -> 0x0058 (FullSize[0x00C8] - InheritedSize[0x0070])
	 */
	class UBTService_UpdateFlyingMoveToTarget : public UBTService
	{
	public:
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              TargetLocationKey;                                       // 0x0098(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      LookAheadTime;                                           // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E8GA[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTService_UpdateMoveInFormation
	 * Size -> 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
	 */
	class UBTService_UpdateMoveInFormation : public UBTService
	{
	public:
		float                                                      LookAheadTime;                                           // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X5B6[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlackboardKeySelector                              TargetLocationKey;                                       // 0x0078(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      AttackerRadius;                                          // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ALAV[0x4];                                   // 0x00A4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTTask_Attack
	 * Size -> 0x0030 (FullSize[0x00A0] - InheritedSize[0x0070])
	 */
	class UBTTask_Attack : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0070(0x0028) Edit, NativeAccessSpecifierPrivate
		class FName                                                AttackName;                                              // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnAttackCompleted(class UBehaviorTreeComponent* btComponent, bool wasSuccess);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTTask_FaceTarget
	 * Size -> 0x0030 (FullSize[0x00A0] - InheritedSize[0x0070])
	 */
	class UBTTask_FaceTarget : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0070(0x0028) Edit, NativeAccessSpecifierPrivate
		float                                                      MinAngle;                                                // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XZH9[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTTask_FakePhysicsMove
	 * Size -> 0x0030 (FullSize[0x00C8] - InheritedSize[0x0098])
	 */
	class UBTTask_FakePhysicsMove : public UBTTask_BlackboardBase
	{
	public:
		float                                                      MinTime;                                                 // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EndMaxSpeed;                                             // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             InitialLocalVelocity;                                    // 0x00A0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             InitialGlobalVelocity;                                   // 0x00AC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       EndRequireSolidGround;                                   // 0x00B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DV89[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFakeMoverSettings*                                  MoveSettings;                                            // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTTask_FindPointNearCeiling
	 * Size -> 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
	 */
	class UBTTask_FindPointNearCeiling : public UBTTask_BlackboardBase
	{
	public:
		float                                                      CloseToCeilingBias;                                      // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LookForCeilingLength;                                    // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SearchRadius;                                            // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J1KP[0x4];                                   // 0x00A4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTTask_FindPointNearTarget
	 * Size -> 0x0068 (FullSize[0x00D8] - InheritedSize[0x0070])
	 */
	class UBTTask_FindPointNearTarget : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0070(0x0028) Edit, NativeAccessSpecifierPrivate
		struct FBlackboardKeySelector                              LocationKey;                                             // 0x0098(0x0028) Edit, NativeAccessSpecifierPrivate
		float                                                      Distance;                                                // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             ManualOffset;                                            // 0x00C4(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       FromCenterOfMass;                                        // 0x00D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7GY0[0x7];                                   // 0x00D1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTTask_MoveToTarget
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UBTTask_MoveToTarget : public UBTTask_BlackboardBase
	{
	public:
		float                                                      AcceptableRadius;                                        // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ToCenterOfMass;                                          // 0x009C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IHGY[0x3];                                   // 0x009D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTTask_MoveToSlot
	 * Size -> 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
	 */
	class UBTTask_MoveToSlot : public UBTTask_BlackboardBase
	{
	public:
		float                                                      AcceptableRadius;                                        // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LookAheadTime;                                           // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VerticalOffset;                                          // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UpdateRate;                                              // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTTask_SetAttacking
	 * Size -> 0x0028 (FullSize[0x0098] - InheritedSize[0x0070])
	 */
	class UBTTask_SetAttacking : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTTask_TriggerAI
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class UBTTask_TriggerAI : public UBTTaskNode
	{
	public:
		class FName                                                TriggerName;                                             // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTTask_MessageAI
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class UBTTask_MessageAI : public UBTTaskNode
	{
	public:
		class FName                                                MessageName;                                             // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTTask_SetCondition
	 * Size -> 0x0030 (FullSize[0x00A0] - InheritedSize[0x0070])
	 */
	class UBTTask_SetCondition : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              ConditionalKey;                                          // 0x0070(0x0028) Edit, NativeAccessSpecifierPrivate
		bool                                                       Value;                                                   // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VDYM[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BuildRestriction
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UBuildRestriction : public UDataAsset
	{
	public:
		int32_t                                                    BuildType;                                               // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Platform;                                                // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BurrowComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UBurrowComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_8RHM[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (PADDING)

	public:
		void Unburrow(class UAnimMontage* customMontage);
		void CallBurrow(bool isBurrowing, class UAnimMontage* customMontage);
		void Burrow(class UAnimMontage* customMontage);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BurstWeapon
	 * Size -> 0x0038 (FullSize[0x0788] - InheritedSize[0x0750])
	 */
	class ABurstWeapon : public AAmmoDrivenWeapon
	{
	public:
		class UDamageComponent*                                    Damage;                                                  // 0x0750(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    BurstFireBonusDamage;                                    // 0x0758(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5S6Y[0x28];                                  // 0x0760(0x0028) MISSED OFFSET (PADDING)

	public:
		void OnTargetDamaged(class UHealthComponentBase* Health, float Amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial);
		void OnReadyToFire();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CalldownItem
	 * Size -> 0x0060 (FullSize[0x0430] - InheritedSize[0x03D0])
	 */
	class ACalldownItem : public AAnimatedItem
	{
	public:
		class UClass*                                              ItemPlacerClass;                                         // 0x03D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              SupplyPodClass;                                          // 0x03D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UResourceData*                                       ResouceRequired;                                         // 0x03E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                OrderDescription;                                        // 0x03E8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                LogText;                                                 // 0x0400(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UClass*                                              ResupplyBeacon;                                          // 0x0418(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemPlacerAggregator*                               ItemPlacerInstance;                                      // 0x0420(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CoolDown;                                                // 0x0428(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CooldownRemaining;                                       // 0x042C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Server_Call_Resupply(const struct FVector& Location);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Campaign
	 * Size -> 0x0188 (FullSize[0x01B0] - InheritedSize[0x0028])
	 */
	class UCampaign : public UObject
	{
	public:
		bool                                                       HasMissions;                                             // 0x0028(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RPFE[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UCampaignMission*>                            missions;                                                // 0x0030(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<class UReward*>                                     RewardsOnCampaignStart;                                  // 0x0040(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<class UReward*>                                     RewardsOnCompletion;                                     // 0x0050(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    CampaignCompleteShout;                                   // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UCampaignRequirement*>                        Requirements;                                            // 0x0068(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<class UCampaignRequirement*>                        VisibilityRequirements;                                  // 0x0078(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UPlayerCharacterID*                                  RequiredCharacterID;                                     // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UDifficultySetting*>                          RestrictedToDifficulties;                                // 0x0090(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    Progress;                                                // 0x00A0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Seed;                                                    // 0x00A4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGuid                                               SavegameID;                                              // 0x00A8(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CanAbort;                                                // 0x00B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CanSkip;                                                 // 0x00B9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TPU3[0x6];                                   // 0x00BA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                TitlePrefix;                                             // 0x00C0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                Title;                                                   // 0x00D8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                DescriptionHeader;                                       // 0x00F0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                Description;                                             // 0x0108(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                RewardText;                                              // 0x0120(0x0018) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class FText                                                RewardFlavorText;                                        // 0x0138(0x0018) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		unsigned char                                              Picture[0x28];                                           // 0x0150(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		ECampaignType                                              campaigntype;                                            // 0x0178(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AD9M[0x7];                                   // 0x0179(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMissionStat*                                        CampaignCompletedMissionStat;                            // 0x0180(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGameActivityAssignmentType*                         CampaignActivity;                                        // 0x0188(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              ReplacesOldCampaignCampaign;                             // 0x0190(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECampaignMutators                                          Mutators;                                                // 0x0198(0x0001) ELEMENT_SIZE_MISMATCH Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BXZP[0x3];                                   // 0x0199(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		unsigned char                                              UnknownData_XOUF[0x4];                                   // 0x019C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMissionWarning*>                             BannedWarnings;                                          // 0x01A0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		bool IsComplete();
		bool IsCampaignComplete(class UObject* WorldContext, class UClass* Campaign);
		class UCampaign* GetReference(class UClass* Campaign);
		class UCampaignMission* GetPreviousMission();
		class UTexture2D* GetPicture();
		class FText GetCampaignTitle(class UClass* Campaign);
		class UCampaignMission* GetActiveMission();
		bool CanStartCampaign(class AFSDPlayerController* Player);
		bool CanSeeCampaign(class APlayerController* PlayerController);
		bool AreRestrictionsMet(class AFSDPlayerController* Player, class UDifficultySetting* optionalDifficulty);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CampaignManager
	 * Size -> 0x0190 (FullSize[0x01B8] - InheritedSize[0x0028])
	 */
	class UCampaignManager : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnCampaignCompleted;                                     // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCampaignChanged;                                       // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              MainCampaign;                                            // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      WeeklyCampaigns;                                         // 0x0050(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      MatrixCoreHuntCampaigns;                                 // 0x0060(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      SideCampaigns;                                           // 0x0070(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      EventCampaigns;                                          // 0x0080(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UCampaign*                                           ActiveCampaign;                                          // 0x0090(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NumFailedRequests;                                       // 0x0098(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       WeeklyBackendDataValid;                                  // 0x009C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HNFL[0x3];                                   // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    WeeklyBackendSeed;                                       // 0x00A0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TU44[0x4];                                   // 0x00A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           WeeklyBackendExpirationTime;                             // 0x00A8(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDateTime                                           LastRequestTime;                                         // 0x00B0(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NL22[0x100];                                 // 0x00B8(0x0100) MISSED OFFSET (PADDING)

	public:
		void StartNewCampaign(class UClass* campaignClass, class UFSDSaveGame* SaveGame);
		void SkipMainCampaign(class UObject* WorldContextObject);
		void OnEventsRefreshed();
		bool IsWeeklyCampaignCompleted(class UObject* WorldContext, ECampaignType campaigntype);
		bool IsInCampaignMission(class AFSDPlayerController* Player);
		bool IsCampaignRestrictionsMet(class UObject* WorldContextObject, class UGeneratedMission* mission, class UDifficultySetting* optionalDifficulty);
		bool IsCampaignMission(class UObject* WorldContextObject, class UGeneratedMission* mission);
		bool IsActiveCampaign(class UCampaign* Campaign);
		TArray<class UClass*> GetUncompletedCampaigns(class AFSDPlayerController* Player);
		TArray<class UClass*> GetCompletedSideCampaigns(class AFSDPlayerController* Player);
		class UGeneratedMission* GetCampaingMissionFromSeeds(class UObject* WorldContextObject, int32_t GlobalSeed, int32_t MissionSeed);
		class UGeneratedMission* GetCampaingMission(TArray<class UGeneratedMission*> missions, int32_t MissionSeed);
		void CompleteCampaignWithNoMissions(class UClass* campaignClass, class UFSDSaveGame* SaveGame);
		void CampaignCompletedDelegate__DelegateSignature();
		void CampaignChangedDelegate__DelegateSignature();
		void AbortActiveCampaign(class UFSDSaveGame* SaveGame);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CampaignMission
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UCampaignMission : public UDataAsset
	{
	public:
		class UPlanetZone*                                         PlanetZone;                                              // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRequiredMissionItem                                mission;                                                 // 0x0038(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<class UReward*>                                     Rewards;                                                 // 0x0058(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    MissionCompleteShout;                                    // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       OverrideMutators;                                        // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QLQ7[0x3];                                   // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECampaignMutators                                          MutatorOverride;                                         // 0x0074(0x0001) ELEMENT_SIZE_MISMATCH Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TEU2[0x3];                                   // 0x0075(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TArray<class UMissionWarning*>                             AllowedWarnings;                                         // 0x0078(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		class UMissionTemplate* GetMissionTemplate();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CampaignRequirement
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCampaignRequirement : public UObject
	{
	public:
		bool IsRequirementMet(class AFSDPlayerController* Player, class UCampaign* Campaign);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ValidWeeklySeedCampaignRequirement
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UValidWeeklySeedCampaignRequirement : public UCampaignRequirement
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaracterLevelCampaignRequirement
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UCaracterLevelCampaignRequirement : public UCampaignRequirement
	{
	public:
		class UPlayerCharacterID*                                  characterID;                                             // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelRequirement;                                        // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_41ZB[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerRankCampaignRequirement
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UPlayerRankCampaignRequirement : public UCampaignRequirement
	{
	public:
		int32_t                                                    RankRequirement;                                         // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P88S[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RetirementCampaignRequirement
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class URetirementCampaignRequirement : public UCampaignRequirement
	{
	public:
		class UPlayerCharacterID*                                  characterID;                                             // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelRequirement;                                        // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PGP5[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeeklyTimerCampaignRequirement
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UWeeklyTimerCampaignRequirement : public UCampaignRequirement
	{
	public:
		struct FTimespan GetWeeklyTimeLeft(class AFSDPlayerController* Player);
		struct FTimespan GetTimeUntillNewCampaign(class AFSDPlayerController* Player);
		bool GetHasCompleted(class UCampaign* Campaign, class AFSDPlayerController* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnyRetiredCampaignRequirement
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAnyRetiredCampaignRequirement : public UCampaignRequirement
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CamapaignCompletedRequirement
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UCamapaignCompletedRequirement : public UCampaignRequirement
	{
	public:
		class UClass*                                              Campaign;                                                // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       InverseRequirement;                                      // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HAP9[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CapacityBasedItemAggregator
	 * Size -> 0x0078 (FullSize[0x0140] - InheritedSize[0x00C8])
	 */
	class UCapacityBasedItemAggregator : public UItemAggregator
	{
	public:
		class FScriptMulticastDelegate                             OnCurrentAmountChanged;                                  // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMaxAmountChanged;                                      // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClipAndTotalChanged;                                   // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReloadTimeChanged;                                     // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReloadComplete;                                        // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReloadStarted;                                         // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMaxAmmoCapacityChanged;                                // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       showClipCount;                                           // 0x0138(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D27Z[0x7];                                   // 0x0139(0x0007) MISSED OFFSET (PADDING)

	public:
		void ReloadStarted();
		void ReloadComplete();
		int32_t GetMaxAmount();
		int32_t GetCurrentAmount();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CapacityHoldingItemAggregator
	 * Size -> 0x0020 (FullSize[0x0160] - InheritedSize[0x0140])
	 */
	class UCapacityHoldingItemAggregator : public UCapacityBasedItemAggregator
	{
	public:
		unsigned char                                              UnknownData_297T[0x10];                                  // 0x0140(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxAmmo;                                                 // 0x0150(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AmmoCount;                                               // 0x0154(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseRejoin;                                               // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I2Y5[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		void UseAmmo(int32_t Count);
		void SetMaxAmmo(int32_t InMaxAmmo, bool InChangeCurrentAmount);
		void Resupply(float percentage);
		void OnRep_MaxAmmo();
		void OnRep_AmmoCount();
		void AddAmmo(int32_t Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CappedResource
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UCappedResource : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnChanged;                                               // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIncreased;                                             // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFull;                                                  // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UResourceData*                                       Data;                                                    // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      currentAmount;                                           // 0x0060(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxAmount;                                               // 0x0064(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TotalCollected;                                          // 0x0068(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FullFlag;                                                // 0x006C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OPP7[0x8];                                   // 0x0070(0x0008) MISSED OFFSET (PADDING)

	public:
		float TransferAll(class UCappedResource* Receiver);
		float Transfer(float Amount, class UCappedResource* Receiver);
		void OnRep_FullFlag(int32_t OldValue);
		void OnRep_CurrentAmount(float OldAmount);
		bool IsObjectiveResource(class UObject* WorldContext, bool* IsCompleted);
		bool IsFull();
		bool isEmpty();
		bool IsCraftingResource();
		class FText GetTitle();
		struct FColor GetColor();
		float GetCapacityPct();
		float Deduct(float Amount);
		float Add(float Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HitscanBaseComponent
	 * Size -> 0x0138 (FullSize[0x0248] - InheritedSize[0x0110])
	 */
	class UHitscanBaseComponent : public UWeaponFireComponent
	{
	public:
		class FScriptMulticastDelegate                             OnSpreadChanged;                                         // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFireComplete;                                          // 0x0120(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		float                                                      SpreadPerShot;                                           // 0x0130(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_89LB[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageComponent*                                    DamageComponent;                                         // 0x0138(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseDamageComponent;                                      // 0x0140(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9IOH[0x3];                                   // 0x0141(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Damage;                                                  // 0x0144(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      armorDamageMultiplier;                                   // 0x0148(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AR81[0x4];                                   // 0x014C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageClass*                                        DamageClass;                                             // 0x0150(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WeakpointDamageMultiplier;                               // 0x0158(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxPenetrations;                                         // 0x015C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EImpactDecalSize                                           ImpactDecalSize;                                         // 0x0160(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_34K4[0x3];                                   // 0x0161(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FriendlyFireModifier;                                    // 0x0164(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseDynamicSpread;                                        // 0x0168(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LOAR[0x7];                                   // 0x0169(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      IgnoredActorsInTrace;                                    // 0x0170(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		float                                                      MinSpread;                                               // 0x0180(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinSpreadWhenMoving;                                     // 0x0184(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinSpreadWhenSprinting;                                  // 0x0188(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxSpread;                                               // 0x018C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  SpreadCurve;                                             // 0x0190(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      SpreadRecoveryPerSecond;                                 // 0x0218(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7Y2Z[0x8];                                   // 0x021C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VerticalSpreadMultiplier;                                // 0x0224(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HorizontalSpredMultiplier;                               // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxVerticalSpread;                                       // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxHorizontalSpread;                                     // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VV0F[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ERicochetBehavior                                          RicochetBehavior;                                        // 0x0238(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B9T3[0x3];                                   // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RicochetChance;                                          // 0x023C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RicochetOnWeakspotOnly;                                  // 0x0240(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1BD4[0x3];                                   // 0x0241(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RicochetMaxRange;                                        // 0x0244(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Server_StopFire();
		void Server_RemoveDebris(int32_t instance, int32_t Component);
		float GetCurrentVerticalSpread();
		float GetCurrentHorizontalSpread();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CapsuleHitscanComponent
	 * Size -> 0x0108 (FullSize[0x0350] - InheritedSize[0x0248])
	 */
	class UCapsuleHitscanComponent : public UHitscanBaseComponent
	{
	public:
		class ADamageEnhancer*                                     DamageEnhancer;                                          // 0x0248(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XS58[0x10];                                  // 0x0250(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnHitEffect;                                             // 0x0260(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClosestHit_Client;                                     // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WG1Y[0x4];                                   // 0x0280(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      range;                                                   // 0x0284(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Width;                                                   // 0x0288(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2MAS[0x1C];                                  // 0x028C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ShowPhysMatImpact;                                       // 0x02A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowPhysMatDecal;                                        // 0x02A9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PlayPhysMatSound;                                        // 0x02AA(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MKCA[0x5];                                   // 0x02AB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ActorsInCapsule[0x50];                                   // 0x02B0(0x0050) UNKNOWN PROPERTY: SetProperty
		TArray<class AActor*>                                      DamagedActorCache;                                       // 0x0300(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      ActorsHit;                                               // 0x0310(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		struct FMultiHitScanHits                                   Hits;                                                    // 0x0320(0x0030) Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void Server_RegisterHit(const struct FMultiHitScanHits& hitResults);
		void All_ShowHit(const struct FMultiHitScanHits& hitResults);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Caretaker
	 * Size -> 0x00B8 (FullSize[0x03B0] - InheritedSize[0x02F8])
	 */
	class ACaretaker : public AFSDPawn
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x02F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              Body;                                                    // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class USkeletalMeshComponent*>                      Eyes;                                                    // 0x0308(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<class UPassthroughSubHealthComponent*>              subHealth;                                               // 0x0318(0x0010) Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UHealthDamageTracker*                                DamageTracker;                                           // 0x0328(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UEnemyHealthComponent*                               Health;                                                  // 0x0330(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnStatsComponent*                                 PawnStats;                                               // 0x0338(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UCaretakerActionComponent*>                   Actions;                                                 // 0x0340(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UCaretakerActionComponent*                           CurrentAction;                                           // 0x0350(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UAnimSequenceBase*>                           HitReactions;                                            // 0x0358(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    CurrentStage;                                            // 0x0368(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TargetRotationRate;                                      // 0x036C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_59BD[0x8];                                   // 0x0370(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              RotationRates;                                           // 0x0378(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      Server_Rotation;                                         // 0x0388(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInStageCooldown;                                       // 0x038C(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsWeakpointAVisible;                                     // 0x038D(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsWeakpointBVisible;                                     // 0x038E(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsWeakpointCVisible;                                     // 0x038F(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsWeakpointDVisible;                                     // 0x0390(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECaretakerSpawnType                                        ActiveSpawnType;                                         // 0x0391(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y1RF[0x2];                                   // 0x0392(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AoEStage;                                                // 0x0394(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TJFN[0x11];                                  // 0x0398(0x0011) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int8_t                                                     OpenEye;                                                 // 0x03A9(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1TX5[0x6];                                   // 0x03AA(0x0006) MISSED OFFSET (PADDING)

	public:
		void WakeUp();
		void SetTargetRotationRate(int32_t rateIndex);
		void OpenRandomEye(bool forbidLastEye);
		void OnStartHideFromDamage();
		void OnRep_Server_Rotation();
		void OnRep_OpenEye();
		void OnRep_CurrentStage();
		void OnNewStage(int32_t stageIndex);
		void OnEyeOpened(class USkeletalMeshComponent* eye);
		void OnEyeClosed(class USkeletalMeshComponent* eye);
		void OnDamageTaken(float Amount);
		bool IsAwake();
		bool IsAnyEyeOpen();
		void InitiateNextStage();
		void InitCaretakerActions(TArray<class UCaretakerActionComponent*> carettakeractions);
		void CloseAllEyes();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaretagerBodyAnimInstance
	 * Size -> 0x0018 (FullSize[0x0320] - InheritedSize[0x0308])
	 */
	class UCaretagerBodyAnimInstance : public UEnemyAnimInstance
	{
	public:
		unsigned char                                              UnknownData_ZGTY[0x8];                                   // 0x0308(0x0008) Fix Super Size
		float                                                      RotationAngle;                                           // 0x0310(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AoEStage;                                                // 0x0314(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSpawningDrones;                                        // 0x0318(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSpawningBombs;                                         // 0x0319(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSpawningShredders;                                     // 0x031A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSpawningTurrets;                                       // 0x031B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U4W4[0x4];                                   // 0x031C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaretakerEyeAnimInstance
	 * Size -> 0x0008 (FullSize[0x0310] - InheritedSize[0x0308])
	 */
	class UCaretakerEyeAnimInstance : public UEnemyAnimInstance
	{
	public:
		unsigned char                                              UnknownData_WFC2[0x8];                                   // 0x0308(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaretakerActionComponent
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UCaretakerActionComponent : public UActorComponent
	{
	public:
		bool                                                       StartTickOnUse;                                          // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsUsing;                                                 // 0x00B1(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5V4G[0x6];                                   // 0x00B2(0x0006) MISSED OFFSET (PADDING)

	public:
		void UseAction();
		void TriggerAction();
		void StopUsing();
		void OnTriggered();
		void OnStopped();
		void OnStarted();
		void OnRep_IsUsing();
		class ACaretaker* GetCaretaker();
		bool CanUse();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UsableComponentBase
	 * Size -> 0x0048 (FullSize[0x00F8] - InheritedSize[0x00B0])
	 */
	class UUsableComponentBase : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnClientBeginUse;                                        // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    CallbackKeys;                                            // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UseCooldown;                                             // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUseAnimationSetting*                                AnimationSettings;                                       // 0x00C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Priority;                                                // 0x00D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EKVO[0x4];                                   // 0x00D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     RestrictToCollider;                                      // 0x00D8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UsableHidesPlaceables;                                   // 0x00E0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsRayTraceTriggered;                                     // 0x00E1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ResetUsingOnCompletion;                                  // 0x00E2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7SX2[0x5];                                   // 0x00E3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUseConditionSet*                                    UseConditions;                                           // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsClientPredictive;                                      // 0x00F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ThirdPersonWhileUsing;                                   // 0x00F1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NXR2[0x6];                                   // 0x00F2(0x0006) MISSED OFFSET (PADDING)

	public:
		void SetUseRestrictions(class UUseConditionSet* set);
		void SetRayTraceTriggered(bool rayTraceTriggered);
		void SetAnimationSettings(class UUseAnimationSetting* Settings);
		class FText GetUseText(class APlayerCharacter* User);
		float GetUseProgressInPercent(class APlayerCharacter* User);
		class UTexture2D* GetUsableIcon();
		bool GetShowUsingUI();
		bool GetIsRayTraceTriggerd();
		bool GetHideProgressBar(class APlayerCharacter* User);
		bool GetHideActionText(class APlayerCharacter* User);
		void EndUse(class APlayerCharacter* User);
		void BeginUse(class APlayerCharacter* User, EInputKeys Key);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UsableComponent
	 * Size -> 0x0028 (FullSize[0x0120] - InheritedSize[0x00F8])
	 */
	class UUsableComponent : public UUsableComponentBase
	{
	public:
		class UDialogDataAsset*                                    ShoutBegin;                                              // 0x00F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                UseText;                                                 // 0x0100(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		bool                                                       ResetOnFail;                                             // 0x0118(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SwitchToUsingState;                                      // 0x0119(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GGOU[0x6];                                   // 0x011A(0x0006) MISSED OFFSET (PADDING)

	public:
		void SetUseText(const class FText& NewText);
		bool HasDuration();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InstantUsable
	 * Size -> 0x0050 (FullSize[0x0170] - InheritedSize[0x0120])
	 */
	class UInstantUsable : public UUsableComponent
	{
	public:
		class FScriptMulticastDelegate                             OnUsedBy;                                                // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUsableChanged;                                         // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YV37[0x10];                                  // 0x0140(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bShowUsingUI;                                            // 0x0150(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MS7T[0x7];                                   // 0x0151(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           AudioCompletedUse;                                       // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseDelayedAudio;                                         // 0x0160(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZGP8[0x3];                                   // 0x0161(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AudioDelay;                                              // 0x0164(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RefreshDelayOnNewUse;                                    // 0x0168(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Usable;                                                  // 0x0169(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TurnOffAfterUse;                                         // 0x016A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N72Q[0x5];                                   // 0x016B(0x0005) MISSED OFFSET (PADDING)

	public:
		void SetCanUse(bool CanUse);
		void OnRep_Usable();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CarriableInstantUsable
	 * Size -> 0x0000 (FullSize[0x0170] - InheritedSize[0x0170])
	 */
	class UCarriableInstantUsable : public UInstantUsable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CarriableComponent
	 * Size -> 0x0098 (FullSize[0x0148] - InheritedSize[0x00B0])
	 */
	class UCarriableComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_S24K[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPickedUp;                                              // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDropped;                                               // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              ShoutWhileCarrying[0x28];                                // 0x00D8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UItemCharacterAnimationSet*                          OverrideCarryAnimationSet;                               // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUseAnimationSetting*                                OverrideThrowAnimationSet;                               // 0x0108(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class APlayerCharacter*                                    CarriedBy;                                               // 0x0110(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Offset;                                                  // 0x0118(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WG0S[0x24];                                  // 0x0124(0x0024) MISSED OFFSET (PADDING)

	public:
		bool PickupItem(class APlayerCharacter* byCharacter);
		void DropItem();
		void AttachChanged(bool Attached, const struct FVector& PrevScale);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourceCreator
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UResourceCreator : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CarvedResourceCreator
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class UCarvedResourceCreator : public UResourceCreator
	{
	public:
		class UCarvedResourceData*                                 Resource;                                                // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ScaleToResourceDistribution;                             // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7G4J[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDebrisPositioning*                                  Positioning;                                             // 0x0040(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FIRandRange                                         NumCarvers;                                              // 0x0048(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ExpensiveNoise;                                          // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CarveOffsetRadius;                                       // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              SpawnAttachClass;                                        // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AttachSpawnOffsetDistance;                               // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3SL1[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTerrainMaterial*                                    TerrainMaterial;                                         // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECarveFilterType                                           Filter;                                                  // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECarveOptionsCellSize                                      CarveCellSize;                                           // 0x0071(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YL20[0x6];                                   // 0x0072(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FUDebrisCarveMesh>                           Meshes;                                                  // 0x0078(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FResourceDebris>                             Debris;                                                  // 0x0088(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourceData
	 * Size -> 0x00C0 (FullSize[0x00F0] - InheritedSize[0x0030])
	 */
	class UResourceData : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_W3WB[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                Title;                                                   // 0x0038(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                TitlePlural;                                             // 0x0050(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                Description;                                             // 0x0068(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FColor                                              Color;                                                   // 0x0080(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9CW8[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          Icon;                                                    // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    BuyingPrice;                                             // 0x0090(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SellingPrice;                                            // 0x0094(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMissionStat*                                        MinedMissionStat;                                        // 0x0098(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsCraftingMaterial;                                      // 0x00A0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsTradable;                                              // 0x00A1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ForceShowOnEndScreen;                                    // 0x00A2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AffectedByMutators;                                      // 0x00A3(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ScaleToMissionLength;                                    // 0x00A4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ScaleToHazardLevel;                                      // 0x00A5(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ShowSeparatelyInEndScreen;                               // 0x00A6(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1H8Q[0x1];                                   // 0x00A7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              Spawnable[0x28];                                         // 0x00A8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		bool                                                       IsWholeNumberResource;                                   // 0x00D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CVYD[0x3];                                   // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CreditValue;                                             // 0x00D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    XPValue;                                                 // 0x00D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SeasonXPMultiplier;                                      // 0x00DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGuid                                               SavegameID;                                              // 0x00E0(0x0010) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		float GetOwnedAmount(class UObject* WorldContextObject);
		bool GetIsTradableCraftingMaterial();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CarvedResourceData
	 * Size -> 0x0030 (FullSize[0x0120] - InheritedSize[0x00F0])
	 */
	class UCarvedResourceData : public UResourceData
	{
	public:
		unsigned char                                              CarvedResourceCreator[0x28];                             // 0x00F0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      UnitsPerCarver;                                          // 0x0118(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PATA[0x4];                                   // 0x011C(0x0004) MISSED OFFSET (PADDING)

	public:
		class UCarvedResourceCreator* LoadResourceCreator();
		float GetUnitsPerCarver();
		float GetTargetAmount(class AProceduralSetup* pls);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaveEntranceComponent
	 * Size -> 0x0010 (FullSize[0x0460] - InheritedSize[0x0450])
	 */
	class UCaveEntranceComponent : public UPrimitiveComponent
	{
	public:
		ECaveEntranceType                                          Direction;                                               // 0x0450(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECaveEntrancePriority                                      Priority;                                                // 0x0451(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B91K[0xE];                                   // 0x0452(0x000E) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaveEntrance
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ACaveEntrance : public AGenerationItem
	{
	public:
		class UCaveEntranceComponent*                              CaveEntranceComponent;                                   // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECaveEntranceType                                          EntranceType;                                            // 0x0230(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasBeenConverted;                                        // 0x0231(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4DBY[0x6];                                   // 0x0232(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawnResourceGenerationItem
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASpawnResourceGenerationItem : public AGenerationItem
	{
	public:
		class UResourceData*                                       Resource;                                                // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BaseAmount;                                              // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5A8P[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent*                                    Sphere;                                                  // 0x0238(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawnActorGenerationItem
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASpawnActorGenerationItem : public AGenerationItem
	{
	public:
		class UClass*                                              ActorToSpawn;                                            // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       Box;                                                     // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawnTriggerItem
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASpawnTriggerItem : public AGenerationItem
	{
	public:
		class UClass*                                              Trigger;                                                 // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                Message;                                                 // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SubRoomItem
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASubRoomItem : public AGenerationItem
	{
	public:
		class URoomGenerator*                                      RoomGenerator;                                           // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Layer;                                                   // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ITTB[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandomSubRoomItem
	 * Size -> 0x0058 (FullSize[0x0280] - InheritedSize[0x0228])
	 */
	class ARandomSubRoomItem : public AGenerationItem
	{
	public:
		class URoomGeneratorGroup*                                 RoomGroup;                                               // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   tagQuery;                                                // 0x0230(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		int32_t                                                    Layer;                                                   // 0x0278(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N9TI[0x4];                                   // 0x027C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DropPodCalldownLocationItem
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ADropPodCalldownLocationItem : public AGenerationItem
	{
	public:
		class UClass*                                              CalldownClass;                                           // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RoomBurner
	 * Size -> 0x00C0 (FullSize[0x02E0] - InheritedSize[0x0220])
	 */
	class ARoomBurner : public AActor
	{
	public:
		bool                                                       LiveUpdateEditor;                                        // 0x0220(0x0001) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ERoomMirror                                                MirrorTest;                                              // 0x0221(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P0II[0x6];                                   // 0x0222(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class URoomGenerator*                                      RoomGenerator;                                           // 0x0228(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RoomRadius;                                              // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ERoomMirroringSupport                                      MirrorSupport;                                           // 0x0234(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowRoomCollider;                                        // 0x0235(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UYXX[0x2];                                   // 0x0236(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               RoomTags;                                                // 0x0238(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		int32_t                                                    Seed;                                                    // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AOIY[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBiome*                                              Biome;                                                   // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDifficultySetting*                                  Difficulty;                                              // 0x0268(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ForcePlayerCount;                                        // 0x0270(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       GenerateDebris;                                          // 0x0274(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       GenerateItems;                                           // 0x0275(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       GenerateResources;                                       // 0x0276(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SpawnEncounters;                                         // 0x0277(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEnemyDescriptor*                                    TestEnemy;                                               // 0x0278(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TestEnemyCount;                                          // 0x0280(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7BKO[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMissionMutator*                                     TestMutator;                                             // 0x0288(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMissionWarning*>                             TestWarnings;                                            // 0x0290(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class USpecialEvent*                                       TestSpecialEvent;                                        // 0x02A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USpecialEvent*                                       TestTreasure;                                            // 0x02A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionTemplate*                                    MissionTemplate;                                         // 0x02B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionTemplate*                                    CustomMissionTemplate;                                   // 0x02B8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ADeepCSGWorld*                                       CSGWorld;                                                // 0x02C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AProceduralSetup*                                    PLSLiveEditor;                                           // 0x02C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OD44[0x8];                                   // 0x02D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class URoomGenerator*                                      LiveEditRoomGenerator;                                   // 0x02D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SpawnEncounter(class AProceduralSetup* Setup);
		class URoomGenerator* GetRoomGenerator();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InfluenceTester
	 * Size -> 0x0010 (FullSize[0x0230] - InheritedSize[0x0220])
	 */
	class AInfluenceTester : public AActor
	{
	public:
		class UCaveInfluencer*                                     Influencer;                                              // 0x0220(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    Sphere;                                                  // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyPawn
	 * Size -> 0x0050 (FullSize[0x0348] - InheritedSize[0x02F8])
	 */
	class AEnemyPawn : public AFSDPawn
	{
	public:
		unsigned char                                              UnknownData_MIH0[0x8];                                   // 0x02F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnemyHealthComponent*                               Health;                                                  // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPawnStatsComponent*                                 Stats;                                                   // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEnemyPawnAfflictionComponent*                       Affliction;                                              // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEnemyComponent*                                     enemy;                                                   // 0x0318(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                CenterMassSocketName;                                    // 0x0320(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FQueuedMontage                                      QueuedMontage;                                           // 0x0328(0x0010) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<class UMaterialInterface*>                          CachedMaterials;                                         // 0x0338(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		class UMeshComponent* Receive_GetMeshComponent();
		void OnRep_QueuedMontage();
		class USkeletalMeshComponent* GetMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaveLeech
	 * Size -> 0x00B8 (FullSize[0x0400] - InheritedSize[0x0348])
	 */
	class ACaveLeech : public AEnemyPawn
	{
	public:
		unsigned char                                              UnknownData_XZ41[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              SkeletalMesh;                                            // 0x0350(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGrabberComponent*                                   GrabberComponent;                                        // 0x0358(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BiteDamage;                                              // 0x0360(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BitesPerSecond;                                          // 0x0364(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDistanceXY;                                           // 0x0368(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GrapDistance;                                            // 0x036C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GrapDelay;                                               // 0x0370(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TentacleSpeed;                                           // 0x0374(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TentacleRetractSpeed;                                    // 0x0378(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RetractDuration;                                         // 0x037C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TentaclePullSpeed;                                       // 0x0380(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TentacleDropPlayerSpeed;                                 // 0x0384(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TentacleDropGroundDistance;                              // 0x0388(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDropPlayerDuration;                                   // 0x038C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeadInterpSpeed;                                         // 0x0390(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TentacleAttachOffset;                                    // 0x0394(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BiteDistance;                                            // 0x0398(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RevivedGracePeriod;                                      // 0x039C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPawnAffliction*                                     CaveLeechSenseAffliction;                                // 0x03A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CQXE[0x8];                                   // 0x03A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StateTime;                                               // 0x03B0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECaveLeechState                                            State;                                                   // 0x03B4(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_48J8[0x3];                                   // 0x03B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector_NetQuantize                                 TentacleLocation;                                        // 0x03B8(0x000C) BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector_NetQuantize                                 TentacleVelocity;                                        // 0x03C4(0x000C) BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               Target;                                                  // 0x03D0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHealthComponent*                                    HealthTarget;                                            // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     TentacleHead;                                            // 0x03E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6XXO[0x18];                                  // 0x03E8(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnRep_State();
		struct FVector GetTentacleTargetLocation();
		struct FVector GetMouthLocation();
		class AActor* GetCurrentTarget();
		void Died(class UHealthComponentBase* HealthComponent);
		void Damaged(float Amount);
		void BP_OnStateChanged(ECaveLeechState NewState);
		void BP_OnBite(class UHealthComponent* TargetHealth);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaveLeechAnimInstance
	 * Size -> 0x0058 (FullSize[0x0310] - InheritedSize[0x02B8])
	 */
	class UCaveLeechAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_819D[0x8];                                   // 0x02B8(0x0008) Fix Super Size
		class ACaveLeech*                                          CaveLeech;                                               // 0x02C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     CaveLeechHead;                                           // 0x02C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            BaseRotation;                                            // 0x02D0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             BaseLocation;                                            // 0x02DC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             HeadLocation;                                            // 0x02E8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            HeadRotation;                                            // 0x02F4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bIdle;                                                   // 0x0300(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTracking;                                               // 0x0301(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPulling;                                                // 0x0302(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRetracting;                                             // 0x0303(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDying;                                                  // 0x0304(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDead;                                                   // 0x0305(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFrozen;                                                 // 0x0306(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bBiting;                                                 // 0x0307(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_581V[0x8];                                   // 0x0308(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaveObject
	 * Size -> 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
	 */
	class ACaveObject : public AActor
	{
	public:
		bool                                                       CanCharacterStandOn;                                     // 0x0220(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F53N[0x7];                                   // 0x0221(0x0007) MISSED OFFSET (PADDING)

	public:
		void TriggerNetworkUpdate();
		void ResumeNetworkUpdates();
		void Recieve_OnGameStarted();
		void PauseNetworkUpdates();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaveScriptComponent
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UCaveScriptComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaveVine
	 * Size -> 0x0068 (FullSize[0x0288] - InheritedSize[0x0220])
	 */
	class ACaveVine : public AActor
	{
	public:
		ECollisionChannel                                          GroundCollisionChannel;                                  // 0x0220(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GHF9[0x3];                                   // 0x0221(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IdleSwingSpeed;                                          // 0x0224(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChaseSpeed;                                              // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxReach;                                                // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GroundOffset;                                            // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NoiseRadius;                                             // 0x0234(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NoiseSpeed;                                              // 0x0238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MCRZ[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USplineMeshComponent*                                SplineMeshComponent;                                     // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     VineHead;                                                // 0x0248(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             VineVelocity;                                            // 0x0250(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             VineLocation;                                            // 0x025C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             VineStartLocation;                                       // 0x0268(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UHealthComponent>                     Target;                                                  // 0x0274(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K6FZ[0xC];                                   // 0x027C(0x000C) MISSED OFFSET (PADDING)

	public:
		void BP_OnTargetChanged(class UHealthComponent* NewTarget);
		void BP_OnInitialized();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaveWorm
	 * Size -> 0x0020 (FullSize[0x03B0] - InheritedSize[0x0390])
	 */
	class ACaveWorm : public ADeepPathfinderCharacter
	{
	public:
		unsigned char                                              UnknownData_B9FF[0x10];                                  // 0x0390(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USimpleHealthComponent*                              Health;                                                  // 0x03A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SearchChunksRadius;                                      // 0x03A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SearchChunksInterval;                                    // 0x03AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class AResourceChunk* SpawnResource(class UObject* WorldContext, class UResourceData* Data, float Size, const struct FTransform& Transform, const struct FVector& Impulse, const struct FVector& DropOffset);
		void Search();
		void IncrementKillCount(class UHealthComponentBase* HealthComponent);
		void DropResource(class UResourceData* Data, float Size, const struct FVector& Impulse, const struct FVector& DropOffset);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Maggot
	 * Size -> 0x0008 (FullSize[0x0398] - InheritedSize[0x0390])
	 */
	class AMaggot : public ADeepPathfinderCharacter
	{
	public:
		class USimpleHealthComponent*                              HealthComponent;                                         // 0x0390(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CellIdFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCellIdFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterCameraController
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UCharacterCameraController : public UActorComponent
	{
	public:
		float                                                      StartFOV;                                                // 0x00B0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      targetFov;                                               // 0x00B4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetFOVSpeed;                                          // 0x00B8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NFRX[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerCharacter*                                    Character;                                               // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCameraComponent*                                    Camera;                                                  // 0x00C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void ResetFOV(float FadeSpeed);
		void FOVChanged(float NewFOV);
		void FadeToFOVRelative(float targetFov, float FadeSpeed);
		void FadeToFOV(float targetFov, float FadeSpeed);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterIntoxicationComponent
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UCharacterIntoxicationComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnIntoxicationChanged;                                   // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPassOutDrunk;                                          // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class APlayerCharacter*                                    Character;                                               // 0x00D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EIntoxicationState                                         CurrentState;                                            // 0x00D8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QLS0[0x3];                                   // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLerpingPercent                                     IntoxicationPercent;                                     // 0x00DC(0x0008) Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      IntoxicationLerpSpeed;                                   // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeDrunk;                                               // 0x00E8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FCountDownFloat                                     SoberingUpCoolDown;                                      // 0x00EC(0x000C) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              SoberingPercent;                                         // 0x00F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NQ6G[0x7];                                   // 0x00F9(0x0007) MISSED OFFSET (PADDING)

	public:
		void ReceiveStateChange(EIntoxicationState NewState);
		void ReceivePassOutDrunk();
		void ReceiveDrunkTick(float DeltaTime, float DrunkTime);
		void ReceiveDrunkEnd();
		void ReceiveDrunkBegin();
		void PassOutDrunkSignature__DelegateSignature(class APlayerCharacter* Player);
		bool IsPassOutDrunk();
		bool IsOnSpaceRig();
		bool IsLocallyControlled();
		bool IsDrunk();
		void IntoxicationProgressSignature__DelegateSignature(class APlayerCharacter* Player, float Progress);
		bool HasAuthority();
		float GetSoberingUpCoolDown();
		float GetIntoxicationProgressMapped(class UCurveFloat* Curve);
		float GetIntoxicationProgress();
		int32_t GetAlcoholPct(EDrinkableAlcoholStrength Strength);
		void Consume(class UDrinkableDataAsset* Drinkable);
		void ClearIntoxication();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterRecoilComponent
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class UCharacterRecoilComponent : public UActorComponent
	{
	public:
		struct FVector                                             Recoil;                                                  // 0x00B0(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             RecoilVelocity;                                          // 0x00BC(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             PrevError;                                               // 0x00C8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8TGE[0xC];                                   // 0x00D4(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterSettings
	 * Size -> 0x0248 (FullSize[0x0278] - InheritedSize[0x0030])
	 */
	class UCharacterSettings : public UDataAsset
	{
	public:
		unsigned char                                              RankedHeroClasses[0x10];                                 // 0x0030(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TArray<class FText>                                        PlayerRankNames;                                         // 0x0040(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TMap<class UPlayerCharacterID*, class UInventoryList*>     InventoryLists;                                          // 0x0050(0x0050) Edit, NativeAccessSpecifierPublic
		TArray<int32_t>                                            CharacterXPLevels;                                       // 0x00A0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TMap<struct FGuid, class UPlayerCharacterID*>              PlayerCharacterIDMap;                                    // 0x00B0(0x0050) Edit, EditConst, NativeAccessSpecifierPublic
		TArray<class UPlayerCharacterID*>                          PlayerCharacterIDs;                                      // 0x0100(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
		class UPlayerCharacterID*                                  BoscoID;                                                 // 0x0110(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPlayerCharacterID*                                  DefaultCharacterID;                                      // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPlayerCharacterID*                                  DefaultEditorCharacterID;                                // 0x0120(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       NoHead;                                                  // 0x0128(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       DefaultHead;                                             // 0x0130(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       HeadForMasks;                                            // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       ThickNeck;                                               // 0x0140(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       ThinNeck;                                                // 0x0148(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       FlatEars;                                                // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       FaceOnly;                                                // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       EyesOnly;                                                // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              CarriableBagClass[0x28];                                 // 0x0168(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UUseAnimationSetting*                                ThrowItemAnimSettings;                                   // 0x0190(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              CampaignManagerClass[0x28];                              // 0x0198(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		TMap<class UPlayerCharacterID*, class UCharacterVanityItems*> CharacterVanityItems;                                    // 0x01C0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    AutoReloadShout;                                         // 0x0210(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDebrisPositioning*                                  TeleportPositioning;                                     // 0x0218(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              TeleportPlacement;                                       // 0x0220(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UPlayerCharacterID*, class UPlayerCharacterData*> CharacterData;                                           // 0x0228(0x0050) Transient, Protected, NativeAccessSpecifierProtected

	public:
		void PreloadAllInventories(class UAsyncManager* AsyncManager);
		class UPlayerCharacterID* GetPlayerCharacterID(const struct FGuid& ID);
		class UInventoryList* GetInventoryList(class UPlayerCharacterID* characterID);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterSightComponent
	 * Size -> 0x0140 (FullSize[0x01F0] - InheritedSize[0x00B0])
	 */
	class UCharacterSightComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnTargetChanged;                                         // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      TargetMaxDistance;                                       // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECollisionChannel                                          TraceChannel;                                            // 0x00C4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K2XK[0x3];                                   // 0x00C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AActor>>                       IgnoredActors;                                           // 0x00C8(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class APlayerCharacter*                                    Character;                                               // 0x00D8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               TargetActor;                                             // 0x00E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UPrimitiveComponent>                  TargetPrimitive;                                         // 0x00E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class USimpleObjectInfoComponent>           TargetInfo;                                              // 0x00F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UTemperatureComponent>                TargetTemperature;                                       // 0x00F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UPawnAfflictionComponent>             TargetAfflictions;                                       // 0x0100(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TargetHealth[0x10];                                      // 0x0108(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		unsigned char                                              TargetTargetable[0x10];                                  // 0x0118(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		float                                                      TargetTime;                                              // 0x0128(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BN6G[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class UCharacterSightSensorBase>>    TargetSensors;                                           // 0x0130(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		struct FReplicatedCharacterData                            ReplicatedData;                                          // 0x0140(0x0018) Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S5O6[0x98];                                  // 0x0158(0x0098) MISSED OFFSET (PADDING)

	public:
		void TargetChangedSignature__DelegateSignature(class AActor* NewTarget, class UPrimitiveComponent* NewPrimitive);
		void Server_UpdateTarget(class AActor* NewActor, class UPrimitiveComponent* NewPrimitive);
		void RemoveIgnoreActor(class AActor* InActor);
		void GetSightStartAndEnd(float InMaxDistance, struct FVector* OutStartLocation, struct FVector* OutEndLocation);
		void AddIgnoreActor(class AActor* InActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterSightSensorBase
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UCharacterSightSensorBase : public UActorComponent
	{
	public:
		bool                                                       bEnabled;                                                // 0x00B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UKEG[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterSightSensor
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class UCharacterSightSensor : public UCharacterSightSensorBase
	{
	public:
		class FScriptMulticastDelegate                             OnSensorActivated;                                       // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSensorDeactivated;                                     // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      SensorActiveForMinDuration;                              // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinimumDistance;                                         // 0x00DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaximumDistance;                                         // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1QF1[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UPrimitiveComponent*>                         RestrictToColliders;                                     // 0x00E8(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       bSensorActivated;                                        // 0x00F8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_24HS[0x3];                                   // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeActive;                                              // 0x00FC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastSeenTime;                                            // 0x0100(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3F4M[0x4];                                   // 0x0104(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterStateComponent
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UCharacterStateComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_JQY8[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              StateId;                                                 // 0x00B8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FZMK[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerCharacter*                                    Character;                                               // 0x00C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    EnterStateShout;                                         // 0x00C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    ExitStateShout;                                          // 0x00D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    AttentionShout;                                          // 0x00D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerMovementComponent*                            PlayerMovement;                                          // 0x00E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4RJ2[0x18];                                  // 0x00E8(0x0018) MISSED OFFSET (PADDING)

	public:
		void ReceiveStateTick(float DeltaTime);
		void ReceiveStateExit();
		void ReceiveStateEnter();
		bool IsLocallyControlled();
		bool HasAuthority();
		float GetStateTime();
		unsigned char GetStateID();
		bool GetStateActive();
		class UPlayerMovementComponent* GetCharacterMovement();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterUseComponent
	 * Size -> 0x00D8 (FullSize[0x0188] - InheritedSize[0x00B0])
	 */
	class UCharacterUseComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnBeginHoveringEvent;                                    // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndHoveringEvent;                                      // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBeginUsingEvent;                                       // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndUsingEvent;                                         // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDepositingBegin;                                       // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDepositingEnd;                                         // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_852Z[0x4];                                   // 0x0110(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UseDistance;                                             // 0x0114(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FCharacterUseState                                  State;                                                   // 0x0118(0x0010) Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FCharacterUseState                                  LocalState;                                              // 0x0128(0x0010) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FCharacterUseState                                  LastRequestedState;                                      // 0x0138(0x0010) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UUsableComponentBase*                                LastBeginUseUsable;                                      // 0x0148(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S8D4[0x8];                                   // 0x0150(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UUsableComponentBase*>                        UsableComponentsCache;                                   // 0x0158(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UUsableComponentBase*                                HoveringUsable;                                          // 0x0168(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6ROB[0x18];                                  // 0x0170(0x0018) MISSED OFFSET (PADDING)

	public:
		void Server_SetState(const struct FCharacterUseState& NewState);
		void RemoveCustomUsableComponent(class UUsableComponentBase* Usable);
		void OnRep_State(const struct FCharacterUseState& oldState);
		bool IsLookingAtUsable();
		bool IsLookingAtDepositable();
		float GetUseProgress();
		class AActor* GetLookingAtActor();
		bool GetIsUsing();
		bool GetIsDepositing();
		class UUsableComponentBase* GetHoveringUsable();
		class UUsableComponentBase* GetActiveUsable();
		void All_UseEnded(const struct FCharacterUseState& oldState);
		void AddCustomUsableComponent(class UUsableComponentBase* Usable, ECustomUsableType eType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterVanityComponent
	 * Size -> 0x0190 (FullSize[0x0240] - InheritedSize[0x00B0])
	 */
	class UCharacterVanityComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_9BIR[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCharacterVanityItems*                               AvailableVanityItems;                                    // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBeardColorVanityItem*                               ShownBeardColor;                                         // 0x00C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  ArmorMaterial;                                           // 0x00D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  ArmorClothMaterial;                                      // 0x00D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic*                            DynamicSkinMaterial;                                     // 0x00E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EHeadVanityType                                            HeadVanityType;                                          // 0x00E8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6SIY[0x7];                                   // 0x00E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FEquippedVanity                                     EquippedVanity;                                          // 0x00F0(0x0018) Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		class UVanityItem*                                         PreviewedItem;                                           // 0x0108(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UArmorMaterialVanityItem*                            PreviewedArmorMaterial;                                  // 0x0110(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  SkinMaterial;                                            // 0x0118(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FTattooArmorItem>                            Tattoos;                                                 // 0x0120(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UMaterialInterface*>                          CachedMaterials;                                         // 0x0130(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IB0V[0x58];                                  // 0x0140(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       DesireSleevelessArmor;                                   // 0x0198(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F5DV[0x7];                                   // 0x0199(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EVanitySlot, class USkeletalMeshComponent*>           VanityMeshes;                                            // 0x01A0(0x0050) ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0CZA[0x50];                                  // 0x01F0(0x0050) MISSED OFFSET (PADDING)

	public:
		void UpdateMeshes();
		void UpdateEquippedVanity(bool applyItems);
		void SetEquippedVanityInViewer(TArray<class UVanityItem*> Vanity);
		void SetDesireSleevelessArmor(class UObject* WorldContextObject, class UPlayerCharacterID* Character, bool inDesireSleeveless);
		void Server_SetEquippedVanity(const struct FEquippedVanity& equippedItems);
		void Server_SetDesireSleevelessArmor(bool useSleeveless);
		void RemoveMedicalGown();
		class UVanityItem* Receive_GetEquippedVanityItem(class UObject* WorldContextObject, class UPlayerCharacterID* Character, EVanitySlot Slot);
		bool Receive_GetDesireSleevelessArmor(class UObject* WorldContextObject, class UPlayerCharacterID* Character);
		void OnRep_EquippedVanity();
		void OnRep_DesireSleeveless();
		bool HasSpawnedInMedbay();
		class UVanityItem* GetEquippedVanityItem(EVanitySlot Slot, bool ignorePreviewItems);
		bool GetDesireSleevelessArmor();
		class UCharacterVanityItems* GetAvailableVanityItems();
		void EquipMedicalGown();
		void EnforceValidPaintjob();
		void CreateEquippedGear();
		void Client_RemoveMedicalGown();
		void Client_EquipMedicalGown();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterVanityItems
	 * Size -> 0x0130 (FullSize[0x0160] - InheritedSize[0x0030])
	 */
	class UCharacterVanityItems : public UDataAsset
	{
	public:
		TArray<class UHeadVanityItem*>                             HeadItems;                                               // 0x0030(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		class UVanitySchematicBank*                                HeadSchematicBank;                                       // 0x0040(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UBeardVanityItem*>                            BeardItems;                                              // 0x0048(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		class UVanitySchematicBank*                                BeardSchematicBank;                                      // 0x0058(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UArmorVanityItem*>                            ArmorItems;                                              // 0x0060(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		TArray<class UArmorMaterialVanityItem*>                    ArmorMaterialItems;                                      // 0x0070(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		TArray<class UArmorMaterialVanityItem*>                    ArmorMaterialItemsInTreassures;                          // 0x0080(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		TArray<class UEyeBrowsVanityItem*>                         EyebrowsItems;                                           // 0x0090(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		class UVanitySchematicBank*                                EyebrowSchematicBank;                                    // 0x00A0(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMoustacheVanityItem*>                        MoustacheItems;                                          // 0x00A8(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		class UVanitySchematicBank*                                MoustacheSchematicBank;                                  // 0x00B8(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USideburnsVanityItem*>                        SideburnItems;                                           // 0x00C0(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		class UVanitySchematicBank*                                SideburnSchematicBank;                                   // 0x00D0(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UBeardColorVanityItem*>                       BeardMaterialItems;                                      // 0x00D8(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		class UVanitySchematicBank*                                BeardMaterialSchematicBank;                              // 0x00E8(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USkinColorVanityItem*>                        SkinMaterialItems;                                       // 0x00F0(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		class UVanitySchematicBank*                                SkinMaterialSchematicBank;                               // 0x0100(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<EVanitySlot, class UVanityItem*>                      DefaultItems;                                            // 0x0108(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		class UPlayerCharacterID*                                  OwningCharacter;                                         // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SortVanityItems(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, TArray<class UVanityItem*>* VanityItems);
		TArray<class UVanityItem*> GetVanityItems(class UObject* WorldContextObject, EVanitySlot Slot, bool onlyStoreItems, class UPlayerCharacterID* characterID);
		class UVanityItem* GetVanityItem(const struct FGuid& VanityID);
		TArray<class UVanityItem*> GetUnLockedVanityItems(class UObject* WorldContextObject, EVanitySlot Slot, bool onlyStoreItems, class UPlayerCharacterID* characterID);
		TArray<class UVanityItem*> GetLockedVanityItems(class UObject* WorldContextObject, EVanitySlot Slot, class UPlayerCharacterID* characterID);
		TArray<class UVanityItem*> GetItems(EVanitySlot Slot, bool onlyStoreItems);
		class UVanityItem* GetDefaultVanityItem(class UObject* WorldContext, EVanitySlot Slot, class UPlayerCharacterID* characterID);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterSelectionSwitcher
	 * Size -> 0x0000 (FullSize[0x0220] - InheritedSize[0x0220])
	 */
	class ACharacterSelectionSwitcher : public AActor
	{
	public:
		void OnVictoryPoseChanged(class UVictoryPose* VictoryPose);
		void OnVanityItemEquipped(EVanitySlot Slot);
		void Hide();
		class AActor* GetViewerActor();
		class APlayerCharacter* GetActiveCharacter();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ChargedWeapon
	 * Size -> 0x00A8 (FullSize[0x07F8] - InheritedSize[0x0750])
	 */
	class AChargedWeapon : public AAmmoDrivenWeapon
	{
	public:
		class FScriptMulticastDelegate                             OnChargeChanged;                                         // 0x0750(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHeatChanged;                                           // 0x0760(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GE26[0x8];                                   // 0x0770(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        FP_OverheatAnim;                                         // 0x0778(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WeaponOverheatAnim;                                      // 0x0780(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FP_ChargeupMontage;                                      // 0x0788(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_ChargeupMontage;                                      // 0x0790(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      ChargeupParticles;                                       // 0x0798(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemComponent*                                  ChargeupParticleInstance;                                // 0x07A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      ChargeupFireMuzzleFlash;                                 // 0x07A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           NormalFiresound;                                         // 0x07B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           FullyChargedFireSound;                                   // 0x07B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeSpeed;                                             // 0x07C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Charging;                                                // 0x07C4(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AEXY[0x3];                                   // 0x07C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChargeProgress;                                          // 0x07C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ShotCostAtBelowFullCharge;                               // 0x07CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ShotCostAtFullCharge;                                    // 0x07D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ChargedShotsOnly;                                        // 0x07D4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AutoFireWhenOverheated;                                  // 0x07D5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L0IW[0x2];                                   // 0x07D6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TotalHeat;                                               // 0x07D8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1CVE[0x4];                                   // 0x07DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CoolingRate;                                             // 0x07E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeatPerSecondWhileCharging;                              // 0x07E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeatPerSecondWhenCharged;                                // 0x07E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeatPerNormalShot;                                       // 0x07EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeatPerChargedShot;                                      // 0x07F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O7IZ[0x4];                                   // 0x07F4(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetOverheated(bool isOverheated);
		void Server_SetIsCharging(bool isCharging);
		void RecieveStoppedCharging(float ChargeProgress);
		void RecieveStartedCharging();
		void RecieveChargeProgressChanged(float NewChargeProgress);
		void ReceiveOverheatedChanged(bool isOverheated);
		void OnRep_Charging();
		bool GetIsCharging();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ChargedWeaponAnimInstance
	 * Size -> 0x0028 (FullSize[0x02E0] - InheritedSize[0x02B8])
	 */
	class UChargedWeaponAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_83Y2[0x4];                                   // 0x02B8(0x0004) Fix Super Size
		float                                                      ChargeupPlayRate;                                        // 0x02BC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeupPlayRateSpeedChange;                             // 0x02C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargedownPlayRateSpeedChange;                           // 0x02C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxChargeupPlayRate;                                     // 0x02C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZBJS[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AChargedWeapon*                                      Weapon;                                                  // 0x02D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LD46[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileBase
	 * Size -> 0x00D0 (FullSize[0x02F0] - InheritedSize[0x0220])
	 */
	class AProjectileBase : public AActor
	{
	public:
		struct FProjectileImpact                                   ProjectileImpact;                                        // 0x0220(0x0038) Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		bool                                                       IsSpawnedFromWeapon;                                     // 0x0258(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Exploded;                                                // 0x0259(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DoOnImpact;                                              // 0x025A(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DoOnImpact2;                                             // 0x025B(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DoOnImpact3;                                             // 0x025C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DoOnSpawnVar;                                            // 0x025D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QAV6[0x2];                                   // 0x025E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GravityMultiplier;                                       // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YTL3[0x14];                                  // 0x0264(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsDorment;                                               // 0x0278(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JMOE[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent*                                    CollisionComponent;                                      // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DPD8[0x4];                                   // 0x0288(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LifeSpan;                                                // 0x028C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VelocityMultiplier;                                      // 0x0290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AffectedByDifficultySpeedModifier;                       // 0x0294(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SetInitialSpeedToMaxSpeed;                               // 0x0295(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AutoDisableCollisionOnImpact;                            // 0x0296(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KM37[0x1];                                   // 0x0297(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           WhizbySound;                                             // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WhizByCooldown;                                          // 0x02A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WhizByStartDistance;                                     // 0x02A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O7R8[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EOnProjectileImpactBehaviourEnum                           EOnImpactBehaviour;                                      // 0x02B0(0x0001) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2HLJ[0x3];                                   // 0x02B1(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		unsigned char                                              UnknownData_44RA[0x3C];                                  // 0x02B4(0x003C) MISSED OFFSET (PADDING)

	public:
		class UTerrainMaterial* TryGetTerrainMaterial();
		void StopMovement();
		void Server_SetState(const struct FVector_NetQuantize& Position, const struct FVector_NetQuantize& Velocity);
		void Server_Penetrated(const struct FProjectileImpact& Impact);
		void Server_Impacted(const struct FProjectileImpact& Impact);
		void OnUpgradeElementAdded(class UProjectileUpgradeElement* element);
		void OnRep_ProjectileImpact();
		void OnRep_IsDorment(bool wasDorment);
		void OnPenetrated(bool PredictedPenetration, const struct FHitResult& HitResult);
		void OnInitialized();
		void OnImpacted(bool PredictedImpact, const struct FHitResult& HitResult);
		void MakeBouncy();
		void InitState(const struct FVector& ShootDirection, const struct FVector& initialBonusVelocity);
		void InitComponents();
		void IgnoreCollision(class UPrimitiveComponent* otherCollider);
		bool HasImpactAuthority();
		float GetGameTimeSinceActivation();
		int32_t GetBoneIndex();
		void DoOnSpawn();
		void DisableProjectileCollision(class AProjectileBase* projectileA, class AProjectileBase* projectileB);
		void DisableAndDestroy();
		class UFSDPhysicalMaterial* DamageArmor(class UDamageComponent* DamageComponent, const struct FHitResult& HitResult);
		void CustomEvent(class UItemUpgrade* Event);
		void Client_DrawServersDebugPath(const struct FVector& Location);
		void Activate(class AActor* owningActor, const struct FVector& Origin, const struct FVector_NetQuantizeNormal& Direction, const struct FVector_NetQuantizeNormal& initialBonusVelocity);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Projectile
	 * Size -> 0x0050 (FullSize[0x0340] - InheritedSize[0x02F0])
	 */
	class AProjectile : public AProjectileBase
	{
	public:
		struct FProjectileState                                    State;                                                   // 0x02F0(0x0028) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8PGZ[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UseArmorDamageBoneCheck;                                 // 0x0320(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E9HA[0x7];                                   // 0x0321(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      IgnoreActorClasses;                                      // 0x0328(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UFSDProjectileMovementComponent*                     MovementComponent;                                       // 0x0338(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class AProjectileBase* SpawnProjectileFromSelf(class UObject* WorldContextObject, class UClass* ProjectileClass, const struct FVector& Origin, const struct FRotator& velocityDirection);
		class AProjectileBase* SpawnProjectile(class UObject* WorldContextObject, class UClass* ProjectileClass, class APawn* projectileOwner, const struct FVector& Origin, const struct FRotator& velocityDirection);
		class AProjectileBase* SpawnBallisticProjectile(class UObject* WorldContextObject, class UClass* ProjectileClass, class APawn* projectileOwner, const struct FVector& Origin, const struct FVector& Velocity);
		void SetHomingTargetComponent(class USceneComponent* HomingTargetComponent, float Delay);
		void Server_DisableHoming();
		void OnRep_State(const struct FProjectileState& oldState);
		void OnPenetration(const struct FHitResult& HitResult);
		void OnImpact(const struct FHitResult& HitResult);
		void OnBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
		class UFSDPhysicalMaterial* FindBoneIndexFromArmor(const struct FHitResult& HitResult, int32_t* outBoneIndex);
		void DisableHoming();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ChargedProjectile
	 * Size -> 0x0008 (FullSize[0x0348] - InheritedSize[0x0340])
	 */
	class AChargedProjectile : public AProjectile
	{
	public:
		bool                                                       ExplodesWhenDead;                                        // 0x0340(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PersistentExplosion;                                     // 0x0341(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AoEDamageInFlight;                                       // 0x0342(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NHZ9[0x1];                                   // 0x0343(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DirectDamageReduction;                                   // 0x0344(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnAoEDamageEnabled();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ClaimableRewardEntryWidget
	 * Size -> 0x00B8 (FullSize[0x0318] - InheritedSize[0x0260])
	 */
	class UClaimableRewardEntryWidget : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnRewardClaimed;                                         // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FClaimableRewardEntry                               Data;                                                    // 0x0270(0x0090) Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		class FText                                                ButtonText;                                              // 0x0300(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected

	public:
		void WidgetDelegate__DelegateSignature(class UClaimableRewardEntryWidget* EntryWidget);
		void SignalRewardClaimed();
		void SetData(const struct FClaimableRewardEntry& InData);
		void ReceiveMoveIn(float InStartDelay);
		void ReceiveDataChanged();
		void MoveIn(float InStartDelay);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ClaimableRewardViewWidget
	 * Size -> 0x0088 (FullSize[0x02E8] - InheritedSize[0x0260])
	 */
	class UClaimableRewardViewWidget : public UUserWidget
	{
	public:
		struct FClaimableRewardView                                Data;                                                    // 0x0260(0x0088) BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void ReceiveEndFlow();
		void ReceiveDataChanged();
		void ReceiveBeginFlow();
		void EndRewardFlow();
		void BeginRewardFlow(const struct FClaimableRewardView& InViewData);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RessuplyPod
	 * Size -> 0x00C0 (FullSize[0x02E0] - InheritedSize[0x0220])
	 */
	class ARessuplyPod : public AActor
	{
	public:
		unsigned char                                              UnknownData_PJWW[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStateChanged;                                          // 0x0228(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x0238(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		class UDamageComponent*                                    Damage;                                                  // 0x0258(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      KillRadius;                                              // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DropHeight;                                              // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DropDelay;                                               // 0x0268(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MissionShoutDelay;                                       // 0x026C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    ShoutDialogOrderAccepted;                                // 0x0270(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    DialogOrderAccepted;                                     // 0x0278(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    DialogPodArrived;                                        // 0x0280(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PHXP[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDialogDataAsset*                                    CurrentMissionShout;                                     // 0x0290(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             StartLocation;                                           // 0x0298(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             TargetLocation;                                          // 0x02A4(0x000C) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ERessuplyPodState                                          State;                                                   // 0x02B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PVG2[0x3];                                   // 0x02B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TargetDropTime;                                          // 0x02B4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1XBA[0xC];                                   // 0x02B8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ServerDropProgress;                                      // 0x02C4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         DropCurve;                                               // 0x02C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              PlayerSpawnPoint;                                        // 0x02D0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CloseToImpactDistance;                                   // 0x02D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R8D5[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetIdling();
		void RessuplyPodStateDelegate__DelegateSignature(class ARessuplyPod* InPod, ERessuplyPodState InState);
		void OnTunnelBLocked();
		void OnRep_TargetLocation();
		void OnRep_State(ERessuplyPodState oldState);
		void OnDropStarted();
		void OnDroppodImpact();
		void OnDroppodCloseToImpact();
		class AActor* DropToTarget(class UObject* WorldContextObject, class UClass* podClass, const struct FVector& Location, class AActor* requester);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CleanupPod
	 * Size -> 0x0008 (FullSize[0x02E8] - InheritedSize[0x02E0])
	 */
	class ACleanupPod : public ARessuplyPod
	{
	public:
		class USphereComponent*                                    RemovePlagueCollision;                                   // 0x02E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnObjectiveChanged(class UObjective* Objective);
		void ChangedState(class ARessuplyPod* InPod, ERessuplyPodState InState);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RessuplyPodItem
	 * Size -> 0x0060 (FullSize[0x0430] - InheritedSize[0x03D0])
	 */
	class ARessuplyPodItem : public AAnimatedItem
	{
	public:
		class UClass*                                              ResupplyBeacon;                                          // 0x03D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ItemPlacerClass;                                         // 0x03D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemPlacerAggregator*                               ItemPlacerInstance;                                      // 0x03E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              SupplyPodClass;                                          // 0x03E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ResourceCost;                                            // 0x03F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SANJ[0x4];                                   // 0x03F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                OrderDescription;                                        // 0x03F8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                LogText;                                                 // 0x0410(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      CoolDown;                                                // 0x0428(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Used;                                                    // 0x042C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_68DK[0x3];                                   // 0x042D(0x0003) MISSED OFFSET (PADDING)

	public:
		void Server_Call_Resupply(const struct FVector& Location);
		void ReceiveItemPlacerSpawned(class UItemPlacerAggregator* InItemPlacer);
		void OnRep_Used();
		int32_t GetResourceCost(class UObject* WorldContextObject);
		class UItemPlacerAggregator* GetActiveAggregator();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CleanupPodItem
	 * Size -> 0x0028 (FullSize[0x0458] - InheritedSize[0x0430])
	 */
	class ACleanupPodItem : public ARessuplyPodItem
	{
	public:
		unsigned char                                              UnknownData_T4F3[0x8];                                   // 0x0430(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCleaningPodLaunched;                                   // 0x0438(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W7TZ[0x8];                                   // 0x0448(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APlagueControlActor>                  PlagueController;                                        // 0x0450(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateWidget(EPlaceableObstructionType reason, float TimeLeft);
		void Server_Call_CleaningPod(const struct FVector& Location, class APlagueInfectionNode* plagueNode);
		void CallUpdateWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ExampleActor
	 * Size -> 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
	 */
	class AExampleActor : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnExampleUpdatedEvent;                                   // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      Field;                                                   // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5Q8Z[0xC];                                   // 0x0234(0x000C) MISSED OFFSET (PADDING)

	public:
		void Server_ExampleFunction();
		void Client_ExampleFunction();
		void All_ExampleFunction();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CoilgunWeaponTrail
	 * Size -> 0x0060 (FullSize[0x0280] - InheritedSize[0x0220])
	 */
	class ACoilgunWeaponTrail : public AActor
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCapsuleComponent*                                   Collision;                                               // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   Trail;                                                   // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ParticleTrailOffset;                                     // 0x0238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TrailHalgLength;                                         // 0x023C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SpawnFireTrail;                                          // 0x0240(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XRI3[0x7];                                   // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              FireEffect;                                              // 0x0248(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ElectricEffect;                                          // 0x0250(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      EffectsToApply;                                          // 0x0258(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GL7F[0x18];                                  // 0x0268(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnRep_TrailHalfLength();
		void OnRep_SpawnFireTrail();
		void OnInited_Callback();
		void OnActorLeaveTrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnActorEnteredTrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CoilGun
	 * Size -> 0x0288 (FullSize[0x0A80] - InheritedSize[0x07F8])
	 */
	class ACoilGun : public AChargedWeapon
	{
	public:
		class UDamageComponent*                                    DamageComponent;                                         // 0x07F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    OverchargeDamageComponent;                               // 0x0800(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    WeaponBlastDamage;                                       // 0x0808(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    ShotwaveBonusDamage;                                     // 0x0810(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    MoleBonusDamage;                                         // 0x0818(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   FullyChargedParticles;                                   // 0x0820(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   FP_OverchargeIndicatorParticles;                         // 0x0828(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   TP_FullyChargedParticles;                                // 0x0830(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCoilgunTrailSpawner*                                TrailSpawner;                                            // 0x0838(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FContrailSettings                                   TrailSettings;                                           // 0x0840(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PD6R[0x50];                                  // 0x0850(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         ImpactMeshCarver;                                        // 0x08A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      N_ImpactParticles;                                       // 0x08A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ChargeResistanceStatusEffect;                            // 0x08B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ChargeWeaknessStatusEffect;                              // 0x08B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      TrailClasses;                                            // 0x08C0(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      CustomMuzzleFlash;                                       // 0x08D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BDS8[0x8];                                   // 0x08D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              HitActorCache[0x50];                                     // 0x08E0(0x0050) UNKNOWN PROPERTY: SetProperty
		class FName                                                CoilParamName;                                           // 0x0930(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FCoilMaterial>                               DynamicCoilMaterials;                                    // 0x0938(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  CoilColorCurve;                                          // 0x0948(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HUML[0x8];                                   // 0x09D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UStatusEffect*>                               RecordedAilments;                                        // 0x09D8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1G00[0x14];                                  // 0x09E8(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxAfflictionTime;                                       // 0x09FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShotWidth;                                               // 0x0A00(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JLOG[0x4];                                   // 0x0A04(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BonusShotWidth;                                          // 0x0A08(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ImpactFearFactor;                                        // 0x0A0C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZFYC[0x4];                                   // 0x0A10(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverChargedShotMaxPower;                                 // 0x0A14(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxOverchargeTime;                                       // 0x0A18(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OverchargeTimeStep;                                      // 0x0A1C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YQDZ[0x4];                                   // 0x0A20(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BrokenShieldboostDuration;                               // 0x0A24(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinUndercharge;                                          // 0x0A28(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9X5N[0x4];                                   // 0x0A2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TriBustCancelTime;                                       // 0x0A30(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TriBurstShotPowerMultiplier;                             // 0x0A34(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TriBurstAmmoMultiplier;                                  // 0x0A38(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TriBurstShotCarvingMultiplier;                           // 0x0A3C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0BKV[0x20];                                  // 0x0A40(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FirstDynamicIndex;                                       // 0x0A60(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LastDynamicIndex;                                        // 0x0A64(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V2IO[0x18];                                  // 0x0A68(0x0018) MISSED OFFSET (PADDING)

	public:
		void UpdateAfflictions();
		void SetDynamicMaterials();
		void Server_ToggleCharingBonuses(bool Enabled);
		void Server_SpawnTrail(const struct FVector_NetQuantize& Location, const struct FRotator& Rotation, float HalfHeight, bool fireTrailEnabled);
		void Server_SpawnGroundTrail(const struct FVector_NetQuantize& Location, const struct FVector& Direction, float chargeMultiplier);
		void Server_SetShotPower(float Power);
		void Server_RegisterPrimaryHit(class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial, const struct FVector_NetQuantize& Origin, const struct FVector_NetQuantize& Location, int32_t BoneIndex, const struct FShotMultiplier& Multiplier, int32_t mole);
		void Server_RegisterBonusHit(class AActor* Target);
		void Server_RegisterBlastHit(class AActor* Target, const struct FVector_NetQuantize& Location, class UPrimitiveComponent* comp);
		void Server_HitTerrain(const struct FVector_NetQuantize& Location, const struct FVector_NetQuantize& End, float maxCarveDepth);
		void Server_FearTarget(class AActor* Target);
		void Server_ClearAilments();
		void OnTriBurstCancled();
		void OnShieldBrokenBoost();
		void OnShieldBrokeBoostStopped();
		void OnShieldBoostEnded();
		void OnFireKill(class AActor* Target);
		void OnEnemyKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysicalMaterial, bool wasDirectHit);
		void OnDamageTarget(class UHealthComponentBase* Health, float Amount, class UPrimitiveComponent* Component, class UFSDPhysicalMaterial* PhysicalMaterial);
		void OnCharacterShieldBroke(class AActor* brokeChar);
		void OnBulletPathComplete(TArray<struct FBulletPathSegment> Path);
		void All_ShowHit(const struct FVector_NetQuantize& Location, const struct FVector_NetQuantize& Rotation);
		void All_ShieldBroken();
		void All_AdjustTrail(class ACoilgunWeaponTrail* Trail, float Length);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CoilGunAnimInstance
	 * Size -> 0x0050 (FullSize[0x0330] - InheritedSize[0x02E0])
	 */
	class UCoilGunAnimInstance : public UChargedWeaponAnimInstance
	{
	public:
		unsigned char                                              UnknownData_KELC[0x20];                                  // 0x02E0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WindUpSpeed;                                             // 0x0300(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WindDownSpeed;                                           // 0x0304(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxExtention;                                            // 0x0308(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HandleExtend;                                            // 0x030C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxCoilSpeed;                                            // 0x0310(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PBEK[0xC];                                   // 0x0314(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ACoilGun*                                            CoilGun;                                                 // 0x0320(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_38WK[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (PADDING)

	public:
		float GetCoilSpeed(int32_t Index);
		float GetCoilAngle(int32_t Index);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CoilGunTrailSegment
	 * Size -> 0x0010 (FullSize[0x0230] - InheritedSize[0x0220])
	 */
	class ACoilGunTrailSegment : public AActor
	{
	public:
		float                                                      EffectsLife;                                             // 0x0220(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeactivationTime;                                        // 0x0224(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_64UL[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnStartEffects();
		void OnRep_EffectsLife();
		void OnEndEffects();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CoilgunTrailSpawner
	 * Size -> 0x00B0 (FullSize[0x0160] - InheritedSize[0x00B0])
	 */
	class UCoilgunTrailSpawner : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_C83R[0x90];                                  // 0x00B0(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              TrailSegmentClass;                                       // 0x0140(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SegmentSpawnInterval;                                    // 0x0148(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TrailDistance;                                           // 0x014C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TrailSegmentInterval;                                    // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TrailSpawnRange;                                         // 0x0154(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VRJO[0x8];                                   // 0x0158(0x0008) MISSED OFFSET (PADDING)

	public:
		void SpawnSegment();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CollectableResourceCreator
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCollectableResourceCreator : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CollectableResourceData
	 * Size -> 0x0050 (FullSize[0x0140] - InheritedSize[0x00F0])
	 */
	class UCollectableResourceData : public UResourceData
	{
	public:
		class UCollectableResourceCreator*                         ResourceCreator;                                         // 0x00F0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDebrisPositioning*                                  Positioning;                                             // 0x00F8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Rarity;                                                  // 0x0100(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InfluenceRadius;                                         // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              Debris[0x10];                                            // 0x0108(0x0010) UNKNOWN PROPERTY: ArrayProperty
		bool                                                       UseTerrainPlacement;                                     // 0x0118(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9R8H[0x7];                                   // 0x0119(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              CollectableClasses[0x10];                                // 0x0120(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TArray<class UClass*>                                      CollectableClassesLoaded;                                // 0x0130(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterShoutsData
	 * Size -> 0x00D8 (FullSize[0x0108] - InheritedSize[0x0030])
	 */
	class UCharacterShoutsData : public UDataAsset
	{
	public:
		struct FCharacterShouts                                    Shouts;                                                  // 0x0030(0x00D8) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShoutWidget
	 * Size -> 0x0028 (FullSize[0x0288] - InheritedSize[0x0260])
	 */
	class UShoutWidget : public UUserWidget
	{
	public:
		TWeakObjectPtr<class APlayerCharacter>                     Sender;                                                  // 0x0260(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                Text;                                                    // 0x0268(0x0018) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		float                                                      Duration;                                                // 0x0280(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5RCE[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnShout();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CommunicationComponent
	 * Size -> 0x01A8 (FullSize[0x0258] - InheritedSize[0x00B0])
	 */
	class UCommunicationComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnSubtitleShout;                                         // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerShout;                                           // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMissionShout;                                          // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMissionShoutEnd;                                       // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMissionControlFinished;                                // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DNWY[0x10];                                  // 0x0100(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ShoutingEnabled;                                         // 0x0110(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LYQL[0x7];                                   // 0x0111(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ShoutWidgetType;                                         // 0x0118(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCharacterShoutsData*                                CharacterShouts;                                         // 0x0120(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PitchMultiplier;                                         // 0x0128(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinShoutDelay;                                           // 0x012C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CloseRangeShoutDistance;                                 // 0x0130(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9JVN[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UDialogDataAsset*, float>                       DelayedShouts;                                           // 0x0138(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               KillShoutAllowedTags;                                    // 0x0188(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       bMissionControlPaused;                                   // 0x01A8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q75H[0x7];                                   // 0x01A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     MissionControlAudioComponent;                            // 0x01B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UShoutWidget*>                                ActiveShouts;                                            // 0x01B8(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<struct FActiveOutline>                              ActiveOutlines;                                          // 0x01C8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		class APlayerCharacter*                                    Character;                                               // 0x01D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDialogDataAsset*                                    LastShout;                                               // 0x01E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class UAudioComponent>                      ShoutAudioComponent;                                     // 0x01E8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class UDialogDataAsset*, float>                       ShoutHistory;                                            // 0x01F0(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4K8R[0x8];                                   // 0x0240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FMissionShoutQueueItem>                      MissionShoutQueue;                                       // 0x0248(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate

	public:
		void ShoutDelegate__DelegateSignature(class APlayerCharacter* InSender, const class FText& InText, float InDuration);
		void ShoutCustomOrDefault(class UDialogDataAsset* CustomShout, EShoutType DefaultShout);
		void ShoutCustomLocalOnly(class UDialogDataAsset* Shout);
		void ShoutCustomClosestDwarf(class UObject* WorldContext, class UDialogDataAsset* Shout, const struct FVector& TargetLocation);
		void ShoutCustom(class UDialogDataAsset* Shout);
		void Shout(EShoutType Shout);
		void SetMissionControlPaused(bool IsPaused);
		void ServerShout(class UDialogDataAsset* Shout);
		void ServerMissionShout(class UDialogDataAsset* Shout, int32_t Index, bool bPriority);
		class UAudioComponent* PlayPitchedByClass(class UObject* WorldContextObject, class UClass* CharacterClass, class USoundBase* Sound, class UDialogDataAsset* Shout, EShoutType ShoutType, class UAudioComponent* AudioComponent);
		void PlayPitchedAsync(class UDialogDataAsset* Shout, EShoutType ShoutType, bool IgnoreCoolDown, class UAudioComponent* AudioComponent, class UObject* WorldContextObject, float shoutVolumeMultiplier, EAsyncLoadPriority Priority);
		class UAudioComponent* PlayPitched(class USoundBase* Sound, class UDialogDataAsset* Shout, EShoutType ShoutType, bool IgnoreCoolDown, class UAudioComponent* AudioComponent, class UObject* WorldContextObject);
		int32_t MissionShoutLocally(class UObject* WorldContext, class UDialogDataAsset* Shout);
		void MissionShout(class UObject* WorldContext, class UDialogDataAsset* Shout, bool bPriority);
		bool IsMissionControlSpeaking();
		void ClientShout(class APlayerCharacter* Sender, class UDialogDataAsset* Shout, int32_t Index);
		void ClientMissionShout(class UDialogDataAsset* Shout, int32_t Index, bool bPriority);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CommnuityRewardBundle
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UCommnuityRewardBundle : public UDataAsset
	{
	public:
		TArray<struct FCommunityReward>                            Rewards;                                                 // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void AwardRewards(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CommnuityRewardSetup
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UCommnuityRewardSetup : public UDataAsset
	{
	public:
		TArray<class UCommnuityRewardBundle*>                      TierRewards;                                             // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		TMap<class UResourceData*, int32_t> GetResourcesTierOnlyReward(int32_t Tier);
		TMap<class UResourceData*, int32_t> GetResourcesReward(int32_t Tier);
		void AwardTierRewards(class UObject* WorldContext, int32_t Tier);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CommunityGoalCategory
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UCommunityGoalCategory : public UDataAsset
	{
	public:
		class FText                                                Title;                                                   // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CommunityGoalFaction
	 * Size -> 0x00B8 (FullSize[0x00E8] - InheritedSize[0x0030])
	 */
	class UCommunityGoalFaction : public UDataAsset
	{
	public:
		class FText                                                Title;                                                   // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                Description;                                             // 0x0048(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                ShortDescription;                                        // 0x0060(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                JoinHeader;                                              // 0x0078(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                JoinBody;                                                // 0x0090(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          Icon;                                                    // 0x00A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          Frame;                                                   // 0x00B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSlateColor                                         Color;                                                   // 0x00B8(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		EFSDFaction                                                FactionID;                                               // 0x00E0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6JC0[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CommunityGoal
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class UCommunityGoal : public UDataAsset
	{
	public:
		bool                                                       TierValuesAreInitialized;                                // 0x0030(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DPFO[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               SavegameID;                                              // 0x0034(0x0010) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Active;                                                  // 0x0044(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2P7X[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                Title;                                                   // 0x0048(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                MetaDescription;                                         // 0x0060(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UCommunityGoalCategory*                              Category;                                                // 0x0078(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECommunityGoalType                                         CommunityGoalType;                                       // 0x0080(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ERXE[0x3];                                   // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GoalPerMemberTier1;                                      // 0x0084(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GoalPerMemberTier2;                                      // 0x0088(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GoalPerMemberTier3;                                      // 0x008C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCommnuityRewardSetup*                               RewardSetup;                                             // 0x0090(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		float TotalTierProgress(float Value, int32_t Members);
		float TierValue(ECommunityGoalTier Tier, float Value, int32_t Members);
		float TierProgress(ECommunityGoalTier Tier, float Value, int32_t Members);
		float TierGoal(ECommunityGoalTier Tier, int32_t Members);
		int32_t RewardTier(float Value, int32_t Members);
		void IncrementGoal(class UObject* WorldContext, float Value);
		class FText GoalToText(ECommunityGoalType StatType, float Value);
		class FText GetCategoryTitle();
		bool AreTiersInitialized();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CommunityGoalSettings
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UCommunityGoalSettings : public UDataAsset
	{
	public:
		TArray<class UCommunityGoalFaction*>                       ActiveCommunityFactions;                                 // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UCommunityGoal*>                              ActiveCommunityGoals;                                    // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UCommunityGoal*                                      DSMUGoal;                                                // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UCommunityGoal* GetGoal(ECommunityGoalIndex Goal);
		class UCommunityGoal* FindGoal(const class FString& Goal);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CommunityGoalWrapper
	 * Size -> 0x0218 (FullSize[0x0240] - InheritedSize[0x0028])
	 */
	class UCommunityGoalWrapper : public UObject
	{
	public:
		bool                                                       HasCGS;                                                  // 0x0028(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XV1Q[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCommunityGoalStateData                             CGSData;                                                 // 0x002C(0x0010) BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    LastCollectedRewardID;                                   // 0x003C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I3RC[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCommunityFactionData                               FactionData;                                             // 0x0048(0x0038) BlueprintVisible, Transient, NativeAccessSpecifierPublic
		bool                                                       FreeBeerRewardActive;                                    // 0x0080(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HFUI[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFreeBeerRewardChanged;                                 // 0x0088(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KBZ5[0x20];                                  // 0x0098(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SteamTicket;                                             // 0x00B8(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SteamBranch;                                             // 0x00C8(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnFactionsDataReceived;                                  // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnDiscordCGSDataEvent;                                   // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             UICheck;                                                 // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnGoalsInitializedDelegate;                              // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LNHV[0x20];                                  // 0x0118(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       AreAllGoalsInitialized;                                  // 0x0138(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XH6H[0x107];                                 // 0x0139(0x0107) MISSED OFFSET (PADDING)

	public:
		void UpdateAllGoalsInitialized();
		bool RewardReceived();
		void RequestGoalStateData();
		void RequestFactionsData();
		void NextPeriod();
		void InitializeGoalTierTargetValues(class UCommunityGoal* goalToInitialize);
		class UCommunityGoalFaction* GetPlayerCurrentFaction(class UObject* WorldContext);
		void ClaimRewardMessage(class UObject* WorldContext, const struct FCommunityRewardNotification& rewardNotification);
		void ClaimReward();
		void CheckUI();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ControllerIconSettings
	 * Size -> 0x0090 (FullSize[0x00C8] - InheritedSize[0x0038])
	 */
	class UControllerIconSettings : public UDeveloperSettings
	{
	public:
		struct FInputTranslationTable                              InputTranslationTable;                                   // 0x0038(0x0050) Edit, Config, NativeAccessSpecifierPublic
		TArray<struct FActionIconMapping>                          Xbox_KeyIcons;                                           // 0x0088(0x0010) Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FActionIconMapping>                          Playstation_KeyIcons;                                    // 0x0098(0x0010) Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FActionIconMapping>                          Playstation5_KeyIcons;                                   // 0x00A8(0x0010) Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FActionIconMapping>                          MouseKeyboard_KeyIcons;                                  // 0x00B8(0x0010) Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected

	public:
		bool FindMouseKeyboardKeyIcon(const struct FKey& Key, struct FActionIconMapping* KeyIcon);
		bool FindKeyIcon(const struct FKey& Key, struct FActionIconMapping* KeyIcon);
		bool FindControllerKeyIcon(const struct FKey& Key, struct FActionIconMapping* KeyIcon);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ConvertedRobot
	 * Size -> 0x0320 (FullSize[0x06D0] - InheritedSize[0x03B0])
	 */
	class AConvertedRobot : public AEnemyDeepPathfinderCharacter
	{
	public:
		unsigned char                                              UnknownData_OTEE[0x8];                                   // 0x03B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnemyComponent*                                     EnemyComponent;                                          // 0x03B8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnStatsComponent*                                 PawnStats;                                               // 0x03C0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOutlineComponent*                                   outline;                                                 // 0x03C8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHitscanComponent*                                   HitScan;                                                 // 0x03D0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USingleUsableComponent*                              Usable;                                                  // 0x03D8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     TurretRoot;                                              // 0x03E0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              TurretMesh;                                              // 0x03E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPointLightComponent*                                MuzzleFlash;                                             // 0x03F0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USpotLightComponent*                                 SpotLight;                                               // 0x03F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                LightCone;                                               // 0x0400(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                LaserBeam;                                               // 0x0408(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     ShieldRoot;                                              // 0x0410(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                InnerShield;                                             // 0x0418(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                OuterShield;                                             // 0x0420(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAudioComponent*                                     PulsatingSoundComp;                                      // 0x0428(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAudioComponent*                                     LaserWarningSound;                                       // 0x0430(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    Damage;                                                  // 0x0438(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStateChanged;                                          // 0x0440(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldChanged;                                         // 0x0450(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIntroductionStart;                                     // 0x0460(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3VTY[0x10];                                  // 0x0470(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ForceSit;                                                // 0x0480(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IZ7B[0x7];                                   // 0x0481(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          LaserSound;                                              // 0x0488(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          LastPowerDownSound;                                      // 0x0490(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          PowerUpSound;                                            // 0x0498(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UAudioComponent>                      LaserSoundComp;                                          // 0x04A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F2ZP[0x18];                                  // 0x04A8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IntroductionTime;                                        // 0x04C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsIntroducing;                                           // 0x04C4(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IntroductionDone;                                        // 0x04C5(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsGrowingShield;                                         // 0x04C6(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OJKG[0x1];                                   // 0x04C7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AimDownwardsOffset;                                      // 0x04C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BigShieldScale;                                          // 0x04CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SmallShieldScale;                                        // 0x04D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShieldGrowthRate;                                        // 0x04D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LerpExp;                                                 // 0x04D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinimumShieldSize;                                       // 0x04DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetShieldSize;                                        // 0x04E0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IdleRotationSpeed;                                       // 0x04E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LaserScaleRate;                                          // 0x04E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T17C[0x4];                                   // 0x04EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxSearchAngle;                                          // 0x04F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1WSC[0x1C];                                  // 0x04F4(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       DoSpecialWhenEnemy;                                      // 0x0510(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DoSpecialWhenFriendly;                                   // 0x0511(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PerfectTrackingWhenEnemy;                                // 0x0512(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PerfectTrackingWhenFriendly;                             // 0x0513(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EWI2[0x2];                                   // 0x0514(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ReplaceBurstAttack;                                      // 0x0516(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1ZDS[0x1];                                   // 0x0517(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          GrenadeFireSound;                                        // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     GrenadeFireParticle;                                     // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFiring;                                                // 0x0528(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0A64[0x3];                                   // 0x0529(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TurretSpinSpeed;                                         // 0x052C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      Parasites;                                               // 0x0530(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    SpawnParasiteNumer;                                      // 0x0540(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxParasiteSlots;                                        // 0x0544(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChanceToSpawnParasite;                                   // 0x0548(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8347[0x4];                                   // 0x054C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ParasiteClass;                                           // 0x0550(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ETVM[0x6];                                   // 0x0558(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       SpinTurret;                                              // 0x055E(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H8RR[0x11];                                  // 0x055F(0x0011) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SpecialAttackProjectile;                                 // 0x0570(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              FriendlyProjectile;                                      // 0x0578(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5FDP[0xC];                                   // 0x0580(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       HasLockedOn;                                             // 0x058C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2N5M[0x3];                                   // 0x058D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          TargetingSound;                                          // 0x0590(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequenceBase*                                   GrenadeShotAnimation;                                    // 0x0598(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LockOnTime;                                              // 0x05A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZLTN[0x4];                                   // 0x05A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ShootSound;                                              // 0x05A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShootSoundFadeout;                                       // 0x05B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W62J[0x4];                                   // 0x05B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     ShootSoundInstance;                                      // 0x05B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ShootSoundTail;                                          // 0x05C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     MuzzleEffect;                                            // 0x05C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     TracerEffect;                                            // 0x05D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  MuzzleLightCurve;                                        // 0x05D8(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ANPO[0x8];                                   // 0x0660(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GunRange;                                                // 0x0668(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FireRate;                                                // 0x066C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GrenadeFireRate;                                         // 0x0670(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K7M6[0x4];                                   // 0x0674(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BurstCooldown;                                           // 0x0678(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AI8D[0x4];                                   // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MinBurst;                                                // 0x0680(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxBurst;                                                // 0x0684(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurretLerpSpeed;                                         // 0x0688(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageWhenFriendly;                                      // 0x068C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FriendlyFriendlyFireMultiplier;                          // 0x0690(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UG8E[0x4];                                   // 0x0694(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       StartedSpecialAttack;                                    // 0x0698(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ERobotState                                                TeamState;                                               // 0x0699(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BVBO[0xE];                                   // 0x069A(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsWalking;                                               // 0x06A8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       IsDoingSpecialAttack;                                    // 0x06A9(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8GLA[0x6];                                   // 0x06AA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                TurretRotation;                                          // 0x06B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5XQR[0x8];                                   // 0x06B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              CurrentTarget;                                           // 0x06C0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4GW0[0x8];                                   // 0x06C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateGunsInsideTerrain();
		void StartBossFight();
		void ParasiteDamaged(float aDamage);
		void OnWeaponsFired(const struct FVector& aHitResult);
		void OnUsed(class APlayerCharacter* aUser, EInputKeys Key);
		void OnSeePawn(class APawn* APawn);
		void OnRep_TeamState();
		void OnRep_Target();
		void OnRep_SpinTurret();
		void OnRep_IsIntroducting();
		void OnRep_IsFiring();
		void OnRep_IsDoingSpecialAttack();
		void OnParasiteDeath(class AActor* AParasiteEnemy);
		ERobotState GetTeamState();
		struct FVector GetPlayerMediumPoint();
		TArray<class AActor*> GetParasites();
		bool GetHasPoweredDown();
		void DestroyAttatchPoint(class USceneComponent* aComponent);
		void CannonEffects();
		void BP_OnStateChanged(ERobotState TeamState);
		void BP_OnShieldChanged(bool isGrowing);
		void BP_OnInstroduce();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ConvertedRobotAnimInstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class UConvertedRobotAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_D5YX[0x7];                                   // 0x02B8(0x0007) Fix Super Size
		bool                                                       ShouldSit;                                               // 0x02BF(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       StopSit;                                                 // 0x02C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShouldCollapse;                                          // 0x02C1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsPoweredDown;                                           // 0x02C2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZYQZ[0x1];                                   // 0x02C3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WalkingRate;                                             // 0x02C4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NormalWalkSpeed;                                         // 0x02C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_12I0[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ConvertedRobotTurretAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UConvertedRobotTurretAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_KI36[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyAIController
	 * Size -> 0x0000 (FullSize[0x0358] - InheritedSize[0x0358])
	 */
	class AEnemyAIController : public AFSDAIController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ConvertedRobotController
	 * Size -> 0x00D0 (FullSize[0x0428] - InheritedSize[0x0358])
	 */
	class AConvertedRobotController : public AEnemyAIController
	{
	public:
		float                                                      CheckRangeInterval;                                      // 0x0358(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxTimeInRange;                                          // 0x035C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5NXS[0x4];                                   // 0x0360(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PersonalSpaceRange;                                      // 0x0364(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D8WN[0x10];                                  // 0x0368(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagQuery                                   FriendlyTargetingQuery;                                  // 0x0378(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      SpecialAttackRange;                                      // 0x03C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpecialAttackFireRate;                                   // 0x03C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_55FE[0x20];                                  // 0x03C8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WaitBeforeSpecial;                                       // 0x03E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_THJL[0x4];                                   // 0x03EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WaitAfterSpecial;                                        // 0x03F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_94XE[0x8];                                   // 0x03F4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinSpecialAttackCooldown;                                // 0x03FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxSpecialAttackCooldown;                                // 0x0400(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UXDF[0x4];                                   // 0x0404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBehaviorTree*                                       BehaviourTree;                                           // 0x0408(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UpdateTargetInterval;                                    // 0x0410(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SAPC[0x4];                                   // 0x0414(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PowerDownAfterSeconds;                                   // 0x0418(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_82NL[0xC];                                   // 0x041C(0x000C) MISSED OFFSET (PADDING)

	public:
		void ResetCloseTimer();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CoolDownItemAggregator
	 * Size -> 0x0020 (FullSize[0x00E8] - InheritedSize[0x00C8])
	 */
	class UCoolDownItemAggregator : public UItemAggregator
	{
	public:
		float                                                      CooldownDuration;                                        // 0x00C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YAY2[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          AudioCoolDownFinished;                                   // 0x00D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CooldownRemaining;                                       // 0x00D8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CoolDownIsPaused;                                        // 0x00DC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VVCH[0x3];                                   // 0x00DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AItem*                                               Item;                                                    // 0x00E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetPaused(bool IsPaused);
		bool IsCoolingDown();
		float GetCoolDownProgress();
		void ActivateCoolDown(bool startPaused);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CoolDownProgressWidget
	 * Size -> 0x0050 (FullSize[0x02B0] - InheritedSize[0x0260])
	 */
	class UCoolDownProgressWidget : public UUserWidget
	{
	public:
		struct FCoolDownProgressStyle                              Style;                                                   // 0x0260(0x0040) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UObject>                              CoolDownObject;                                          // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsFinished;                                             // 0x02A8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XKEB[0x7];                                   // 0x02A9(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateProgress(float Progress);
		void ReceiveUpdateProgress(float InProgress);
		void ReceiveInitWidget();
		void Init(class UObject* InCoolDownObject, const struct FCoolDownProgressStyle& InStyle);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CopyBoneVisibilityCompleted
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCopyBoneVisibilityCompleted : public UInterface
	{
	public:
		void CopyBoneVisibilityCompleted(int32_t BoneIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CraftingCostLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCraftingCostLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FCraftingCost ConvertResourcesToFashionite(TArray<struct FCraftingCost> InResources);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PricingTier
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UPricingTier : public UDataAsset
	{
	public:
		class FString                                              PriceKey;                                                // 0x0030(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SchematicPricingTier
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USchematicPricingTier : public UPricingTier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CreditsResourceData
	 * Size -> 0x0000 (FullSize[0x00F0] - InheritedSize[0x00F0])
	 */
	class UCreditsResourceData : public UResourceData
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BaseCritterDescriptor
	 * Size -> 0x0088 (FullSize[0x00B8] - InheritedSize[0x0030])
	 */
	class UBaseCritterDescriptor : public UDataAsset
	{
	public:
		unsigned char                                              CritterClass[0x28];                                      // 0x0030(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              BiomeClassOverrides[0x50];                               // 0x0058(0x0050) UNKNOWN PROPERTY: MapProperty
		class UDebrisPositioning*                                  Positioning;                                             // 0x00A8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDeepPathFinderType                                        PathfinderType;                                          // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VE4J[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CritterDescriptor
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class UCritterDescriptor : public UBaseCritterDescriptor
	{
	public:
		struct FIRandRange                                         SpawnAmountPerRoom;                                      // 0x00B8(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      SpawnChancePerRoom;                                      // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FIRandRange                                         SpawnAmountPerLevel;                                     // 0x00C4(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0IRE[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RareCritterDescriptor
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class URareCritterDescriptor : public UBaseCritterDescriptor
	{
	public:
		float                                                      Rarity;                                                  // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6NSJ[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CritterManager
	 * Size -> 0x0048 (FullSize[0x00F8] - InheritedSize[0x00B0])
	 */
	class UCritterManager : public UActorComponent
	{
	public:
		bool                                                       DisableCritters;                                         // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EMB5[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ActivationRange;                                         // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J8FC[0x40];                                  // 0x00B8(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Crossbow
	 * Size -> 0x0198 (FullSize[0x08E8] - InheritedSize[0x0750])
	 */
	class ACrossbow : public AAmmoDrivenWeapon
	{
	public:
		class FScriptMulticastDelegate                             OnDefaultArrowEquippedChanged;                           // 0x0750(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W9CL[0x10];                                  // 0x0760(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FullDamageSpeed;                                         // 0x0770(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JL5B[0x4];                                   // 0x0774(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DefaultArrow;                                            // 0x0778(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              SpecialArrow;                                            // 0x0780(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpecialStatusEffectBonusTimeScale;                       // 0x0788(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V2K9[0x4];                                   // 0x078C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BattleFrenzyStatusEffect;                                // 0x0790(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BasicSpawnableStuckProjectile;                           // 0x0798(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SpecialAmmoMax;                                          // 0x07A0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SwitchTime;                                              // 0x07A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanTrifork;                                              // 0x07A8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDefaultArrowEquipped;                                  // 0x07A9(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R464[0x2];                                   // 0x07AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RecallProgress;                                          // 0x07AC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YW67[0x8];                                   // 0x07B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                AnimatedFPMesh;                                          // 0x07B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMeshComponent*                                AnimatedTPMesh;                                          // 0x07C0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3EPT[0x2];                                   // 0x07C8(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       SwitchIsQueued;                                          // 0x07CA(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HAHL[0x1];                                   // 0x07CB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECrossbowSwitchState                                       SwitchState;                                             // 0x07CC(0x0001) ELEMENT_SIZE_MISMATCH Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G01O[0x3];                                   // 0x07CD(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		unsigned char                                              UnknownData_E9MU[0x10];                                  // 0x07D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OutOfAmmoSwapDelay;                                      // 0x07E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LKV3[0x4];                                   // 0x07E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AnimatedArrowSpawnable;                                  // 0x07E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WU4S[0x18];                                  // 0x07F0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExtraShotAngleDifference;                                // 0x0808(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_06XU[0x4];                                   // 0x080C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCrossbowProjectileRecallable*                       HoveringRecallable;                                      // 0x0810(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MG9J[0x48];                                  // 0x0818(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SwitchTimeCof;                                           // 0x0860(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RS1V[0x4];                                   // 0x0864(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         TriforkArrowMesh;                                        // 0x0868(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh*                                         QuintPackArrowMesh;                                      // 0x0870(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FProjectileSwitch>                           GearStatArrows;                                          // 0x0878(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class UAnimMontage*                                        SwitchMontage;                                           // 0x0888(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAnimMontage*                                        SwitchMontage_TP;                                        // 0x0890(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAnimMontage*                                        CharacterSwitchMontage;                                  // 0x0898(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAnimMontage*                                        ReloadMontage;                                           // 0x08A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAnimMontage*                                        ReloadMontage_TP;                                        // 0x08A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAnimMontage*                                        CharacterReloadMontage;                                  // 0x08B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class USoundCue*>                                   ReloadSoundCues;                                         // 0x08B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8SQZ[0x20];                                  // 0x08C8(0x0020) MISSED OFFSET (PADDING)

	public:
		void UpdateRecallProgress();
		void StartAmmoSwitch();
		void SetAnimatedTPMeshComponentFromBP(class AActor* animatedArrow);
		void SetAnimatedTPMeshComponent(class UStaticMeshComponent* Component);
		void SetAnimatedFPMeshComponentFromBP(class AActor* animatedArrow);
		void SetAnimatedFPMeshComponent(class UStaticMeshComponent* Component);
		void Server_UpdateRetrievableArrows(int32_t defaultAmmo, int32_t specialAmmo);
		void Server_SwitchAmmoType(class UProjectileLauncherBaseComponent* projectileLauncher, ECrossbowSwitchState State);
		void Server_SetSwitchIsQueued(bool IsQueued);
		void OnRep_SwitchIsQueued();
		void OnRep_IsDefaultArrowEquipped();
		void OnProjectileFired(class AProjectileBase* Projectile);
		int32_t GetTotalArrowCount(bool InDefaultArrowCount);
		float GetSpecialArrowEffectDuration(class UClass* Effect);
		bool GetIsDefaultArrowEquipped();
		void DestroyActor(class AActor* Actor);
		void DefaultArrowEquippedChanged__DelegateSignature(bool InDefaultArrow);
		void Client_RefillSpecialAmmo(float percentage);
		void Client_CallAddSpecialAmmo(int32_t Amount);
		void Client_CallAddDefaultAmmo(int32_t Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowProjectileBase
	 * Size -> 0x0170 (FullSize[0x04B0] - InheritedSize[0x0340])
	 */
	class ACrossbowProjectileBase : public AProjectile
	{
	public:
		class FScriptMulticastDelegate                             OnDamageDealt;                                           // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      StatusEffectTime;                                        // 0x0350(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6EUT[0x14];                                  // 0x0354(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       BansheePulseActive;                                      // 0x0368(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O0WH[0x7];                                   // 0x0369(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCrossbowProjectileMagnetic*                         MagneticComponent;                                       // 0x0370(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCrossbowProjectileRicochet*                         RicochetComponent;                                       // 0x0378(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCrossbowStuckProjectileEffectBanshee*               BansheeComponent;                                        // 0x0380(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraComponent*                                   BansheePulseComponent;                                   // 0x0388(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BansheeComponentClass;                                   // 0x0390(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              RecallComponentClass;                                    // 0x0398(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              Icon[0x28];                                              // 0x03A0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              TriforkIcon[0x28];                                       // 0x03C8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UClass*                                              SpawnableStuckProjectile;                                // 0x03F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              OnDamageEffect;                                          // 0x03F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECrossbowEffectApplication                                 EffectApplication;                                       // 0x0400(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              SelectionPriority;                                       // 0x0401(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanEverBePickedUp;                                       // 0x0402(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Penetrates;                                              // 0x0403(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FBWI[0x4];                                   // 0x0404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ImpactSound;                                             // 0x0408(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsASpecialProjectile;                                    // 0x0410(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P7V3[0x7];                                   // 0x0411(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageComponent*                                    MainDamageComponent;                                     // 0x0418(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDamageComponent*                                    SimpleDamageComponent;                                   // 0x0420(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh*                                         ProjectileMesh;                                          // 0x0428(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_T7IN[0x6C];                                  // 0x0430(0x006C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      KillTrailAfterTime;                                      // 0x049C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_W882[0x4];                                   // 0x04A0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       OnlyTrailShown;                                          // 0x04A4(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V8VF[0xB];                                   // 0x04A5(0x000B) MISSED OFFSET (PADDING)

	public:
		void SetSimpleDamageComponentFromBP();
		void SetSimpleDamageComponent(class UDamageComponent* Component);
		void SetMainDamageComponentFromBP();
		void SetMainDamageComponent(class UDamageComponent* Component);
		void Server_HandleImpact(const struct FHitResult& HitResult, const struct FVector& RelativeLocation);
		void OnRep_OnlyTrailShown();
		void OnRep_BansheePulseActive();
		bool IsLocallyControlled();
		bool GetSpecialArrowEquipped();
		float GetScaledStatusEffectTime();
		void ApplyDamageEffects(const struct FHitResult& HitResult, const struct FVector& RelativeLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowProjectileControlled
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UCrossbowProjectileControlled : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_KOL9[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     HomingTarget;                                            // 0x00B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ACrossbowProjectileBase*                             CastedOwner;                                             // 0x00C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LDUQ[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateHomingTarget();
		void Server_UpdateHomingTarget(const struct FVector& Target);
		void CancelControl();
		void All_UpdateHomingTarget(const struct FVector& Target);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowProjectileMagnetic
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class UCrossbowProjectileMagnetic : public UActorComponent
	{
	public:
		TArray<class UClass*>                                      ElectricEffects;                                         // 0x00B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TQ7S[0x10];                                  // 0x00C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AFSDPawn>                             TargetEnemy;                                             // 0x00D0(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GCBV[0x10];                                  // 0x00D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverlapCheckSize;                                        // 0x00E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_X4HN[0x1C];                                  // 0x00EC(0x001C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowProjectileRecallable
	 * Size -> 0x0070 (FullSize[0x0120] - InheritedSize[0x00B0])
	 */
	class UCrossbowProjectileRecallable : public UActorComponent
	{
	public:
		class UInstantUsable*                                      Usable;                                                  // 0x00B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class APlayerCharacter*                                    RecallTarget;                                            // 0x00B8(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WTBL[0x4];                                   // 0x00C0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RecallStartTime;                                         // 0x00C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RecallSpeed;                                             // 0x00C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QBYG[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          StartTransform;                                          // 0x00D0(0x0030) Net, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		class UInterpolatedFirstPersonStaticMeshComponent*         FPMeshComponent;                                         // 0x0100(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       IsRecallable;                                            // 0x0108(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EOIT[0x17];                                  // 0x0109(0x0017) MISSED OFFSET (PADDING)

	public:
		void Server_SetRecallTarget(class APlayerCharacter* Player, const struct FTransform& startTrans);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowProjectileRicochet
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UCrossbowProjectileRicochet : public UActorComponent
	{
	public:
		class UNiagaraSystem*                                      NiagaraTrailParticleSystem;                              // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    RicochetMax;                                             // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RicochetRange;                                           // 0x00BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4CNB[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ACrossbowProjectileBase*                             CastedOwner;                                             // 0x00C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void Ricochet(const struct FHitResult& HitResult, const struct FVector& RelativeLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowStuckProjectileEffect
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UCrossbowStuckProjectileEffect : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowStuckProjectileEffectApplication
	 * Size -> 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
	 */
	class UCrossbowStuckProjectileEffectApplication : public UCrossbowStuckProjectileEffect
	{
	public:
		unsigned char                                              UnknownData_TP40[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SearchSphereSize;                                        // 0x00C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SearchTime;                                              // 0x00C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CurrentlyActive;                                         // 0x00C8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EF1Y[0x27];                                  // 0x00C9(0x0027) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowStuckProjectileEffectExploding
	 * Size -> 0x0038 (FullSize[0x00E8] - InheritedSize[0x00B0])
	 */
	class UCrossbowStuckProjectileEffectExploding : public UCrossbowStuckProjectileEffect
	{
	public:
		unsigned char                                              UnknownData_WKLH[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ChemicalSoundCue;                                        // 0x00B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAudioComponent*                                     ChemicalAudioComponent;                                  // 0x00C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ChemicalReactionDelay;                                   // 0x00C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M2UI[0x1C];                                  // 0x00CC(0x001C) MISSED OFFSET (PADDING)

	public:
		void StartTimeoutTimer(class UHealthComponentBase* destroyed);
		void EnableTimeOut();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowStuckProjectileEffectBanshee
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class UCrossbowStuckProjectileEffectBanshee : public UCrossbowStuckProjectileEffect
	{
	public:
		unsigned char                                              UnknownData_KOB2[0x18];                                  // 0x00B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SearchSphereSize;                                        // 0x00C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SearchTime;                                              // 0x00CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JJT9[0x38];                                  // 0x00D0(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowStuckProjectileEffectElectric
	 * Size -> 0x0048 (FullSize[0x00F8] - InheritedSize[0x00B0])
	 */
	class UCrossbowStuckProjectileEffectElectric : public UCrossbowStuckProjectileEffect
	{
	public:
		class UClass*                                              PlasmaBeamClass;                                         // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              ElectrocutionActorClass;                                 // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PlasmaLineMaxRange;                                      // 0x00C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5M5X[0x24];                                  // 0x00C4(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               ElectrocutionActor;                                      // 0x00E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1KK0[0x8];                                   // 0x00F0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnElectrocutionActorDestroyed(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowProjectileStuck
	 * Size -> 0x0060 (FullSize[0x0298] - InheritedSize[0x0238])
	 */
	class ACrossbowProjectileStuck : public AFSDPhysicsActor
	{
	public:
		bool                                                       BansheePulseEnabled;                                     // 0x0238(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F8FI[0x7];                                   // 0x0239(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCrossbowProjectileRecallable*                       RecallComponent;                                         // 0x0240(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCrossbowStuckProjectileEffectBanshee*               BansheeComponent;                                        // 0x0248(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECrossbowStuckType                                         StuckProjectileEffect;                                   // 0x0250(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsPlayingElectricRangeEffect;                            // 0x0251(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4I7G[0x6];                                   // 0x0252(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AppliedEffect;                                           // 0x0258(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StatusEffectTime;                                        // 0x0260(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_22YZ[0x4];                                   // 0x0264(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent*                                    AttachmentRoot;                                          // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraComponent*                                   BansheePulseComponent;                                   // 0x0270(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USphereComponent*                                    LaserCollider;                                           // 0x0278(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ACrossbowProjectileBase*                             BaseProjectile;                                          // 0x0280(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NBBK[0x10];                                  // 0x0288(0x0010) MISSED OFFSET (PADDING)

	public:
		void UsableChanged(bool CanUse);
		void OnUsedBy(class APlayerCharacter* Player, EInputKeys Key);
		void OnRep_BansheePulseEnabled();
		void MatchParentDestroy(class UHealthComponentBase* destroyed);
		bool IsLocallyControlled();
		bool GetSpecialArrowEquipped();
		void All_OnCavePointRemoved(class USceneComponent* Point);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrosshairWidget
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class UCrosshairWidget : public UUserWidget
	{
	public:
		void SetData(class AItem* Item);
		void OnUpgraded(class AItem* Item);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrosshairAggregator
	 * Size -> 0x0038 (FullSize[0x0100] - InheritedSize[0x00C8])
	 */
	class UCrosshairAggregator : public UItemAggregator
	{
	public:
		unsigned char                                              UnknownData_B737[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCrosshairCreated;                                      // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UUserWidget*                                         CrosshairWidget;                                         // 0x00E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              CrossHairType;                                           // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCustomAmmoCountWidget*                              CustomAmmoCounterWidget;                                 // 0x00F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              CustomAmmoCounterType;                                   // 0x00F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetCrosshair(class UUserWidget* Widget);
		class UUserWidget* GetOrCreateCrosshair();
		class UCustomAmmoCountWidget* GetCustomAmmoCounterWidget(class UObject* WorldContext, class APlayerController* InOwner);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CryosprayItem
	 * Size -> 0x0190 (FullSize[0x08E0] - InheritedSize[0x0750])
	 */
	class ACryosprayItem : public AAmmoDrivenWeapon
	{
	public:
		class UProjectileLauncherComponent*                        projectileLauncher;                                      // 0x0750(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    DamageComponent;                                         // 0x0758(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStickyFlameSpawner*                                 StickyFlames;                                            // 0x0760(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    AoEColdDamageComponent;                                  // 0x0768(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMotionAudioController*                              VelocityAudio;                                           // 0x0770(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            FlameParticleComponent;                                  // 0x0778(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PressurizedProjectileEnabled;                            // 0x0780(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SXNV[0x3];                                   // 0x0781(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PressurizedProjectileDelay;                              // 0x0784(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PressurizeProjectileFullCost;                            // 0x0788(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_15AQ[0xC];                                   // 0x078C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     ChargeupParticles;                                       // 0x0798(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            ChargeupParticleInstance;                                // 0x07A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDecalData                                          ImpactDecal;                                             // 0x07A8(0x0020) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      DecalDelay;                                              // 0x07C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HALS[0x4];                                   // 0x07CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     ImpactParticles;                                         // 0x07D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            ImpactParticleInstance;                                  // 0x07D8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        FlameParameterNames;                                     // 0x07E0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      DamageSphereRadius;                                      // 0x07F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxFlameDistance;                                        // 0x07F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlameGrowthPerSecond;                                    // 0x07F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FriendlyFireModifier;                                    // 0x07FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeupTime;                                            // 0x0800(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeDownTime;                                          // 0x0804(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H78C[0x1];                                   // 0x0808(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       isCharging;                                              // 0x0809(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FFLP[0x2];                                   // 0x080A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChargeProgress;                                          // 0x080C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRepressurerising;                                       // 0x0810(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XLDN[0x3];                                   // 0x0811(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RepressurerisingDoneAtPct;                               // 0x0814(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeUpFadeOutTime;                                     // 0x0818(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YQVM[0x4];                                   // 0x081C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFSDAudioComponent*                                  ChargeUpAudioComponent;                                  // 0x0820(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PressureTime;                                            // 0x0828(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PressureDropMultiplier;                                  // 0x082C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PressureGainMultiplier;                                  // 0x0830(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentPressure;                                         // 0x0834(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RePressureDuration;                                      // 0x0838(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RePressureProgress;                                      // 0x083C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UItemUpgrade*>                                upgrades;                                                // 0x0840(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       LongReachEnabled;                                        // 0x0850(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ORVT[0xF];                                   // 0x0851(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       AoEColdEnabled;                                          // 0x0860(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RPDL[0x7F];                                  // 0x0861(0x007F) MISSED OFFSET (PADDING)

	public:
		void ServerDoDamage(const struct FVector_NetQuantize& Start, const struct FVector_NetQuantize& End, unsigned char Power);
		void Server_TriggerAoECold();
		void Server_PreLaunchProjectile();
		void ReceiveRepressurisingChanged(bool Value);
		void OnTargetDamaged(class UHealthComponentBase* Health, float Amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial);
		void OnRep_IsCharging(bool OldValue);
		void OnProjectileSpawned(class AProjectileBase* Projectile);
		void OnProjectileLaunched(const struct FVector& Location);
		void OnPressurizedPartileShoot();
		void OnPreProjectileLaunch();
		void All_PreLaunchProjectile();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CryoSprayAnimInstance
	 * Size -> 0x0028 (FullSize[0x02E0] - InheritedSize[0x02B8])
	 */
	class UCryoSprayAnimInstance : public UAnimInstance
	{
	public:
		class ACryosprayItem*                                      Weapon;                                                  // 0x02B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFiring;                                                // 0x02C0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KW6I[0x3];                                   // 0x02C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChargeProgress;                                          // 0x02C4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            ChargeRotation;                                          // 0x02C8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      ChargeBlend;                                             // 0x02D4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Pressure;                                                // 0x02D8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9K10[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CustomKeyBindingLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCustomKeyBindingLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.KeyBindingSettings
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UKeyBindingSettings : public UDataAsset
	{
	public:
		TArray<struct FCustomKeySetting>                           KeyboardMouseButtons;                                    // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FCustomKeySetting>                           ControllerButtons;                                       // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CustomRichTextDecorator
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UCustomRichTextDecorator : public URichTextBlockDecorator
	{
	public:
		class URichTextBlock*                                      RichTextBlock;                                           // 0x0028(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DailyDealSettings
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UDailyDealSettings : public UDataAsset
	{
	public:
		TArray<struct FDailyDealSetup>                             DailyDeals;                                              // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		bool IsDailyDealBought(class UObject* WorldContextObject);
		int32_t GetDailyDealSeed();
		void GetDailyDeal(struct FDailyDeal* outDeal);
		bool CanAffordDailyDeal(class UObject* WorldContextObject);
		bool BuyDailyDeal(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageAttackComponent
	 * Size -> 0x0008 (FullSize[0x00F8] - InheritedSize[0x00F0])
	 */
	class UDamageAttackComponent : public UAttackBaseComponent
	{
	public:
		class UDamageComponent*                                    Damage;                                                  // 0x00F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageBonusBase
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UDamageBonusBase : public UDataAsset
	{
	public:
		class UDamageCondition*                                    Condition;                                               // 0x0030(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UDamageBonusBase* AddDamageBonusToComponent(class UClass* damageBonusClass, class UDamageComponent* DamageComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PluckFromZiplineBonus
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UPluckFromZiplineBonus : public UDamageBonusBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlatDamageBonus
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UFlatDamageBonus : public UDamageBonusBase
	{
	public:
		float                                                      Damage;                                                  // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YR10[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageClass*                                        DamageClass;                                             // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RangedFlatDamageBonus
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class URangedFlatDamageBonus : public UDamageBonusBase
	{
	public:
		class UCurveFloat*                                         DamageCurve;                                             // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageClass*                                        DamageClass;                                             // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TargetSpecificDamageBonus
	 * Size -> 0x0058 (FullSize[0x0090] - InheritedSize[0x0038])
	 */
	class UTargetSpecificDamageBonus : public UDamageBonusBase
	{
	public:
		float                                                      Bonus;                                                   // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E4R5[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagQuery                                   tagQuery;                                                // 0x0040(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		class FName                                                Key;                                                     // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageConversionBonus
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UDamageConversionBonus : public UDamageBonusBase
	{
	public:
		class UDamageClass*                                        DamageClass;                                             // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConversionPercentage;                                    // 0x0040(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DamageIsAdded;                                           // 0x0044(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FPSH[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TargetStateDamageBonus
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UTargetStateDamageBonus : public UDamageBonusBase
	{
	public:
		ETargetStateDamageBonusType                                TargetState;                                             // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PBVF[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Bonus;                                                   // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageClass*                                        DamageClass;                                             // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusDamageBonus
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class UStatusDamageBonus : public UDamageBonusBase
	{
	public:
		TArray<class UClass*>                                      StatusEffects;                                           // 0x0038(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		float                                                      Bonus;                                                   // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UC48[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageClass*                                        DamageClass;                                             // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusAndStateDamageBonus
	 * Size -> 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
	 */
	class UStatusAndStateDamageBonus : public UDamageBonusBase
	{
	public:
		TArray<class UClass*>                                      StatusEffects;                                           // 0x0038(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<ETargetStateDamageBonusType>                        TargetStates;                                            // 0x0048(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      Bonus;                                                   // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QFNJ[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageClass*                                        DamageClass;                                             // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PushStatusEffectDamageBonus
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class UPushStatusEffectDamageBonus : public UDamageBonusBase
	{
	public:
		unsigned char                                              UnknownData_ZXN2[0x10];                                  // 0x0038(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              StatusEffect;                                            // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Chance;                                                  // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IgnoreArmorHit;                                          // 0x0054(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JR14[0x3];                                   // 0x0055(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PushDynamicStatusEffectDamageBonus
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class UPushDynamicStatusEffectDamageBonus : public UDamageBonusBase
	{
	public:
		unsigned char                                              UnknownData_WVGW[0x10];                                  // 0x0038(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BaseSTE;                                                 // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStatusEffect*                                       StatusEffect;                                            // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Chance;                                                  // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L6XM[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FearAoEBonus
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UFearAoEBonus : public UDamageBonusBase
	{
	public:
		float                                                      FearFactor;                                              // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      range;                                                   // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AmmoLeftDamageBonus
	 * Size -> 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
	 */
	class UAmmoLeftDamageBonus : public UFlatDamageBonus
	{
	public:
		class UCurveFloat*                                         AmmoDamageCurve;                                         // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PW3Y[0x8];                                   // 0x0050(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AmmoUsedDamageBonus
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAmmoUsedDamageBonus : public UDamageBonusBase
	{
	public:
		float                                                      DamageBonusPerRoundFired;                                // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I6XD[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandomDamageBonus
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class URandomDamageBonus : public UDamageBonusBase
	{
	public:
		struct FRandRange                                          RandomDamageRange;                                       // 0x0038(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PercentDamageBonus
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UPercentDamageBonus : public UDamageBonusBase
	{
	public:
		float                                                      DamageMultiplier;                                        // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8LLO[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GatlingHotShellsBonus
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UGatlingHotShellsBonus : public UDamageConversionBonus
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BreakIceBonus
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UBreakIceBonus : public UDamageBonusBase
	{
	public:
		float                                                      DeFrostAmount;                                           // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FMV0[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.KnockbackDamageBonus
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class UKnockbackDamageBonus : public UDamageBonusBase
	{
	public:
		float                                                      KnockBackHorizontalForce;                                // 0x0038(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      KnockBackVerticalForce;                                  // 0x003C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VerticalScaleMultiplier;                                 // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HorizontalScaleMultiplier;                               // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinVerticalPower;                                        // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinHorizontalPower;                                      // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OptimalDistance;                                         // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AllowForIncapacitadedPlayes;                             // 0x0054(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       KnockThowardsInstigator;                                 // 0x0055(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ScalePowerToInstigatorDistance;                          // 0x0056(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AbsoluteKnockBack;                                       // 0x0057(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CarryElementalStatus
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UCarryElementalStatus : public UDamageBonusBase
	{
	public:
		float                                                      CarryBonusAmount;                                        // 0x0038(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PU9E[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageClass*                                        CarriedClass;                                            // 0x0040(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LockCountSTEBonus
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class ULockCountSTEBonus : public UDamageBonusBase
	{
	public:
		int32_t                                                    MinLockCount;                                            // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseTotalLockCount;                                       // 0x003C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OQXM[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              StatusEffect;                                            // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TagDamageBonus
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UTagDamageBonus : public UDamageBonusBase
	{
	public:
		TArray<class UDamageTag*>                                  Tags;                                                    // 0x0038(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SetImpulseDamageBonus
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USetImpulseDamageBonus : public UDamageBonusBase
	{
	public:
		class UDamageImpulse*                                      DamageImpulse;                                           // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawnOnImpactDamageBonus
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USpawnOnImpactDamageBonus : public UDamageBonusBase
	{
	public:
		class UClass*                                              ActorToSpawn;                                            // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ExtendSTEDurationBonus
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UExtendSTEDurationBonus : public UDamageBonusBase
	{
	public:
		class UClass*                                              StatusEffect;                                            // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AddedDuration;                                           // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WRK0[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageClass
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UDamageClass : public UDataAsset
	{
	public:
		class UPawnStat*                                           ResistanceStat;                                          // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RagdollScale;                                            // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       BypassesShield;                                          // 0x003C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AffectedByFriendlyFire;                                  // 0x003D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T6IA[0x2];                                   // 0x003E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          IndicatorImage;                                          // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    DamageShout;                                             // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageImpulse*                                      DefaultDamageImpulse;                                    // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageComponent
	 * Size -> 0x0128 (FullSize[0x01D8] - InheritedSize[0x00B0])
	 */
	class UDamageComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnTargetKilledEvent;                                     // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTargetDamagedEvent;                                    // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNoTargetHitEvent;                                      // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHitDeadTarget;                                         // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAsyncAoE_Complete;                                     // 0x00F0(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LYW4[0x8];                                   // 0x0100(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EDamageComponentType                                       DamageComponentType;                                     // 0x0108(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QOJJ[0x7];                                   // 0x0109(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageImpulse*                                      DamageImpulse;                                           // 0x0110(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Damage;                                                  // 0x0118(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      armorDamageMultiplier;                                   // 0x011C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ArmorPenetration;                                        // 0x0120(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShattersArmor;                                           // 0x0124(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8N5A[0x3];                                   // 0x0125(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageClass*                                        DamageClass;                                             // 0x0128(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EArmorDamageType                                           ArmorDamageType;                                         // 0x0130(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G24L[0x3];                                   // 0x0131(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WeakpointDamageMultiplier;                               // 0x0134(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FrozenDamageBonusScale;                                  // 0x0138(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FriendlyFireModifier;                                    // 0x013C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SelfFriendlyFireMultiplier;                              // 0x0140(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        FriendlyFireTag;                                         // 0x0144(0x0008) Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       StaggerOnlyOnWeakpointHit;                               // 0x014C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_473X[0x3];                                   // 0x014D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StaggerChance;                                           // 0x0150(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StaggerDuration;                                         // 0x0154(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FearFactor;                                              // 0x0158(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C7Z2[0x4];                                   // 0x015C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDamageBonusBase*>                            DamageBonuses;                                           // 0x0160(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UDamageModifier*>                             DamageModifiers;                                         // 0x0170(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UDamageTag*>                                  damageTags;                                              // 0x0180(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RPMO[0x10];                                  // 0x0190(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UseAreaOfEffect;                                         // 0x01A0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GUFL[0x3];                                   // 0x01A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RadialDamage;                                            // 0x01A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       NoFriendlyFireFromRadial;                                // 0x01A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DORF[0x7];                                   // 0x01A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageClass*                                        RadialDamageClass;                                       // 0x01B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDamagePct;                                            // 0x01B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageRadius;                                            // 0x01BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDamageRadius;                                         // 0x01C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MD52[0x14];                                  // 0x01C4(0x0014) MISSED OFFSET (PADDING)

	public:
		void PreTestDamageConditions();
		class UDamageComponent* GetDamageComponentCDO(class UClass* DamageComponent);
		float GetDamage();
		void DamageTargetFromHit(const struct FHitResult& HitResult);
		void DamageTarget_CDO(const struct FVector& Location, class AActor* Owner, class AActor* hitActor);
		void DamageTarget(class AActor* Target, const struct FVector& Location, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysMat, int32_t BoneIndex);
		void DamageArmor_Server(class AActor* Target, class UPrimitiveComponent* collider, int32_t BoneIndex, const struct FVector& impactLocation);
		void DamageArmor_All(class AActor* Target, class UPrimitiveComponent* collider, int32_t BoneIndex);
		bool ArmorSupportsLocalOnlyCall(class AActor* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageCondition
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDamageCondition : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FalseDamageCondition
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFalseDamageCondition : public UDamageCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MultiDamageCondition
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UMultiDamageCondition : public UDamageCondition
	{
	public:
		TArray<class UDamageCondition*>                            Conditions;                                              // 0x0028(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       RequireAllTrue;                                          // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IEGW[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandomDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class URandomDamageCondition : public UDamageCondition
	{
	public:
		float                                                      Chance;                                                  // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6WP0[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LockCountDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class ULockCountDamageCondition : public UDamageCondition
	{
	public:
		int32_t                                                    MinLockCount;                                            // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseTotalLockCount;                                       // 0x002C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K2QD[0x3];                                   // 0x002D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LocksRemainingDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class ULocksRemainingDamageCondition : public UDamageCondition
	{
	public:
		int32_t                                                    MaxLocksRemaining;                                       // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OFGN[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TargetStateDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UTargetStateDamageCondition : public UDamageCondition
	{
	public:
		ETargetStateDamageBonusType                                TargetState;                                             // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G5XE[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TargetSTEDamageCondition
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UTargetSTEDamageCondition : public UDamageCondition
	{
	public:
		TArray<class UClass*>                                      StatusEffects;                                           // 0x0028(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TargetTagsDamageCondition
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UTargetTagsDamageCondition : public UDamageCondition
	{
	public:
		struct FGameplayTagQuery                                   tagQuery;                                                // 0x0028(0x0048) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeakpointDamageCondition
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UWeakpointDamageCondition : public UDamageCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DirectDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UDirectDamageCondition : public UDamageCondition
	{
	public:
		EDirectDamageConditionEnum                                 Type;                                                    // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DG79[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ClipStatusDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UClipStatusDamageCondition : public UDamageCondition
	{
	public:
		int32_t                                                    BulletAmount;                                            // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CountBulletsLeft;                                        // 0x002C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KFYO[0x3];                                   // 0x002D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemTemperatureDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UItemTemperatureDamageCondition : public UDamageCondition
	{
	public:
		int32_t                                                    HeatThreshold;                                           // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       MustBeUnderThreshold;                                    // 0x002C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FC9B[0x3];                                   // 0x002D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerShieldsDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UPlayerShieldsDamageCondition : public UDamageCondition
	{
	public:
		struct FFloatInterval                                      ShieldPercentageRequired;                                // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerHealthDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UPlayerHealthDamageCondition : public UDamageCondition
	{
	public:
		struct FFloatInterval                                      HealthPercentageRequired;                                // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CooldownDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UCooldownDamageCondition : public UDamageCondition
	{
	public:
		float                                                      CoolDown;                                                // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LXYS[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoltActionWeaponDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UBoltActionWeaponDamageCondition : public UDamageCondition
	{
	public:
		EBoltActionWeaponConditions                                WeaponCondition;                                         // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_83GQ[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlasmaCarbineDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UPlasmaCarbineDamageCondition : public UDamageCondition
	{
	public:
		EPlasmaCarbineConditions                                   WeaponCondition;                                         // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5XKE[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Condition;                                               // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MaterialDamageMultiplierCondition
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UMaterialDamageMultiplierCondition : public UDamageCondition
	{
	public:
		struct FFloatInterval                                      MultiplierRangeRequired;                                 // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Invert;                                                  // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_313I[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MultiHitscanHitCountDamageCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UMultiHitscanHitCountDamageCondition : public UDamageCondition
	{
	public:
		int32_t                                                    RequiredHitCount;                                        // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5ZTI[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DistanceToTargetDamageCondition
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UDistanceToTargetDamageCondition : public UDamageCondition
	{
	public:
		bool                                                       TestMaxDistance;                                         // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L26V[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxDistance;                                             // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinimumDistance;                                         // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3RXW[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageEnhancer
	 * Size -> 0x0090 (FullSize[0x0378] - InheritedSize[0x02E8])
	 */
	class ADamageEnhancer : public AGrenade
	{
	public:
		unsigned char                                              UnknownData_6JBM[0x20];                                  // 0x02E8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent*                                       RootCollision;                                           // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHealthComponent*                                    HealthComponent;                                         // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    DamageComponent;                                         // 0x0318(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                Mesh;                                                    // 0x0320(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USphereComponent*                                    Sphere;                                                  // 0x0328(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       Box;                                                     // 0x0330(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHitscanComponent*                                   HitscanComponent;                                        // 0x0338(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UReflectionHitscanComponent*                         ReflectionHitscanComponent;                              // 0x0340(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCapsuleHitscanComponent*                            CapsuleHitscanComponent;                                 // 0x0348(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EnhanceDamageBy;                                         // 0x0350(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LifetimeMaxDamage;                                       // 0x0354(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EnabledDuration;                                         // 0x0358(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TraceStepTime;                                           // 0x035C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZWFN[0x18];                                  // 0x0360(0x0018) MISSED OFFSET (PADDING)

	public:
		void HitByHitScan(class UHitscanBaseComponent* Component, const struct FVector& HitPoint, const struct FVector& Origin);
		void Client_CompleteTrace(const struct FEnhancedTrace& trace);
		void BeginOverlapVsProjectile(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void All_PasteHitScanComponent(class UHitscanBaseComponent* HitScan);
		void All_PasteDamageComponent(class UDamageComponent* Damage);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDamageFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetPhysicalMaterialOnHit(class UFSDPhysicalMaterial* PhysMat, struct FHitResult* Hit);
		bool IsGibbedDeath(TArray<class UDamageTag*> Tags);
		bool IsExplosiveDeath(class UObject* WorldContext, class UPawnStatsComponent* PawnStats, TArray<class UDamageTag*> Tags);
		bool IsCorrosiveDeath(class UDamageClass* DamageClass, TArray<class UDamageTag*> Tags);
		bool IsCookedDeath(TArray<class UDamageTag*> Tags);
		bool IsBurnDeath(class UDamageClass* DamageClass, TArray<class UDamageTag*> Tags);
		struct FVector GetForceFromDamageImpulse(class AActor* Target, const struct FDamageData& DamageData);
		class UDamageImpulse* GetDamageImpulse(const struct FDamageData& DamageData);
		int32_t FindClosestBoneIndex(class USkeletalMeshComponent* Mesh, const struct FVector& Location, class ULimbDismembermentList* dismembermentList, float MaxDistance);
		class FName FindClosestBone(class USkeletalMeshComponent* Mesh, const struct FVector& Location, class ULimbDismembermentList* dismembermentList, float MaxDistance);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageImpulse
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UDamageImpulse : public UDataAsset
	{
	public:
		float                                                      ImpactForce;                                             // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UpwardForceScale;                                        // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EImpulseDirectionSource                                    ImpulseSource;                                           // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ApplyImpulseToWholeBody;                                 // 0x0039(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LYW0[0x6];                                   // 0x003A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageModifier
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UDamageModifier : public UDataAsset
	{
	public:
		class UDamageCondition*                                    Condition;                                               // 0x0030(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FDamageModifierItem>                         Modifiers;                                               // 0x0038(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageSettings
	 * Size -> 0x0158 (FullSize[0x0188] - InheritedSize[0x0030])
	 */
	class UDamageSettings : public UDataAsset
	{
	public:
		float                                                      TemperatureChangePerColdDamagePoint;                     // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TemperatureChangePerIceDamagePoint;                      // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TemperatureChangePerHeatDamagePoint;                     // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TemperatureChangePerFireDamagePoint;                     // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TemperatureShockActivationWindow;                        // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FrozenDamageBonus;                                       // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              EnemyOnFireStatusEffect;                                 // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              PlayerOnFireStatusEffect;                                // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              TemperatureShockFromFrozenStatusEffect;                  // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              TemperatureShockFromBurningStatusEffect;                 // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InfectionPerDamagePoint;                                 // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C1Z7[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageComponent*                                    ArmorShatterDamage;                                      // 0x0070(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    ChemicalExplosionDamage;                                 // 0x0078(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraSystem*                                      ArmorShatterEmitter;                                     // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           ArmorShatterSound;                                       // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FDecalData>                                  ImpactDecals;                                            // 0x0090(0x0010) Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  ArmorToArmorDamageBreakingCurve;                         // 0x00A0(0x0088) Edit, NativeAccessSpecifierPublic
		float                                                      RadialHealthArmorDamageFalloff;                          // 0x0128(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    HealthArmorBonesAffectedByRadialDamage;                  // 0x012C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageTag*                                          DetonateFrozen;                                          // 0x0130(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageTag*                                          DetonateOnFire;                                          // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageTag*                                          DirectHit;                                               // 0x0140(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageTag*                                          MeltTarget;                                              // 0x0148(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageTag*                                          CookTarget;                                              // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageTag*                                          GibTarget;                                               // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageTag*                                          ExplodeOnDeath;                                          // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageTag*                                          IgnoreBodypartDamageReduction;                           // 0x0168(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageImpulse*                                      DefaultDamageImpulse;                                    // 0x0170(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageImpulse*                                      DoTDamageImpulse;                                        // 0x0178(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RagdollGlobalForceMultiplier;                            // 0x0180(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_71PM[0x4];                                   // 0x0184(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageSubsystem
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UDamageSubsystem : public UGameInstanceSubsystem
	{
	public:
		TArray<struct FDamageSubsystemItem>                        Items;                                                   // 0x0030(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WTX9[0x20];                                  // 0x0040(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageTag
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UDamageTag : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DanceSettings
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UDanceSettings : public UDataAsset
	{
	public:
		TArray<struct FDanceItem>                                  DanceMoves;                                              // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DashPoints
	 * Size -> 0x0120 (FullSize[0x01D0] - InheritedSize[0x00B0])
	 */
	class UDashPoints : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnStartDashEvent;                                        // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStopDashEvent;                                         // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5FCQ[0xC];                                   // 0x00D0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector_NetQuantize                                 DashLocation;                                            // 0x00DC(0x000C) Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6R3R[0x10];                                  // 0x00E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  DashSpeedCurve;                                          // 0x00F8(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_56IB[0x18];                                  // 0x0180(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PointOffset;                                             // 0x0198(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxRangeFromPlayer;                                      // 0x019C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinRangeFromPlayer;                                      // 0x01A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinHeightAboveTarget;                                    // 0x01A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxHeightAboveTarget;                                    // 0x01A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      safeReduction;                                           // 0x01AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AcceptedDashradius;                                      // 0x01B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DashSpeed;                                               // 0x01B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SlowdownRadius;                                          // 0x01B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NTR4[0xC];                                   // 0x01BC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    IgnoreTheClosestPoints;                                  // 0x01C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDashPointsGenerationMode                                  GenerationMode;                                          // 0x01CC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDashing;                                               // 0x01CD(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IgnoreRules;                                             // 0x01CE(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U3OJ[0x1];                                   // 0x01CF(0x0001) MISSED OFFSET (PADDING)

	public:
		void UpdateDashPointData();
		void StopDashing();
		void StartDashing();
		void OnRep_Dashing();
		void OnParentDeath(class UHealthComponentBase* Health);
		struct FVector GetDashPoint(class AActor* fromTarget, bool* success);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DataDepositObjective
	 * Size -> 0x0038 (FullSize[0x01B8] - InheritedSize[0x0180])
	 */
	class UDataDepositObjective : public UObjective
	{
	public:
		unsigned char                                              TowerClass[0x28];                                        // 0x0180(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UDebrisPositioning*                                  DebrisPositioning;                                       // 0x01A8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Complete;                                                // 0x01B0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4DYU[0x7];                                   // 0x01B1(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnRep_Complete();
		void OnHackingProgressChange(float Progress);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DeadStateComponent
	 * Size -> 0x0008 (FullSize[0x0108] - InheritedSize[0x0100])
	 */
	class UDeadStateComponent : public UCharacterStateComponent
	{
	public:
		float                                                      respawnDelay;                                            // 0x0100(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7TYN[0x4];                                   // 0x0104(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetDeathParameters(float respawnDelay, float effectDelay, class UAnimMontage* deathMontage, class UParticleSystem* deathEffect, bool useAnimationTimeAsRespawnTime);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DealWidget
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class UDealWidget : public UUserWidget
	{
	public:
		void UpdateDealText();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDDebrisSettings
	 * Size -> 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
	 */
	class UFSDDebrisSettings : public UDeveloperSettings
	{
	public:
		struct FSoftObjectPath                                     DefaultInfluencerDensityCurve;                           // 0x0038(0x0018) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     DefaultInfluencerSizeCurve;                              // 0x0050(0x0018) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CSGTriangleMapper
	 * Size -> 0x00A0 (FullSize[0x00D0] - InheritedSize[0x0030])
	 */
	class UCSGTriangleMapper : public UDataAsset
	{
	public:
		bool                                                       Enabled;                                                 // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T2FQ[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTerrainMaterial*                                    AttachToMaterial;                                        // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UTerrainType*>                                AttachToTypes;                                           // 0x0040(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    CellCategories;                                          // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DensityInM2;                                             // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinVerticalAngle;                                        // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxVerticalAngle;                                        // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ScaleMin;                                                // 0x0060(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ScaleMax;                                                // 0x006C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScaleBias;                                               // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IndependentScaleAxes;                                    // 0x007C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1JTH[0x3];                                   // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             BaseNormal;                                              // 0x0080(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SurfaceNormalFactor;                                     // 0x008C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             SurfaceNormalLimiter;                                    // 0x0090(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RandomNormalFactor;                                      // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RotationMinAngle;                                        // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RotationMaxAngle;                                        // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PosOffset;                                               // 0x00A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PosOffsetSurface;                                        // 0x00AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FCellNoise>                                  NoiseLayers;                                             // 0x00B0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		struct FDebrisCellNoiseParameters                          CellNoiseParameters;                                     // 0x00C0(0x0010) Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisBase
	 * Size -> 0x0128 (FullSize[0x01F8] - InheritedSize[0x00D0])
	 */
	class UDebrisBase : public UCSGTriangleMapper
	{
	public:
		class UObject*                                             CaveInfluencer;                                          // 0x00D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  InfluencerDensityCurve;                                  // 0x00D8(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  InfluencerSizeCurve;                                     // 0x0160(0x0088) Edit, NativeAccessSpecifierPublic
		class UCurveFloat*                                         CaveInfluenceCurve;                                      // 0x01E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         CaveInflunceSizeCurve;                                   // 0x01F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisCarved
	 * Size -> 0x0058 (FullSize[0x0250] - InheritedSize[0x01F8])
	 */
	class UDebrisCarved : public UDebrisBase
	{
	public:
		EDebrisCarvedType                                          CarverType;                                              // 0x01F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1UX0[0x7];                                   // 0x01F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FUDebrisCarveMesh>                           Meshes;                                                  // 0x0200(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    TerrainMaterial;                                         // 0x0210(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDebrisInfluence                                    CaveInfluenceToAdd;                                      // 0x0218(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		ECarveFilterType                                           Filter;                                                  // 0x0228(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4Z19[0x3];                                   // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExpensiveNoise;                                          // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECarveOptionsCellSize                                      CarveCellSize;                                           // 0x0230(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1IVY[0x3];                                   // 0x0231(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MinNumCarves;                                            // 0x0234(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxNumCarves;                                            // 0x0238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CarveOffsetRadius;                                       // 0x023C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              SpawnAttachClass;                                        // 0x0240(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AttachSpawnOffsetDistance;                               // 0x0248(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZK2L[0x4];                                   // 0x024C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisActorComponent
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UDebrisActorComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_QOTR[0x8];                                   // 0x01F8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisItemComponent
	 * Size -> 0x0040 (FullSize[0x0240] - InheritedSize[0x0200])
	 */
	class UDebrisItemComponent : public UDebrisActorComponent
	{
	public:
		class UDebrisPositioning*                                  Debris;                                                  // 0x0200(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FDebrisItemActorItem>                        Actors;                                                  // 0x0208(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		EDebrisItemPass                                            ItemPass;                                                // 0x0218(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ET5X[0x3];                                   // 0x0219(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InfluenceRange;                                          // 0x021C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinDistanceToImportantLocations;                         // 0x0220(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseAmount;                                               // 0x0224(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FD5T[0x3];                                   // 0x0225(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FIRandRange                                         Amount;                                                  // 0x0228(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    AmountSearchMultiplier;                                  // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JTG8[0xC];                                   // 0x0234(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisDataComponent
	 * Size -> 0x0010 (FullSize[0x0210] - InheritedSize[0x0200])
	 */
	class UDebrisDataComponent : public UDebrisActorComponent
	{
	public:
		class UDebrisBase*                                         Debris;                                                  // 0x0200(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T7CX[0x8];                                   // 0x0208(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisVeinComponent
	 * Size -> 0x0020 (FullSize[0x0220] - InheritedSize[0x0200])
	 */
	class UDebrisVeinComponent : public UDebrisActorComponent
	{
	public:
		class UTerrainMaterial*                                    Material;                                                // 0x0200(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EDebrisCarvedType                                          CarverType;                                              // 0x0208(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AXZD[0x7];                                   // 0x0209(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UVeinResourceCreator*                                VeinCreator;                                             // 0x0210(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GPS8[0x8];                                   // 0x0218(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InfluencerComponent
	 * Size -> 0x0110 (FullSize[0x0310] - InheritedSize[0x0200])
	 */
	class UInfluencerComponent : public UDebrisActorComponent
	{
	public:
		struct FRuntimeFloatCurve                                  ProbabilityCurve;                                        // 0x0200(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  ScaleCurve;                                              // 0x0288(0x0088) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisProbabilityComponent
	 * Size -> 0x0010 (FullSize[0x0210] - InheritedSize[0x0200])
	 */
	class UDebrisProbabilityComponent : public UDebrisActorComponent
	{
	public:
		struct FRandRange                                          ProbabilityRange;                                        // 0x0200(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       IsProbabilityShared;                                     // 0x0208(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6SAV[0x7];                                   // 0x0209(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisDataActor
	 * Size -> 0x0018 (FullSize[0x0238] - InheritedSize[0x0220])
	 */
	class ADebrisDataActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_K7MJ[0x18];                                  // 0x0220(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisInstances
	 * Size -> 0x00D8 (FullSize[0x0750] - InheritedSize[0x0678])
	 */
	class UDebrisInstances : public UHierarchicalInstancedStaticMeshComponent
	{
	public:
		class UDebrisBase*                                         DebrisBase;                                              // 0x0678(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MHYR[0x4];                                   // 0x0680(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DebrisIndex;                                             // 0x0684(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FGWN[0xC8];                                  // 0x0688(0x00C8) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisLocationFinder
	 * Size -> 0x0090 (FullSize[0x02B0] - InheritedSize[0x0220])
	 */
	class ADebrisLocationFinder : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnFailedDelegate;                                        // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSuceesDelegate;                                        // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UDebrisPositioning*                                  Positioning;                                             // 0x0240(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTerrainPlacementComponent*                          terrainPlacement;                                        // 0x0248(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinRadius;                                               // 0x0250(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxRadius;                                               // 0x0254(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxExtraRadius;                                          // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDistanceToImportantRadius;                            // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxIteration;                                            // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxChunksPerFrame;                                       // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DestroyOnFinish;                                         // 0x0268(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WYUK[0x1];                                   // 0x0269(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       StopAtEnoughMatches;                                     // 0x026A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1R9Z[0x45];                                  // 0x026B(0x0045) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisMesh
	 * Size -> 0x0060 (FullSize[0x0258] - InheritedSize[0x01F8])
	 */
	class UDebrisMesh : public UDebrisBase
	{
	public:
		TArray<struct FDebrisStaticMesh>                           Meshes;                                                  // 0x01F8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  CommonMaterial;                                          // 0x0208(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                InGameName;                                              // 0x0210(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FName                                                GemTrackerName;                                          // 0x0228(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                InGameDescription;                                       // 0x0230(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      StartCullDistance;                                       // 0x0248(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EndCullDistance;                                         // 0x024C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0G2C[0x8];                                   // 0x0250(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisCellNoise
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UDebrisCellNoise : public UDataAsset
	{
	public:
		int32_t                                                    Seed;                                                    // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CellSize;                                                // 0x0034(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    NumValues;                                               // 0x0040(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             InvCellSize;                                             // 0x0044(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Initialized;                                             // 0x0050(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5K4D[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisPositioning
	 * Size -> 0x0000 (FullSize[0x01F8] - InheritedSize[0x01F8])
	 */
	class UDebrisPositioning : public UDebrisBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisSet
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UDebrisSet : public UDataAsset
	{
	public:
		unsigned char                                              Debris[0x10];                                            // 0x0030(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisStaticCarved
	 * Size -> 0x0048 (FullSize[0x0240] - InheritedSize[0x01F8])
	 */
	class UDebrisStaticCarved : public UDebrisBase
	{
	public:
		EDebrisCarvedType                                          CarverType;                                              // 0x01F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5MDZ[0x7];                                   // 0x01F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FUDebrisStaticCarveMesh>                     Meshes;                                                  // 0x0200(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    TerrainMaterial;                                         // 0x0210(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDebrisInfluence                                    CaveInfluenceToAdd;                                      // 0x0218(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		ECarveFilterType                                           Filter;                                                  // 0x0228(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LHQW[0x3];                                   // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CarveOffsetRadius;                                       // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              SpawnAttachClass;                                        // 0x0230(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AttachSpawnOffsetDistance;                               // 0x0238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C7D7[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CustomItemPlacementHandling
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCustomItemPlacementHandling : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InfluencerSpawnComponent
	 * Size -> 0x0018 (FullSize[0x0210] - InheritedSize[0x01F8])
	 */
	class UInfluencerSpawnComponent : public USceneComponent
	{
	public:
		class UCaveInfluencer*                                     Influencer;                                              // 0x01F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      range;                                                   // 0x0200(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HGCI[0xC];                                   // 0x0204(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DecalManager
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UDecalManager : public UActorComponent
	{
	public:
		void SpawnDecal(const struct FVector& Location, const struct FVector& Normal, class UFSDPhysicalMaterial* PhysMat);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DeepCSGWorld
	 * Size -> 0x0640 (FullSize[0x0860] - InheritedSize[0x0220])
	 */
	class ADeepCSGWorld : public AActor
	{
	public:
		unsigned char                                              UnknownData_C3J9[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTerrainMaterial*                                    DebugCarveInsideTerrainMaterial;                         // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    DebugCarveOutsizeTerrainMaterial;                        // 0x0230(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    DebugCarveEdgeTerrainMaterial;                           // 0x0238(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    GoldTerrainMaterial;                                     // 0x0240(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    MOMTerrrainMaterial;                                     // 0x0248(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    NitraTerrrainMaterial;                                   // 0x0250(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    EmptyTerrainMaterial;                                    // 0x0258(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    DefaultBurntTerrainMaterial;                             // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    DefaultHardRockMaterial;                                 // 0x0268(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    DefaultBedRockMaterial;                                  // 0x0270(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainType*                                        GoldTerrainType;                                         // 0x0278(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainType*                                        MOMTerrainType;                                          // 0x0280(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainType*                                        RockTerrainType;                                         // 0x0288(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainType*                                        CrystalTerrainType;                                      // 0x0290(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainType*                                        EmptyTerrainType;                                        // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainType*                                        DirtTerrainType;                                         // 0x02A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainType*                                        DefaultBurntTerrainType;                                 // 0x02A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainMaterialsCollection*                         TerrainMaterials;                                        // 0x02B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UDebrisSet*>                                  StandardDebrisSets;                                      // 0x02B8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UDebrisBase*>                                 DebrisLevelGenerationCarved;                             // 0x02C8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class UDebrisBase*>                                 DebrisLargeCarved;                                       // 0x02D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class UDebrisBase*>                                 DebrisSmallCarved;                                       // 0x02E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class UDebrisBase*>                                 DebrisMeshes;                                            // 0x02F8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  DefaultScannerMaterial;                                  // 0x0308(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              TestLevelCarver;                                         // 0x0310(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCoreUObject_FBox                                   TestLevelCarverBoundingBox;                              // 0x0318(0x001C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YME2[0x4];                                   // 0x0334(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ADebrisDataActor*                                    DebrisActorInstance;                                     // 0x0338(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DebrisActorIndex;                                        // 0x0340(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I4PH[0x4];                                   // 0x0344(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AProceduralSetup*                                    ProceduralSetup;                                         // 0x0348(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UObject*>                                     TerrainMaterialAssets;                                   // 0x0350(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JLVG[0x38];                                  // 0x0360(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAsyncPathRequests*                                  AsyncPathRequests;                                       // 0x0398(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnBaseLayerCommitDone;                                   // 0x03A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnBaseLayerFinalCommitDone;                              // 0x03B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
		TArray<class AActor*>                                      TerrainAttachedActors;                                   // 0x03C0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<TWeakObjectPtr<class UObject>>                      TerrainListeners;                                        // 0x03D0(0x0010) ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<class UDebrisBase*>                                 RegisteredDebrisList;                                    // 0x03E0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<struct FDebrisWhenCarving>                          DebrisWhenCarvingList;                                   // 0x03F0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class UDebrisInstances*>                            DebrisInstanceList;                                      // 0x0400(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<struct FRuntimeSpawnedDebris>                       RuntimeSpawnedDebris;                                    // 0x0410(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<TWeakObjectPtr<class UPrimitiveComponent>>          ShowAlwaysScannerComponents;                             // 0x0420(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<TWeakObjectPtr<class UPrimitiveComponent>>          FogOfWarScannerComponents;                               // 0x0430(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<class UDebrisBase*>                                 DebrisHandles;                                           // 0x0440(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6QQO[0x2C0];                                 // 0x0450(0x02C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTerrainLateJoinData                                LateJoinData;                                            // 0x0710(0x00C8) Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<struct FEncodedChunkId>                             VisibleChunks;                                           // 0x07D8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_731G[0x78];                                  // 0x07E8(0x0078) MISSED OFFSET (PADDING)

	public:
		void UnRegisterScannerComponent(class UPrimitiveComponent* Component);
		void TerrainOp_SpawnDebris(const struct FTerrainSpawnDebrisOperationData& Data);
		void TerrainOp_RemoveFloating(const struct FRemoveFloatingIslandOperationData& Data);
		void TerrainOp_PickAxe(const struct FPickaxeDigOperationData& Data);
		void TerrainOp_Melt(const struct FMeltOperationData& Data);
		void TerrainOp_Explode(const struct FGrenadeExplodeOperationData& Data);
		void TerrainOp_Drill(const struct FDrillOperationData& Data);
		void TerrainOp_CarveSTLMesh(const struct FCarveWithSTLMeshOperationData& Data);
		void TerrainOp_CarveSplineSegment(const struct FSplineSegmentCarveOperationData& Data);
		void TerrainOp_CarveCSG(const struct FCSGBuildOperationData& Data);
		void TerrainOp_CarveCollider(const struct FCarveWithColliderOperationData& Data);
		void TerrainMaterialDataLoaded();
		void SpawnDebris(class UDebrisMesh* Debris, const struct FVector& Pos, float Radius);
		void SetVisibleToScanner(const struct FVector& Center, const struct FVector& range);
		void SetRockMaterialForTest(class UTerrainMaterial* Material);
		void SelectDebrisSettings();
		void ResetEntireWorld();
		void RemoveDebrisInstance_TerrainOp2(int32_t instance, int32_t Component);
		void RemoveDebrisInSphere(const struct FVector& Position, float Radius, bool onlyFragile, bool alsoDurable, ESpecialDebrisType onlyType);
		void RegisterScannerComponent(class UPrimitiveComponent* Component, bool useFogOfWar);
		bool Raycast(const struct FVector& Start, const struct FVector& Direction, float MaxDistance, struct FCSGRaycastHitInfo* HitInfo, ELandscapeCellFilter Filter);
		bool Linecast(const struct FVector& Start, const struct FVector& End, struct FCSGRaycastHitInfo* HitInfo, ELandscapeCellFilter Filter);
		bool IsPositionVisibleToScanner(const struct FVector& Pos);
		bool IsPointInsideTerrain(const struct FVector& Pos);
		bool IsComponentRegisteredWithScanner(class UPrimitiveComponent* Component);
		bool InitialGenerationDone();
		int32_t GetTerrainHash();
		int32_t GetShadowQuality();
		class ADebrisDataActor* GetDebrisDataActor();
		void GetAllTerrainActorsAroundPoint(const struct FVector& Center, const struct FVector& range, TArray<class AActor*>* TerrainActors);
		void GenerateAllMeshes();
		void FinishGeneration_Blocking();
		float FindTotalVolumeOfMaterialInWorld(class UTerrainMaterial* Material);
		void CarveWithSTLMeshUsingTransform_Wait(class ADeepCSGWorld* CSGWorld, class USTLMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, const struct FTransform& Transform, EPreciousMaterialOptions Precious, const struct FLatentActionInfo& LatentInfo);
		void CarveWithSTLMeshUsingTransform(class USTLMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, const struct FTransform& Transform, EPreciousMaterialOptions Precious);
		void CarveWithSTLMesh_Wait(class ADeepCSGWorld* CSGWorld, class USTLMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, const struct FVector& Pos, const struct FQuat& Orientation, const struct FVector& Scale, EPreciousMaterialOptions Precious, const struct FLatentActionInfo& LatentInfo);
		void CarveWithSTLMesh(class USTLMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, const struct FVector& Pos, const struct FQuat& Orientation, const struct FVector& Scale, EPreciousMaterialOptions Precious);
		void CarveWithStaticMeshUsingTransform_Wait(class ADeepCSGWorld* CSGWorld, class UStaticMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, const struct FTransform& Transform, EPreciousMaterialOptions Precious, const struct FLatentActionInfo& LatentInfo);
		void CarveWithStaticMeshUsingTransform(class UStaticMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, const struct FTransform& Transform, EPreciousMaterialOptions Precious);
		void CarveWithStaticMesh(class UStaticMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, const struct FVector& Pos, const struct FQuat& Orientation, const struct FVector& Scale, EPreciousMaterialOptions Precious);
		void CarveWithSplineSegments(TArray<struct FCarveSplineSegment> Segments, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, EPreciousMaterialOptions Precious);
		void CarveWithSplineSegment(const struct FVector& SplineStart, const struct FVector& SplineStartTangent, const struct FVector& SplineEnd, const struct FVector& SplineEndTangent, float Radius, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, EPreciousMaterialOptions Precious);
		void CarveWithMeshUsingTransform_Wait(class ADeepCSGWorld* CSGWorld, class UStaticMesh* StaticMesh, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, const struct FTransform& Transform, float ExpensiveNoise, EPreciousMaterialOptions Precious, const struct FLatentActionInfo& LatentInfo);
		void CarveWithMeshUsingTransform(class UStaticMesh* StaticMesh, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, const struct FTransform& Transform, float ExpensiveNoise, EPreciousMaterialOptions Precious, ECarveOptionsCellSize CarverSize);
		void CarveWithMesh_Wait(class ADeepCSGWorld* CSGWorld, class UStaticMesh* StaticMesh, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, const struct FVector& Pos, const struct FQuat& Orientation, const struct FVector& Scale, const struct FLatentActionInfo& LatentInfo);
		void CarveWithMesh(class UStaticMesh* StaticMesh, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, const struct FVector& Pos, const struct FQuat& Orientation, const struct FVector& Scale, EPreciousMaterialOptions Precious);
		void CarveWithCSGBuild(class UClass* CSGModel, const struct FTransform& Transform);
		float CalcApproximateTerrainDensity(const struct FVector& Pos, float Radius);
		class UTerrainMaterial* BPGetTerrainMaterial(int32_t Handle);
		void BaseLayerCommitFinal(bool blocking);
		void BaseLayerCommit(bool blocking, bool scheduleTesselation);
		void AttachActorToTerrain(class AActor* Actor, const struct FVector& Pos);
		void ApplyBaseDebrisCarvers(TArray<class UDebrisBase*> Carvers);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DeepDive
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class UDeepDive : public UObject
	{
	public:
		TArray<class UGeneratedMission*>                           missions;                                                // 0x0028(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		class UBiome*                                              Biome;                                                   // 0x0038(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FDeepDiveRewardItem>                         GivenRewards;                                            // 0x0040(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    MissionsCompleted;                                       // 0x0050(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_34D4[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            StagesCompleted;                                         // 0x0058(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    CurrentMissionIndex;                                     // 0x0068(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GHI1[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDeepDiveTemplate*                                   Template;                                                // 0x0070(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                DeepDiveName;                                            // 0x0078(0x0018) BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic
		int32_t                                                    BestTime;                                                // 0x0090(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MSTD[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		bool IsCompleted();
		bool HasCompletedStage(int32_t stageIndex);
		struct FDeepDiveRewardItem GetGivenRewardAtStage(int32_t stageIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DeepDiveFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDeepDiveFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsEliteDeepDiveMission(class UObject* WorldContextObject, class UGeneratedMission* mission);
		bool IsEliteDeepDive(class UObject* WorldContextObject, class UDeepDive* DeepDive);
		bool GetHasEverCompletedDeepDive(class UObject* WorldContextObject, class UDeepDiveTemplate* DeepDive);
		class UDeepDive* GetDeepDiveFromMission(class UObject* WorldContextObject, class UGeneratedMission* mission);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DeepDiveManager
	 * Size -> 0x00D0 (FullSize[0x00F8] - InheritedSize[0x0028])
	 */
	class UDeepDiveManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_EI3R[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDeepDivesRefresh;                                      // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U7FG[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       LockSeed;                                                // 0x0050(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2IWV[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFSDEventsHandler*                                   EventsHandler;                                           // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDeepDive*                                           ActiveNormalDeepDive;                                    // 0x0060(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDeepDive*                                           ActiveHardDeepDive;                                      // 0x0068(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDeepDive*                                           ActiveDeepDive;                                          // 0x0070(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDeepDive*                                           DebugDeepDive;                                           // 0x0078(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGeneratedMission*                                   CurrentMission;                                          // 0x0080(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CJ65[0x4];                                   // 0x0088(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      currentDepth;                                            // 0x008C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, struct FDeepDiveBank>                        DeepDiveBank;                                            // 0x0090(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    BackendDataValid;                                        // 0x00E0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1W6D[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           BackendExpirationTime;                                   // 0x00E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BackendSeed;                                             // 0x00F0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BC73[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetDeepDive(class UDeepDive* DeepDive);
		void ReInitialize();
		void MarkGivenRewards();
		class UGeneratedMission* GetCurrentSingleMission();
		int32_t GetCurrentDeepDiveStage();
		class UDeepDive* GetActiveNormalDeepDive();
		class UDeepDive* GetActiveHardDeepDive();
		class UDeepDive* GetActiveDeepDive();
		class UDeepDive* GenerateDebugDeepDive(TArray<struct FDeepDiveTesterItem> stages, class UBiome* Biome, bool IsElite);
		int32_t FindDeepDiveSeed(class UDeepDive* DeepDive);
		void DeepDiveRefreshDelegate__DelegateSignature();
		bool CompleteCurrentSingleMission();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DeepDiveSettings
	 * Size -> 0x00E0 (FullSize[0x0110] - InheritedSize[0x0030])
	 */
	class UDeepDiveSettings : public UDataAsset
	{
	public:
		class UDeepDiveTemplate*                                   NormalTemplate;                                          // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDeepDiveTemplate*                                   HardTemplate;                                            // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UMutator*>                                    BaseMutators;                                            // 0x0040(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UMissionMutator*>                             Mutators;                                                // 0x0050(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UMissionWarning*>                             Warnings;                                                // 0x0060(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UDialogDataAsset*>                            DeepDiveMissionCompleteShouts;                           // 0x0070(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FDeepDiveLoaderSequence>                     LoaderSequnces;                                          // 0x0080(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UMissionNameBank*                                    DeepDiveNameBank;                                        // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              MissionBar[0x28];                                        // 0x0098(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              MissionEndScreen_Success[0x28];                          // 0x00C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              MissionEndScreen_Failure[0x28];                          // 0x00E8(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DeepDiveTemplate
	 * Size -> 0x0068 (FullSize[0x00C0] - InheritedSize[0x0058])
	 */
	class UDeepDiveTemplate : public USavableDataAsset
	{
	public:
		TArray<class UDifficultySetting*>                          Difficulties;                                            // 0x0058(0x0010) Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FDeepDiveTemplateItem>                       missions;                                                // 0x0068(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<ESchematicType>                                     Rewards;                                                 // 0x0078(0x0010) Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    CreditsPerPrimaryObjective;                              // 0x0088(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CreditsPerSecondaryObjective;                            // 0x008C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    XPPerPrimaryObjective;                                   // 0x0090(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    XPPerSecondaryObjective;                                 // 0x0094(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HazardBonus;                                             // 0x0098(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BOEL[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRandInterval                                       MutatorCount;                                            // 0x00A0(0x0010) Edit, NativeAccessSpecifierPublic
		struct FRandInterval                                       WarningCount;                                            // 0x00B0(0x0010) Edit, NativeAccessSpecifierPublic

	public:
		bool IsDurationAllowed(class UMissionTemplate* mission, class UMissionDuration* Duration);
		bool IsComplexityAllowed(class UMissionTemplate* mission, class UMissionComplexity* Complexity);
		ESchematicType GetStageRewardType(int32_t stageIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AsyncPathRequestsInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAsyncPathRequestsInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AsyncPathRequests
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UAsyncPathRequests : public UActorComponent
	{
	public:
		TArray<TWeakObjectPtr<class UObject>>                      RequestListeners;                                        // 0x00B0(0x0010) ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AA3T[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DeepPathfinderSceneComponent
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UDeepPathfinderSceneComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_MJP8[0x8];                                   // 0x01F8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlyingEnemyDeepPathfinderCharacter
	 * Size -> 0x0030 (FullSize[0x03E0] - InheritedSize[0x03B0])
	 */
	class AFlyingEnemyDeepPathfinderCharacter : public AEnemyDeepPathfinderCharacter
	{
	public:
		unsigned char                                              UnknownData_IQUE[0x10];                                  // 0x03B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhysicalMaterial*                                   FrozenMaterial;                                          // 0x03C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPhysicsAsset*                                       FrozenAsset;                                             // 0x03C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           FrozenDeathSound;                                        // 0x03D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     FrozenDeathparticles;                                    // 0x03D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void TriggerFrozenRagdoll();
		void OnFreezeImpact(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void BP_FreezeImpact();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FrozenPawnImpactComponent
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UFrozenPawnImpactComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnStartFallingEvent;                                     // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFreezeImpactEvent;                                     // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NJXG[0x10];                                  // 0x00D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhysicalMaterial*                                   FrozenMaterial;                                          // 0x00E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPhysicsAsset*                                       FrozenAsset;                                             // 0x00E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           FrozenDeathSound;                                        // 0x00F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     FrozenDeathparticles;                                    // 0x00F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void TriggerFrozenRagdoll();
		void OnFrozen(bool frozen);
		void OnFreezeImpact(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DeepPathfinderMovement
	 * Size -> 0x02F8 (FullSize[0x0430] - InheritedSize[0x0138])
	 */
	class UDeepPathfinderMovement : public UPawnMovementComponent
	{
	public:
		unsigned char                                              UnknownData_TG4H[0x8];                                   // 0x0138(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UseDormancy;                                             // 0x0140(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9ZBX[0x3];                                   // 0x0141(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxPawnSpeed;                                            // 0x0144(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StrafeSpeed;                                             // 0x0148(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinSlowdownAngle;                                        // 0x014C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxSlowdownAngle;                                        // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxStrafeDistance;                                       // 0x0154(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AlignDirectionSpeed;                                     // 0x0158(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FleeSpeedBoostMultiplier;                                // 0x015C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxAcceleration;                                         // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxBrakingDeceleration;                                  // 0x0164(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AngleSpeedFilterFactor;                                  // 0x0168(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint32_t                                                   AIAvoidanceWeight;                                       // 0x016C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EDeepPathFinderType                                        PathfinderType;                                          // 0x0170(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EDeepPathFinderSize                                        PathfinderSize;                                          // 0x0171(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ETeleportType                                              MovementPhysicsType;                                     // 0x0172(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EDeepPathFinderPreference                                  PathfinderPreference;                                    // 0x0173(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AlignTowardsTargetIfStationary;                          // 0x0174(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I6CK[0x3];                                   // 0x0175(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AlignToTargetMinRequiredAngle;                           // 0x0178(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AllowSlowTickRateWhenNotVisible;                         // 0x017C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ForceAPathIfNoneFound;                                   // 0x017D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DrawServerPath;                                          // 0x017E(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3YL1[0x1];                                   // 0x017F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPathBegin;                                             // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPauseMovementElapsed;                                  // 0x0190(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPathFinished;                                          // 0x01A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRefreshDestination;                                    // 0x01B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStateChanged;                                          // 0x01C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PK7O[0x28];                                  // 0x01D0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ADeepCSGWorld*                                       CSGWorld;                                                // 0x01F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		uint32_t                                                   PathMovedDist;                                           // 0x0200(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		uint32_t                                                   LocalPathMovedDist;                                      // 0x0204(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FDeepRepPath                                        Path;                                                    // 0x0208(0x00D0) Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		class UFakeMoverSettings*                                  MoveSettings;                                            // 0x02D8(0x0008) Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              TargetActor;                                             // 0x02E0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    CurrentPathIndex;                                        // 0x02E8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CurrentPathFraction;                                     // 0x02EC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             Destination;                                             // 0x02F0(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V6TS[0x4];                                   // 0x02FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              DestinationActor;                                        // 0x0300(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AcceptanceRadius;                                        // 0x0308(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       OnlyPartPath;                                            // 0x030C(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SPBB[0x3];                                   // 0x030D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PauseMovementTime;                                       // 0x0310(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EDeepMovementMode                                          MoveMode;                                                // 0x0314(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_D9CT[0x3];                                   // 0x0315(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPawnStatsComponent*                                 PawnStats;                                               // 0x0318(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YJV5[0x14];                                  // 0x0320(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LastForwardDir;                                          // 0x0334(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      VerticalAngleSpeed;                                      // 0x0340(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      HorizontalAngleSpeed;                                    // 0x0344(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       IsStrafing;                                              // 0x0348(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       HasOustandingPathRequest;                                // 0x0349(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       LastPathReachedPreciseDestination;                       // 0x034A(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MBDK[0x25];                                  // 0x034B(0x0025) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PostponedTickTime;                                       // 0x0370(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       LastMoveSuccessful;                                      // 0x0374(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       HandleRotation;                                          // 0x0375(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       TickAfterOwnerDeath;                                     // 0x0376(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FHandleRotationOptions                              HandleRotationOptions;                                   // 0x0377(0x0001) Edit, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1CSR[0x18];                                  // 0x0378(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             UnfilteredPosition;                                      // 0x0390(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             LastDestPosUsed;                                         // 0x039C(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DampOmega;                                               // 0x03A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       UseMovementSpring;                                       // 0x03AC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       SnapToPathfinderOnFirstMove;                             // 0x03AD(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_K1JI[0x2];                                   // 0x03AE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFakeMoverState                                     FakePhysicsMove;                                         // 0x03B0(0x0060) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		float                                                      FakeSyncTime;                                            // 0x0410(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_N6SJ[0x1C];                                  // 0x0414(0x001C) MISSED OFFSET (PADDING)

	public:
		void UpdateTargetActor(class AActor* NewTarget);
		void UpdateDestination(const struct FVector& Dest);
		void UnPauseMovement();
		void TeleportTo(const struct FVector& destLoc, const struct FRotator& destRot);
		void StopMove();
		void StopAttackStance();
		bool StartMoveToActor(class AActor* Dest, float AcceptanceRadius, bool ToCenterOfMass);
		bool StartMoveTo(const struct FVector& Dest, float AcceptanceRadius);
		bool StartFleeFrom(const struct FVector& dangerPos, float Distance);
		void StartFakePhysicsMoveSet(class UFakeMoverSettings* MoveSettings);
		void StartFakePhysics(const struct FVector& Vel);
		void StartAttackStance(const struct FVector& stancePos);
		void SnapToPathfinder();
		void SetSlowDownAngles(float Min, float Max);
		void SetMaxSpeed(float Speed);
		void SetMaxAcceleration(float Value);
		void SetHandleRotation(bool flag);
		void SetFreezeAlignment(bool Freeze);
		void SetControlledExternally(bool controlled);
		void PauseMovement(float Time);
		bool PathExistTo(const struct FVector& Dest);
		bool PathExistsBetween(const struct FVector& From, const struct FVector& To);
		void OnRep_PathMovedDist(uint32_t lastPathMovedDist);
		void OnRep_Path(const struct FDeepRepPath& oldPath);
		void OnRep_MoveSettings(class UFakeMoverSettings* MoveSettings);
		bool IsFreezeAlignmentSet();
		float GetVerticalAngleSpeed();
		void GetRandomSpawnPointAtApproximateDistance_Async(const struct FVector& Origin, float Distance, bool* success, struct FVector* outPos, const struct FLatentActionInfo& LatentInfo);
		void GetRandomReachablePointAtApproximateDistance_Async(const struct FVector& Origin, float Distance, bool* success, struct FVector* outPos, const struct FLatentActionInfo& LatentInfo);
		bool GetRandomReachablePointAtApproximateDistance(const struct FVector& Origin, float Distance, struct FVector* outPos);
		struct FVector GetPathForwardDirection();
		EDeepPathFinderType GetPathfinderType();
		EDeepPathFinderSize GetPathfinderSize();
		EDeepMovementState GetMovementState();
		float GetMaxAcceleration();
		bool GetIsStrafing();
		float GetHorizontalAngleSpeed();
		struct FVector GetCurrentMovePos();
		class UFakeMoverSettings* GetCurrentFakePhysicsMoveSet();
		float GetApproximatePathLength(const struct FVector& Start, const struct FVector& End);
		bool FlyToConnectedPosition(const struct FVector& destPos);
		bool FindPointKeepingDistance(const struct FVector& Origin, float MinDistance, float MaxDistance, const struct FVector& Target, float idealTargetDistance, struct FVector* outPos);
		struct FVector FindPathfinderPointBelow(const struct FVector& Pos, float HeightOffset);
		struct FVector FindPathfinderPointAbove(const struct FVector& Pos, float HeightOffset);
		struct FVector FindPathfinderOffsetPoint(const struct FVector& Pos, EOffsetFrom offsetFrom, float HeightOffset);
		struct FVector FindNearestPathfinderPointOverrideType(const struct FVector& Pos, EDeepPathFinderType overrideType, float MaxDistance);
		void FindNearestPathfinderPoint_Async(const struct FVector& Pos, float MaxDistance, bool* success, struct FVector* outPos, const struct FLatentActionInfo& LatentInfo);
		struct FVector FindNearestPathfinderPoint(const struct FVector& Pos, float MaxDistance);
		struct FVector FindNearestConnectedPathfinderPoint(const struct FVector& Pos, float MaxDistance);
		struct FQuat CalcPathfinderOrientation(const struct FVector& Pos, const struct FVector& forwardDir);
		bool BackOffFrom(const struct FVector& dangerPos, float Distance);
		void AddFakeMoverImpulse(const struct FVector& Impulse);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DefenseEvent
	 * Size -> 0x0018 (FullSize[0x0380] - InheritedSize[0x0368])
	 */
	class ADefenseEvent : public AGameEvent
	{
	public:
		float                                                      DefendDuration;                                          // 0x0368(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5Z31[0x4];                                   // 0x036C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DefendWidget;                                            // 0x0370(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Progress;                                                // 0x0378(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TY9G[0x4];                                   // 0x037C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_Progress(float OldValue);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DefensePointActor
	 * Size -> 0x0040 (FullSize[0x0260] - InheritedSize[0x0220])
	 */
	class ADefensePointActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_8LBU[0x20];                                  // 0x0220(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DefenseEvent;                                            // 0x0240(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AGameEvent*                                          ActiveDefenceEvent;                                      // 0x0248(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDefendPointState                                          DefendState;                                             // 0x0250(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7T09[0x7];                                   // 0x0251(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USingleUsableComponent*                              DefendPointUsable;                                       // 0x0258(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetState(EDefendPointState State);
		void OnRep_DefendState();
		void OnDefensePointActivated(class APlayerCharacter* Player, EInputKeys Key);
		void DefenseStart();
		void DefenseFail();
		void DefenseComplete();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DefenseObjective
	 * Size -> 0x0030 (FullSize[0x01B0] - InheritedSize[0x0180])
	 */
	class UDefenseObjective : public UObjective
	{
	public:
		int32_t                                                    DefensePoints;                                           // 0x0180(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PointsDefended;                                          // 0x0184(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              ObjectiveDefenseClasses[0x10];                           // 0x0188(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TArray<class ADefensePointActor*>                          ActiveObjectiveDefenseActors;                            // 0x0198(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UDebrisPositioning*                                  DebrisPositioning;                                       // 0x01A8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void PointDefended();
		void OnRep_PointsRepaired();
		void OnDefensePointsSpawned();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DestinationActorComponent
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UDestinationActorComponent : public UActorComponent
	{
	public:
		TWeakObjectPtr<class AActor>                               DestinationActor;                                        // 0x00B0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		float GetDistToDestinationActor();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DetPack
	 * Size -> 0x0068 (FullSize[0x0288] - InheritedSize[0x0220])
	 */
	class ADetPack : public AActor
	{
	public:
		unsigned char                                              UnknownData_HHRJ[0x20];                                  // 0x0220(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UpgradedStaggerChance;                                   // 0x0240(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UpgradedStaggerDuration;                                 // 0x0244(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UpgradedFearFactor;                                      // 0x0248(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VisualDamageRadius;                                      // 0x024C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IncreasedFearRadius;                                     // 0x0250(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IncreasedStaggerRadius;                                  // 0x0254(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProjectileMovementComponent*                        Movement;                                                // 0x0258(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UExplosionComponent*                                 Explosion;                                               // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USingleUsableComponent*                              UseComp;                                                 // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USimpleHealthComponent*                              SimpleHealth;                                            // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ADetPackItem*                                        Detonator;                                               // 0x0278(0x0008) Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasExploded;                                             // 0x0280(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsMoving;                                                // 0x0281(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ExplodesOnDeath;                                         // 0x0282(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasExtraStaggerRadius;                                   // 0x0283(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasExtraFearRadius;                                      // 0x0284(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LSPE[0x3];                                   // 0x0285(0x0003) MISSED OFFSET (PADDING)

	public:
		void UseFearStaggerUpgrades();
		void RecieveHitObject();
		void OnRep_IsMoving();
		void OnRep_HasExploded();
		void OnExploded();
		void OnDetPackPickedUp(class APlayerCharacter* User, EInputKeys Key);
		void OnDetPackDeath(class UHealthComponentBase* HealthComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DetPackItem
	 * Size -> 0x00D8 (FullSize[0x04A8] - InheritedSize[0x03D0])
	 */
	class ADetPackItem : public AAnimatedItem
	{
	public:
		unsigned char                                              UnknownData_BY21[0x10];                                  // 0x03D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DetPackClass;                                            // 0x03E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              LoadoutProxy;                                            // 0x03E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FPThrowMontage;                                          // 0x03F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TPThrowMontage;                                          // 0x03F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FP_DetonateAnim;                                         // 0x0400(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_DetonateAnim;                                        // 0x0408(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FP_EquipDetonatorAnimation;                              // 0x0410(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_EquipDetonatorAnimation;                             // 0x0418(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              DetonatorFPMesh;                                         // 0x0420(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              DetonatorTPMesh;                                         // 0x0428(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UForceFeedbackEffect*                                DetonatorTriggerForceFeedback;                           // 0x0430(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCapacityHoldingItemAggregator*                      Capacity;                                                // 0x0438(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SupplyStatusWeight;                                      // 0x0440(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThrowVelocity;                                           // 0x0444(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EnheiritOwnerVelocityScale;                              // 0x0448(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThrowAngle;                                              // 0x044C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CooldownAfterThrow;                                      // 0x0450(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CooldownAfterDetonation;                                 // 0x0454(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThrowDelay;                                              // 0x0458(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThrowZOffset;                                            // 0x045C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    ShoutDetPackPlaced;                                      // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    ShoutOutOfAmmo;                                          // 0x0468(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QC8R[0x4];                                   // 0x0470(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CooldownLeft;                                            // 0x0474(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ADetPack*>                                    ThrownPacks;                                             // 0x0478(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UItemUpgrade*>                                DetPackUpgrades;                                         // 0x0488(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EESN[0xA];                                   // 0x0498(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsDetonatorOut;                                          // 0x04A2(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasThrownPack;                                           // 0x04A3(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OU1P[0x4];                                   // 0x04A4(0x0004) MISSED OFFSET (PADDING)

	public:
		void Simulate_ThrowGrenade();
		void Server_ThrowGrenade();
		void Server_Detonate();
		void Server_CycleItem();
		void Receive_OnRep_IsDetonatorOut();
		void OnRep_IsDetonatorOut();
		void OnDetonatingFinished();
		int32_t GetCurrentGrenades();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DialogDataAsset
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UDialogDataAsset : public UDataAsset
	{
	public:
		bool                                                       Enabled;                                                 // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AudioOnly;                                               // 0x0031(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       SelectUsingWeight;                                       // 0x0032(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EXS4[0x1];                                   // 0x0033(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShoutDelay;                                              // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShoutCoolDown;                                           // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShoutChance;                                             // 0x003C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FDialogStruct>                               Entries;                                                 // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class USoundSubmixBase*>                            SubmixSends;                                             // 0x0050(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<int32_t>                                            Playlist;                                                // 0x0060(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		int32_t SelectIndex(class UObject* WorldContext);
		bool SelectEntry(class UObject* WorldContext, struct FDialogStruct* Dialog);
		struct FDialogStruct GetShout(int32_t Index);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DifficultyManager
	 * Size -> 0x0048 (FullSize[0x00F8] - InheritedSize[0x00B0])
	 */
	class UDifficultyManager : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_C9CN[0x24];                                  // 0x00B0(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinModifierEnemyCount;                                   // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinModifierAttackCooldown;                               // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinModifierSpeed;                                        // 0x00DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ForcedPlayerCount;                                       // 0x00E0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JBVY[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFSDGameMode*                                        GameMode;                                                // 0x00E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFSDGameState*                                       GameState;                                               // 0x00F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UDifficultySetting* SelectDifficulty(int32_t Index);
		float GetSpeedModifier();
		float GetSmallEnemyDamageResistance();
		float GetPointExtractionScaler();
		float GetExtraLargeEnemyDamageResistanceD();
		float GetExtraLargeEnemyDamageResistanceC();
		float GetExtraLargeEnemyDamageResistanceB();
		float GetExtraLargeEnemyDamageResistance();
		float GetEnemyDamageResistance();
		float GetEnemyDamageModifier();
		float GetEnemyCountModifier();
		class UDifficultySetting* GetCurrentDifficulty();
		float GetBossDifficultyScaler();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DifficultySetting
	 * Size -> 0x01E8 (FullSize[0x0240] - InheritedSize[0x0058])
	 */
	class UDifficultySetting : public USavableDataAsset
	{
	public:
		class FText                                                DifficultyName;                                          // 0x0058(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                ShortDifficultyName;                                     // 0x0070(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                UnlockRequirementDescription;                            // 0x0088(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UClass*                                              CampaignRequirement;                                     // 0x00A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              SelectedByDefaultCampaignRequirement;                    // 0x00A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EnvironmentalDamageModifier;                             // 0x00B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NCSZ[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              ExtraLargeEnemyDamageResistance;                         // 0x00B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<float>                                              ExtraLargeEnemyDamageResistanceB;                        // 0x00C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<float>                                              ExtraLargeEnemyDamageResistanceC;                        // 0x00D8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<float>                                              ExtraLargeEnemyDamageResistanceD;                        // 0x00E8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<float>                                              EnemyDamageResistance;                                   // 0x00F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<float>                                              SmallEnemyDamageResistance;                              // 0x0108(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<float>                                              EnemyDamageModifier;                                     // 0x0118(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      EnemyToEnemyDamageModifier;                              // 0x0128(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1QS3[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              EnemyCountModifier;                                      // 0x0130(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      BossDifficultyScaler;                                    // 0x0140(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PointExtractionScaler;                                   // 0x0144(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRandInterval                                       EncounterDifficulty;                                     // 0x0148(0x0010) Edit, Protected, NativeAccessSpecifierProtected
		struct FRandInterval                                       StationaryDifficulty;                                    // 0x0158(0x0010) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      SpecialEncounterModifier;                                // 0x0168(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HazardBonus;                                             // 0x016C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FriendlyFireModifier;                                    // 0x0170(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YH16[0x4];                                   // 0x0174(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRandInterval                                       EnemyWaveInterval;                                       // 0x0178(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FRandInterval                                       EnemyNormalWaveInterval;                                 // 0x0188(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FRandInterval                                       EnemyNormalWaveDifficulty;                               // 0x0198(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      WaveStartDelayScale;                                     // 0x01A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0LX8[0x4];                                   // 0x01AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRandInterval                                       EnemyDiversity;                                          // 0x01B0(0x0010) Edit, Protected, NativeAccessSpecifierProtected
		struct FRandInterval                                       StationaryEnemyDiversity;                                // 0x01C0(0x0010) Edit, Protected, NativeAccessSpecifierProtected
		struct FIRandRange                                         DisruptiveEnemyPoolCount;                                // 0x01D0(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MinPoolSize;                                             // 0x01D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PCXS[0x4];                                   // 0x01DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVeteranComposition                                 Veterans;                                                // 0x01E0(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      SpeedModifier;                                           // 0x0200(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttackCooldownModifier;                                  // 0x0204(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ProjectileSpeedModifier;                                 // 0x0208(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DifficultyGroup;                                         // 0x020C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DifficultyGroupIndex;                                    // 0x0210(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2HFT[0x4];                                   // 0x0214(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMissionStat*>                                MissionCompletedStats;                                   // 0x0218(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      HeathRegenerationMax;                                    // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReviveHealthRatio;                                       // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EliteChanceModifier;                                     // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EliteCooldown;                                           // 0x0234(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxActiveElites;                                         // 0x0238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JLSL[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (PADDING)

	public:
		bool IsUnlocked(class UObject* WorldContext);
		int32_t GetDifficultyIndex();
		float AddHazardBonus(float BaseValue);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DiscordWrapper
	 * Size -> 0x02C8 (FullSize[0x02F0] - InheritedSize[0x0028])
	 */
	class UDiscordWrapper : public UObject
	{
	public:
		unsigned char                                              UnknownData_1PIP[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDiscordServerInviteData                            ServerInfo;                                              // 0x0038(0x0078) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnResponseSuccessChanged;                                // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		bool                                                       LastResponseSuccessful;                                  // 0x00C0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XCOZ[0x7];                                   // 0x00C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDiscordEoMDataEvent;                                   // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y823[0x30];                                  // 0x00D8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UserIn;                                                  // 0x0108(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OVJ1[0x7];                                   // 0x0109(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDiscordRewardNotification                          rewardNotification;                                      // 0x0110(0x0040) BlueprintVisible, Protected, NativeAccessSpecifierProtected
		int32_t                                                    UserInStatus;                                            // 0x0150(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasEoM;                                                  // 0x0154(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0U1A[0x3];                                   // 0x0155(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDiscordEoMData                                     EoMData;                                                 // 0x0158(0x0020) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VSNI[0x100];                                 // 0x0178(0x0100) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsConnected;                                             // 0x0278(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F09L[0x1];                                   // 0x0279(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ServerInfoLoaded;                                        // 0x027A(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VWFC[0x5];                                   // 0x027B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDiscordServerInfoLoaded;                               // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDiscordServerCountLoaded;                              // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDiscordUserInServer;                                   // 0x02A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9XNK[0x40];                                  // 0x02B0(0x0040) MISSED OFFSET (PADDING)

	public:
		void RequestUserInServer();
		void RequestFactionAdjustment(int32_t Faction, bool force);
		void RequestEoMData();
		void RequestDiscordServerInfo();
		void RejectInviteSignature();
		void IgnoreInviteSignature();
		class FString GetAvatarURL();
		void AdjustFaction();
		void AcceptInviteSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DisplayCase
	 * Size -> 0x0218 (FullSize[0x0438] - InheritedSize[0x0220])
	 */
	class ADisplayCase : public AActor
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     ContentAttachPoint;                                      // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              ContentMesh;                                             // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnContentUpdated;                                        // 0x0238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  RelativeZOffset;                                         // 0x0248(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  ReactZOffsetCof;                                         // 0x02D0(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  ReactTimeDilationCof;                                    // 0x0358(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FDisplayContent>                             Contents;                                                // 0x03E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5H3A[0x18];                                  // 0x03F0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RotationSpeed;                                           // 0x0408(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BeerMugSpawnChancePercent;                               // 0x040C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BarrelSpawnChancePercent;                                // 0x0410(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CZ07[0x10];                                  // 0x0414(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeMultiplier;                                          // 0x0424(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SizeMultiplier;                                          // 0x0428(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ContentIndex;                                            // 0x042C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    BeerMugShout;                                            // 0x0430(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void RefreshContent();
		void PlayReactionAnimation();
		void OnRep_ContentIndex();
		bool IsSpecialContent();
		void InitializeCase();
		bool GetCurrentContent(struct FDisplayContent* currentContent);
		void ChangeContent();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DorrettaHead
	 * Size -> 0x0010 (FullSize[0x0278] - InheritedSize[0x0268])
	 */
	class ADorrettaHead : public ACarriableItem
	{
	public:
		class UCarriableInstantUsable*                             Usable;                                                  // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCarriableComponent*                                 CarriableComponent;                                      // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DoubleDrillAggregator
	 * Size -> 0x0008 (FullSize[0x0148] - InheritedSize[0x0140])
	 */
	class UDoubleDrillAggregator : public UCapacityBasedItemAggregator
	{
	public:
		unsigned char                                              UnknownData_XUFO[0x8];                                   // 0x0140(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DualAnimatedItem
	 * Size -> 0x0058 (FullSize[0x03C8] - InheritedSize[0x0370])
	 */
	class ADualAnimatedItem : public AItem
	{
	public:
		class UAnimInstance*                                       FPAnimInstance;                                          // 0x0370(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerAnimInstance*                                 TPAnimInstance;                                          // 0x0378(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              FPRMesh;                                                 // 0x0380(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              FPLMesh;                                                 // 0x0388(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              TPRMesh;                                                 // 0x0390(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              TPLMesh;                                                 // 0x0398(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FP_EquipAnimation;                                       // 0x03A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_EquipAnimation;                                       // 0x03A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EquipDuration;                                           // 0x03B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZXYQ[0x4];                                   // 0x03B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItemCharacterAnimationSet*                          CharacterAnimationSet;                                   // 0x03B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U2B0[0x8];                                   // 0x03C0(0x0008) MISSED OFFSET (PADDING)

	public:
		class USkeletalMeshComponent* GetRItemMesh();
		class USkeletalMeshComponent* GetLItemMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DoubleDrillItem
	 * Size -> 0x0138 (FullSize[0x0500] - InheritedSize[0x03C8])
	 */
	class ADoubleDrillItem : public ADualAnimatedItem
	{
	public:
		unsigned char                                              UnknownData_WMYF[0x18];                                  // 0x03C8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFirstPersonParticleSystemComponent*                 FP_Left_DrillParticles;                                  // 0x03E0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFirstPersonParticleSystemComponent*                 FP_Right_DrillParticles;                                 // 0x03E8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    DamageComponent;                                         // 0x03F0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAudioComponent*                                  AudioComponent;                                          // 0x03F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDoubleDrillAggregator*                              Aggregator;                                              // 0x0400(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        FPMineMontage;                                           // 0x0408(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        TPMineMontage;                                           // 0x0410(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        FPOverheat;                                              // 0x0418(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        TPOverheat;                                              // 0x0420(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        FPGunsling;                                              // 0x0428(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        TPGunsling;                                              // 0x0430(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                MiningSpeedAudioParamterName;                            // 0x0438(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     DrillParticles;                                          // 0x0440(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UForceFeedbackEffect*                                DrillRumble;                                             // 0x0448(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BlockParticlesScaleFP;                                   // 0x0450(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BlockParticlesScaleTP;                                   // 0x0454(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EDoubleDrillState                                          State;                                                   // 0x0458(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XD5B[0x3];                                   // 0x0459(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MovementPenalty;                                         // 0x045C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MiningRate;                                              // 0x0460(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HeatReductionPerKill;                                    // 0x0464(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CarveSize;                                               // 0x0468(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CarveNoise;                                              // 0x0474(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CarverRayCastLength;                                     // 0x0478(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CarveTerrainDistanceCheck;                               // 0x047C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TimeToNextMine;                                          // 0x0480(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentDrillSpeed;                                       // 0x0484(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamageDistance;                                          // 0x0488(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamageRadius;                                            // 0x048C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FriendlyDamageRadius;                                    // 0x0490(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamageRate;                                              // 0x0494(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Damage;                                                  // 0x0498(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      armorDamageMultiplier;                                   // 0x049C(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageClass*                                        DamageClass;                                             // 0x04A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FriendlyFireModifier;                                    // 0x04A8(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxFuel;                                                 // 0x04AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Fuel;                                                    // 0x04B0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FuelUsePerDig;                                           // 0x04B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FuelUsePerMelee;                                         // 0x04B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SupplyStatusWeight;                                      // 0x04BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    ShoutOutOfFuel;                                          // 0x04C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FHitResult>                                  HitCache;                                                // 0x04C8(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<struct FDoubleDrillDamageItem>                      DamageCache;                                             // 0x04D8(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O2SL[0x10];                                  // 0x04E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DrillParticlesDuration;                                  // 0x04F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsMining;                                                // 0x04FC(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsGunslinging;                                           // 0x04FD(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CM30[0x2];                                   // 0x04FE(0x0002) MISSED OFFSET (PADDING)

	public:
		void Server_StopMining();
		void Server_StartMining();
		void Server_DoDamage(TArray<struct FDoubleDrillDamageItem> Targets);
		void Server_DigBlock(const struct FVector_NetQuantize& Start, const struct FVector_NetQuantize& End);
		void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);
		void OnStopDrilling();
		void OnStartDrilling();
		void OnRep_SimulatingMining();
		void OnRep_IsGunslinging();
		void OnDrillParticlesTimerElapsed();
		void Client_Resupply(float percentage);
		void BP_OnDrillDamage();
		void All_SimulateDigDebris(const struct FVector_NetQuantize& Position, int32_t DebrisIndex);
		void All_SimulateDigBlock(const struct FVector_NetQuantize& Position, bool SpawnParticles, int32_t Material);
		void All_SimulateDamage(TArray<struct FDoubleDrillDamageItem> Targets);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DoubleDrillAnimInstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class UDoubleDrillAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_7IL8[0x8];                                   // 0x02B8(0x0008) Fix Super Size
		class ADoubleDrillItem*                                    Item;                                                    // 0x02C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z71P[0x8];                                   // 0x02C8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DownedStateComponent
	 * Size -> 0x0050 (FullSize[0x0150] - InheritedSize[0x0100])
	 */
	class UDownedStateComponent : public UCharacterStateComponent
	{
	public:
		struct FDeathIntroSettings                                 Intro;                                                   // 0x0100(0x0024) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      DownedHealthLossPerSecond;                               // 0x0124(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TerrainRemovedFallThreshold;                             // 0x0128(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DownedBombActive;                                        // 0x012C(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BWWN[0xB];                                   // 0x012D(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageComponent*                                    DownedBombDamage;                                        // 0x0138(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnEnableDownedBombUIEvent;                               // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected

	public:
		void TriggerDownedBombDamage();
		void Server_TriggerDownedBomb();
		void Receive_TriggerDownedBomb();
		class UDamageComponent* CreateDownedBombDamage(class UClass* DamageClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MoveDownedPlayerCapsule
	 * Size -> 0x0010 (FullSize[0x0480] - InheritedSize[0x0470])
	 */
	class UMoveDownedPlayerCapsule : public UCapsuleComponent
	{
	public:
		TArray<class USceneComponent*>                             TargetLocations;                                         // 0x0470(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DrinkableActor
	 * Size -> 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
	 */
	class ADrinkableActor : public AActor
	{
	public:
		class UDrinkableDataAsset*                                 DrinkableData;                                           // 0x0220(0x0008) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Pickup(class APlayerCharacter* byCharacter);
		void OnRep_DrinkableData();
		void Fill();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DrinkableDataAsset
	 * Size -> 0x01C8 (FullSize[0x0220] - InheritedSize[0x0058])
	 */
	class UDrinkableDataAsset : public USavableDataAsset
	{
	public:
		class FText                                                DrinkableName;                                           // 0x0058(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                DrinkableDescription;                                    // 0x0070(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		int32_t                                                    DrinkablePrice;                                          // 0x0088(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsSpecialBeer;                                           // 0x008C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2PWJ[0x3];                                   // 0x008D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              DrinkableIcon[0x28];                                     // 0x0090(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		int32_t                                                    RequiredPlayerRank;                                      // 0x00B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ParticipatesInFreeBeerEvent;                             // 0x00BC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EDrinkableAlcoholStrength                                  AlcoholStrength;                                         // 0x00BD(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5PSN[0x2];                                   // 0x00BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDrinkableDataAsset*                                 SpecialEdition;                                          // 0x00C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDLCBase*                                            RequiredDLC;                                             // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayFireworks;                                          // 0x00D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V5Q3[0x7];                                   // 0x00D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMissionStat*                                        StatConsumed;                                            // 0x00D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMissionStat*                                        StatRoundOrdered;                                        // 0x00E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              DrinkableActorClass[0x28];                               // 0x00E8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              DrinkableItemClass[0x28];                                // 0x0110(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UDialogDataAsset*                                    OrderShout;                                              // 0x0138(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    OrderCheeringShout;                                      // 0x0140(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    DrinkSaluteShout;                                        // 0x0148(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTemporaryBuff*                                      buff;                                                    // 0x0150(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              DrinkEffect[0x28];                                       // 0x0158(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		TMap<class UResourceData*, int32_t>                        UnlockCost;                                              // 0x0180(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TMap<class UResourceData*, int32_t>                        PurchaseCost;                                            // 0x01D0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		bool TryUnlockSpecialDrinks(class UObject* WorldContext);
		bool TryUnlockDrink(class UObject* WorldContext);
		bool TryPurchaseDrink(class UObject* WorldContext);
		void OnRoundOrdered(class APlayerCharacter* Character);
		bool MustBeUnlocked();
		bool IsUnlocked(class UObject* WorldContext);
		bool IsDrinkFree(class UObject* WorldContext);
		bool HasSpecialEdition();
		class UDrinkableDataAsset* GetSpecialEdition(class UObject* WorldContext);
		class UTexture2D* GetDrinkableIcon();
		bool AreSpecialDrinksUnlocked(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DrinkEffectComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UDrinkEffectComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_W14P[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BeerEffectDurationSeconds;                               // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AutoDestroy;                                             // 0x00BC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       EffectIsActive;                                          // 0x00BD(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ActivatesOnlyOnceWhenDrinking;                           // 0x00BE(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1UT6[0x1];                                   // 0x00BF(0x0001) MISSED OFFSET (PADDING)

	public:
		void StopEffect();
		void OnStopEffect();
		void OnStartEffect(class APlayerCharacter* Character);
		void OnChangedCharacter(class APlayerCharacter* changedToCharacter, class UClass* DrinkEffectClass);
		bool GetActivateOnlyWhenDrinking();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DrinkableItem
	 * Size -> 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
	 */
	class ADrinkableItem : public AAnimatedItem
	{
	public:
		class UDrinkableDataAsset*                                 DrinkableData;                                           // 0x03D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_DrinkableData();
		void OnCameraModeChanged(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode);
		void Consume();
		void ClientConsumed();
		bool CheckCanSalute();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DrinkSettings
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class UDrinkSettings : public UDataAsset
	{
	public:
		TArray<struct FBarleySpawnItem>                            BarleySpawns;                                            // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		struct FRandInterval                                       BarleyAmount;                                            // 0x0040(0x0010) Edit, NativeAccessSpecifierPublic
		TMap<class UResourceData*, int32_t>                        SpecialBeerUnlockCost;                                   // 0x0050(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<class UDrinkableDataAsset*>                         Drinkables;                                              // 0x00A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		TArray<class UDrinkableDataAsset*> GetBarDrinkables(class UObject* WorldContext, bool IncludeDailySpecial, bool includeNotUnlocked, bool includePlayerRankTooLow);
		class UDrinkableDataAsset* GetBarDailySpecial(class UObject* WorldContext, class UDrinkableDataAsset* currentDailySpecial);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneBase
	 * Size -> 0x0028 (FullSize[0x03B8] - InheritedSize[0x0390])
	 */
	class ADroneBase : public ADeepPathfinderCharacter
	{
	public:
		class UPointLightComponent*                                StateLight;                                              // 0x0390(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EDroneState                                                DefaultState;                                            // 0x0398(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1KKB[0x7];                                   // 0x0399(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDroneStateComponentBase*>                    DroneStates;                                             // 0x03A0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		EDroneState                                                CurrentState;                                            // 0x03B0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8XS1[0x7];                                   // 0x03B1(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnRep_CurrentState(EDroneState Previous);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneTargetSensingComponent
	 * Size -> 0x0078 (FullSize[0x0128] - InheritedSize[0x00B0])
	 */
	class UDroneTargetSensingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_Y0PJ[0x18];                                  // 0x00B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagQuery                                   TargetQuery;                                             // 0x00C8(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		class AActor*                                              PulseFrom;                                               // 0x0110(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SensingRange;                                            // 0x0118(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SensingIntervals;                                        // 0x011C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       NeedsLineOfSight;                                        // 0x0120(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_45XO[0x7];                                   // 0x0121(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneAbillityStatsComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UDroneAbillityStatsComponent : public UActorComponent
	{
	public:
		bool                                                       UseOwnArmorDamageMultiplier;                             // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6DW4[0xF];                                   // 0x00B1(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneCharacter
	 * Size -> 0x0018 (FullSize[0x03A8] - InheritedSize[0x0390])
	 */
	class ADroneCharacter : public ADeepPathfinderCharacter
	{
	public:
		class UHealthComponent*                                    HealthComponent;                                         // 0x0390(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOutlineComponent*                                   OutlineComponent;                                        // 0x0398(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USimpleObjectInfoComponent*                          ObjectInfo;                                              // 0x03A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneStateComponentBase
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UDroneStateComponentBase : public UActorComponent
	{
	public:
		EDroneState                                                SubsequentState;                                         // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3741[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneCombatState
	 * Size -> 0x0090 (FullSize[0x0148] - InheritedSize[0x00B8])
	 */
	class UDroneCombatState : public UDroneStateComponentBase
	{
	public:
		struct FGameplayTagQuery                                   AttackOnOrderQuery;                                      // 0x00B8(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   AttackOnSightQuery;                                      // 0x0100(0x0048) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneControllerBase
	 * Size -> 0x0018 (FullSize[0x0340] - InheritedSize[0x0328])
	 */
	class ADroneControllerBase : public AAIController
	{
	public:
		TArray<TWeakObjectPtr<class APlayerCharacter>>             ControllingPlayers;                                      // 0x0328(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6FW7[0x8];                                   // 0x0338(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnShout(class APlayerCharacter* Player);
		void OnSecondaryLaserPointer(const struct FLaserPointerTarget& HitInfo);
		void OnSalute(class APlayerCharacter* Player);
		void OnPrimaryLaserpointer(const struct FLaserPointerTarget& HitInfo);
		void OnPlayerLeave(class AFSDPlayerState* State);
		void OnPlayerJoin(class APlayerCharacter* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StateDrivenDroneController
	 * Size -> 0x0000 (FullSize[0x0340] - InheritedSize[0x0340])
	 */
	class AStateDrivenDroneController : public ADroneControllerBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneDisplayActionComponent
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UDroneDisplayActionComponent : public USceneComponent
	{
	public:
		class UTextRenderComponent*                                DisplayText;                                             // 0x01F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetMode(EDroneActions droneAction);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneMiningToolBase
	 * Size -> 0x0038 (FullSize[0x00E8] - InheritedSize[0x00B0])
	 */
	class UDroneMiningToolBase : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             HitSomething;                                            // 0x00B0(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QL2O[0x10];                                  // 0x00C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      range;                                                   // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SameHitDistance;                                         // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MineRadius;                                              // 0x00D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MineStrength;                                            // 0x00DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WAGS[0x8];                                   // 0x00E0(0x0008) MISSED OFFSET (PADDING)

	public:
		void StopMining();
		void StartMining();
		void SpawnEffects(class UTerrainMaterial* aTerrainMaterial, bool aParialHit, const struct FVector_NetQuantize& aLocation, const struct FVector_NetQuantize& aImpactNormal);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneFollowState
	 * Size -> 0x0038 (FullSize[0x00F0] - InheritedSize[0x00B8])
	 */
	class UDroneFollowState : public UDroneStateComponentBase
	{
	public:
		unsigned char                                              UnknownData_1Z4R[0x20];                                  // 0x00B8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              FollowTarget;                                            // 0x00D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxFollowRadius;                                         // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MinFollowRadius;                                         // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      UpdateLocationInterval;                                  // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      UpdateLocationVariance;                                  // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneStream
	 * Size -> 0x0028 (FullSize[0x0248] - InheritedSize[0x0220])
	 */
	class ADroneStream : public AActor
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCapsuleComponent*                                   Collision;                                               // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CheckStartOverlaps;                                      // 0x0230(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CheckEndOverlaps;                                        // 0x0231(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LIC9[0x16];                                  // 0x0232(0x0016) MISSED OFFSET (PADDING)

	public:
		void Receive_OnAbilityDataSet();
		void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		class ABosco* GetBosco();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneVacuumStream
	 * Size -> 0x0018 (FullSize[0x0260] - InheritedSize[0x0248])
	 */
	class ADroneVacuumStream : public ADroneStream
	{
	public:
		class USceneComponent*                                     VacuumPoint;                                             // 0x0248(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AFoamPuddle*>                                 PuddlesInside;                                           // 0x0250(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic

	public:
		void Server_StartVacuumingPuddle(class AFoamPuddle* puddle);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneUseComponent
	 * Size -> 0x0070 (FullSize[0x0120] - InheritedSize[0x00B0])
	 */
	class UDroneUseComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnUsed;                                                  // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBeginUse;                                              // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStopUse;                                               // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProgress;                                              // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    BoscoLaserpointerShout;                                  // 0x00F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AET8[0xC];                                   // 0x00F8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class USingleUsableComponent>               SyncToUsable;                                            // 0x0104(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Progress;                                                // 0x010C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      useDuration;                                             // 0x0110(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YJPL[0x8];                                   // 0x0114(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ResetOnFail;                                             // 0x011C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanUse;                                                  // 0x011D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6FNU[0x2];                                   // 0x011E(0x0002) MISSED OFFSET (PADDING)

	public:
		void SyncedUsableUserCountChangedResponse(int32_t userCount);
		void SyncedUsableUsedResponse(class APlayerCharacter* User, EInputKeys Key);
		void SyncedUsableBeginUseResponse(class APlayerCharacter* User, EInputKeys Key);
		void SetUseDuration(float useDuration);
		void SetCanUse(bool CanUse);
		float GetProgress();
		void EndUse();
		void BeginUse();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroppableOutpost
	 * Size -> 0x0070 (FullSize[0x0290] - InheritedSize[0x0220])
	 */
	class ADroppableOutpost : public AActor
	{
	public:
		float                                                      DropHeight;                                              // 0x0220(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             TargetLocation;                                          // 0x0224(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAutoCarverComponent*                                AutoCarver;                                              // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         DepartCurve;                                             // 0x0238(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarverRotationSpeed;                                     // 0x0240(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             CarverScale;                                             // 0x0244(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DepartureTime;                                           // 0x0250(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KAKL[0x4];                                   // 0x0254(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             StartLocation;                                           // 0x0258(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDroppableOutpostState                                     State;                                                   // 0x0264(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LHUJ[0x7];                                   // 0x0265(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DrillSpeed;                                              // 0x026C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FreeFallAcceleration;                                    // 0x0270(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FreeFallSpeed;                                           // 0x0274(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1AS3[0x18];                                  // 0x0278(0x0018) MISSED OFFSET (PADDING)

	public:
		void StartDrilling();
		void PrepForTakeOff();
		void OnRep_State();
		void OnPrepForTakeOff();
		void OnDroppodImpact();
		void OnDrillingStarted();
		void OnDeparting();
		class ADroppableOutpost* DropOutpostToMission(class UObject* WorldContextObject, class UClass* podClass, const struct FVector& Location);
		void Depart();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDMiningHead
	 * Size -> 0x0008 (FullSize[0x0298] - InheritedSize[0x0290])
	 */
	class AFSDMiningHead : public ADroppableOutpost
	{
	public:
		class UResourceBank*                                       ResourceBank;                                            // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TeamTransport
	 * Size -> 0x00F0 (FullSize[0x0310] - InheritedSize[0x0220])
	 */
	class ATeamTransport : public AActor
	{
	public:
		unsigned char                                              UnknownData_155G[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DropHeight;                                              // 0x0228(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             TargetLocation;                                          // 0x022C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MEER[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAutoCarverComponent*                                AutoCarver;                                              // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BJWB[0x10];                                  // 0x0248(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         DropCurve;                                               // 0x0258(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         DepartCurve;                                             // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         CarverDropCurve;                                         // 0x0268(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarverRotationSpeed;                                     // 0x0270(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             CarverScale;                                             // 0x0274(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x0280(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		class UBoxComponent*                                       DwarfCheckerBox;                                         // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DepartureTime;                                           // 0x02A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V9BV[0x4];                                   // 0x02AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                DepartueCountdownName;                                   // 0x02B0(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R9S6[0x4];                                   // 0x02C8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EMiningPodMission                                          MissionType;                                             // 0x02CC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       WaitForPlayerSpawns;                                     // 0x02CD(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasLanded;                                               // 0x02CE(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O108[0x1];                                   // 0x02CF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UOutlineComponent*                                   PodOutline;                                              // 0x02D0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             StartLocation;                                           // 0x02D8(0x000C) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EMiningPodState                                            TransportState;                                          // 0x02E4(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EMiningPodRampState                                        rampState;                                               // 0x02E5(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H7Y0[0x2];                                   // 0x02E6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TargetDropTime;                                          // 0x02E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetDepartureTime;                                     // 0x02EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeToDrop;                                              // 0x02F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LA9C[0x4];                                   // 0x02F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObjectivesManager*                                  ObjectivesManager;                                       // 0x02F8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZVCZ[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (PADDING)

	public:
		class ATeamTransport* SpawnPodAtLocation(class UObject* WorldContextObject, class UClass* podClass, const struct FTransform& Transform);
		void SetRampState(EMiningPodRampState rampState);
		void SetMuleInstance(class AMolly* Donkey);
		void RecieveReturnTimerFifteenSecondWarning();
		void RecieveReturnTimerExpired();
		void PrepForTakeOff();
		void PowerUp();
		void PoweredUp();
		void OnRep_State();
		void OnRep_RampState();
		void OnPrepForTakeOff();
		void OnPoweringUp();
		void OnPoweredUp();
		void OnHostInsidePod(bool isInside);
		void OnDropStarted();
		void OnDroppodImpact();
		void OnDrillingStarted();
		void OnDeparting();
		void OnCountdownFinished();
		void OnCountdownChanged(int32_t newTime);
		void OnAllDwavesInsidePod(bool AllInside);
		int32_t GetTimeToDeparture();
		bool GetHasLanded();
		void ForceTakeoff();
		void ExitSpacerig();
		void DropToTarget(class UObject* WorldContextObject, class UClass* podClass, const struct FTransform& dropLocation, int32_t DropDelay);
		class ATeamTransport* DropToMission(class UObject* WorldContextObject, class UClass* podClass, const struct FVector& Location);
		void DepositAllPlayersMaterials();
		void Depart();
		void CorrectLocationsForSpawnedOnLocation();
		struct FVector AdjustLandingLocationToGround(class UObject* WorldContextObjet, const struct FVector& initialLocation, float maxDownAdjustment);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DropPod
	 * Size -> 0x0050 (FullSize[0x0360] - InheritedSize[0x0310])
	 */
	class ADropPod : public ATeamTransport
	{
	public:
		struct FMiningPodDialogs                                   Dialogs;                                                 // 0x0310(0x0050) Edit, NoDestructor, NativeAccessSpecifierPublic

	public:
		struct FVector GetDonkeyReturnPickupLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DropToTerrainComponent
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class UDropToTerrainComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnFallToTerrainStateChanged;                             // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       StartActive;                                             // 0x00C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KM7K[0x3];                                   // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CurrentLocation;                                         // 0x00C4(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             DropTarget;                                              // 0x00D0(0x000C) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2S2U[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UTerrainDetectComponent*>                     TerrainPoints;                                           // 0x00E0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      FallVelocity;                                            // 0x00F0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TerrainTraceMaxDistance;                                 // 0x00F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_23JA[0xC];                                   // 0x00F8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsDetecting;                                             // 0x0104(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DADR[0x3];                                   // 0x0105(0x0003) MISSED OFFSET (PADDING)

	public:
		void StopDropDetection(bool stopFalling);
		void OnTerrainRemoved(class USceneComponent* Point);
		void OnRep_DropTarget();
		void BeginDropDetection();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DSTelemetryWrapper
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UDSTelemetryWrapper : public UGameInstanceSubsystem
	{
	public:
		class UDSTelemetry*                                        Telemetry;                                               // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1WYQ[0x18];                                  // 0x0038(0x0018) MISSED OFFSET (PADDING)

	public:
		void RecordTreeOfVanityClaim(int32_t NodeID);
		void RecordSpecialEventHappening(const class FString& EventName, bool SuccessfullySpawned);
		void RecordSeasonXpGained(int32_t Gained, int32_t LastLevel, bool Positive);
		void RecordSeasonLevelUp();
		void RecordSeasonChallengeReroll(int32_t ChallengeIndex, class USeasonChallenge* Challenge);
		void RecordOpenScreen(const class FString& ScreenName, bool RecordRank);
		void RecordMissionStart();
		void RecordMissionEnd(int32_t XPReward, int32_t CreditReward);
		void RecordMachineEventEnd(const class FString& EventName, bool WasCompleted, int32_t completionTime);
		void RecordKickPlayer(const class FString& reason, class APlayerController* KickedPlayer);
		void RecordDeepDiveStageEnd(const class FString& MissionName, int32_t StageTime, int32_t TimeSinceStartOfDive, int32_t TotalTime, int32_t NitraLeft);
		void RecordContinuousDamage(class AActor* DamageCauser);
		void RecordCommunityEvents(const class FString& EventCategory, const class FString& EventAction, const class FString& EventLabel, int32_t EventValue);
		void RecordBossFightEnd(const class FString& BossName, bool WasBossKilled, int32_t NumBossKills);
		void OnNewProceduralSetup();
		void OnNewPlayer(class AFSDPlayerController* Controller);
		void OnNewMission(class UGeneratedMission* mission);
		void OnNewCharacter();
		void OnCharacterSaveChanged(class UClass* CharacterClass, int32_t Level, float Progress);
		void OnCharacterPromoted(class UClass* CharacterClass, int32_t RetirementCount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DualWieldWeapon
	 * Size -> 0x0040 (FullSize[0x0790] - InheritedSize[0x0750])
	 */
	class ADualWieldWeapon : public AAmmoDrivenWeapon
	{
	public:
		unsigned char                                              UnknownData_LLOL[0x8];                                   // 0x0750(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFirstPersonSkeletalMeshComponent*                   FPMeshLeft;                                              // 0x0758(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              TPMeshLeft;                                              // 0x0760(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_Left_Reload;                                         // 0x0768(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_Left_TP_Reload;                                      // 0x0770(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      CasingParticlesLeft;                                     // 0x0778(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7MR3[0x8];                                   // 0x0780(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                MuzzleLeft;                                              // 0x0788(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DualWieldAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UDualWieldAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_9OER[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DualMachinePistols
	 * Size -> 0x0010 (FullSize[0x07A0] - InheritedSize[0x0790])
	 */
	class ADualMachinePistols : public ADualWieldWeapon
	{
	public:
		class UClass*                                              EmptyClipStatusEffect;                                   // 0x0790(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WOGW[0x8];                                   // 0x0798(0x0008) MISSED OFFSET (PADDING)

	public:
		void Server_TriggerStatusEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DynamicIcon
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UDynamicIcon : public UObject
	{
	public:
		unsigned char                                              UnknownData_GF9J[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		class UMaterialInterface* GetIconMaterial();
		class UMaterialInstanceDynamic* GenerateIconMaterial(class UObject* materialOwner);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TwoFacetDynamicIcon
	 * Size -> 0x00A8 (FullSize[0x00D8] - InheritedSize[0x0030])
	 */
	class UTwoFacetDynamicIcon : public UDynamicIcon
	{
	public:
		struct FLinearColor                                        Primary1Tint1;                                           // 0x0030(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        Primary1Tint2;                                           // 0x0040(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              Primary1Texture[0x28];                                   // 0x0050(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      Primary1Texture_BasePoint;                               // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Primary1Texture_Contrast;                                // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        Primary2Tint1;                                           // 0x0080(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        Primary2Tint2;                                           // 0x0090(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              Primary2Texture[0x28];                                   // 0x00A0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      Primary2Texture_BasePoint;                               // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Primary2Texture_Contrast;                                // 0x00CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic*                            PreviewInstance;                                         // 0x00D0(0x0008) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdatePreview();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TriFacetDynamicIcon
	 * Size -> 0x0050 (FullSize[0x0128] - InheritedSize[0x00D8])
	 */
	class UTriFacetDynamicIcon : public UTwoFacetDynamicIcon
	{
	public:
		struct FLinearColor                                        Primary3Tint1;                                           // 0x00D8(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        Primary3Tint2;                                           // 0x00E8(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              Primary3Texture[0x28];                                   // 0x00F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      Primary3Texture_BasePoint;                               // 0x0120(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Primary3Texture_Contrast;                                // 0x0124(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TextureDynamicIcon
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UTextureDynamicIcon : public UDynamicIcon
	{
	public:
		unsigned char                                              Texture[0x28];                                           // 0x0030(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UMaterialInstanceDynamic*                            PreviewInstance;                                         // 0x0058(0x0008) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdatePreview();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DynamicIconSettings
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class UDynamicIconSettings : public UDataAsset
	{
	public:
		class UMaterialInstance*                                   TextureDynamicIcon;                                      // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   TwoFacetDynamicIcon;                                     // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   TwoFacetDynamicIconTex1;                                 // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   TwoFacetDynamicIconTex2;                                 // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   TwoFacetDynamicIconTex1Tex2;                             // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   TriFacetDynamicIcon;                                     // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   TriFacetDynamicIconTex1;                                 // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   TriFacetDynamicIconTex1Tex2;                             // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   TriFacetDynamicIconTex1Tex3;                             // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   TriFacetDynamicIconTex1Tex2Tex3;                         // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   TriFacetDynamicIconTex2;                                 // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   TriFacetDynamicIconTex2Tex3;                             // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   TriFacetDynamicIconTex3;                                 // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DynamicReverbComponent
	 * Size -> 0x0068 (FullSize[0x0118] - InheritedSize[0x00B0])
	 */
	class UDynamicReverbComponent : public UActorComponent
	{
	public:
		float                                                      LargeCaveValue;                                          // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MediumCaveValue;                                         // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SmallCaveValue;                                          // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FadeTime;                                                // 0x00BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Priority;                                                // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TunnelAmbienceFadeIn;                                    // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TunnelAmbienceFadeOut;                                   // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ILTZ[0xC];                                   // 0x00CC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     TunnelSoundInstance;                                     // 0x00D8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L2XZ[0x38];                                  // 0x00E0(0x0038) MISSED OFFSET (PADDING)

	public:
		void TunnelTimerTriggered();
		void TimerTriggered();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NisseAnimInstance
	 * Size -> 0x0000 (FullSize[0x0340] - InheritedSize[0x0340])
	 */
	class UNisseAnimInstance : public USimpleMovingEnemyAnimInstance
	{
	public:
		bool IsWalking();
		bool IsRunning();
		bool IsNotWalking();
		bool IsNotRunning();
		bool IsNotIdle();
		bool IsNotFrozen();
		bool IsIdle();
		bool IsFrozen();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EasterBunnyAnimInstance
	 * Size -> 0x0010 (FullSize[0x0350] - InheritedSize[0x0340])
	 */
	class UEasterBunnyAnimInstance : public UNisseAnimInstance
	{
	public:
		float                                                      WindUpTurnSpeed;                                         // 0x0340(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WindUpTimer;                                             // 0x0344(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RWQI[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EffectSettings
	 * Size -> 0x0118 (FullSize[0x0148] - InheritedSize[0x0030])
	 */
	class UEffectSettings : public UDataAsset
	{
	public:
		class UNiagaraParameterCollection*                         NiagaraParameterCollection;                              // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  LinearFadeInLight;                                       // 0x0038(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  LinearFadeOutLight;                                      // 0x00C0(0x0088) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ElectroBeam
	 * Size -> 0x0098 (FullSize[0x02B8] - InheritedSize[0x0220])
	 */
	class AElectroBeam : public AActor
	{
	public:
		class UCapsuleComponent*                                   collider;                                                // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AActor*>                                      ParentPlants;                                            // 0x0228(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		struct FVector                                             LocationOffset;                                          // 0x0238(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector_NetQuantize                                 SourceLocation;                                          // 0x0244(0x000C) Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector_NetQuantize                                 TargetLocation;                                          // 0x0250(0x000C) Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DVMU[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     DelaySource;                                             // 0x0260(0x0008) Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     DelayTarget;                                             // 0x0268(0x0008) Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            BeamEffect;                                              // 0x0270(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAudioComponent*                                     ZappSound;                                               // 0x0278(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      StatusEffectsToApply;                                    // 0x0280(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
		float                                                      MaxLitTime;                                              // 0x0290(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinLitTime;                                              // 0x0294(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxUnlitTime;                                            // 0x0298(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinUnlitTime;                                            // 0x029C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ShouldFlicker;                                           // 0x02A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsLit;                                                   // 0x02A1(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3QDK[0x16];                                  // 0x02A2(0x0016) MISSED OFFSET (PADDING)

	public:
		void SetTarget(class USceneComponent* TargetPoint);
		void SetSource(class USceneComponent* SourcePoint);
		void SetParents(class AActor* firstParent, class AActor* secondParent);
		void RecalculateBeam();
		void OnRep_TargetLocation();
		void OnRep_SourceLocation();
		void OnRep_Flag();
		void OnParentDeath(class UHealthComponentBase* HealthComponent);
		class UParticleSystemComponent* GetParticleEffect();
		class UCapsuleComponent* GetCollider();
		class UAudioComponent* GetAudio();
		void DelayedSetTarget(class USceneComponent* TargetPoint);
		void DelayedSetSource(class USceneComponent* SourcePoint);
		void DeactivateCollisionAndEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SentryElectroBeam
	 * Size -> 0x0010 (FullSize[0x02C8] - InheritedSize[0x02B8])
	 */
	class ASentryElectroBeam : public AElectroBeam
	{
	public:
		TArray<class ARedeployableSentryGun*>                      Sentries;                                                // 0x02B8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowElectroBeam
	 * Size -> 0x0020 (FullSize[0x02D8] - InheritedSize[0x02B8])
	 */
	class ACrossbowElectroBeam : public AElectroBeam
	{
	public:
		float                                                      MaxRange;                                                // 0x02B8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_85DU[0x4];                                   // 0x02BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ACrossbowProjectileStuck*                            Arrow0;                                                  // 0x02C0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ACrossbowProjectileStuck*                            Arrow1;                                                  // 0x02C8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1ZMA[0x8];                                   // 0x02D0(0x0008) MISSED OFFSET (PADDING)

	public:
		void RecalculateMovingBeam();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ElevatorPlant
	 * Size -> 0x00D0 (FullSize[0x02F0] - InheritedSize[0x0220])
	 */
	class AElevatorPlant : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnStartTimelineEvent;                                    // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             COnStateChangedEvent;                                    // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UAudioComponent*                                     MovingSoundComponent;                                    // 0x0240(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           GrabSound;                                               // 0x0248(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             RestPositionOffset;                                      // 0x0250(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             RelativeRestLocation;                                    // 0x025C(0x000C) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             RelativeDestinationLocation;                             // 0x0268(0x000C) Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BaseTangentDirectionOffset;                              // 0x0274(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LeafTangentDirectionOffset;                              // 0x0280(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LeafLocationNoise;                                       // 0x028C(0x000C) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            LeafNoiseRotator;                                        // 0x0298(0x000C) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      BaseTangentLength;                                       // 0x02A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineMeshComponent*                                CSplineMesh;                                             // 0x02A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     CVineBase;                                               // 0x02B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     CVineLeaf;                                               // 0x02B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TNIH[0x10];                                  // 0x02C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InitialBaseTangentLength;                                // 0x02D0(0x0004) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LeafLocationNoiseSize;                                   // 0x02D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VineMovementAlpha;                                       // 0x02D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsMoving;                                                // 0x02DC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsOpen;                                                  // 0x02DD(0x0001) Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Extend;                                                  // 0x02DE(0x0001) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L08X[0x1];                                   // 0x02DF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         DipOffsetCurve;                                          // 0x02E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         LocationLerpCurve;                                       // 0x02E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetLeafNoiseRotator(const struct FRotator& aRotator);
		void SetLeafLocationNoise(const struct FVector& aVector);
		void SetIsOpen(bool aValue);
		void SetIsExtended(bool aValue);
		void SetBaseTangentLength(float Value);
		void SetBaseTangentDirectionOffset(const struct FVector& aVector);
		void OnRep_RelavtiveDestinationLocation();
		void OnRep_Open();
		void OnMatchStarted();
		void MoreTick(const struct FVector& DipOffset, float aValue);
		float GetVineMovementAlpha();
		struct FVector GetRelativeRestLocation();
		struct FVector GetRelativeDestinationLocation();
		float GetLeafLocationNoiseSize();
		bool GetIsMoving();
		bool GetIsExtended();
		float GetInitialTangentLenth();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EliminationObjective
	 * Size -> 0x00A0 (FullSize[0x0220] - InheritedSize[0x0180])
	 */
	class UEliminationObjective : public UObjective
	{
	public:
		int32_t                                                    ObjectCount;                                             // 0x0180(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RW2F[0x4];                                   // 0x0184(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDebrisPositioning*                                  Positioning;                                             // 0x0188(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<int32_t>                                            ExcludeRoomIDs;                                          // 0x0190(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              ObjectToSpawn[0x28];                                     // 0x01A0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UCaveInfluencer*                                     CaveInfluencer;                                          // 0x01C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DebrisRadius;                                            // 0x01D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3JXW[0x4];                                   // 0x01D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ObjectDebris[0x10];                                      // 0x01D8(0x0010) UNKNOWN PROPERTY: ArrayProperty
		int32_t                                                    EnemiesKilled;                                           // 0x01E8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    EnemiesToKill;                                           // 0x01EC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FEliminationDescriptors>                     TargetDescriptors;                                       // 0x01F0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FEliminationDescriptors>                     TargetQueue;                                             // 0x0200(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FEliminationTarget>                          ActiveEliminationTargets;                                // 0x0210(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		void RegisterEliminationTargets(TArray<class AFSDPawn*> Targets);
		void ReceiveTargetSpawned();
		void ReceiveTargetKilled();
		void OnTargetKilled(class UHealthComponentBase* Health);
		void OnRep_EnemiesToKill(int32_t prevAmount);
		void OnRep_EnemiesKilled(int32_t prevAmount);
		TArray<class UEnemyDescriptor*> GetNextTargetInQueue();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EncounterActor
	 * Size -> 0x0000 (FullSize[0x0220] - InheritedSize[0x0220])
	 */
	class AEncounterActor : public AActor
	{
	public:
		void Receive_EncounterHasSpawned(class APawn* spawnedPawn);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EncounterManager
	 * Size -> 0x0068 (FullSize[0x0118] - InheritedSize[0x00B0])
	 */
	class UEncounterManager : public UActorComponent
	{
	public:
		float                                                      SpawnDistanceFromRoomBounds;                             // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4JUR[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FEncounterManagerItem>                       Encounters;                                              // 0x00B8(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class AProceduralSetup*                                    ProceduralSetup;                                         // 0x00C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEnemySpawnManager*                                  SpawnManager;                                            // 0x00D0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UEnemyDescriptor*>                            EnemyPool;                                               // 0x00D8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UEnemyDescriptor*>                            EncounterPool;                                           // 0x00E8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UCritterDescriptor*>                          CritterPool;                                             // 0x00F8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B14D[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (PADDING)

	public:
		void ShowSpawnLocations();
		TArray<class UEnemyDescriptor*> GetEnemyPool();
		TArray<class UEnemyDescriptor*> GetEncounterPool();
		TArray<class UCritterDescriptor*> GetCritterPool();
		void AddEncounterFromGroup(class UEnemyGroupDescriptor* Group, float Difficulty, const struct FVector& Location, float Radius);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EncounterSettings
	 * Size -> 0x0138 (FullSize[0x0168] - InheritedSize[0x0030])
	 */
	class UEncounterSettings : public UDataAsset
	{
	public:
		struct FIRandRange                                         StationaryEnemyCount;                                    // 0x0030(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		TArray<class UEnemyDescriptor*>                            CommonEnemies;                                           // 0x0038(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UEnemyDescriptor*>                            SpecialEnemies;                                          // 0x0048(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UEnemyDescriptor*>                            DisruptiveEnemies;                                       // 0x0058(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UEnemyDescriptor*>                            StationaryEnemies;                                       // 0x0068(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UCritterDescriptor*>                          CommonCritters;                                          // 0x0078(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FEncounterRareCritterItem>                   RareCritters;                                            // 0x0088(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FEncounterSpecialItem>                       SpecialEncounters;                                       // 0x0098(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      RequiredDifficultyPerDiversity;                          // 0x00A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GlobalDifficultyScale;                                   // 0x00AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRandInterval                                       EncounterDifficulty;                                     // 0x00B0(0x0010) Edit, NativeAccessSpecifierPublic
		struct FRandInterval                                       StationaryDifficulty;                                    // 0x00C0(0x0010) Edit, NativeAccessSpecifierPublic
		struct FRandRange                                          CritterSpawnDifficulty;                                  // 0x00D0(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SmallRoomTag;                                            // 0x00D8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        MediumRoomTag;                                           // 0x00E0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        LargeRoomTag;                                            // 0x00E8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SmallRoomDifficultyModifier;                             // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MediumRoomDifficultyModifier;                            // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LargeRoomDifficultyModifier;                             // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6P08[0x4];                                   // 0x00FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UEnemyDescriptor*, struct FEliteEnemyEntry>     HeroEnemies;                                             // 0x0100(0x0050) Edit, NativeAccessSpecifierPublic
		struct FRandInterval                                       HeroEnemySpawn;                                          // 0x0150(0x0010) Edit, NativeAccessSpecifierPublic
		class UMutator*                                            TestMutator;                                             // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EndStatusEffectOnLanding
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UEndStatusEffectOnLanding : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_25GB[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UStatusEffect>                        EffectToCancel;                                          // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnOwnerStateChanged(ECharacterState State);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyFamily
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UEnemyFamily : public UDataAsset
	{
	public:
		class UTexture2D*                                          Icon;                                                    // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                Name;                                                    // 0x0038(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ObjectInfoComponent
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UObjectInfoComponent : public UActorComponent
	{
	public:
		bool HasMissionControlLookAtShout(class UPrimitiveComponent* TargetComponent);
		class UDialogDataAsset* GetMissionControlLookAtShout(class UPrimitiveComponent* TargetComponent);
		class UDialogDataAsset* GetLookAtShout(class UPrimitiveComponent* TargetComponent);
		bool GetIsPingableByLaserpointer(class UPrimitiveComponent* TargetComponent);
		class FText GetInGameName(class UPrimitiveComponent* TargetComponent);
		struct FLinearColor GetInGameIconTint(class UPrimitiveComponent* TargetComponent);
		class UTexture2D* GetInGameIcon(class UPrimitiveComponent* TargetComponent);
		class FText GetInGameDescription(class UPrimitiveComponent* TargetComponent);
		class UActorContextWidget* GetContextWidget(class APlayerController* InPlayerController);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SimpleObjectInfoComponent
	 * Size -> 0x00D0 (FullSize[0x0180] - InheritedSize[0x00B0])
	 */
	class USimpleObjectInfoComponent : public UObjectInfoComponent
	{
	public:
		class FText                                                InGameName;                                              // 0x00B0(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class FText                                                InGameDescription;                                       // 0x00C8(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    LookAtShout;                                             // 0x00E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasMissionControlLookAtShout;                           // 0x00E8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_67BY[0x7];                                   // 0x00E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDialogDataAsset*                                    MissionControlLookAtShout;                               // 0x00F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    LookAtShoutOverride;                                     // 0x00F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IWAU[0x8];                                   // 0x0100(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          Icon;                                                    // 0x0108(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          IconOverride;                                            // 0x0110(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPingableByLaserpointer;                               // 0x0118(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U0ZO[0x7];                                   // 0x0119(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ContextWidgetClass;                                      // 0x0120(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<TWeakObjectPtr<class USceneComponent>, struct FSimpleObjectInfoData> ComponentMap;                                            // 0x0128(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		class UActorContextWidget*                                 ContextWidget;                                           // 0x0178(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetInGameName(const class FString& GameName);
		void SetInGameDescription(const class FString& GameDescription);
		void SetContextWidget(class UActorContextWidget* InContextWidget);
		void OverrideLookAtShoutOrUseDefault(class UDialogDataAsset* InShout);
		void OverrideLookAtShout(class UDialogDataAsset* InShout);
		void OverrideIcon(class UTexture2D* InTexture);
		class UDialogDataAsset* GetDefaultLookAtShout();
		void ClearLookAtShoutOverride();
		void AddComponentObjectInfo(class USceneComponent* TargetComponent, const struct FSimpleObjectInfoData& Data);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyComponent
	 * Size -> 0x0038 (FullSize[0x01B8] - InheritedSize[0x0180])
	 */
	class UEnemyComponent : public USimpleObjectInfoComponent
	{
	public:
		class UEnemyFamily*                                        Family;                                                  // 0x0180(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    KillShout;                                               // 0x0188(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEnemyID*                                            EnemyID;                                                 // 0x0190(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              mixerName;                                               // 0x0198(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnMixerNameChange;                                       // 0x01A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		class UEnemyID* GetID();
		class FText GetFamilyName();
		class UTexture2D* GetFamilyIcon();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TestAnimInstance
	 * Size -> 0x07B8 (FullSize[0x0A70] - InheritedSize[0x02B8])
	 */
	class UTestAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_3KL1[0x8];                                   // 0x02B8(0x0008) Fix Super Size
		struct FTestAnimInstanceProxy                              AnimInstanceProxy;                                       // 0x02C0(0x0790) BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic
		float                                                      WalkCycleSpeed;                                          // 0x0A50(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartMovingSpeed;                                        // 0x0A54(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StopMovingSpeed;                                         // 0x0A58(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WalkCycleMinRate;                                        // 0x0A5C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MeshScale;                                               // 0x0A60(0x0004) Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RSXK[0xC];                                   // 0x0A64(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JellyFishAnimInstance
	 * Size -> 0x0008 (FullSize[0x0310] - InheritedSize[0x0308])
	 */
	class UJellyFishAnimInstance : public UEnemyAnimInstance
	{
	public:
		unsigned char                                              UnknownData_V50K[0x4];                                   // 0x0308(0x0004) Fix Super Size
		float                                                      VerticalSpeed;                                           // 0x030C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GliderBeastAnimInstance
	 * Size -> 0x0038 (FullSize[0x0340] - InheritedSize[0x0308])
	 */
	class UGliderBeastAnimInstance : public UEnemyAnimInstance
	{
	public:
		unsigned char                                              UnknownData_8M01[0x4];                                   // 0x0308(0x0004) Fix Super Size
		struct FGliderAnimSync                                     AnimSync;                                                // 0x030C(0x0020) BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       IsFrozen;                                                // 0x032C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QSJO[0x13];                                  // 0x032D(0x0013) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyAttacker
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UEnemyAttacker : public UInterface
	{
	public:
		float GetAttackDamageModifier();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyBufferComponent
	 * Size -> 0x00C8 (FullSize[0x0178] - InheritedSize[0x00B0])
	 */
	class UEnemyBufferComponent : public UActorComponent
	{
	public:
		class UClass*                                              StatusEffect;                                            // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                BufferParticleSocket;                                    // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     Particles;                                               // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ParticleTangentSize;                                     // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O4HA[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBuffingChangedEvent;                                   // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		float                                                      BuffRadius;                                              // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxBuffedTargets;                                        // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   BuffQuery;                                               // 0x00E8(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		class UClass*                                              SubclassBuffQuery;                                       // 0x0130(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AFSDPawn*>                                    BuffTargets;                                             // 0x0138(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UParticleSystemComponent*>                    ParticleInstances;                                       // 0x0148(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CR4S[0x20];                                  // 0x0158(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetBuffingEnabled(bool Enabled);
		void OnPawnDied(class UHealthComponentBase* Health);
		void OnOwnerDied(class UHealthComponentBase* Health);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyControlStateComponent
	 * Size -> 0x0190 (FullSize[0x0290] - InheritedSize[0x0100])
	 */
	class UEnemyControlStateComponent : public UCharacterStateComponent
	{
	public:
		bool                                                       UseThirdPersonCam;                                       // 0x0100(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IH9I[0xF];                                   // 0x0101(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FControlEnemyState                                  StateData;                                               // 0x0110(0x0060) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5UQH[0x8];                                   // 0x0170(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EEnemyControlState                                         ControlState;                                            // 0x0178(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AAV8[0x37];                                  // 0x0179(0x0037) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FQuat                                               AngularVelocity;                                         // 0x01B0(0x0010) Net, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FQuat                                               ControlRotation;                                         // 0x01C0(0x0010) Net, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q3QE[0xC0];                                  // 0x01D0(0x00C0) MISSED OFFSET (PADDING)

	public:
		void ServerExit();
		void OnRep_StateData(const struct FControlEnemyState& oldState);
		void OnRep_ControlState(EEnemyControlState oldState);
		void OnEnemyCrashMontageEnded(class UAnimMontage* Montage, bool interrupted);
		void OnControllingEnemyAttached();
		void OnControllingEnemy(bool IsControlling);
		void JumpPressed();
		class UAIPlayerControlComponent* GetAiPlayerControlComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyDescriptor
	 * Size -> 0x01E8 (FullSize[0x0218] - InheritedSize[0x0030])
	 */
	class UEnemyDescriptor : public UDataAsset
	{
	public:
		class UEnemyID*                                            EnemyID;                                                 // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              EnemyClass[0x28];                                        // 0x0038(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		EVeteranScaling                                            VeteranScaling;                                          // 0x0060(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A62N[0x7];                                   // 0x0061(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UEnemyDescriptor*>                            VeteranClasses;                                          // 0x0068(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              BiomeEnemyClassOverrides[0x50];                          // 0x0078(0x0050) UNKNOWN PROPERTY: MapProperty
		unsigned char                                              EliteEnemyClass[0x28];                                   // 0x00C8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              BannedMissionTypes[0x50];                                // 0x00F0(0x0050) UNKNOWN PROPERTY: SetProperty
		EEnemySignificance                                         EnemySignificance;                                       // 0x0140(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LNAC[0x3];                                   // 0x0141(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             SpawnOffset;                                             // 0x0144(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UsesSpawnEffects;                                        // 0x0150(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CPJ6[0x3];                                   // 0x0151(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECreatureSize                                              CreatureSize;                                            // 0x0154(0x0001) ELEMENT_SIZE_MISMATCH Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6HQV[0x3];                                   // 0x0155(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UDebrisPositioning*                                  Positioning;                                             // 0x0158(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCaveInfluencer*                                     CaveInfluencer;                                          // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FEnemyDebris>                                Debris;                                                  // 0x0168(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      InfluencerRange;                                         // 0x0178(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0HBZ[0x4];                                   // 0x017C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              PlacementCarver;                                         // 0x0180(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDeepPathFinderType                                        PathfinderType;                                          // 0x0188(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KR2U[0x7];                                   // 0x0189(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagQuery                                   PlacementRoomQuery;                                      // 0x0190(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      SpawnSpread;                                             // 0x01D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    IdealSpawnSize;                                          // 0x01DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanBeUsedForConstantPressure;                            // 0x01E0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanBeUsedInEncounters;                                   // 0x01E1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1B90[0x2];                                   // 0x01E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DifficultyRating;                                        // 0x01E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MinSpawnCount;                                           // 0x01E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxSpawnCount;                                           // 0x01EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Rarity;                                                  // 0x01F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpawnAmountModifier;                                     // 0x01F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RequiredMainCampaignProgress;                            // 0x01F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UsesSpawnRarityModifiers;                                // 0x01FC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZF33[0x3];                                   // 0x01FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSpawnRarityItem>                            SpawnRarityModifiers;                                    // 0x0200(0x0010) Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		EEnemyDescriptorCheatClass                                 CheatClass;                                              // 0x0210(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RN4K[0x7];                                   // 0x0211(0x0007) MISSED OFFSET (PADDING)

	public:
		class UClass* GetEnemyClass(class UBiome* Biome, bool IsElite);
		TArray<class UEnemyDescriptor*> FindDescriptorsForCheatMenu(EEnemyDescriptorCheatClass CheatClass);
		TArray<class UEnemyDescriptor*> FindAllDescriptorsForCheatMenu();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HealthComponentBase
	 * Size -> 0x00B0 (FullSize[0x0160] - InheritedSize[0x00B0])
	 */
	class UHealthComponentBase : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_BA5R[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnHealthChanged;                                         // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDamageHealed;                                          // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDamageTaken;                                           // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHit;                                                   // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBodypartHit;                                           // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDeath;                                                 // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRadialDamage;                                          // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHitByHitScan;                                          // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCanTakeDamageChanged;                                  // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8LJT[0x4];                                   // 0x0148(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ShowLaserPointMarkerWhenDead;                            // 0x014C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       canTakeDamage;                                           // 0x014D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PassthroughTemperatureDamage;                            // 0x014E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SG3R[0x11];                                  // 0x014F(0x0011) MISSED OFFSET (PADDING)

	public:
		float TakeRadialDamage(float damageAmount, const struct FVector& BlastCenter, float BlastRadius, float MaxDamageRadius, float MinDamagePct, struct FDamageData* DamageData);
		void TakeDamageSimple(float damageAmount, class AActor* DamageCauser, class UDamageClass* DamageClass);
		void SetHealthDirectly(float newHealthValue);
		void SetCanTakeDamage(bool canTakeDamage);
		void Kill(class AActor* DamageCauser);
		bool IsDead();
		bool IsAlive();
		float Heal(float Amount);
		bool GetShowHealthBar();
		float GetHealthPct();
		void GetHealthComponentForCollider(class UPrimitiveComponent* Primitive);
		struct FVector GetHealthBarWorldOffset();
		float GetHealth();
		class UParticleSystem* GetGenericImpactParticles();
		bool GetCanTakeDamage();
		bool CanTakeDamageFrom(class UDamageClass* DamageClass);
		void CanTakeDamageDelegate__DelegateSignature(bool OutCanTakeDamage);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HealthComponent
	 * Size -> 0x0108 (FullSize[0x0268] - InheritedSize[0x0160])
	 */
	class UHealthComponent : public UHealthComponentBase
	{
	public:
		class FScriptMulticastDelegate                             OnArmorChanged;                                          // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnArmorDamaged;                                          // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnArmorHealed;                                           // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDeathDetailed;                                         // 0x0190(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNewHealthSegment;                                      // 0x01A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      Damage;                                                  // 0x01B0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G7ZG[0x4];                                   // 0x01B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              HealthSegmentSizes;                                      // 0x01B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       CanDamageThroughSegments;                                // 0x01C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3UDQ[0xF];                                   // 0x01C9(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              LastDamageCauser;                                        // 0x01D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USubHealthComponent*>                         SubHealthComponents;                                     // 0x01E0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       ShouldUseLargestSubhealthDamageTaken;                    // 0x01F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       InvulnerableToNonDefinedResistances;                     // 0x01F1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0DNE[0x6];                                   // 0x01F2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UPawnStat*, float>                              Resistances;                                             // 0x01F8(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      EnvironmentalDamageResistance;                           // 0x0248(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AffectedByGlobalWeakpointDamageMultiplier;               // 0x024C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseDormancy;                                             // 0x024D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V1K1[0x2];                                   // 0x024E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPawnStatsComponent*                                 PawnStats;                                               // 0x0250(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0BZK[0x10];                                  // 0x0258(0x0010) MISSED OFFSET (PADDING)

	public:
		void ToggleCanTakeDamage();
		float TakePercentDamage(float PercentOfMax, const struct FDamageData& DamageData);
		void Resupply(float percentage);
		void OnRep_Damage(float oldDamage);
		void HealArmor(float Amount);
		bool HasArmor();
		float GetMaxArmor();
		EHealthbarType GetHealthbarType();
		void GetCurrentHealthSegment(int32_t* Segment, float* segmentHealth, float* segmentHealthPercent);
		float GetArmorPct();
		float GetArmor();
		void Client_ReceivedHit(float Amount, const struct FDamageData& DamageData, bool anyHealthLost);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyHealthComponent
	 * Size -> 0x0030 (FullSize[0x0298] - InheritedSize[0x0268])
	 */
	class UEnemyHealthComponent : public UHealthComponent
	{
	public:
		EEnemyHealthScaling                                        EnemyHealthScaling;                                      // 0x0268(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PDIN[0x3];                                   // 0x0269(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Courage;                                                 // 0x026C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxHealth;                                               // 0x0270(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowHealthBar;                                          // 0x0274(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_76GH[0x3];                                   // 0x0275(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             HealthBarOffsetWorld;                                    // 0x0278(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsBossFight;                                            // 0x0284(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NER1[0x3];                                   // 0x0285(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BossFightHealthBarSegments;                              // 0x0288(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRegisterEnemy;                                          // 0x028C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MTHP[0xB];                                   // 0x028D(0x000B) MISSED OFFSET (PADDING)

	public:
		float GetMaxHealth();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyLineOfSightComponent
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class UEnemyLineOfSightComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnGaindedLineOfSight;                                    // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLostLineOfSight;                                       // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UMeshComponent*                                      OwnerMesh;                                               // 0x00D0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                LoSFromSocketName;                                       // 0x00D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O4P9[0x18];                                  // 0x00E0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LoSInterval;                                             // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LoSIntervalVariance;                                     // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AutoSetupOwnerMesh;                                      // 0x0100(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SWQ8[0x7];                                   // 0x0101(0x0007) MISSED OFFSET (PADDING)

	public:
		bool HasLineOfSight();
		bool GetIsDetecting();
		void AsyncTrace();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyMeleeAttackAnimNotify
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UEnemyMeleeAttackAnimNotify : public UAnimNotify
	{
	public:
		class FName                                                AttackTag;                                               // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyMinersManualData
	 * Size -> 0x0150 (FullSize[0x0180] - InheritedSize[0x0030])
	 */
	class UEnemyMinersManualData : public UDataAsset
	{
	public:
		class UEnemyID*                                            EnemyID;                                                 // 0x0030(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                Name;                                                    // 0x0038(0x0018) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class FText                                                RichDescription;                                         // 0x0050(0x0018) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		TArray<class FText>                                        GameplayTips;                                            // 0x0068(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		EEnemyFamily                                               Family;                                                  // 0x0078(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EEnemyType                                                 EnemyType;                                               // 0x0079(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J6V7[0x6];                                   // 0x007A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FEnemyAttackDescription>                     AttackType;                                              // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FEnemyAttackDescription>                     SpecialAttacks;                                          // 0x0090(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UAnimSequenceBase*>                           AttackAnimations;                                        // 0x00A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		EArmorType                                                 ArmorType;                                               // 0x00B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F5VA[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                Armor;                                                   // 0x00B8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                Weakpoint;                                               // 0x00D0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FEnemyMinersManualStats                             EnemyStats;                                              // 0x00E8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OZZ4[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EDamageType>                                        Resistances;                                             // 0x00F8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<EDamageType>                                        Weaknesses;                                              // 0x0108(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FText>                                        LoreInfo;                                                // 0x0118(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       AlwaysUnlocked;                                          // 0x0128(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GAD2[0x3];                                   // 0x0129(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    InfoUnlockSpeed;                                         // 0x012C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              EnemyIcon[0x28];                                         // 0x0130(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              PreviewActor[0x28];                                      // 0x0158(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		class UTexture2D* GetEnemyIcon();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyRangedAttackAnimNotify
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UEnemyRangedAttackAnimNotify : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StopLeadingNotify
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UStopLeadingNotify : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemySettings
	 * Size -> 0x0118 (FullSize[0x0148] - InheritedSize[0x0030])
	 */
	class UEnemySettings : public UDataAsset
	{
	public:
		struct FRandRange                                          EnemyWaveRange;                                          // 0x0030(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		TMap<class UEnemyID*, class UEnemyDescriptor*>             EnemyDescriptor;                                         // 0x0038(0x0050) Transient, NativeAccessSpecifierPublic
		struct FGameplayTagQuery                                   EliteAllowQuery;                                         // 0x0088(0x0048) Edit, NativeAccessSpecifierPublic
		TMap<class UEnemyDescriptor*, struct FEliteEnemyEntry>     HeroEnemies;                                             // 0x00D0(0x0050) Edit, NativeAccessSpecifierPublic
		struct FRandFloatInterval                                  HeroEnemySpawn;                                          // 0x0120(0x0010) Edit, NativeAccessSpecifierPublic
		int32_t                                                    EliteRequiredCampaignProgress;                           // 0x0130(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DQEI[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      ExplodingEnemiesDamageComponents;                        // 0x0138(0x0010) Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemySpawnManager
	 * Size -> 0x01B8 (FullSize[0x0268] - InheritedSize[0x00B0])
	 */
	class UEnemySpawnManager : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnEnemyDestroyed;                                        // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnemyDied;                                             // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnemySpawned;                                          // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USpawnEffectsComponent*                              SpawnEffects;                                            // 0x00E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S4ZK[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class APawn*>                                       ActiveEnemies;                                           // 0x00F0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class APawn*>                                       ActiveSwarmerEnemies;                                    // 0x0100(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      ActiveGlobalStatusEffects;                               // 0x0110(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TMap<class UEnemyDescriptor*, struct FSpawnRarityModifierItem> SpawnRarityModifiers;                                    // 0x0120(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		TArray<class APawn*>                                       ActiveCritters;                                          // 0x0170(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class APawn*>                                       CritcalEnemies;                                          // 0x0180(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MaxActiveEnemies;                                        // 0x0190(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxActiveSwarmers;                                       // 0x0194(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxActiveCritters;                                       // 0x0198(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDistanceBeforeCleanup;                                // 0x019C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        SwarmerTag;                                              // 0x01A0(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        RegularTag;                                              // 0x01A8(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        CritterTag;                                              // 0x01B0(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AProceduralSetup*                                    ProceduralSetup;                                         // 0x01B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSpawnQueueItem>                             SpawnQueue;                                              // 0x01C0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       bDestroyingAllEnemies;                                   // 0x01D0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G3BU[0x97];                                  // 0x01D1(0x0097) MISSED OFFSET (PADDING)

	public:
		void SpawnerDestroyed(class APawn* Actor);
		bool SpawnEnemy(class UEnemyDescriptor* descriptor, const struct FTransform& Transform, const class FScriptDelegate& Callback, bool useSpawnFX, bool Alert);
		void SetSpawningEnabled(bool newSpawningEnabled);
		void RemoveGlobalStatusEffect(class UClass* StatusEffect);
		void RegisterSpawner(class APawn* Actor);
		void RegisterSpawnedEnemy(class AActor* enemy);
		void PromoteToCritical(class APawn* Pawn);
		void OnMatchStarted();
		void OnMatchEnded();
		bool GetSpawningEnabled();
		class APawn* FindEnemyByClass(class UClass* PawnClass, bool isSwarmerEnemy);
		TArray<class APawn*> FindEnemiesByClass(class UClass* PawnClass, bool isSwarmerEnemy);
		void EnemyDestroyed(class AActor* Actor);
		void EnemyDeath(class UHealthComponentBase* HealthComponent);
		void DestroyAllEnemies();
		bool CanSpawn(class UEnemyDescriptor* EnemyDescriptor);
		void AddGlobalStatusEffect(class UClass* StatusEffect);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawnEffectsComponent
	 * Size -> 0x0128 (FullSize[0x01D8] - InheritedSize[0x00B0])
	 */
	class USpawnEffectsComponent : public UActorComponent
	{
	public:
		struct FSpawnEffectsArray                                  ActiveEffects;                                           // 0x00B0(0x0120) Net, Protected, NativeAccessSpecifierProtected
		class UMaterialInstance*                                   BiomeMaterialOverride;                                   // 0x01D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PheromoneSpawnerComponent
	 * Size -> 0x0068 (FullSize[0x0118] - InheritedSize[0x00B0])
	 */
	class UPheromoneSpawnerComponent : public UActorComponent
	{
	public:
		struct FRandRange                                          SpawnInterval;                                           // 0x00B0(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      AttackPositioningCostModifier;                           // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HZNR[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnemyDescriptor*                                    enemy;                                                   // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class AActor*, float>                                 InfectedActors;                                          // 0x00C8(0x0050) Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyDetonationSetting
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UEnemyDetonationSetting : public UDataAsset
	{
	public:
		class UDamageComponent*                                    FireDamage;                                              // 0x0030(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      FireParticles;                                           // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           FireSound;                                               // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    IceDamage;                                               // 0x0048(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      IceParticles;                                            // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           IceSound;                                                // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TemperatureComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UTemperatureComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_COXN[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FrozenDamageBonusScale;                                  // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z5HW[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (PADDING)

	public:
		bool TryPushHeatSource(class AActor* Target, float Temperature, ETemperatureIntensity Intensity);
		bool TryPopHeatSource(class AActor* Target, float Temperature, ETemperatureIntensity Intensity);
		void ResetTemperature();
		float GetCurrentTemperature();
		void ChangeTemperature(float Degrees, class AActor* Source);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyTemperatureComponent
	 * Size -> 0x0080 (FullSize[0x0148] - InheritedSize[0x00C8])
	 */
	class UEnemyTemperatureComponent : public UTemperatureComponent
	{
	public:
		float                                                      UpdateTime;                                              // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DieIfFrozen;                                             // 0x00CC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DieIfBurning;                                            // 0x00CD(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OCA6[0x2];                                   // 0x00CE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TemperatureChangeScale;                                  // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurnTemperature;                                         // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DouseFireTemperature;                                    // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FreezeTemperature;                                       // 0x00DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UnFreezeTemperature;                                     // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WarmingRate;                                             // 0x00E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CoolingRate;                                             // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsHeatsourceWhenOnFire;                                  // 0x00EC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N50K[0x3];                                   // 0x00ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OnFireHeatRange;                                         // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxColdSlowdown;                                         // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z5N1[0x8];                                   // 0x00F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnemyDetonationSetting*                             DetonationSetting;                                       // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPawnStatsComponent*                                 PawnStats;                                               // 0x0108(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V9MD[0x18];                                  // 0x0110(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    WarmingCooldown;                                         // 0x0128(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3WH9[0x8];                                   // 0x012C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              FireDetonationStack;                                     // 0x0134(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IceDetonationStack;                                      // 0x0135(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VPJX[0x12];                                  // 0x0136(0x0012) MISSED OFFSET (PADDING)

	public:
		void TimerCallback();
		void OnDeath(class UHealthComponent* HealthComponent, float damageAmount, const struct FDamageData& DamageData, TArray<class UDamageTag*> Tags);
		void DoTemperatureShock(class UStatusEffectsComponent* Status);
		void All_IceDetonation();
		void All_FireDetonation();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyTemperatureReplicatorComponent
	 * Size -> 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
	 */
	class UEnemyTemperatureReplicatorComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnTemperatureEffectChanged;                              // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsFrozenChanged;                                       // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsOnFireChanged;                                       // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UEnemyTemperatureComponent>           EnemyTemperatureComponent;                               // 0x00E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TemperatureEffect;                                       // 0x00E8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsFrozen;                                               // 0x00EC(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsOnFire;                                               // 0x00ED(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RH9V[0x2];                                   // 0x00EE(0x0002) MISSED OFFSET (PADDING)

	public:
		void OnRep_TemperatureEffect();
		void OnRep_IsOnFire();
		void OnRep_IsFrozen();
		bool IsOnFire();
		bool IsFrozen();
		float GetTemperatureEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyWaveController
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UEnemyWaveController : public UObject
	{
	public:
		bool                                                       IsComplete;                                              // 0x0028(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSuitableForSolo;                                       // 0x0029(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PA6V[0x6];                                   // 0x002A(0x0006) MISSED OFFSET (PADDING)

	public:
		void StartWave();
		void ResumeWave();
		void PauseWave();
		void OnWaveCompleted();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyWaveManager
	 * Size -> 0x00B0 (FullSize[0x0160] - InheritedSize[0x00B0])
	 */
	class UEnemyWaveManager : public UActorComponent
	{
	public:
		unsigned char                                              AlwaysRunningWave[0x28];                                 // 0x00B0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		TArray<struct FWaveEntry>                                  ScriptedWaves;                                           // 0x00D8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FWaveEntry>                                  EndMissionWaves;                                         // 0x00E8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UEnemyWaveController*>                        ActiveScriptedWaves;                                     // 0x00F8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		float                                                      StartDelay;                                              // 0x0108(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      spawnRadiusFromSpawnPoint;                               // 0x010C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ScriptedWavesEnabled;                                    // 0x0110(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       NormalWavesEnabled;                                      // 0x0111(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       OverrideDifficultyScriptedWaveInternal;                  // 0x0112(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7HDG[0x1];                                   // 0x0113(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRandRange                                          OverrideScriptedWaveInterval;                            // 0x0114(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W75I[0x4];                                   // 0x011C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFSDGameMode*                                        GameMode;                                                // 0x0120(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEnemySpawnManager*                                  SpawnManager;                                            // 0x0128(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WRYY[0x10];                                  // 0x0130(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     NormalWavesBlockStack;                                   // 0x0140(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UObject*>                                     ScriptedWavesBlockStack;                                 // 0x0150(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		class UEnemyWaveController* TriggerWave(class UClass* waveClass);
		void TriggerEndWave(bool cancelAllWaves);
		void SpawnScriptedWave();
		void PushDisableScriptedWaves(class UObject* Owner);
		void PushDisableNormalWaves(class UObject* Owner);
		void PopDisableScriptedWaves(class UObject* Owner);
		void PopDisableNormalWaves(class UObject* Owner);
		void OnMatchEnded();
		void OnEnemySpawned(class APawn* enemy);
		bool AreScriptedWavesBlocked();
		bool AreNormalWavesBlocked();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EscapeMenuWindow
	 * Size -> 0x0000 (FullSize[0x02A0] - InheritedSize[0x02A0])
	 */
	class UEscapeMenuWindow : public UWindowWidget
	{
	public:
		void OpenMinersManualFromID(EMinersManualSection Section, const struct FGuid& ID);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FuelCannisterAttachedAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UFuelCannisterAttachedAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_B8IQ[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		void SetCanBeTaken(bool canBeTakenValue);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FuelCannisterItemAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UFuelCannisterItemAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_1INL[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EscortMuleAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UEscortMuleAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_72XR[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		void OnTookDamage(class UHealthComponent* Health);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EscortDestination
	 * Size -> 0x0040 (FullSize[0x0260] - InheritedSize[0x0220])
	 */
	class AEscortDestination : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnShellCracked;                                          // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class UDamageComponent*                                    EndExplosionDamage;                                      // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NextBreakpoint;                                          // 0x0238(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    StageForAnalytics;                                       // 0x023C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SecondsToDestroyHeartstone;                              // 0x0240(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZTVA[0x4];                                   // 0x0244(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              BreakpointsPercent;                                      // 0x0248(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      Radius;                                                  // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShellThickness;                                          // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void MeltPlatforms(class ADeepCSGWorld* CSGWorld, TArray<struct FVector> meltPoints, float meltRadius);
		class UTerrainMaterial* GetTerrainMaterialByHandle(class ADeepCSGWorld* CSGWorld, int32_t materialHandle);
		int32_t GetSecondsToDestroyObjective();
		struct FVector GetClosestPointOnRadius(const struct FVector& CurrentLocation, int32_t numberOfShellsCracked, struct FVector* dirFromCenter);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionDNA
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UMissionDNA : public UObject
	{
	public:
		float                                                      MissionScale;                                            // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Weight;                                                  // 0x002C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMissionComplexity*                                  Complexity;                                              // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionDuration*                                    Duration;                                                // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FGameplayTagQuery>                           RoomQueries;                                             // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		float GetDurationHazardBonus();
		float GetComplexityHazardBonus();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EscortMissionDNA
	 * Size -> 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
	 */
	class UEscortMissionDNA : public UMissionDNA
	{
	public:
		int32_t                                                    RefuelLocations;                                         // 0x0050(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_01GL[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EscortMule
	 * Size -> 0x01B8 (FullSize[0x04B0] - InheritedSize[0x02F8])
	 */
	class AEscortMule : public AFSDPawn
	{
	public:
		unsigned char                                              UnknownData_ZUVX[0x8];                                   // 0x02F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMuleActivated;                                         // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpeedChanged;                                          // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFullCanistersChanged;                                  // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnExitGaragePathSet;                                     // 0x0330(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             Cheat_SetMuleSpeed;                                      // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             Cheat_JumpToNextPhase;                                   // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UFriendlyHealthComponent*                            HealthComponent;                                         // 0x0360(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USimpleObjectInfoComponent*                          ObjectInfo;                                              // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URestrictedResourceBank*                             ResourceBank;                                            // 0x0370(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BY5T[0x8];                                   // 0x0378(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          TargetTransform;                                         // 0x0380(0x0030) BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTransform                                          PreviousTransform;                                       // 0x03B0(0x0030) Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		EEscortMissionState                                        State;                                                   // 0x03E0(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X4EJ[0x7];                                   // 0x03E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEscortObjective*                                    EscortObjective;                                         // 0x03E8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MFA7[0x20];                                  // 0x03F0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FEscortMuleMovementState                            MovementState;                                           // 0x0410(0x0050) BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      SpeedModifier;                                           // 0x0460(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YQJ4[0x4];                                   // 0x0464(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOutlineComponent*                                   OutlineComponent;                                        // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HealPerTickNormal;                                       // 0x0478(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HealPerTickUnderAttack;                                  // 0x047C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CannisterVisible_Left;                                   // 0x0480(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CannisterVisible_Right;                                  // 0x0481(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IQRE[0x2];                                   // 0x0482(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             NextStop;                                                // 0x0484(0x000C) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsCarvingTunnel;                                         // 0x0490(0x0001) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KYHK[0x3];                                   // 0x0491(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FullCanisters;                                           // 0x0494(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FEscortMuleExtractorSlot>                    ExtractorSlots;                                          // 0x0498(0x0010) BlueprintVisible, Net, ZeroConstructor, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8NZD[0x8];                                   // 0x04A8(0x0008) MISSED OFFSET (PADDING)

	public:
		bool TryHeal(class APlayerCharacter* User, float Amount);
		void SetTargetTransform(const struct FTransform& InTransform);
		void SetSpeedModifier(float inSpeedModifier);
		void SetFullExtracterAttached(class UInstantUsable* Usable);
		void SetExtractorDetached(class UInstantUsable* Usable);
		void SetExitGaragePath(TArray<struct FVector> Path);
		void ResetExtractors();
		void PathIsReady();
		void OnRep_SpeedModifier();
		void OnRep_MovementState();
		void OnRep_IsCarvingTunnel();
		void OnRep_ExtractorSlots();
		void OnObjectiveStateChanged(EEscortMissionState oldState);
		void OnExtractorSlotChanged(const struct FEscortMuleExtractorSlot& Slot, int32_t Index);
		void OnExtractorDetached(class AExtractorItem* Item);
		void ObjectiveStateChange(EEscortMissionState NewState);
		EEscortExtractorState GetExtractorState(class UInstantUsable* Usable);
		void ActivateMule();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EscortMuleTrack
	 * Size -> 0x0028 (FullSize[0x0248] - InheritedSize[0x0220])
	 */
	class AEscortMuleTrack : public AActor
	{
	public:
		unsigned char                                              UnknownData_8385[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x0228(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EscortMuleAIController
	 * Size -> 0x00B8 (FullSize[0x0410] - InheritedSize[0x0358])
	 */
	class AEscortMuleAIController : public AFSDAIController
	{
	public:
		unsigned char                                              UnknownData_QL8K[0x10];                                  // 0x0358(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     CurrentPath;                                             // 0x0368(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VLJ4[0x50];                                  // 0x0378(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     GaragePath;                                              // 0x03C8(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    PathIndex;                                               // 0x03D8(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurrentRoom;                                             // 0x03DC(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEscortObjective*                                    EscortObj;                                               // 0x03E0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TunnelStartIndex;                                        // 0x03E8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TunnelEndIndex;                                          // 0x03EC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BC30[0x18];                                  // 0x03F0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRandomStream                                       RandomStream;                                            // 0x0408(0x0008) BlueprintVisible, ZeroConstructor, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		void SetDozerNextPathSegment();
		void OnPathComplete();
		struct FVector GetPointBehindEscortMule(float Distance);
		TArray<struct FVector> GetPathForDebug(int32_t Segment);
		struct FVector GetPathEndTagent();
		void GetFullPath(TArray<struct FVector>* outPath);
		void FindDozerPath(const struct FVector& StartPosition);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EscortObjective
	 * Size -> 0x01C0 (FullSize[0x0340] - InheritedSize[0x0180])
	 */
	class UEscortObjective : public UObjective
	{
	public:
		class FScriptMulticastDelegate                             OnProgressUpdated;                                       // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShellBreakPauseChange;                                 // 0x0190(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMuleRefueled;                                          // 0x01A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       DidRescueDorettaHead;                                    // 0x01B0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_94XL[0x3];                                   // 0x01B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AreasToScan;                                             // 0x01B4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ScanCount;                                               // 0x01B8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XYY3[0x4];                                   // 0x01BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     ScanLocations;                                           // 0x01C0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UDebrisPositioning*                                  Positioning;                                             // 0x01D0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDebrisPositioning*                                  EscortMulePositioning;                                   // 0x01D8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         CostDistanceCurve;                                       // 0x01E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DebrisRadius;                                            // 0x01E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1HF1[0x4];                                   // 0x01EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDebrisBase*>                                 ObjectDebris;                                            // 0x01F0(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              RefuelObjectClass[0x28];                                 // 0x0200(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              DestinationClass[0x28];                                  // 0x0228(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		int32_t                                                    AreasScanned;                                            // 0x0250(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EEscortMissionState                                        State;                                                   // 0x0254(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       FinalBattle;                                             // 0x0255(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3MF3[0x2];                                   // 0x0256(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCarvedResourceData*                                 FuelResource;                                            // 0x0258(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UResourceData*                                       GemResource;                                             // 0x0260(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnCannisterRegistered;                                   // 0x0268(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		float                                                      ServerShellProgress;                                     // 0x0278(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3E0D[0x1C];                                  // 0x027C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SecondsToDestroyHeartstone;                              // 0x0298(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FullCanistersRequired;                                   // 0x029C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FullCanisters;                                           // 0x02A0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FuelResourceAmount;                                      // 0x02A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              GarageDropCarver[0x28];                                  // 0x02A8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              EscortMuleDropBeaconClass[0x28];                         // 0x02D0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              GarageClass[0x28];                                       // 0x02F8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		struct FVector                                             EscortMuleDropLocation;                                  // 0x0320(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PSBI[0x4];                                   // 0x032C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AEscortMule*                                         EscortMule;                                              // 0x0330(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AEscortDestination*                                  EscortDestination;                                       // 0x0338(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SyncProgressTimer();
		void StartShellBreak();
		void SpawnGarage();
		void SetState(EEscortMissionState State);
		void SetShellBreakPaused(bool newPaused);
		void SetEscortMule(class AEscortMule* MULE);
		void RegisterFuelCannister(class AExtractorItem* extractor);
		void RecordFailStage(bool muleDied, bool missionAborted);
		void OnResourceChanged(class UCappedResource* CappedResource, float Amount);
		void OnRep_FullCanisters();
		void OnRep_EscortState();
		void OnRep_EscortMule();
		void OnRep_AreasToScan(int32_t prevAmount);
		void OnRep_AreasScanned(int32_t prevAmount);
		void OnMuleDied(class UHealthComponentBase* HealthComponent);
		void OnHealthChanged(float Health);
		void OnFullCanistersChanged(int32_t Amount);
		void OnEscortMuleSpawnedEvent();
		float GetShellBreakProgress();
		bool DoesPathExist(const struct FVector& Start, const struct FVector& End);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ExplosiveBarrelEvent
	 * Size -> 0x0008 (FullSize[0x0370] - InheritedSize[0x0368])
	 */
	class AExplosiveBarrelEvent : public AGameEvent
	{
	public:
		class UDamageComponent*                                    EndDamage;                                               // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RunningMissionBP
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class URunningMissionBP : public UObject
	{
	public:
		void StartLogic();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ExterminationReward
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UExterminationReward : public URunningMissionBP
	{
	public:
		class UResourceData*                                       Resource;                                                // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AwardSize;                                               // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EJQ4[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               AllowedFilter;                                           // 0x0038(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnEnemyKilled(const struct FGameplayTagContainer& GameplayTags, class AActor* killedEnemy);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ExtractorItem
	 * Size -> 0x01C0 (FullSize[0x0590] - InheritedSize[0x03D0])
	 */
	class AExtractorItem : public AAnimatedItem
	{
	public:
		unsigned char                                              UnknownData_JNMG[0x8];                                   // 0x03D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCurrentLoadChangedEvent;                               // 0x03D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterEquipChange;                                  // 0x03E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UBoxComponent*                                       DroppedCollider;                                         // 0x03F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              DroppedMesh;                                             // 0x0400(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFirstPersonParticleSystemComponent*                 FP_DrillParticles;                                       // 0x0408(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAudioComponent*                                  AudioComponent;                                          // 0x0410(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPointLightComponent*                                SurfaceLight;                                            // 0x0418(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            MeltingParticles;                                        // 0x0420(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            InvalidSurfaceParticles;                                 // 0x0428(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            FPMuzzleParticles;                                       // 0x0430(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            FPMuzzleInvalidParticles;                                // 0x0438(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            TPMuzzleParticles;                                       // 0x0440(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            TPMuzzleInvalidParticles;                                // 0x0448(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        FPMineMontage;                                           // 0x0450(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        TPMineMontage;                                           // 0x0458(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        FPGunsling;                                              // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        TPGunsling;                                              // 0x0468(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                MiningSpeedAudioParamterName;                            // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     DrillParticles;                                          // 0x0478(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UForceFeedbackEffect*                                DrillRumble;                                             // 0x0480(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BlockParticlesScaleFP;                                   // 0x0488(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BlockParticlesScaleTP;                                   // 0x048C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EExtractorState                                            State;                                                   // 0x0490(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M5V8[0x3];                                   // 0x0491(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MovementPenalty;                                         // 0x0494(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CarverRayCastLength;                                     // 0x0498(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CarveTerrainDistanceCheck;                               // 0x049C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentDrillSpeed;                                       // 0x04A0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NR2R[0x14];                                  // 0x04A4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DrillParticlesDuration;                                  // 0x04B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1PHO[0x4];                                   // 0x04BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UResourceData*                                       ExtractetMaterial;                                       // 0x04C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TimeBeforeInvalidShout;                                  // 0x04C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0F88[0x4];                                   // 0x04CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDialogDataAsset*                                    InvalidSurfaceShout;                                     // 0x04D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    ShoutFull;                                               // 0x04D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           DigSound;                                                // 0x04E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsMining;                                                // 0x04E8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsGunslinging;                                           // 0x04E9(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ReadyToExtract;                                          // 0x04EA(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4M9S[0xD];                                   // 0x04EB(0x000D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     VacuumEffect;                                            // 0x04F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     ChunkSplatEffect;                                        // 0x0500(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ChunkSplatSound;                                         // 0x0508(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OQKL[0x24];                                  // 0x0510(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxDifference;                                           // 0x0534(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EROS[0x4];                                   // 0x0538(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MeltingTime;                                             // 0x053C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChunkMultiplier;                                         // 0x0540(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CollectChunkCooldown;                                    // 0x0544(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CrossfadeSpeed;                                          // 0x0548(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_INRJ[0x14];                                  // 0x054C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VacuumEffectOffset;                                      // 0x0560(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxCapacity;                                             // 0x0564(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlayerCountBonus;                                        // 0x0568(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WJBO[0x4];                                   // 0x056C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              SurfaceLightInitialColor;                                // 0x0570(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FColor                                              SurfaceLightEndColor;                                    // 0x0574(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SurfaceLightMinIntensity;                                // 0x0578(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SurfaceLightMaxIntensity;                                // 0x057C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentLoad;                                             // 0x0580(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M0S5[0xC];                                   // 0x0584(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetCanPickup(bool canPickup);
		void Server_StopMining();
		void Server_StartMining();
		void Server_SetReadyToExtract(bool IsReady);
		void Server_DigBlock(const struct FVector_NetQuantize& Start, const struct FVector_NetQuantize& End);
		void Server_CollectChunk(class AResourceChunk* chunk);
		void ResetCurrentLoad();
		void OnValidSurfaceChanged(bool IsValid);
		void OnThrown(const struct FVector& Direction);
		void OnStopDrilling();
		void OnStartDrilling();
		void OnRep_SimulatingMining();
		void OnRep_IsGunslinging();
		void OnRep_CurrentLoad();
		void OnCurrentLoadChanged(float load);
		void OnChunkCooldownOver();
		bool IsFull();
		class UBoxComponent* GetRootCollider();
		void All_SimulateDigBlock(const struct FVector_NetQuantize& Position, bool SpawnParticles, int32_t Material);
		void All_ChunkSplat(class AResourceChunk* chunk);
		void AddResource(float Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ExtruderPlant
	 * Size -> 0x0028 (FullSize[0x0248] - InheritedSize[0x0220])
	 */
	class AExtruderPlant : public AActor
	{
	public:
		class USkeletalMeshComponent*                              SkeletalMesh;                                            // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimationAsset*                                     ExtrudeAnimation;                                        // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimationAsset*                                     RetractAnimation;                                        // 0x0230(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     audio;                                                   // 0x0238(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KMLZ[0x8];                                   // 0x0240(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EyeBrowsVanityItem
	 * Size -> 0x0050 (FullSize[0x0170] - InheritedSize[0x0120])
	 */
	class UEyeBrowsVanityItem : public UVanityItem
	{
	public:
		unsigned char                                              Mesh[0x28];                                              // 0x0120(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AnimInstance[0x28];                                      // 0x0148(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FacilityGeneratorLine
	 * Size -> 0x0100 (FullSize[0x0320] - InheritedSize[0x0220])
	 */
	class AFacilityGeneratorLine : public AActor
	{
	public:
		struct FTransform                                          StartTransform;                                          // 0x0220(0x0030) BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FTransform>                                  EndTransforms;                                           // 0x0250(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      HeightOffsetMin;                                         // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeightOffsetMax;                                         // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxSegmentLength;                                        // 0x0268(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarveRadius;                                             // 0x026C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineComponent*                                    SplineComponent;                                         // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineDecoratorComponent*                           SplineDecorator;                                         // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              LineMeshPtr[0x28];                                       // 0x0280(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              MaterialConnected[0x28];                                 // 0x02A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              MaterialUnconnected[0x28];                               // 0x02D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class ATetherStation*                                      Station;                                                 // 0x02F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         MeshInstance;                                            // 0x0300(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     ReplicatedPath;                                          // 0x0308(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		bool                                                       Connected;                                               // 0x0318(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HRZK[0x7];                                   // 0x0319(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetConnected(bool InConnected);
		void ReceiveBeginPathFinding();
		void OnRep_Path();
		void OnRep_Connected();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FacilityHackingPod
	 * Size -> 0x0018 (FullSize[0x02F8] - InheritedSize[0x02E0])
	 */
	class AFacilityHackingPod : public ARessuplyPod
	{
	public:
		class FScriptMulticastDelegate                             OnHackingPodStateChanged;                                // 0x02E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		EHackingPodState                                           PodState;                                                // 0x02F0(0x0001) Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6ZKW[0x7];                                   // 0x02F1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetState(EHackingPodState aState);
		void OnRep_PodState(EHackingPodState oldState);
		void OnExitState(EHackingPodState oldState);
		void OnEnterState(EHackingPodState NextState);
		EHackingPodState GetState();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RGBLightManagerComponent
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class URGBLightManagerComponent : public UActorComponent
	{
	public:
		TArray<class UPointLightComponent*>                        Lights;                                                  // 0x00B0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<struct FLinearColor>                                ColorList;                                               // 0x00C0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K9ZW[0x28];                                  // 0x00D0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NewColorsInterval;                                       // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NewColorsVariance;                                       // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4LJO[0x8];                                   // 0x0100(0x0008) MISSED OFFSET (PADDING)

	public:
		void StopRgb();
		void StartRgb();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FacilityHackingPodAnimInstance
	 * Size -> 0x0038 (FullSize[0x02F0] - InheritedSize[0x02B8])
	 */
	class UFacilityHackingPodAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_DMF2[0x8];                                   // 0x02B8(0x0008) Fix Super Size
		class AActor*                                              SaluteTarget;                                            // 0x02C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            LookingDirection;                                        // 0x02C8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            TargetRotation;                                          // 0x02D4(0x000C) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       IsHacking;                                               // 0x02E0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EHackingPodState                                           PodState;                                                // 0x02E1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0IJ4[0x2];                                   // 0x02E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RadarDishAngle;                                          // 0x02E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OGF1[0x8];                                   // 0x02E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetSaluter(class AActor* salutingTarget);
		void ResetSaluteTarget();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemDispenserAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UItemDispenserAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_6FUK[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FacilityTetherDispenserAnimInstnace
	 * Size -> 0x0010 (FullSize[0x02D0] - InheritedSize[0x02C0])
	 */
	class UFacilityTetherDispenserAnimInstnace : public UItemDispenserAnimInstance
	{
	public:
		EHackingPodState                                           PodState;                                                // 0x02C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShouldShowDispenser;                                     // 0x02C1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShouldCloseFromDispenser;                                // 0x02C2(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShouldShowButton;                                        // 0x02C3(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShouldHideButton;                                        // 0x02C4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4KSB[0xB];                                   // 0x02C5(0x000B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FacilityObjective
	 * Size -> 0x0178 (FullSize[0x02F8] - InheritedSize[0x0180])
	 */
	class UFacilityObjective : public UObjective
	{
	public:
		unsigned char                                              UnknownData_ZSGQ[0x10];                                  // 0x0180(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              generatorClass[0x28];                                    // 0x0190(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              GeneratorBeaconClass[0x28];                              // 0x01B8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		int32_t                                                    GeneratorCount;                                          // 0x01E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ObjectivesStage;                                         // 0x01E4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSubObjective>                               SubObjectives;                                           // 0x01E8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FScriptDelegate                                      OnFirstEncounterDroneSpawned_Delegate;                   // 0x01F8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FScriptDelegate                                      OnSecondEncounterDroneSpawned_Delegate;                  // 0x0208(0x0010) ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MYHU[0x10];                                  // 0x0218(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class APawn*>                                       spawnedEnemies;                                          // 0x0228(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S76N[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UEnemyDescriptor*>                            TurretDescriptors;                                       // 0x0240(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UEnemyDescriptor*>                            GeneratorRoomTurretDescriptors;                          // 0x0250(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UEnemyDescriptor*>                            EncounterEnemies;                                        // 0x0260(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      EncounterDifficulty;                                     // 0x0270(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CD0E[0x4];                                   // 0x0274(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRandInterval                                       Diversity;                                               // 0x0278(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FIRandRange                                         TurretEncountersRange;                                   // 0x0288(0x0008) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MinimumTurretEncounters;                                 // 0x0290(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FIRandRange                                         TunnelTurretsRange;                                      // 0x0294(0x0008) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YRW7[0x4];                                   // 0x029C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      SmallGenerators;                                         // 0x02A0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class ATetherStation*                                      mainFacility;                                            // 0x02B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<int32_t>                                            ShieldGeneratorRooms;                                    // 0x02B8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MainFacilityRoom;                                        // 0x02C8(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasRemovedMainShield;                                    // 0x02CC(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HEFX[0x3];                                   // 0x02CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      ShieldGenerators;                                        // 0x02D0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UResourceData*                                       GoalResource;                                            // 0x02E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AmountRequired;                                          // 0x02E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AmountCollected;                                         // 0x02EC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    GeneratorsActivated;                                     // 0x02F0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_845D[0x4];                                   // 0x02F4(0x0004) MISSED OFFSET (PADDING)

	public:
		void SpawnFacilityEncounters(class AProceduralSetup* Setup, class UEncounterManager* Encounters, class UDebrisPositioning* Positioning);
		TArray<struct FTransform> SpawnEndBattleTurrets(int32_t amountOfTurrets, class AProceduralSetup* Setup, class UDebrisPositioning* DebrisPositioning, class UClass* terrainPlacement, TArray<class AActor*> existingTurrets, bool* success);
		void SetMainFacility(class ATetherStation* mainFacility);
		void SetGeneratorRooms(TArray<int32_t>* generatorRoomsIndicies);
		void SecondGeneratorEncounterSpawn(class APawn* spawned);
		void Receive_AddEnemies(class AProceduralSetup* Setup);
		void ProgressCurrentObjective();
		class AActor* PlaceObjectInRoom(class AProceduralSetup* Setup, const struct FRoomNode& RoomNode, class UDebrisPositioning* Positioning, class UClass* placementActor, const struct FRandomStream& RandomStream, bool checkImportantLocations);
		void OnResourceChanged(class UCappedResource* Resource, float Amount);
		void OnRep_ObjectivesStage();
		void OnRep_GeneratorsActivated();
		void OnRep_AmountCollected();
		void OnCoreDeposited();
		bool IsSubObjectiveComplete(int32_t objectiveIndex);
		void InitGeneratorCount(int32_t generators);
		struct FTransform GetTurretGoal(class AProceduralSetup* Setup, const struct FVector& Origin, float idealRange, class UDebrisPositioning* DebrisPositioning, class UClass* terrainPlacement, bool* success);
		TArray<class AActor*> GetShieldGenerators();
		int32_t GetShieldGeneratorCount();
		void GetObjectTransformInRoom(struct FTransform* Transform, class AProceduralSetup* Setup, const struct FRoomNode& RoomNode, class UDebrisPositioning* Positioning, class UClass* placementActor, const struct FRandomStream& RandomStream, bool checkImportantLocations);
		int32_t GetFacilityRoomIndex();
		struct FVector GetFacilityLocation();
		struct FSubObjective GetCurrentObjective();
		void GeneratorActivated();
		void FirstGeneratorEncounterSpawn(class APawn* spawned);
		void DropOverCharger(class AProceduralSetup* Setup, int32_t roomIndex, const struct FVector& facilityLocation, float idealRange, float idealZDistance, class UDebrisPositioning* DebrisPositioning, class UClass* generatorClass, bool AddImportantLocation);
		void ChangeObjective();
		void AddShieldGenerator(class AActor* charger, int32_t roomIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HackableBuildingObjective
	 * Size -> 0x0000 (FullSize[0x0180] - InheritedSize[0x0180])
	 */
	class UHackableBuildingObjective : public UObjective
	{
	public:
		void DropOverCharger(class AProceduralSetup* Setup, const struct FVector& buildingLocation, float idealRange, float idealZDistance, class UDebrisPositioning* DebrisPositioning, class UClass* generatorClass, bool AddImportantLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FacilityPowerStation
	 * Size -> 0x0038 (FullSize[0x0258] - InheritedSize[0x0220])
	 */
	class AFacilityPowerStation : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnHackingProgressDelegate;                               // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProgresspointDelegate;                                 // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      ProgressPoint;                                           // 0x0240(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ProgresPointCount;                                       // 0x0244(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VBBD[0x4];                                   // 0x0248(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeToDefend;                                            // 0x024C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Progress;                                                // 0x0250(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsHacking;                                               // 0x0254(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P8UR[0x3];                                   // 0x0255(0x0003) MISSED OFFSET (PADDING)

	public:
		void StopHacking();
		void StartHacking();
		void OnRep_Progress();
		void OnRep_IsHacking();
		void OnHackingComplete();
		void OnHackingChanged(bool IsHacking);
		bool IsHacked();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FacilityShieldGenerator
	 * Size -> 0x0028 (FullSize[0x0248] - InheritedSize[0x0220])
	 */
	class AFacilityShieldGenerator : public AActor
	{
	public:
		unsigned char                                              UnknownData_WEKS[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x0228(0x0020) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TentacleBase
	 * Size -> 0x0150 (FullSize[0x0498] - InheritedSize[0x0348])
	 */
	class ATentacleBase : public AEnemyPawn
	{
	public:
		class USplineComponent*                                    SplineComponent;                                         // 0x0348(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTransform                                          RestTransform;                                           // 0x0350(0x0030) BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z1QT[0xC0];                                  // 0x0380(0x00C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             TargetLocation;                                          // 0x0440(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5CXQ[0x4];                                   // 0x044C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HeadMovementDuration;                                    // 0x0450(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CanSwayCooldown;                                         // 0x0454(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           SwayRange;                                               // 0x0458(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NeckBaseTangentLength;                                   // 0x0460(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             NeckBasePositionOffset;                                  // 0x0464(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             NeckBaseTangentOffset;                                   // 0x0470(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NeckTopTangentLength;                                    // 0x047C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DurationTentacleRetract;                                 // 0x0480(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DurationTentacleFoldout;                                 // 0x0484(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     HeadRoot;                                                // 0x0488(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     HeadRotator;                                             // 0x0490(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetRestingTransform(const struct FTransform& restingTransform, bool startAtRest);
		void Recieve_OnRep_Owner();
		void MoveHydraHead(const struct FTransform& newDesiredTransform, float newCanSwayCooldown, float newHeadMovementDuration, bool UseSpring);
		class AStabberVineRoot* GetStabberVineRoot();
		class USceneComponent* GetHeadRotator();
		class USceneComponent* GetHeadRoot();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FacilityTentacle
	 * Size -> 0x0068 (FullSize[0x0500] - InheritedSize[0x0498])
	 */
	class AFacilityTentacle : public ATentacleBase
	{
	public:
		unsigned char                                              UnknownData_9KKP[0x8];                                   // 0x0498(0x0008) Fix Super Size
		float                                                      SwaySpeed;                                               // 0x04A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Extended;                                                // 0x04A4(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KEA7[0x3];                                   // 0x04A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAnimMontage*>                                HitReactions;                                            // 0x04A8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		EFacilityTentacleState                                     TentacleState;                                           // 0x04B8(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0R6V[0x7];                                   // 0x04B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              HeadMesh;                                                // 0x04C0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RQMH[0x18];                                  // 0x04C8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTentacleTarget                                     DesiredTarget;                                           // 0x04E0(0x0020) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		void PlayHitReaction(float Amount);
		void OnStateChanged(EFacilityTentacleState NewState);
		void OnRep_TentacleState();
		void OnRep_DesiredTarget();
		bool FindBurrowLocation(class UDebrisPositioning* Debris, const struct FVector& Origin, float Radius, struct FVector* OutLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FacilityTentacleHeadAnimInstance
	 * Size -> 0x0008 (FullSize[0x0310] - InheritedSize[0x0308])
	 */
	class UFacilityTentacleHeadAnimInstance : public UEnemyAnimInstance
	{
	public:
		unsigned char                                              UnknownData_74K8[0x8];                                   // 0x0308(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FacilityTurretController
	 * Size -> 0x0030 (FullSize[0x0388] - InheritedSize[0x0358])
	 */
	class AFacilityTurretController : public AFSDAIController
	{
	public:
		class UAIPerceptionComponent*                              Perception;                                              // 0x0358(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GIP3[0x18];                                  // 0x0360(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RememberTargetTime;                                      // 0x0378(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RetargetOnAttackChance;                                  // 0x037C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       RespectAttack;                                           // 0x0380(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DSOT[0x7];                                   // 0x0381(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnTurretsAttackingChanged(bool IsAttacking);
		void OnTargetRevived();
		void OnTargetDied(class UHealthComponentBase* Health);
		void OnPerceptionUpdated(class AActor* sensedActor, const struct FAIStimulus& Stimulus);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FacilityTurret
	 * Size -> 0x0110 (FullSize[0x0458] - InheritedSize[0x0348])
	 */
	class AFacilityTurret : public AEnemyPawn
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0348(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x0350(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U884[0x10];                                  // 0x0358(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IndicatorActivationDelay;                                // 0x0368(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S4Z0[0x4];                                   // 0x036C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       FinishAttackIgnoreLoS;                                   // 0x0370(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       InvulnerableOnInactive;                                  // 0x0371(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YZIE[0x2];                                   // 0x0372(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FoldOutTime;                                             // 0x0374(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M61L[0x8];                                   // 0x0378(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           EngagedAudio;                                            // 0x0380(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2MTK[0x28];                                  // 0x0388(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Offset;                                                  // 0x03B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AimAcceleration;                                         // 0x03B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DV16[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  AimSpeedCurve;                                           // 0x03C0(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class AActor*                                              CurrentTarget;                                           // 0x0448(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TurretEngaged;                                           // 0x0450(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AlwaysActive;                                            // 0x0451(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_53DO[0x6];                                   // 0x0452(0x0006) MISSED OFFSET (PADDING)

	public:
		void TurnOffMesh();
		void SetIsAttacking(bool IsAttacking);
		void OnRep_TurretEngaged();
		void OnProjectileSpawned();
		void OnEngagedChanged(bool engaged);
		void OnAttack();
		struct FRotator GetLookingDirection();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpinningFacilityturret
	 * Size -> 0x0030 (FullSize[0x0488] - InheritedSize[0x0458])
	 */
	class ASpinningFacilityturret : public AFacilityTurret
	{
	public:
		struct FRotator                                            TargetRotation;                                          // 0x0458(0x000C) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRandRange                                          AimAtTargetEveryTurn;                                    // 0x0464(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      TurnCooldown;                                            // 0x046C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnTimer;                                               // 0x0470(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Acceptance;                                              // 0x0474(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnSpeed;                                               // 0x0478(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JZ1K[0xC];                                   // 0x047C(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AimingFacilityTurret
	 * Size -> 0x00C0 (FullSize[0x0518] - InheritedSize[0x0458])
	 */
	class AAimingFacilityTurret : public AFacilityTurret
	{
	public:
		bool                                                       IsLockedOn;                                              // 0x0458(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1V2S[0x7];                                   // 0x0459(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent*                            aimIndicator;                                            // 0x0460(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent*                            aimIndicatorLock;                                        // 0x0468(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FRW4[0x20];                                  // 0x0470(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LockOnTime;                                              // 0x0490(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      BurstInterval;                                           // 0x0494(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      FireInterval;                                            // 0x0498(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      TurretRotationSpeed;                                     // 0x049C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      InitialLockonDelay;                                      // 0x04A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RegainLosLockonModifier;                                 // 0x04A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AimZOffset;                                              // 0x04A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      TargetLeadingStrength;                                   // 0x04AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      TargetLeadingResponsiveness;                             // 0x04B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RaimainAfterShotTime;                                    // 0x04B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      TargetLeadingAfterLockonMultiplier;                      // 0x04B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      TurningSpeedAfterLockOnMultipier;                        // 0x04BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PreLockonTargetChangeChance;                             // 0x04C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PreLockongTargetChangeRate;                              // 0x04C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      IndicatorFlashTime;                                      // 0x04C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       TrackTargetAfterLockon;                                  // 0x04CC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       ConstantAimAfterLock;                                    // 0x04CD(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       UseTraceForLockOn;                                       // 0x04CE(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IQSC[0x12];                                  // 0x04CF(0x0012) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EIndicatorMode                                             IndicatorMode;                                           // 0x04E1(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VTQ3[0xA];                                   // 0x04E2(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FInt32Interval                                      BurstCount;                                              // 0x04EC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1WQS[0x24];                                  // 0x04F4(0x0024) MISSED OFFSET (PADDING)

	public:
		void SetupAimindicator(class UParticleSystemComponent* aimIndicator, class UParticleSystemComponent* aimIndicatorLock);
		void OnRep_IsLockedOn();
		void OnRep_IndicatorMode();
		void OnLockedOn(bool lockedOn);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FacilityTurretAnimInstance
	 * Size -> 0x0018 (FullSize[0x0320] - InheritedSize[0x0308])
	 */
	class UFacilityTurretAnimInstance : public UEnemyAnimInstance
	{
	public:
		struct FRotator                                            AimRotation;                                             // 0x0308(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DCCS[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsEngaged;                                               // 0x0318(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8JXJ[0x7];                                   // 0x0319(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FadeScreenSubSystem
	 * Size -> 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
	 */
	class UFadeScreenSubSystem : public UGameInstanceSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnFadeInComplete;                                        // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FFadeData                                           Fading;                                                  // 0x0040(0x0048) Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OQJF[0x20];                                  // 0x0088(0x0020) MISSED OFFSET (PADDING)

	public:
		bool IsScreenFadingToBlack(class UObject* WorldContext);
		bool IsScreenFadingFromBlack(class UObject* WorldContext);
		bool IsScreenFading(class UObject* WorldContext);
		float GetCurrentFadeAmount();
		void FadeScreenToBlack(class UObject* WorldContext, float FadeTime, float Delay, bool ResetExistingFades, bool CapFramerate, bool FadeWorldOnly, bool ToSpaceRig, class UTexture* LoadingImage);
		void FadeScreenFromBlack(class UObject* WorldContext, float FadeTime, float Delay, bool ResetExistingFades, bool CapFramerate, bool FadeWorldOnly, bool ToSpaceRig);
		void BlackoutScreen(class UObject* WorldContext, bool FadeWorldOnly);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FadeVisibilitySubSystem
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class UFadeVisibilitySubSystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_FGBE[0x68];                                  // 0x0030(0x0068) MISSED OFFSET (PADDING)

	public:
		void ScalePrimitive(class UPrimitiveComponent* Component, const struct FVector& StartScale, const struct FVector& EndScale, float Duration);
		void ScaleOutPrimitive(class UPrimitiveComponent* Component, float Duration);
		void ScaleInPrimitive(class UPrimitiveComponent* Component, float Duration);
		void FadeOutMaterialByName(class UMeshComponent* Component, const class FName& Name, const class FName& ParameterName, float Duration);
		void FadeOutMaterialByIndex(class UMeshComponent* Component, int32_t MaterialIndex, const class FName& ParameterName, float Duration);
		void FadeOutLight(class ULightComponent* Light, float Duration);
		void FadeLightByCurve(class ULightComponent* Light, struct FRuntimeFloatCurve* Curve);
		void FadeInMaterialByName(class UMeshComponent* Component, const class FName& Name, const class FName& ParameterName, float Duration);
		void FadeInMaterialByIndex(class UMeshComponent* Component, int32_t MaterialIndex, const class FName& ParameterName, float Duration);
		void FadeInLight(class ULightComponent* Light, float Duration);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FakeFallComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UFakeFallComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_JZ23[0x28];                                  // 0x00B0(0x0028) MISSED OFFSET (PADDING)

	public:
		void StartFakeFall();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FakeMoverSettings
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UFakeMoverSettings : public UDataAsset
	{
	public:
		EDeepPathFinderSize                                        PathfinderColiSize;                                      // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       StickToSurface;                                          // 0x0031(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AlignRotationToSurface;                                  // 0x0032(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TTYK[0x1];                                   // 0x0033(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AirFriction;                                             // 0x0034(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SurfaceFriction;                                         // 0x0038(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Gravity;                                                 // 0x003C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AirGravity;                                              // 0x0040(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFakeMoverPropulsion                                Propulsion;                                              // 0x0044(0x0014) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FFakeMoverTarget                                    NearestPlayerInfluence;                                  // 0x0058(0x001C) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FFakeMoverTarget                                    TargetInfluence;                                         // 0x0074(0x001C) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FakePhysicsMover
	 * Size -> 0x00A0 (FullSize[0x02C0] - InheritedSize[0x0220])
	 */
	class AFakePhysicsMover : public AActor
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFakeMoverState                                     MoverState;                                              // 0x0228(0x0060) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FFakeMoveState                                      PosVel;                                                  // 0x0288(0x0024) Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8Y77[0x4];                                   // 0x02AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFakeMoverSettings*                                  MoveSettings;                                            // 0x02B0(0x0008) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SyncTime;                                                // 0x02B8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2IFG[0x4];                                   // 0x02BC(0x0004) MISSED OFFSET (PADDING)

	public:
		void Teleport(const struct FVector& Pos, const struct FVector& Vel);
		void OnRep_PosVel(const struct FFakeMoveState& PosVel);
		void OnRep_MoveSettings(class UFakeMoverSettings* MoveSettings);
		void ApplyImpulse(const struct FVector& Impulse);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FallingStateComponent
	 * Size -> 0x00B0 (FullSize[0x01B0] - InheritedSize[0x0100])
	 */
	class UFallingStateComponent : public UCharacterStateComponent
	{
	public:
		float                                                      FallDamageStartVelocity;                                 // 0x0100(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FallDamageModifier;                                      // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoClimbMinDelay;                                       // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoClimbLookForwardDistance;                            // 0x010C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxClimbHeight;                                          // 0x0110(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinClimbHeight;                                          // 0x0114(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CapsuleCheckZOffset;                                     // 0x0118(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinInputDotProduct;                                      // 0x011C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      JumpZVelocity;                                           // 0x0120(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DebugAutoClimb;                                          // 0x0124(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AY6P[0x3];                                   // 0x0125(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDialogDataAsset*                                    FallingShout;                                            // 0x0128(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShoutAfterDistance;                                      // 0x0130(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2AC1[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUseAnimationSetting*                                ClimbUseSettings;                                        // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4LQG[0x2C];                                  // 0x0140(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HoverBootAirFriction;                                    // 0x016C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HoverBootAirControl;                                     // 0x0170(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HoverBootGravityScale;                                   // 0x0174(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    ShoutHoverBootsBegin;                                    // 0x0178(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HoverBootActivateDuration;                               // 0x0180(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHoverBootsActive;                                       // 0x0184(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TGMU[0x3];                                   // 0x0185(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HoverBootMaxDuration;                                    // 0x0188(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           JumpBootsVelocityWindow;                                 // 0x018C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      JumpBootsZVelocity;                                      // 0x0194(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LBHB[0x8];                                   // 0x0198(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       JumpBootsActive;                                         // 0x01A0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YFNJ[0xF];                                   // 0x01A1(0x000F) MISSED OFFSET (PADDING)

	public:
		void ShowJumpBootsActivation();
		void Server_TakeFallDamage(float Amount);
		void Server_SetJumpPressed(bool Pressed);
		void Server_SetHoverBootsPressed(bool IsPressed);
		void Server_SetFallVelocity(float Velocity);
		void Server_ClimbLedge(bool shouldPlayAnimation);
		void Server_ActivateJumpBoots();
		void ReceiveHoverBootsTick(float DeltaSeconds);
		void ReceiveHoverBootsActiveChanged(bool IsActive);
		void OnRep_HoverBootsActive();
		void JumpReleased();
		void JumpPressed();
		void HoverBootsReleased();
		void HoverBootsPressed();
		void All_ShowJumpBootsActivation();
		void All_ShowFallImpact(class UFSDPhysicalMaterial* PhysMat, const struct FVector_NetQuantize& Location);
		void All_ShowClimbLedge();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FindFriendSessionsBlueprintCallProxy
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UFindFriendSessionsBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
	{
	public:
		class FScriptMulticastDelegate                             OnSuccess;                                               // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailure;                                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UObject*                                             WorldContextObject;                                      // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N83Z[0x28];                                  // 0x0058(0x0028) MISSED OFFSET (PADDING)

	public:
		class UFindFriendSessionsBlueprintCallProxy* FindFriendSessions(class UObject* WorldContextObject, const class FString& FriendId);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FirstPersonSkeletalMeshComponent
	 * Size -> 0x0000 (FullSize[0x0ED0] - InheritedSize[0x0ED0])
	 */
	class UFirstPersonSkeletalMeshComponent : public USkeletalMeshComponent
	{
	public:
		void SetFirstPersonFOVEnabled(bool bEnabled);
		bool GetSetFirstPersonFOVEnabled();
		struct FVector CalcFirstPersonFOVPositionCorrection(class APlayerController* PlayerController, const struct FVector& origPos);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FirstPersonStaticMeshComponent
	 * Size -> 0x0010 (FullSize[0x04F0] - InheritedSize[0x04E0])
	 */
	class UFirstPersonStaticMeshComponent : public UStaticMeshComponent
	{
	public:
		bool                                                       EnabledFPFOV;                                            // 0x04E0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_55RI[0xF];                                   // 0x04E1(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InterpolatedFirstPersonStaticMeshComponent
	 * Size -> 0x0000 (FullSize[0x04F0] - InheritedSize[0x04F0])
	 */
	class UInterpolatedFirstPersonStaticMeshComponent : public UFirstPersonStaticMeshComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FirstPersonWidgetComponent
	 * Size -> 0x0000 (FullSize[0x05A0] - InheritedSize[0x05A0])
	 */
	class UFirstPersonWidgetComponent : public UWidgetComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FirstPersonParticleSystemComponent
	 * Size -> 0x0000 (FullSize[0x06B0] - InheritedSize[0x06B0])
	 */
	class UFirstPersonParticleSystemComponent : public UParticleSystemComponent
	{
	public:
		class UParticleSystemComponent* SpawnFirstPersonEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const class FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, EAttachLocation LocationType, bool bAutoDestroy);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FirstPersonNiagaraComponent
	 * Size -> 0x0000 (FullSize[0x0600] - InheritedSize[0x0600])
	 */
	class UFirstPersonNiagaraComponent : public UNiagaraComponent
	{
	public:
		class UNiagaraComponent* SpawnFirstPersonEmitterAttached(class UNiagaraSystem* inNiagaraSystem, class USceneComponent* AttachToComponent, const class FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, EAttachLocation LocationType, bool inAutoDestroy);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FirstPersonPointLightComponent
	 * Size -> 0x0004 (FullSize[0x0360] - InheritedSize[0x035C])
	 */
	class UFirstPersonPointLightComponent : public UPointLightComponent
	{
	public:
		unsigned char                                              UnknownData_YFF4[0x4];                                   // 0x035C(0x0004) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlameThrowerItem
	 * Size -> 0x01D8 (FullSize[0x0928] - InheritedSize[0x0750])
	 */
	class AFlameThrowerItem : public AAmmoDrivenWeapon
	{
	public:
		class UParticleSystemComponent*                            FlameParticleComponent;                                  // 0x0750(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    DamageComponent;                                         // 0x0758(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStickyFlameSpawner*                                 StickyFlames;                                            // 0x0760(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    AoEHeatDamageComponent;                                  // 0x0768(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    ExplodingTargetsDamageComponent;                         // 0x0770(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMotionAudioController*                              MotionAudio;                                             // 0x0778(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ShotCostProjectile;                                      // 0x0780(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7UL0[0x4];                                   // 0x0784(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDecalData                                          ImpactDecal;                                             // 0x0788(0x0020) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      DecalDelay;                                              // 0x07A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentDecalDelay;                                       // 0x07AC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     ImpactParticles;                                         // 0x07B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            ImpactParticleInstance;                                  // 0x07B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     FP_LongReachParticles;                                   // 0x07C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     TP_LongReachParticles;                                   // 0x07C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VeryLongReachThreshold;                                  // 0x07D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZBVU[0x4];                                   // 0x07D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     FP_VeryLongReachParticles;                               // 0x07D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     TP_VeryLongReachParticles;                               // 0x07E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        FlameParameterNames;                                     // 0x07E8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      DamageSphereRadius;                                      // 0x07F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxFlameDistance;                                        // 0x07FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlameGrowthPerSecond;                                    // 0x0800(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlameEndPointResponsiveness;                             // 0x0804(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlameIntensityPerSecond;                                 // 0x0808(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WRS1[0x4];                                   // 0x080C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              OnFireStatusEffect;                                      // 0x0810(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChanceToFleeOnDamage;                                    // 0x0818(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MeltPointRadius;                                         // 0x081C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MeltPointBuildTime;                                      // 0x0820(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MeltCarveTime;                                           // 0x0824(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     MeltSteamParticle;                                       // 0x0828(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UItemUpgrade*>                                upgrades;                                                // 0x0830(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       LongReachEnabled;                                        // 0x0840(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L7W3[0xF];                                   // 0x0841(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       AoEHeatEnabled;                                          // 0x0850(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZGUQ[0x3];                                   // 0x0851(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      KilledTargetsExplosionChance;                            // 0x0854(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShowDamageParticle;                                      // 0x0858(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ROSP[0x4];                                   // 0x085C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     DamangeTargetsParticles;                                 // 0x0860(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     KilledTargetsExplodingParticles;                         // 0x0868(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           KilledTargetsExplodingSound;                             // 0x0870(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProjectileLauncherBaseComponent*                    ProjectileLancher;                                       // 0x0878(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GKVF[0xA8];                                  // 0x0880(0x00A8) MISSED OFFSET (PADDING)

	public:
		void TriggerAoEHeat();
		void ServerMeltIce(TArray<struct FVector> meltPoints);
		void ServerDoDamage(const struct FVector_NetQuantize& Start, const struct FVector_NetQuantize& End);
		void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);
		void OnTargetDamaged(class UHealthComponentBase* Health, float Amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial);
		void All_ShowTargetBurstIntoFire(const struct FVector_NetQuantize& Location, const struct FRotator& Rotation);
		void All_FlameFeedback(const struct FVector_NetQuantize& Location, const struct FRotator& Rotation);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlameWallProjectile
	 * Size -> 0x0028 (FullSize[0x0368] - InheritedSize[0x0340])
	 */
	class AFlameWallProjectile : public AProjectile
	{
	public:
		class UClass*                                              SegmentParticleClass;                                    // 0x0340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SegmentCount;                                            // 0x0348(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WallWidth;                                               // 0x034C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ImpactClass;                                             // 0x0350(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9ZSC[0x10];                                  // 0x0358(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlameWallSegment
	 * Size -> 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
	 */
	class AFlameWallSegment : public AActor
	{
	public:
		class USphereComponent*                                    CollisionComponent;                                      // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Flare
	 * Size -> 0x0088 (FullSize[0x02C0] - InheritedSize[0x0238])
	 */
	class AFlare : public AFSDPhysicsActor
	{
	public:
		unsigned char                                              UnknownData_SA5Y[0x20];                                  // 0x0238(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InitialSpeed;                                            // 0x0258(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialAngularImpulse;                                   // 0x025C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialAngularImpulseRandomScale;                        // 0x0260(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxFlares;                                               // 0x0264(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ProductionTime;                                          // 0x0268(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Duration;                                                // 0x026C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ChromaColor;                                             // 0x0270(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFlareOn;                                               // 0x0280(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9DFN[0x7];                                   // 0x0281(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              DamageCauser;                                            // 0x0288(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              WeaponPreviewClass;                                      // 0x0290(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              LoadoutItem;                                             // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EXV4[0x8];                                   // 0x02A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItemID*                                             ItemID;                                                  // 0x02A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ImpactGroundSound;                                       // 0x02B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CSO7[0x8];                                   // 0x02B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartLightFunction(class ULightComponent* mainLight, TArray<class ULightComponent*> spotLights, class UCurveFloat* flutterCurve, class UCurveFloat* fadeInCurve);
		void OnUpdateShadowRadius();
		void OnRep_IsFlareOn();
		void OnFlareSpawnCompleted();
		void OnFlareIgnite();
		void OnFlareExtinguish();
		void Inhibit();
		float ImmidiateFadeLight();
		class UClass* GetWeaponViewClass();
		class AFlare* GetFlareDefaultObject(class UClass* flareClass);
		void ActorWasHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void ActivateFlare();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NegPointLightComponent
	 * Size -> 0x0004 (FullSize[0x0360] - InheritedSize[0x035C])
	 */
	class UNegPointLightComponent : public UPointLightComponent
	{
	public:
		unsigned char                                              UnknownData_B600[0x4];                                   // 0x035C(0x0004) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlareController
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UFlareController : public UWorldSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnShadowQualityChanged;                                  // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		TArray<struct FFlareMeta>                                  FlaresMeta;                                              // 0x0040(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0CG7[0x20];                                  // 0x0050(0x0020) MISSED OFFSET (PADDING)

	public:
		void UnregisterFlareGunProjectile(class AFlareGunProjectile* flareprj);
		void UnregisterFlare(class AFlare* Flare);
		void RegisterFlareGunProjectile(class AFlareGunProjectile* flareprj);
		void RegisterFlare(class AFlare* Flare);
		class AActor* FindFlareNear(class UObject* WorldContextObject, const struct FVector& Pos, bool allowMoving, float maxLightRadiusFraction);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlareGunProjectile
	 * Size -> 0x0010 (FullSize[0x0350] - InheritedSize[0x0340])
	 */
	class AFlareGunProjectile : public AProjectile
	{
	public:
		float                                                      Duration;                                                // 0x0340(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsFlareOn;                                               // 0x0344(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E9UN[0xB];                                   // 0x0345(0x000B) MISSED OFFSET (PADDING)

	public:
		void UpdateLightDuration(float lightDuration);
		void OnUpdateShadowRadius();
		void OnRep_IsFlareOn();
		void OnFlareIgnite();
		void OnFlareExtinguish();
		void OnDroppodImpact(class ATeamTransport* DropPod);
		void Inhibit();
		void ActivateFlare();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PerkAsset
	 * Size -> 0x0098 (FullSize[0x00C8] - InheritedSize[0x0030])
	 */
	class UPerkAsset : public UDataAsset
	{
	public:
		struct FGuid                                               SavegameID;                                              // 0x0030(0x0010) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                Title;                                                   // 0x0040(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          Icon;                                                    // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsEquippable;                                           // 0x0060(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NXTC[0x7];                                   // 0x0061(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDialogDataAsset*                                    ShoutOnUseCharge;                                        // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              PerkLogicClasses[0x10];                                  // 0x0070(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              HudIconWidgetClass[0x28];                                // 0x0080(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              HudActivationWidgets[0x10];                              // 0x00A8(0x0010) UNKNOWN PROPERTY: ArrayProperty
		int32_t                                                    MaxUseCharges;                                           // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CoolDownBetweenUse;                                      // 0x00BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsHighlighted;                                          // 0x00C0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3CHT[0x7];                                   // 0x00C1(0x0007) MISSED OFFSET (PADDING)

	public:
		bool UseCharge(class APlayerController* PlayerController);
		bool Unequip(class UObject* WorldContext, class UPlayerCharacterID* characterID);
		void SetHighlighted(class UObject* WorldContext, bool IsHighlighted);
		void SetCharacterPerks(class UObject* WorldContext, class UPlayerCharacterID* characterID, TArray<class UPerkAsset*> perks);
		bool IsUsageType(EPerkUsageType InType);
		bool IsPerkAvailableInTier(int32_t Tier);
		bool IsEquippedBy(class UObject* WorldContext, class UPlayerCharacterID* characterID);
		float GetUseCoolDownTimeLeft(class APlayerController* PlayerController);
		float GetUseCoolDownProgress(class APlayerController* PlayerController);
		float GetUseCoolDownDuration(class APlayerController* PlayerController);
		EPerkUsageType GetUsageType();
		EPerkTierState GetStateAtTier(class UObject* WorldContext, int32_t Tier);
		int32_t GetRemainingUseCharges(class APlayerController* PlayerController);
		int32_t GetRankTier(int32_t Rank);
		class FText GetRankDescription(int32_t Rank);
		int32_t GetRankCost(int32_t Rank);
		bool GetRankAtTier(int32_t Tier, int32_t* Rank);
		int32_t GetMaxUseCharges(class APlayerController* PlayerController);
		int32_t GetMaxRank();
		class UClass* GetHudIconWidgetClass();
		TArray<class UClass*> GetHudActivationWidgets(EPerkHUDActivationLocation Location);
		class UPerkDelegateItem* GetDelegates(class UObject* WorldContext);
		int32_t GetCurrentRank(class UObject* WorldContext);
		int32_t GetChargesUsed(class APlayerController* PlayerController);
		class FString GetAdditionalRankDescription(int32_t Rank);
		bool Equip(class UObject* WorldContext, class UPlayerCharacterID* characterID);
		void CheatSetCurrentRank(class UObject* WorldContext, int32_t InRank);
		bool CanUseCharge(class APlayerController* PlayerController);
		bool BuyPerkAtTier(class UObject* WorldContext, int32_t Tier);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FloatPerkAsset
	 * Size -> 0x0020 (FullSize[0x00E8] - InheritedSize[0x00C8])
	 */
	class UFloatPerkAsset : public UPerkAsset
	{
	public:
		TArray<struct FFloatPerkRank>                              Ranks;                                                   // 0x00C8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FFloatPerkEffect>                            Effects;                                                 // 0x00D8(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		float GetPerkValue(class UObject* WorldContext);
		float GetLastTierValue();
		float GetFloatPerkValue(class UObject* WorldContext, class UFloatPerkAsset* Perk, float UnclaimedValue);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FloatPerkActivation
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFloatPerkActivation : public UDataAsset
	{
	public:
		void Receive_ActivatePerk(class APlayerCharacter* Character, float Value);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatPerkActivation
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UStatPerkActivation : public UFloatPerkActivation
	{
	public:
		class UPawnStat*                                           PawnStat;                                                // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPawnStatType                                              StatType;                                                // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L122[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FloatPerkComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UFloatPerkComponent : public UActorComponent
	{
	public:
		float                                                      FloatValue;                                              // 0x00B0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZJQ6[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerCharacter*                                    PlayerCharacter;                                         // 0x00B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Receive_OnInitialized();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CreateComponentPerkActivation
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UCreateComponentPerkActivation : public UFloatPerkActivation
	{
	public:
		unsigned char                                              ComponentClass[0x28];                                    // 0x0030(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EscapableGrabberEnemyActivation
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UEscapableGrabberEnemyActivation : public UFloatPerkActivation
	{
	public:
		unsigned char                                              EnemyGrabberClass[0x28];                                 // 0x0030(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SetCooldownPerkActivation
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USetCooldownPerkActivation : public UFloatPerkActivation
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SetMaxUsesPerkActivation
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USetMaxUsesPerkActivation : public UFloatPerkActivation
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.KillNearbyCreaturePerkComponent
	 * Size -> 0x0028 (FullSize[0x00E8] - InheritedSize[0x00C0])
	 */
	class UKillNearbyCreaturePerkComponent : public UFloatPerkComponent
	{
	public:
		unsigned char                                              EnemyClass[0x28];                                        // 0x00C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BezerkPerkComponent
	 * Size -> 0x0010 (FullSize[0x00D0] - InheritedSize[0x00C0])
	 */
	class UBezerkPerkComponent : public UFloatPerkComponent
	{
	public:
		class UPawnStat*                                           BoostedStat;                                             // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AmountPerValue;                                          // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IDLI[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnHealthChanged(float Health);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EyeForEyePerkComponent
	 * Size -> 0x0040 (FullSize[0x0100] - InheritedSize[0x00C0])
	 */
	class UEyeForEyePerkComponent : public UFloatPerkComponent
	{
	public:
		float                                                      CoolDown;                                                // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4TBA[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              EyeForEyeSTE[0x28];                                      // 0x00C8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              UnknownData_3SGX[0x8];                                   // 0x00F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              LoadedSTE;                                               // 0x00F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnHit(float Damage, const struct FDamageData& DamageData, bool anyHealthLost);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ThornsPerkComponent
	 * Size -> 0x0020 (FullSize[0x00E0] - InheritedSize[0x00C0])
	 */
	class UThornsPerkComponent : public UFloatPerkComponent
	{
	public:
		class UDamageClass*                                        DamageClass;                                             // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CoolDown;                                                // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YE2Y[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ThornsSTE;                                               // 0x00D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G32X[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnHit(float Damage, const struct FDamageData& DamageData, bool anyHealthLost);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SalutePerkComponent
	 * Size -> 0x0010 (FullSize[0x00D0] - InheritedSize[0x00C0])
	 */
	class USalutePerkComponent : public UFloatPerkComponent
	{
	public:
		float                                                      CoolDown;                                                // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FleeRadius;                                              // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HUEO[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnSalute();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShieldLinkComponent
	 * Size -> 0x0078 (FullSize[0x0138] - InheritedSize[0x00C0])
	 */
	class UShieldLinkComponent : public UFloatPerkComponent
	{
	public:
		class UClass*                                              BoostedStatusEffect;                                     // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStatusEffect*                                       BoostedStatusEffectInstance;                             // 0x00C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LinkDistance;                                            // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P435[0x4];                                   // 0x00D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              LinkedCharacters[0x50];                                  // 0x00D8(0x0050) UNKNOWN PROPERTY: SetProperty
		class UClass*                                              LinkStatusEffect;                                        // 0x0128(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YZV6[0x8];                                   // 0x0130(0x0008) MISSED OFFSET (PADDING)

	public:
		void TimerFunction();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BeastMasterComponent
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class UBeastMasterComponent : public UFloatPerkComponent
	{
	public:
		bool                                                       ShowCanCharmIcon;                                        // 0x00C0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O4N1[0x7];                                   // 0x00C1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetDamage(class UDamageComponent* cmp, float dmg);
		class UActorComponent* AddPetComponent(class UClass* ComponentClass, class AFSDPawn* targetPet, class APlayerCharacter* petOwner);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PetComponent
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UPetComponent : public UActorComponent
	{
	public:
		TWeakObjectPtr<class APlayerCharacter>                     OwningPlayer;                                            // 0x00B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReceiveOwningPlayerChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BeastMasterUseSphere
	 * Size -> 0x0000 (FullSize[0x0470] - InheritedSize[0x0470])
	 */
	class UBeastMasterUseSphere : public USphereComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FloodFillSettings
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UFloodFillSettings : public UDataAsset
	{
	public:
		struct FVector                                             NoiseSize;                                               // 0x0030(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FreqMultiplier;                                          // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AmplitudeMultiplier;                                     // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinValue;                                                // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxValue;                                                // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Turbulence;                                              // 0x004C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Invert;                                                  // 0x004D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MGL2[0x2];                                   // 0x004E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Octaves;                                                 // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q56D[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLayeredNoise>                               NoiseLayers;                                             // 0x0058(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DetailNoise
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UDetailNoise : public UFloodFillSettings
	{
	public:
		float                                                      NoiseRange;                                              // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N49N[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlyingStateComponent
	 * Size -> 0x0000 (FullSize[0x0100] - InheritedSize[0x0100])
	 */
	class UFlyingStateComponent : public UCharacterStateComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FoamPuddle
	 * Size -> 0x0160 (FullSize[0x0380] - InheritedSize[0x0220])
	 */
	class AFoamPuddle : public AActor
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     PuddleRoot;                                              // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   NS_Foam;                                                 // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  ScaleCurve;                                              // 0x0238(0x0088) Edit, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PVOC[0x20];                                  // 0x02C0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnChangeVacuumStateDelegate;                             // 0x02E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      VacuumableActors;                                        // 0x02F0(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class USoundCue*                                           PickupSound;                                             // 0x0300(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PickupSoundCooldown;                                     // 0x0308(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HFTH[0x4];                                   // 0x030C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           PickupFilledSound;                                       // 0x0310(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PickupFilledCooldown;                                    // 0x0318(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MKWE[0x4];                                   // 0x031C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           VacuumedSound;                                           // 0x0320(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VacuumedCooldown;                                        // 0x0328(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G7FU[0x4];                                   // 0x032C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           VacuumedSoundFilled;                                     // 0x0330(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VacuumedSoundFilledCooldown;                             // 0x0338(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XFNF[0xC];                                   // 0x033C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InitialDebrisRadius;                                     // 0x0348(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TotalRadiusGrowth;                                       // 0x034C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GrowthTime;                                              // 0x0350(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DP9X[0x4];                                   // 0x0354(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AttractorPowerWhenVacuuming;                             // 0x0358(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ScaleTimeVacuuming;                                      // 0x035C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KN0R[0x4];                                   // 0x0360(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Speed;                                                   // 0x0364(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EVacuumState                                               State;                                                   // 0x0368(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IDLP[0x7];                                   // 0x0369(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     VacuumSource;                                            // 0x0370(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint16_t                                                   MaxSoapPiles;                                            // 0x0378(0x0002) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UsesLocalSpace;                                          // 0x037A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CN8N[0x5];                                   // 0x037B(0x0005) MISSED OFFSET (PADDING)

	public:
		void SetState(EVacuumState State);
		void SetPuddleLifetime(float LifeTime);
		void ScaleOutAndDestroy();
		void OnRep_State(EVacuumState prevState);
		void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FoamPuddle_WalkingPlagueheart
	 * Size -> 0x0008 (FullSize[0x0388] - InheritedSize[0x0380])
	 */
	class AFoamPuddle_WalkingPlagueheart : public AFoamPuddle
	{
	public:
		float                                                      FoamCleanRadius;                                         // 0x0380(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LHB6[0x4];                                   // 0x0384(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ForgingFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UForgingFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class USchematic* PickForgingMasteryDefaultReward(class UObject* WorldContextObject, ESchematicType InType);
		struct FForgingResult GiveForgingXP(class UObject* WorldContextObject);
		TArray<class USchematic*> GetOwnedSchematics(class UObject* WorldContextObject);
		void GetForgingPendingMasteryRewardNewest(class UObject* WorldContextObject, bool* OutSuccess, struct FForgingPendingReward* OutReward);
		ESchematicType GetForgingMasteryRewardType(class UObject* WorldContextObject, int32_t Level, bool ReturnDefaultIfUnavailable);
		ESchematicType GetForgingMasteryRewardDefaultType(ESchematicType InType);
		float GetForgingLevelProgress(class UObject* WorldContextObject);
		int32_t GetForgingLevel(class UObject* WorldContextObject);
		bool GetForgingHasPendingMasteryRewards(class UObject* WorldContextObject);
		TArray<class USchematic*> GetForgedSchematics(class UObject* WorldContextObject);
		void ClaimForgingPendingMasteryReward(class UObject* WorldContextObject, int32_t Level, class USchematic* Reward);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FormationData
	 * Size -> 0x00A0 (FullSize[0x00D0] - InheritedSize[0x0030])
	 */
	class UFormationData : public UDataAsset
	{
	public:
		TArray<struct FFormationDataItem>                          FormationItems;                                          // 0x0030(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   LeaderQuery;                                             // 0x0040(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   MemberQuery;                                             // 0x0088(0x0048) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GroundFormationData
	 * Size -> 0x0010 (FullSize[0x00E0] - InheritedSize[0x00D0])
	 */
	class UGroundFormationData : public UFormationData
	{
	public:
		int32_t                                                    FormationSize;                                           // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FormationSpread;                                         // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RandomSpread;                                            // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3UV1[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlyingFormationData
	 * Size -> 0x0010 (FullSize[0x00E0] - InheritedSize[0x00D0])
	 */
	class UFlyingFormationData : public UFormationData
	{
	public:
		int32_t                                                    FormationSize;                                           // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FormationSpread;                                         // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RandomSpread;                                            // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H0DM[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FormationsManagerComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UFormationsManagerComponent : public UActorComponent
	{
	public:
		class UEnemySpawnManager*                                  SpawnManager;                                            // 0x00B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFormationData*>                              FormationData;                                           // 0x00B8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EJJ0[0x10];                                  // 0x00C8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FragileDebrisCleaner
	 * Size -> 0x0018 (FullSize[0x0210] - InheritedSize[0x01F8])
	 */
	class UFragileDebrisCleaner : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_WVOR[0x8];                                   // 0x01F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_FIJQ[0x10];                                  // 0x0200(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FriendlyHealthComponent
	 * Size -> 0x0040 (FullSize[0x02A8] - InheritedSize[0x0268])
	 */
	class UFriendlyHealthComponent : public UHealthComponent
	{
	public:
		unsigned char                                              UnknownData_XXSP[0x4];                                   // 0x0268(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxHealth;                                               // 0x026C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FriendlyFireModifier;                                    // 0x0270(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NeutralDamageModifier;                                   // 0x0274(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BigHitDamageModifier;                                    // 0x0278(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BigHitDamageReductionThreshold;                          // 0x027C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     GenericImpactParticles;                                  // 0x0280(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T4AK[0x20];                                  // 0x0288(0x0020) MISSED OFFSET (PADDING)

	public:
		float GetMaxHealth();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FriendlyParasite
	 * Size -> 0x0090 (FullSize[0x0440] - InheritedSize[0x03B0])
	 */
	class AFriendlyParasite : public AEnemyDeepPathfinderCharacter
	{
	public:
		class FScriptMulticastDelegate                             OnIsAttackingEvent;                                      // 0x03B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class USphereComponent*                                    Collision;                                               // 0x03C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USphereComponent*                                    FindEnemyCollision;                                      // 0x03C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    DamageComponent;                                         // 0x03D0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MoveSpeed;                                               // 0x03D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageBeforeDeath;                                       // 0x03DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CountDirectDMG;                                          // 0x03E0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CountAreaDMG;                                            // 0x03E1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DZTK[0x2];                                   // 0x03E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StartFollowRange;                                        // 0x03E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageRange;                                             // 0x03E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageTime;                                              // 0x03EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FoldoutRange;                                            // 0x03F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SpinRange;                                               // 0x03F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFSDPawn*                                            TargetEnemy;                                             // 0x03F8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_28A1[0x40];                                  // 0x0400(0x0040) MISSED OFFSET (PADDING)

	public:
		void SelectNewTarget(class UHealthComponentBase* Health);
		void OnEnemyCollisionEnter(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FriendlyParasiteAnimInstance
	 * Size -> 0x0008 (FullSize[0x0310] - InheritedSize[0x0308])
	 */
	class UFriendlyParasiteAnimInstance : public UEnemyAnimInstance
	{
	public:
		unsigned char                                              UnknownData_931X[0x8];                                   // 0x0308(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FrontendBlueprintLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFrontendBlueprintLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void OpenURLInExternalBrowser(const class FString& URL);
		bool IsShippingBuild();
		void GetStringFromClipboard(class FString* fromClipboard);
		bool FSDTargetPlatformIsXSX();
		EFSDTargetPlatform FSDTargetPlatform();
		void CopyStringToClipboard(const class FString& toClipboard);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterBreakOutState
	 * Size -> 0x0090 (FullSize[0x0190] - InheritedSize[0x0100])
	 */
	class UCharacterBreakOutState : public UCharacterStateComponent
	{
	public:
		class FScriptMulticastDelegate                             OnThawInputsUpdated;                                     // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBreakOutInputSuccess;                                  // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBreakOutInputFailed;                                   // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z1FP[0x8];                                   // 0x0130(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FInputDirectionSet>                          DirectionSets;                                           // 0x0138(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XQV5[0x10];                                  // 0x0148(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           SuccessSound;                                            // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           FailSound;                                               // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8C29[0x4];                                   // 0x0168(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ErrorGracePeriod;                                        // 0x016C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MG71[0x4];                                   // 0x0170(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HoldToBreakTime;                                         // 0x0174(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_23AH[0x4];                                   // 0x0178(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WrongInputPenaltyTime;                                   // 0x017C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MC7F[0x4];                                   // 0x0180(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InitialWaitPeriod;                                       // 0x0184(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QBHK[0x4];                                   // 0x0188(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UseLegacy;                                               // 0x018C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_57Y7[0x1];                                   // 0x018D(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ResetOnFail;                                             // 0x018E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NGMF[0x1];                                   // 0x018F(0x0001) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FrozenStateComponent
	 * Size -> 0x0030 (FullSize[0x01C0] - InheritedSize[0x0190])
	 */
	class UFrozenStateComponent : public UCharacterBreakOutState
	{
	public:
		class USoundBase*                                          AudioFreeFromIce;                                        // 0x0190(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDPhysicalMaterial*                                IcePhysicalMaterial;                                     // 0x0198(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDPhysicalMaterial*                                DwarfFleshMaterial;                                      // 0x01A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SlowAnimationSpeed;                                      // 0x01A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RC3F[0x4];                                   // 0x01AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRandRange                                          DeFrostAmount;                                           // 0x01B0(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6JLA[0x8];                                   // 0x01B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void Server_ThawPlayer(float Percent);
		void ReceiveOnDefrosting();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDAchievement
	 * Size -> 0x0100 (FullSize[0x0158] - InheritedSize[0x0058])
	 */
	class UFSDAchievement : public USavableDataAsset
	{
	public:
		unsigned char                                              UnknownData_SBIO[0x30];                                  // 0x0058(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SteamAPIAchievementName;                                 // 0x0088(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SteamAPIStatName;                                        // 0x0098(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              XboxAchievementID;                                       // 0x00A8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AchievementTargetValue;                                  // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_50L3[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EFSDAchievementType                                        AchievementType;                                         // 0x00C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7YE0[0x97];                                  // 0x00C1(0x0097) MISSED OFFSET (PADDING)

	public:
		void SetAchievementProgressForEntireServer(float Progress, class UObject* WorldContext);
		void SetAchievementProgress(float Progress, class AFSDPlayerController* Player, class UObject* WorldContext);
		void ResetStatForAchievement(class UFSDAchievement* AchievementToReset, class AFSDPlayerController* Player);
		void QueryAchievements(class AFSDPlayerController* Player);
		float GetAchievementTargetValue();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AchievementList
	 * Size -> 0x0198 (FullSize[0x01C8] - InheritedSize[0x0030])
	 */
	class UAchievementList : public UDataAsset
	{
	public:
		class UFSDAchievement*                                     WeakspotAchievement;                                     // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     MissionTimeAchievement;                                  // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     MissionHosterAchievement;                                // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     RollerCoasterAchievement;                                // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     DrillByShootingAchievement;                              // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     BarrelKickerAchievement;                                 // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     Hazard3CompletedAchievement;                             // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     Hazard3StreakAchievement;                                // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     Hazard4CompletedAchievement;                             // 0x0070(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     Hazard4StreakAchievement;                                // 0x0078(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     Hazard5CompletedAchievement;                             // 0x0080(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     Hazard5StreakAchievement;                                // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     Hazard3NoKillNoSupplyAchievement;                        // 0x0090(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     Hazard4NoKillNoSupplyAchievement;                        // 0x0098(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     Hazard5NoKillNoSupplyAchievement;                        // 0x00A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     PlayedWithLowerRankAchievement;                          // 0x00A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     MilestoneAchievementPerfMatters;                         // 0x00B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     MilestoneAchievement;                                    // 0x00B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     OwnedPerkAchievement;                                    // 0x00C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     MovingOnUpAchievement;                                   // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     CorporateClimberAchievement;                             // 0x00D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     HatTrickAchievement;                                     // 0x00D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     FullTeamAchievement;                                     // 0x00E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     SilverTierEmployeeAchievement;                           // 0x00E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     ProTeamAchievement;                                      // 0x00F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     GoldTierEmployeeAchievement;                             // 0x00F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     LegendaryTeamAchievement;                                // 0x0100(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     AllVanityEquippedAchievement;                            // 0x0108(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     MoustacheBuyerAchievement;                               // 0x0110(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     MutatorAchievement;                                      // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     StateOfTheArtAchievement;                                // 0x0120(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     ExploringMyOptionsAchievement;                           // 0x0128(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     AdvancedRoboticsAchievement;                             // 0x0130(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     WithoutAPaddleAchievement;                               // 0x0138(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     FirstMissionCompleted;                                   // 0x0140(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     HundredMissionsCompleted;                                // 0x0148(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     TenSoloMissionsCompleted;                                // 0x0150(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     SupplyPodsCalledStat;                                    // 0x0158(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     LootbugsKilledStat;                                      // 0x0160(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     PraetoriansKilledStat;                                   // 0x0168(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     NormalDeepDiveCompleted;                                 // 0x0170(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     EliteDeepDiveCompleted;                                  // 0x0178(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     DeepDiveCompletedUnderTime;                              // 0x0180(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAchievement*                                     DeepDivesCompleted;                                      // 0x0188(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UFSDAchievement*>                             AllAchievements;                                         // 0x0190(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              BarrelClass[0x28];                                       // 0x01A0(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDAdvancedLabel
	 * Size -> 0x0038 (FullSize[0x0298] - InheritedSize[0x0260])
	 */
	class UFSDAdvancedLabel : public UUserWidget
	{
	public:
		class FText                                                FormattedText;                                           // 0x0260(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                ControllerOverrideText;                                  // 0x0278(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		bool                                                       UpperCase;                                               // 0x0290(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EFSDInputSource                                            PreviewAs;                                               // 0x0291(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O1F2[0x6];                                   // 0x0292(0x0006) MISSED OFFSET (PADDING)

	public:
		void SetText(const class FText& NewText, const class FText& OverrideControllerText);
		void SetAlwaysShowAs(EFSDInputSource InPreferredSource);
		void Refresh();
		void OnReset();
		void OnNewLine(int32_t Index);
		void OnLanguageChanged(const class FString& NewCulture);
		void OnInputSourceChanged(EFSDInputSource Source);
		void OnAddString(const class FString& Value);
		void OnAddKeyName(const class FString& Name);
		void OnAddIcon(const class FString& Name, const struct FActionIconMapping& Icon);
		class FText GetText();
		bool GetIsDesignTime();
		EFSDInputSource GetCurrentInputSource();
		class UTextBlock* CreateTextBlock(const class FString& Text, const struct FSlateFontInfo& InFontInfo, const struct FLinearColor& Color);
		class UImage* CreateImageSized(class UTexture2D* Texture, int32_t Width, int32_t Height);
		class UImage* CreateImage(class UTexture2D* Texture, bool MatchSize);
		class UHorizontalBox* CreateHorizontalBox();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GamepadCursorSettings
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UGamepadCursorSettings : public UDeveloperSettings
	{
	public:
		float                                                      MaxSpeed;                                                // 0x0038(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      Acceleration;                                            // 0x003C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      StickySlowDown;                                          // 0x0040(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DeadZone;                                                // 0x0044(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDAnimNotify_PlaySound
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class UFSDAnimNotify_PlaySound : public UAnimNotify_PlaySound
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_PlaySound2D
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_PlaySound2D : public UAnimNotify
	{
	public:
		class USoundBase*                                          Sound;                                                   // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VolumeMultiplier;                                        // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PitchMultiplier;                                         // 0x0044(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_PlaySound
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_PlaySound : public UAnimNotifyState
	{
	public:
		class USoundCue*                                           Sound;                                                   // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                SocketName;                                              // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LocationOffset;                                          // 0x0040(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x004C(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_FSDPlayParticleEffect
	 * Size -> 0x0058 (FullSize[0x0090] - InheritedSize[0x0038])
	 */
	class UAnimNotify_FSDPlayParticleEffect : public UAnimNotify
	{
	public:
		class UFXSystemAsset*                                      PSTemplate;                                              // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LocationOffset;                                          // 0x0040(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x004C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       AlwaysZUp;                                               // 0x0058(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MKNJ[0x3];                                   // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             Scale;                                                   // 0x005C(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5391[0x18];                                  // 0x0068(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       Attached : 1;                                            // 0x0080(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GP7G[0x3];                                   // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SocketName;                                              // 0x0084(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsFirstPerson;                                           // 0x008C(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseTerainMaterial;                                       // 0x008D(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LVZY[0x2];                                   // 0x008E(0x0002) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_FSDTimedNiagaraEffect
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_FSDTimedNiagaraEffect : public UAnimNotifyState
	{
	public:
		class UNiagaraSystem*                                      Template;                                                // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                SocketName;                                              // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LocationOffset;                                          // 0x0040(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x004C(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       IsFirstPerson;                                           // 0x0058(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDestroyAtEnd;                                           // 0x0059(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XT5A[0x6];                                   // 0x005A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyPlaySoundKey
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UEnemyPlaySoundKey : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyPlaySoundByKeyAnimNotify
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class UEnemyPlaySoundByKeyAnimNotify : public UAnimNotify
	{
	public:
		class UEnemyPlaySoundKey*                                  SoundKey;                                                // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VolumeMultiplier;                                        // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PitchMultiplier;                                         // 0x0044(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFollow : 1;                                             // 0x0048(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q1MQ[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                AttachName;                                              // 0x004C(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EFNE[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_PushSoundMix
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_PushSoundMix : public UAnimNotify
	{
	public:
		class USoundMix*                                           SoundMix;                                                // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxDistance;                                             // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1G7R[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_SoundMix
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_SoundMix : public UAnimNotifyState
	{
	public:
		class USoundMix*                                           SoundMix;                                                // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxDistance;                                             // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UY4R[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemySpawnEffectsKey
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UEnemySpawnEffectsKey : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemySpawnEffectsByKeyAnimNotify
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UEnemySpawnEffectsByKeyAnimNotify : public UAnimNotify
	{
	public:
		class UEnemySpawnEffectsKey*                               EffectKey;                                               // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Attached : 1;                                            // 0x0040(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3220[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SocketName;                                              // 0x0044(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AUU4[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_EnemyPlaySoundByKey
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_EnemyPlaySoundByKey : public UAnimNotifyState
	{
	public:
		class UEnemyPlaySoundKey*                                  SoundKey;                                                // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FadeOut;                                                 // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                SocketName;                                              // 0x003C(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LocationOffset;                                          // 0x0044(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x0050(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F3TY[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_CameraShake
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UAnimNotify_CameraShake : public UAnimNotify
	{
	public:
		float                                                      InnerRadius;                                             // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OuterRadius;                                             // 0x003C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ControllerOnly;                                          // 0x0040(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IJ6T[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CameraShake;                                             // 0x0048(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_Shout
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_Shout : public UAnimNotify
	{
	public:
		class UDialogDataAsset*                                    Shout;                                                   // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ShoutNetworked;                                          // 0x0040(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TAOW[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LocalShoutVolumeMultiplier;                              // 0x0044(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_FootStep
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_FootStep : public UAnimNotify
	{
	public:
		bool                                                       IsLeft;                                                  // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MRH1[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_MessageOwner
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_MessageOwner : public UAnimNotify
	{
	public:
		class FName                                                Message;                                                 // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_TerrainFootStep
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_TerrainFootStep : public UAnimNotify
	{
	public:
		class UParticleSystem*                                     ParticleTemplate;                                        // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                BoneName;                                                // 0x0040(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_SpawnActor
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class UAnimNotify_SpawnActor : public UAnimNotify
	{
	public:
		class UClass*                                              Actor;                                                   // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                SocketName;                                              // 0x0040(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LocationOffset;                                          // 0x0048(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x0054(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_HideBones
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_HideBones : public UAnimNotify
	{
	public:
		TArray<class FName>                                        TargetBoneNames;                                         // 0x0038(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_HideBone
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_HideBone : public UAnimNotify
	{
	public:
		class FName                                                BoneName;                                                // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_UnHideBone
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_UnHideBone : public UAnimNotify
	{
	public:
		class FName                                                BoneName;                                                // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_CopyBoneVisibility
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class UAnimNotify_CopyBoneVisibility : public UAnimNotify
	{
	public:
		class FName                                                SourceBoneName;                                          // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        TargetBoneNames;                                         // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       HideSourceBone;                                          // 0x0050(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_66WR[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_SpawnMesh
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_SpawnMesh : public UAnimNotifyState
	{
	public:
		class UStaticMesh*                                         Mesh;                                                    // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasOverrideMaterial;                                     // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_POL3[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstance*                                   OverrideMaterial;                                        // 0x0040(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    OverrideMaterialSlot;                                    // 0x0048(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseFirstPersonComponent;                                 // 0x004C(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QX63[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SocketName;                                              // 0x0050(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ScaleOverride;                                           // 0x0058(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LocationOffset;                                          // 0x0064(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x0070(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J2TU[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_SpawnSkeletalMesh
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_SpawnSkeletalMesh : public UAnimNotifyState
	{
	public:
		class USkeletalMesh*                                       Mesh;                                                    // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequenceBase*                                   AnimationToPlay;                                         // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseFirstPersonComponent;                                 // 0x0040(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V2RA[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SocketName;                                              // 0x0044(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ScaleOverride;                                           // 0x004C(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LocationOffset;                                          // 0x0058(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x0064(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_SpawnSkinnedMesh
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_SpawnSkinnedMesh : public UAnimNotifyState
	{
	public:
		EItemCategory                                              ItemCategory;                                            // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseFirstPersonComponent;                                 // 0x0031(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AF1A[0x2];                                   // 0x0032(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SocketName;                                              // 0x0034(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LocationOffset;                                          // 0x003C(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x0048(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_85OO[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_HideBone
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_HideBone : public UAnimNotifyState
	{
	public:
		class FName                                                BoneName;                                                // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_Salute
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_Salute : public UAnimNotifyState
	{
	public:
		class FName                                                BoneName;                                                // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       FirstPerson;                                             // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_68YS[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_InputWindow
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_InputWindow : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_SpawnAndReleaseActor
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_SpawnAndReleaseActor : public UAnimNotifyState
	{
	public:
		class UClass*                                              Actor;                                                   // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                SocketName;                                              // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             LocationOffset;                                          // 0x0040(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FRotator                                            RotationOffset;                                          // 0x004C(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       ManualDetach;                                            // 0x0058(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KQZF[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_HideEquippedItem
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_HideEquippedItem : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_OverrideItemOffset
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_OverrideItemOffset : public UAnimNotifyState
	{
	public:
		struct FVector                                             CameraOffset;                                            // 0x0030(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4WL7[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_WeaponReload
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_WeaponReload : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_ConstrainItem
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_ConstrainItem : public UAnimNotifyState
	{
	public:
		class FName                                                OldConstraint;                                           // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                NewConstraint;                                           // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameAnimationsSettings
	 * Size -> 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
	 */
	class UGameAnimationsSettings : public UDeveloperSettings
	{
	public:
		struct FSoftObjectPath                                     FootstepTestingSound;                                    // 0x0038(0x0018) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     FootstepTestingParticles;                                // 0x0050(0x0018) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DynamicMeshScaler
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UDynamicMeshScaler : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_4U67[0x28];                                  // 0x0030(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotifyState_TimedParticleEffectWithImpactDecals
	 * Size -> 0x0020 (FullSize[0x0080] - InheritedSize[0x0060])
	 */
	class UAnimNotifyState_TimedParticleEffectWithImpactDecals : public UAnimNotifyState_TimedParticleEffect
	{
	public:
		class UMaterialInterface*                                  DecalMaterial;                                           // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DecalSize;                                               // 0x0068(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FadeStartDelay;                                          // 0x006C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FadeDuration;                                            // 0x0070(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SX1U[0xC];                                   // 0x0074(0x000C) MISSED OFFSET (PADDING)

	public:
		void OnParticleCollision(const class FName& EventName, float EmitterTime, int32_t ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, const class FName& BoneName, class UPhysicalMaterial* PhysMat);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDAnimationFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDAnimationFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		float GetAnimSequenceLength(class UAnimSequence* AnimSequence);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDAssetManager
	 * Size -> 0x0030 (FullSize[0x04A8] - InheritedSize[0x0478])
	 */
	class UFSDAssetManager : public UAssetManager
	{
	public:
		class UGameData*                                           GameData;                                                // 0x0478(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              GameDataPath[0x28];                                      // 0x0480(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDAudioComponent
	 * Size -> 0x000C (FullSize[0x086C] - InheritedSize[0x0860])
	 */
	class UFSDAudioComponent : public UAudioComponent
	{
	public:
		unsigned char                                              UnknownData_27IK[0xC];                                   // 0x0860(0x000C) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDBehaviorTreeComponent
	 * Size -> 0x0000 (FullSize[0x0298] - InheritedSize[0x0298])
	 */
	class UFSDBehaviorTreeComponent : public UBehaviorTreeComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDCheatManager
	 * Size -> 0x0030 (FullSize[0x00B8] - InheritedSize[0x0088])
	 */
	class UFSDCheatManager : public UCheatManager
	{
	public:
		int32_t                                                    RoomJumpCount;                                           // 0x0088(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PreviousMaxDistanceBeforeCleanup;                        // 0x008C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UnlimitedScoutFlareDuration;                             // 0x0090(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3RU6[0x7];                                   // 0x0091(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             ToggleHoopGameMovement;                                  // 0x0098(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class AActor*                                              SpawnPosMarker;                                          // 0x00A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       EscortShowSmartRockDebug;                                // 0x00B0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsUsingSavedCheats;                                      // 0x00B1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q8CN[0x6];                                   // 0x00B2(0x0006) MISSED OFFSET (PADDING)

	public:
		void SwitchCharacter(class UPlayerCharacterID* characterID);
		void SpawnEnemies(class UEnemyDescriptor* descriptor, int32_t Count);
		void SpawnCritters(class UBaseCritterDescriptor* descriptor, int32_t Count);
		void SpawnBosco(class UClass* aControllerClass);
		void ShowTutorialDebug();
		void SetStandingDown(bool standingDown);
		void SetSpawnEnemies(bool SpawnEnemies);
		bool SetSavedCheatValue(const class FName& CheatName, int32_t ValueToSet);
		void SetQuadPickAxe(bool quad);
		void SetHUDVisible(bool ShowHUD);
		void SetGodMode(bool God);
		void SetFastMovement(bool fast);
		void Server_Refresh_Daily_Special(int32_t Index);
		void ResetTutorials();
		void ResetSpacerigIntroMessage();
		void R_RemoveResources(int32_t Number);
		void R_RemoveCredits(int32_t Number);
		void R_RemoveCraftingResource(int32_t Amount, int32_t Type);
		void R_AddSeasonToken(int32_t Number);
		void R_AddResources_Player(float Number);
		void R_AddResources(float Number);
		void R_AddPerkPoints(int32_t Amount);
		void R_AddNitra(float Amount);
		void R_AddMorkite(float Amount);
		void R_AddMatrixCores(int32_t Number);
		void R_AddHollomite(float Amount);
		void R_AddGold(float Amount);
		void R_AddDystrum(float Amount);
		void R_AddCredits(int32_t Number);
		void R_AddCraftingResource(int32_t Amount, int32_t Type);
		void R_Add_Phazyonite(int32_t Amount);
		void R_Add_BitterGem(int32_t Amount);
		void R_Add_Aquarq(int32_t Amount);
		bool IsInGodMode();
		bool IsFlyModeActive();
		bool IsFastMovementActive();
		bool GetSavedCheatValue(const class FName& CheatName, int32_t* ValueToGet);
		void GetListOfRoomNames(TArray<class FString>* roomNames);
		void DestroyAllInstances(class UClass* destroy);
		void D_Rejoin_RestoreState();
		void D_MovieModeStartWithCameraShake(bool Value);
		void D_MovieModeStartAtOrigin(bool Value);
		void D_EnableMovieModeInSpacerig(bool Value);
		void D_EnableMovieMode(bool Value);
		void Cheat_UnlockWeapon(class UObject* WorldContextObjectm, class UItemID* ItemID);
		void Cheat_UnlockAllWeapons(class UObject* WorldContextObject);
		void Cheat_UnlockAllUpgrades(class UObject* WorldContextObject);
		void Cheat_UnlockAll_Poses(class UObject* WorldContextObject);
		void Cheat_UnlockAll_Beers(class UObject* WorldContextObject);
		void Cheat_SetSpawnPosMarker(class AActor* Actor);
		void Cheat_SetHealth(float newHealthValue, class APlayerCharacter* Player);
		void Cheat_Schematic_UnlockAll(class UObject* WorldContextObject);
		void Cheat_Schematic_ResetAll(class UObject* WorldContextObject);
		void Cheat_Schematic_GiveRandom(class UObject* WorldContextObject);
		void Cheat_Schematic_ForgeAll(class UObject* WorldContextObject);
		void Cheat_Resources(class UObject* WorldContextObject, float Amount);
		void Cheat_ResetEquippedUpgrades(class UObject* WorldContextObject);
		void Cheat_RemoveResources(class UObject* WorldContextObject, int32_t Amount);
		void Cheat_PickAxeVanity_UnlockAll(class UObject* WorldContextObject);
		void Cheat_PickAxeVanity_ResetAll(class UObject* WorldContextObject);
		void Cheat_MinersManual_ShowAll(class UObject* WorldContextObject);
		void Cheat_GenerateNewMissionSeed(class UObject* WorldContextObject, bool Enabled);
		void Cheat_ForceTreasure(class UObject* WorldContextObject);
		void Cheat_ForceLostPack(class UObject* WorldContextObject);
		void Cheat_DeepDives_Refresh(class UObject* WorldContextObject);
		void Cheat_Campaign_Complete(class UObject* WorldContextObject);
		void Cheat_Campaign_Advance(class UObject* WorldContextObject);
		void Cheat_AddXP(class UObject* WorldContextObject, int32_t Amount);
		void Cheat_AddPerkPoints(class UObject* WorldContextObject, int32_t Amount);
		void Cheat_AddCredits(class UObject* WorldContextObject, int32_t Amount);
		void C_Windows_PrintStack();
		void C_Windows_CloseAll();
		void C_WeaponMaintenance_Reset();
		void C_WeaponMaintenance_AddXP(int32_t XP);
		void C_VanityMasteryResetXP();
		void C_VanityMasteryAddXP(int32_t Number);
		void C_UnlockOverclocking();
		void C_UnlockAll_WeaponUpgrades();
		void C_UnlockAll_WeaponSkins_Paintjobs();
		void C_UnlockAll_WeaponSkins_Frameworks();
		void C_UnlockAll_WeaponSkins();
		void C_UnlockAll_Weapons();
		void C_UnlockAll_StoreVanity();
		void C_UnlockAll_Poses_ForAll();
		void C_UnlockAll_Poses();
		void C_UnlockAll_PickaxeParts();
		void C_UnlockAll_Perks();
		void C_UnlockAll_Drinks();
		void C_UnlockAll_Beers();
		void C_UnlockAll_ArmorMats();
		void C_UnlockAll();
		void C_Unlock_Facility();
		void C_Treasures_Track(int32_t Mode);
		void C_Treasures_Reward(int32_t Count);
		void C_ToggleHoopGameMovement();
		void C_ToggleFadingEnabled();
		void C_ToggleFadingDebug();
		void C_ToggleCanShowBlood();
		void C_TestSpecialEventChance();
		void C_StopMovement(bool shouldMove);
		void C_SpawnScriptedWaveIndex(int32_t Index);
		void C_SpawnScriptedWave();
		void C_SpawnNormalWave();
		void C_SpawnEvenRewarder();
		void C_SpawnBarrelOnPlayer(int32_t Amount);
		void C_SpawnAllParticles();
		void C_SetUseSavedCheatsByDefault(bool useSavedCheats);
		void C_SetTestMission(int32_t missionIndex);
		void C_SetTestingCharacter(class UPlayerCharacterID* characterID);
		void C_SetSavedCheats();
		void C_SetPlayers(int32_t Number);
		void C_SetInstantUsables(bool Value);
		void C_SetHealth(float Health);
		void C_SetFlyMode(bool flyEnabled);
		void C_SetFastFlares();
		void C_SetEnglish(int32_t Val);
		void C_SetDancing(bool shouldDance);
		void C_SetAmmoCostEnabled(bool Enabled);
		void C_Seasons_ResetXP();
		void C_Seasons_ResetTreeOfVanity();
		void C_Seasons_ResetToken();
		void C_Seasons_ResetReroll();
		void C_Seasons_ResetPlagueHeartsCollected();
		void C_Seasons_IncrementChallenge(int32_t Index);
		void C_Seasons_CompleteSeasonAlmost();
		void C_Seasons_CompleteSeason();
		void C_Seasons_CompleteScripChallenge(int32_t Number);
		void C_Seasons_ClearSeasonCompletedAnnounced();
		void C_Seasons_ClearChallenges();
		void C_Seasons_ClearAllProgress();
		void C_Seasons_AddXP(int32_t Number);
		void C_Seasons_AddHeartsCollecdted(int32_t Number);
		void C_Seasons_AddChallenge();
		void C_ScoutFlareInfiniteDuration(bool Enabled);
		void C_Schematics_UnlockAll();
		void C_Schematics_ResetAll();
		void C_Schematics_ForgeAll();
		void C_Schematics_ClearHasSeenFirstMessage();
		void C_Schematic_GiveRandom();
		void C_Salvage_FixMiniMules();
		void C_Revive();
		void C_Resupply();
		void C_ResetSteamAchievementStats();
		void C_ResetForgingXP();
		void C_ResetCheatedResources(int32_t newAmount);
		void C_ResetAll_Vanity();
		void C_ResetAchievements();
		void C_Reset_YearTwoGifts();
		void C_Reset_WeaponSkinsAndUpgrades();
		void C_Reset_WeaponSkins_Paintjobs();
		void C_Reset_WeaponSkins_Framworks();
		void C_Reset_WeaponSkins();
		void C_Reset_Poses();
		void C_Reset_PickaxeParts();
		void C_Reset_Perks();
		void C_Reset_MinersManual();
		void C_Reset_EnemyKillCount();
		void C_Reset_Drinks();
		void C_RemovePlayerRanks(int32_t Number);
		void C_RemoveAllWidgets();
		void C_RefreshDailyDeal(int32_t Seed);
		void C_Refresh_Daily_Special(int32_t Index);
		void C_Refinery_BreakPipes();
		void C_RecordMode();
		void C_Promotion_SetLevelSpecific(class APlayerCharacter* onCharacter, int32_t Number);
		void C_Promotion_SetLevel(int32_t Number);
		void C_Promotion_SetCampaignComplete();
		void C_Promotion_ClearRewardsSeen();
		void C_ProjectileDrawPaths();
		void C_ProjectileDebugPrintToggle();
		void C_PrintLoadout();
		void C_PlayNewMusic(int32_t songIndex);
		void C_MissionMap_TestDistribution();
		void C_MissionMap_SetSeed(int32_t Seed);
		void C_MissionMap_Rotate();
		void C_MissionMap_ForceWarning(int32_t Index);
		void C_MissionMap_ForceAnomaly(int32_t Index);
		void C_MissionMap_DoubleWarning(int32_t indexA, int32_t indexB);
		void C_MissionMap_AutoRotate(bool Enabled);
		void C_MinersManual_EnableWorkInProgress(class UObject* WorldContextObject);
		void C_MachineEvents_Track(bool Track);
		void C_MachineEvents_FinishCurrent();
		void C_LevelUpCharacter(int32_t Amount);
		void C_KillTeam();
		void C_KillPlayer();
		void C_KillAllFriendly();
		void C_KillAll();
		void C_JumpToNextRoom();
		void C_JetBoots_Enable();
		void C_Intoxication_SetAll(int32_t Percent);
		void C_Intoxication_Set(int32_t Percent);
		void C_IncrementAllMissionStats(int32_t Amount);
		void C_IncreasePlagueInfection(float Increment);
		void C_GodMode(int32_t forceEnable);
		void C_GiveAllGenericHeroItems();
		void C_GameDLC_ResetAnnouncements();
		void C_FSDEvent_SetDebugEvent(const class FString& EventName);
		void C_FSDEvent_ListEvents();
		void C_FSDEvent_ClearSeenRewards();
		void C_ForceCrash();
		void C_FixedPLSSeed(int32_t Seed);
		void C_FixedMissionSeed(int32_t Seed);
		void C_FailMission();
		void C_FadeFromBlack(class UObject* WorldContextObject);
		void C_Facility_SpawnDataCore();
		void C_Facility_DisableShields();
		void C_Escort_ShowSmartRockDebug(bool shouldShow);
		void C_Escort_SetMuleSpeed(class UObject* WorldContextObject, float Speed);
		void C_Escort_JumpToNextPhase(class UObject* WorldContextObject);
		void C_Escort_AddOilShale(int32_t Number);
		void C_DLC_ClearAnnounced();
		void C_DisableBackendEvents();
		void C_DeepDives_UnlockAll();
		void C_DeepDives_SetSeed(int32_t Seed);
		void C_DeepDives_Reset();
		void C_DeepDives_Refresh();
		void C_DeepDives_List();
		void C_CompleteObjectives();
		void C_CompleteMission();
		void C_ClearAllMissionStats();
		void C_ClearAllMilestones();
		void C_Campaign_ResetProgress();
		void C_Campaign_ResetCompleted();
		void C_Campaign_CompleteMain();
		void C_Campaign_CompleteCurrent();
		void C_Campaign_Advance();
		void C_AddXP(int32_t Number);
		void C_AddUncappedXP(int32_t Amount);
		void C_AddForgingXP(int32_t Number);
		void AddResourceToTeamDeposit(class UResourceData* Resource, float Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDCloudLoadSave
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UFSDCloudLoadSave : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnCloudLoadAll;                                          // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCloudLoadAllFailed;                                    // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UFSDCloudSaveHandler*                                CloudSaveHandler;                                        // 0x0048(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void StartCloudLoadAll(class UObject* WorldContextObject, int32_t Index, int32_t Offset);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDCloudSaveHandler
	 * Size -> 0x0130 (FullSize[0x0158] - InheritedSize[0x0028])
	 */
	class UFSDCloudSaveHandler : public UObject
	{
	public:
		unsigned char                                              UnknownData_MIGG[0x20];                                  // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumFailedSaves;                                          // 0x0048(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_A0OF[0x10C];                                 // 0x004C(0x010C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDConversionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDConversionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FVector_NetQuantizeNormal VectorToNetQuantizeNormal(const struct FVector& Vec);
		struct FVector_NetQuantize VectorToNetQuantize(const struct FVector& Vec);
		struct FVector QuatToVector(const struct FQuat& Quat);
		struct FRotator QuatToRotator(const struct FQuat& Quat);
		struct FVector_NetQuantizeNormal QuadToNetQuantizeNormal(const struct FQuat& Quat);
		struct FVector ComponentToWorldLocation(class USceneComponent* Component);
		struct FVector ActorToWorldLocation(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDCreateSessionCallbackProxy
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class UFSDCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
	{
	public:
		class FScriptMulticastDelegate                             OnSuccess;                                               // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailure;                                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U46T[0x48];                                  // 0x0050(0x0048) MISSED OFFSET (PADDING)

	public:
		class UFSDCreateSessionCallbackProxy* FSDCreateSession(class UObject* WorldContextObject, class APlayerController* PlayerController, int32_t PublicConnections, bool bUseLAN, bool bFriendsOnly);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDCustomDPIScalingRule
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDCustomDPIScalingRule : public UDPICustomScalingRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDEvent
	 * Size -> 0x01F0 (FullSize[0x0220] - InheritedSize[0x0030])
	 */
	class UFSDEvent : public UDataAsset
	{
	public:
		class FScriptMulticastDelegate                             OnActiveChanged;                                         // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       EnableDangerousSaveGameIDEditing;                        // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CMZ7[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               SavegameID;                                              // 0x0044(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                EventName;                                               // 0x0054(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EHolidayType                                               EventType;                                               // 0x005C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFreeBeerEvent;                                          // 0x005D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFreeBeerConfettiVisible;                                // 0x005E(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WHK8[0x1];                                   // 0x005F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDrinkableDataAsset*                                 SpecialEventBeer;                                        // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          SeasonEndScreenImage;                                    // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              EventAmbienceMusic[0x28];                                // 0x0070(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		bool                                                       UseDifferentBarLightColor;                               // 0x0098(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KI33[0x3];                                   // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        SpaceRigBarLightColor;                                   // 0x009C(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AYIU[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FEncounterSpecialItem>                       EventEncounters;                                         // 0x00B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              EventDebris[0x10];                                       // 0x00C0(0x0010) UNKNOWN PROPERTY: ArrayProperty
		bool                                                       bIsEventDebrisInDeepDives;                               // 0x00D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_081Y[0x7];                                   // 0x00D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              SpacerigSublevels[0x10];                                 // 0x00D8(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              UnloadSpacerigSublevels[0x10];                           // 0x00E8(0x0010) UNKNOWN PROPERTY: ArrayProperty
		bool                                                       bHasClaimableRewards;                                    // 0x00F8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E4BJ[0x7];                                   // 0x00F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FClaimableRewardView                                ClaimableRewards;                                        // 0x0100(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FPlatformSpecificEventPopup>                 OptionalPopUpWindow;                                     // 0x0188(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              Campaigns[0x10];                                         // 0x0198(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              TitleScreenOverride[0x28];                               // 0x01A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FJettyBootEventSettings                             JettyBootSettings;                                       // 0x01D0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		void MarkClaimableRewardsSeen(class UObject* WorldContext);
		bool IsFsdEventActive(class UObject* WorldContext, class UFSDEvent* FSDEvent);
		bool HasUnseenClaimableRewards(class UObject* WorldContext);
		bool GiveRewards(class APlayerController* PlayerController);
		class UTexture2D* GetTitleScreenOverride();
		bool GetIsActive(class UObject* WorldContext);
		class UFSDEventPopupWidget* CreatePopupWindow(class APlayerController* InPlayerController);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDEventCollection
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UFSDEventCollection : public UDataAsset
	{
	public:
		unsigned char                                              Events[0x50];                                            // 0x0030(0x0050) UNKNOWN PROPERTY: SetProperty
		class FScriptMulticastDelegate                             OnEventActiveChanged;                                    // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		class UFSDEvent* FindEventHandler(const class FName& EventName);
		TArray<class UFSDEvent*> FindAllEventHandlers(const class FName& EventName);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDEventManager
	 * Size -> 0x0240 (FullSize[0x0270] - InheritedSize[0x0030])
	 */
	class UFSDEventManager : public UGameInstanceSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnFSDEventsRefresh;                                      // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEventActiveChanged;                                    // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              PendingActiveEvents[0x50];                               // 0x0050(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              ActiveEvents[0x50];                                      // 0x00A0(0x0050) UNKNOWN PROPERTY: SetProperty
		int32_t                                                    NumFailedRequests;                                       // 0x00F0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       BackendDataValid;                                        // 0x00F4(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_81VE[0x3];                                   // 0x00F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           LastRequestTime;                                         // 0x00F8(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NextCheckTime;                                           // 0x0100(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7IZD[0x4];                                   // 0x0104(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           SeasonExpirationTime;                                    // 0x0108(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SeasonExpirationTimeValid;                               // 0x0110(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       BackendNotificationEventValid;                           // 0x0111(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_990N[0x15E];                                 // 0x0112(0x015E) MISSED OFFSET (PADDING)

	public:
		void TryGetJettyBootSettings(bool* OutHasSettings, struct FJettyBootEventSettings* OutSettings);
		void RequestSeasonEndTime(const class FScriptDelegate& OnComplete);
		bool IsEventTypeActive(EHolidayType FSDEvent);
		bool IsEventActive(class UFSDEvent* FSDEvent);
		bool GetSeasonExpiryDate(struct FDateTime* ExpiryDate);
		EHolidayType GetHolidayType();
		class UFSDEvent* GetFirstActiveEventHandler();
		bool GetBackendNotificationEvent(struct FBackendNotificationEvent* Notification);
		TArray<class UFSDEvent*> GetActiveEventHandlers();
		void FSDEventsRefreshDelegate__DelegateSignature();
		bool FSDEventsReady();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDEventPopupWidget
	 * Size -> 0x0008 (FullSize[0x02A8] - InheritedSize[0x02A0])
	 */
	class UFSDEventPopupWidget : public UWindowWidget
	{
	public:
		class UFSDEvent*                                           FSDEvent;                                                // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDEventsHandler
	 * Size -> 0x0128 (FullSize[0x0150] - InheritedSize[0x0028])
	 */
	class UFSDEventsHandler : public UObject
	{
	public:
		struct FDateTime                                           LastRequestTime;                                         // 0x0028(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NumFailedRequests;                                       // 0x0030(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CDOD[0x11C];                                 // 0x0034(0x011C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDFindSessionsCallbackProxy
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class UFSDFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
	{
	public:
		class FScriptMulticastDelegate                             OnSuccess;                                               // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailure;                                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRefresh;                                               // 0x0050(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_92BP[0x38];                                  // 0x0060(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObject*                                             WorldContextObject;                                      // 0x0098(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFSDFindSteamSessions*                               FSDFindSteamSessions;                                    // 0x00A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_U4QX[0x8];                                   // 0x00A8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnFSDCompleted(bool bSuccess, TArray<struct FBlueprintSessionResult> Results);
		void ManualRefreshServerList();
		class UFSDFindSessionsCallbackProxy* FSDFindSessions(class UObject* WorldContextObject, class APlayerController* PlayerController, int32_t MaxResults, bool bUseLAN);
		class UFSDFindSessionsCallbackProxy* FSDFindFullSessions(class UObject* WorldContextObject, class APlayerController* PlayerController, int32_t MaxResults);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDFindSteamSessions
	 * Size -> 0x0118 (FullSize[0x0140] - InheritedSize[0x0028])
	 */
	class UFSDFindSteamSessions : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnFindResult;                                            // 0x0028(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XPCV[0x108];                                 // 0x0038(0x0108) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDFlyingBugController
	 * Size -> 0x0038 (FullSize[0x0390] - InheritedSize[0x0358])
	 */
	class AFSDFlyingBugController : public AFSDAIController
	{
	public:
		unsigned char                                              UnknownData_PYMY[0x18];                                  // 0x0358(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBehaviorTree*                                       BehaviourTree;                                           // 0x0370(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H5Y9[0x8];                                   // 0x0378(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UpdateLosInterval;                                       // 0x0380(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SetTargetOnAlert;                                        // 0x0384(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SyncTargetWithBB;                                        // 0x0385(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IURM[0xA];                                   // 0x0386(0x000A) MISSED OFFSET (PADDING)

	public:
		void OnFlyingBugAlerted();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DashingFlyingBugController
	 * Size -> 0x0000 (FullSize[0x0390] - InheritedSize[0x0390])
	 */
	class ADashingFlyingBugController : public AFSDFlyingBugController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDFriendsAndInvites
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UFSDFriendsAndInvites : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnFriendsChanged;                                        // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFriendInvitesChanged;                                  // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRequestRefresh;                                        // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		TArray<struct FBlueprintFriend>                            Friends;                                                 // 0x0058(0x0010) BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<struct FBlueprintFriend>                            FriendInvites;                                           // 0x0068(0x0010) BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic

	public:
		void Init();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDGameInstance
	 * Size -> 0x09A8 (FullSize[0x0B50] - InheritedSize[0x01A8])
	 */
	class UFSDGameInstance : public UGameInstance
	{
	public:
		unsigned char                                              UnknownData_CSZP[0x8];                                   // 0x01A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTemporaryBuffAdded;                                    // 0x01B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGameSettingsChanged;                                   // 0x01C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGraphicsSettingsChanged;                               // 0x01D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPressStart;                                            // 0x01E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJoinPendingInvite;                                     // 0x01F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkinChangedEvent;                                      // 0x0200(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoaderStart;                                           // 0x0210(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayLevelSequenceInCharacterWorld;                     // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoaderStop;                                            // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterSelectionStart;                               // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartForging;                                          // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkipForging;                                           // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnForgingDone;                                           // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterSelectionStop;                                // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowCharacterSelectionRefresh;                         // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTutorialManagerSet;                                    // 0x02A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLocalPlayerCharacterSet;                               // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowReconnectScreen;                                   // 0x02C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnXBoxAccountPickerClosed;                               // 0x02D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnXBoxChangeUser;                                        // 0x02E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHDRGammaChanged;                                       // 0x02F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGravityChanged;                                        // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNewPostProcessingManager;                              // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPreviewSkinChanged;                                    // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic
		bool                                                       ShowingReconnectScreen;                                  // 0x0330(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8PTY[0x3];                                   // 0x0331(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UMouseCursorWidget>                   MouseCursorWidget;                                       // 0x0334(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9T2R[0x4];                                   // 0x033C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnShowCharacterSelector;                                 // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowViewer3D;                                          // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowCharacterSelectorEquipSlot;                        // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowCharacterSelectorEquip;                            // 0x0370(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowCharacterSelectorRotate;                           // 0x0380(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowEndScreen;                                         // 0x0390(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1D62[0x10];                                  // 0x03A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AProceduralSetup*                                    ProceduralSetup;                                         // 0x03B0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasStartedAMission;                                      // 0x03B8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FFBW[0x7];                                   // 0x03B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              FSDPassword;                                             // 0x03C0(0x0010) BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       FSDPrivateServer;                                        // 0x03D0(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       SoloSession;                                             // 0x03D1(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsJoiningInvite;                                         // 0x03D2(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       FirstTimeInFrontend;                                     // 0x03D3(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       SessionFirstStartOnSpaceRig;                             // 0x03D4(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ShowFirstCharacterSelector;                              // 0x03D5(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ShowSaveWarning;                                         // 0x03D6(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J82Z[0x1];                                   // 0x03D7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              WorldViewTargetDummy;                                    // 0x03D8(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMissionResultInfo*                                  MissionResultInfo;                                       // 0x03E0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       LoaderSequencePlaying;                                   // 0x03E8(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZV9A[0x7];                                   // 0x03E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LastPerksLoadout;                                        // 0x03F0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              CharacterSelectionLastViewTarget;                        // 0x0400(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasSeenInfoScreen;                                       // 0x0408(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2I91[0x7];                                   // 0x0409(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          CharacterSelectionViewTargetTransform;                   // 0x0410(0x0030) BlueprintVisible, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          LoaderViewTargetTransform;                               // 0x0440(0x0030) BlueprintVisible, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGeneratedMissionChanged;                               // 0x0470(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDonkeyChanged;                                         // 0x0480(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TWeakObjectPtr<class AMolly>                               Donkey;                                                  // 0x0490(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBoscoChanged;                                          // 0x0498(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       DEBUGUseDebugSeedForMissions;                            // 0x04A8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DEBUGAutoRotateMissions;                                 // 0x04A9(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XW46[0x6];                                   // 0x04AA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DEBUGFixedPLSSeed;                                       // 0x04B0(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9UZH[0x10];                                  // 0x04B4(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DEBUGSeedOverride;                                       // 0x04C4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CanPlayOnline;                                           // 0x04C8(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CanCommunicateOnline;                                    // 0x04C9(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VGR2[0x6];                                   // 0x04CA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSteamSearchRegionChanged;                              // 0x04D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSteamServerJoinStatusChanged;                          // 0x04E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartSearchForFriendsComplete;                         // 0x04F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<class FString, class FString>                         FriendSessions;                                          // 0x0500(0x0050) BlueprintVisible, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KWPL[0x8];                                   // 0x0550(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGoogleAnalyticsWrapper*                             GoogleAnalyticsWI;                                       // 0x0558(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDSTelemetryWrapper*                                 DSTelemetryWrapper;                                      // 0x0560(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USpecialEvent*                                       ForcedMachineEvent;                                      // 0x0568(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USpecialEvent*                                       ForcedOtherEvent;                                        // 0x0570(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R6WS[0x2];                                   // 0x0578(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ShowMinerManualWorkInProgress;                           // 0x057A(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DP0S[0x5];                                   // 0x057B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMinersManualNotification;                              // 0x0580(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNewHUDWarning;                                         // 0x0590(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V5BS[0x20];                                  // 0x05A0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastDreadnaughtKillTime;                                 // 0x05C0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UWindowWidget>                        ActiveEscapeMenu;                                        // 0x05C4(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APostProcessingManager>               PostProcessingManager;                                   // 0x05CC(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ABosco>                               Drone;                                                   // 0x05D4(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APlayerCharacter>                     LocalPlayerCharacter;                                    // 0x05DC(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ATutorialManager>                     TutorialManager;                                         // 0x05E4(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DAFW[0x4];                                   // 0x05EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ACharacterSelectionSwitcher*                         CharacterSelectionSwitcher;                              // 0x05F0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bGameSettingsChanged;                                    // 0x05F8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6WM6[0x7];                                   // 0x05F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFSDServerSearchOptions                             ServerSearchOptions;                                     // 0x0600(0x0050) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		bool                                                       ServerSearchActive;                                      // 0x0650(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3CCP[0x17];                                  // 0x0651(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPrivilegeCheckComplete;                                // 0x0668(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IJPA[0x10];                                  // 0x0678(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsOnPressStartScreen;                                    // 0x0688(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasSeenStartScreen;                                      // 0x0689(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RAAV[0x6];                                   // 0x068A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ProceduralLevel;                                         // 0x0690(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              IconGenerationManagerClass;                              // 0x0698(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UIconGenerationManager*                              IconGenerationManager;                                   // 0x06A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D0P2[0x8];                                   // 0x06A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCampaignManager*                                    CampaignManager;                                         // 0x06B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              DeepDiveManager[0x10];                                   // 0x06B8(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		class UGeneratedMission*                                   GeneratedMission;                                        // 0x06C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDifficultySetting*                                  DesiredDifficulty;                                       // 0x06D0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDSaveGame*                                        SaveGame;                                                // 0x06D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDisconnectReason                                          DisconnectReason;                                        // 0x06E0(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W470[0x7];                                   // 0x06E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DisconnectErrorCode;                                     // 0x06E8(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UWorld*>                                      AlwaysLoadedWorlds;                                      // 0x06F8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       ShowCharacterSelectionWorld;                             // 0x0708(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BJSV[0x7];                                   // 0x0709(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              Viewer3DClass;                                           // 0x0710(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowLoaderWorld;                                         // 0x0718(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CharacterSelectionWorldActive;                           // 0x0719(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       MixerInteractivityEnabled;                               // 0x071A(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       LoaderWorldActive;                                       // 0x071B(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ResetHUDWhenReturning;                                   // 0x071C(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       MovieModeActive;                                         // 0x071D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       MovieModeActiveInSpacerig;                               // 0x071E(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       MovieModeStartAtOrigin;                                  // 0x071F(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       MovieModeStartWithCameraShake;                           // 0x0720(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UHNL[0x7];                                   // 0x0721(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USchematic*                                          ActiveForgeSchematic;                                    // 0x0728(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDCloudLoadSave*                                   FSDCloudLoadSave;                                        // 0x0730(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDSessionUpdater*                                  SessionUpdater;                                          // 0x0738(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDSendToURL*                                       SendToURL;                                               // 0x0740(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDFriendsAndInvites*                               FriendsAndInvites;                                       // 0x0748(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		double                                                     SessionStartTime;                                        // 0x0750(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SessionStartTimestamp;                                   // 0x0758(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InKBytesPerSecond;                                       // 0x075C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OutKBytesPerSecond;                                      // 0x0760(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PreSpawnNigaraParticles;                                 // 0x0764(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z8JO[0x3];                                   // 0x0765(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UTemporaryBuff*>                              TemporaryBuffs;                                          // 0x0768(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              NextLoaderSequence[0x28];                                // 0x0778(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		EAlwaysLoadedWorlds                                        NextLoaderLevel;                                         // 0x07A0(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BYBW[0x7];                                   // 0x07A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              DeepDiveLoaderSequence[0x28];                            // 0x07A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              DeepDiveLoaderSequence2[0x28];                           // 0x07D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_JU9X[0x10];                                  // 0x07F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundSubmix*                                        ControllerVibrationSubmix;                               // 0x0808(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundSubmix*                                        ControllerSpeakerSubmix;                                 // 0x0810(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZNBT[0x338];                                 // 0x0818(0x0338) MISSED OFFSET (PADDING)

	public:
		void UpdateGlobelMissionSeed();
		void UpdateDebugSeed();
		void StopPhotographyInputProcessor();
		void StopPersonalAnalytics();
		void SteamServerJoinStatusDelegate__DelegateSignature(ESteamServerJoinStatus Status);
		void SteamSearchRegionDelegate__DelegateSignature(ESteamSearchRegion Region);
		void StartPhotographyInputProcessor();
		void StartPersonalAnalytics();
		class AProceduralSetup* SpawnProcedural();
		void SetViewer3DClass(class UClass* NewClass, ECharselectionCameraLocation Location);
		void SetSteamServerJoinStatus(ESteamServerJoinStatus NewStatus);
		void SetSteamSearchRegion(ESteamSearchRegion NewRegion);
		void SetShouldAdvertiseInServerlist(bool bShouldAdvertise);
		void SetServerSearchOptions(const struct FFSDServerSearchOptions& options);
		void SetServerSearchActive(bool Active);
		void SetSelectedMission(class UGeneratedMission* mission, bool updateSessionSettings);
		void SetProceduralMap(class UClass* procedural);
		void SetPendingInviteJoinModding(const struct FBlueprintSessionResult& Result);
		void SetOverrideMaxPlayerCount(int32_t Count);
		void SetMinersManualNotification(EMinersManualSection Section, class UObject* IdentifyingObject, const class FText& Text);
		void SetLoaderWorldVisible(bool V, bool resetHud);
		void SetIsUsingOnlineFeatures(bool bIsOnlineFeatureUsed);
		void SetHasSeenInfoScreen();
		void SetGlobalMissionSeed(int32_t Seed);
		void SetFSDPassword(const class FString& pw);
		void SetEligableForRetirementAssignment(bool eligable);
		void SetDebugSeed(int32_t Seed);
		void SetCharacterSelectionWorldVisible(bool V, ECharselectionCameraLocation cameraLocation, bool resetHud, ECharacterSelectorItemStatus itemStatus);
		void SetCharacterSelectionSwitcher(class ACharacterSelectionSwitcher* switcher);
		void SendSteamInfo();
		void ScheduleResetOfWorldsAndGameDataThenOpenLevel(const class FName& LevelName);
		void RestoreCursors();
		void ResetViewer3DClass();
		void ResetSaveGame();
		void ResetAlwaysLoadedWorldsAndGameData();
		void RemoveBosco();
		void RemoveAllTemporaryBuff(class APlayerController* PlayerController);
		void RefreshIsGameModded();
		void PreClientTravelCleanup(class APlayerController* PlayerController);
		void PostInit(bool reload);
		void PairingUsePreviousProfile();
		void PairingUseNewProfile();
		void OnStartSearchForFriendsComplete__DelegateSignature(bool bWasSuccessful, const class FString& ErrorStr);
		void OnNewFSDSessionID(const class FString& sessionId);
		void OnNetworkFailure(class UWorld* World, class UNetDriver* NetDriver, ENetworkFailure failType, const class FString& errorMessage);
		void OnLoadComplete(const class FString& MapName);
		void NewHUDWarningDelegate__DelegateSignature(class UHUDWarningWidget* newWidget);
		void LoadSaveGame(class UFSDSaveGame* toLoad);
		bool IsPendingInvitePasswordProtected();
		bool IsPendingInviteModded();
		bool IsMutatorActive(class UClass* mutatorClass);
		bool IsGameModded();
		bool IsFreeBeerRewardActive();
		bool IsCharacterSelectionWorldVisible();
		bool IsCampaignMission();
		bool HasTooManyModsEnabled();
		bool HasSignedIn();
		bool HasRandomBeerBuff();
		bool HasPendingInvite();
		bool HasPendingActivity();
		bool HasAnalytics();
		void GraphicsUserSettingsChanged();
		void GiveTemporaryBuff(class UTemporaryBuff* buff, class APlayerCharacter* Player);
		struct FVector2D GetViewportSize();
		void GetSoftReferenceToPLS();
		TArray<struct FBlueprintSessionResult> GetServersFriendsArePlaying(TArray<struct FBlueprintSessionResult> servers);
		class FString GetSeedString(class UObject* WorldContextObject);
		int32_t GetOverrideMaxPlayerCount();
		TArray<class UMutator*> GetMutators(class UClass* mutatorClass);
		int32_t GetMaxPublicConnections();
		int32_t GetMaxAllowedMods();
		class AFSDPlayerController* GetLocalFSDPlayerController();
		class UIconGenerationManager* GetIconGenerationManager();
		bool GetHasSeenInfoScreen();
		int32_t GetGlobalMissionSeed();
		class UGeneratedMission* GetGeneratedMission();
		class UMutator* GetFirstMutator(class UClass* mutatorClass);
		class FString GetDisconnectErrorCode();
		TArray<struct FNetworkConnectionInfo> GetConnectionInfo();
		int32_t GetCommonGlobalMissionSeed();
		class APlayerCharacter* GetCharacterSelectorCharacter();
		void GameUserSettingsChanged();
		void DonkeyCharacterDelegate__DelegateSignature(class AMolly* InDonkey);
		void CloseSessionLobby();
		void ClearDisconnectError();
		void ChangeSkinPreview(class UItemSkin* PreviewSkin);
		void CancelJoin();
		void CachePSOsOnCommand();
		void ApplyGameUserSettings(class UFSDGameUserSettings* Settings);
		class UHUDWarningWidget* AddWarningToHUD(class UClass* WidgetClass, class UTexture2D* Texture, class USoundBase* PingSound);
		void AddToFriendSessions(const class FString& friendSessionId, const class FString& friendName);
		void AddStatValue(const class FString& Key, float Value);
		void AddStatCount(const class FString& Key, int32_t Count);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDGameMode
	 * Size -> 0x01E8 (FullSize[0x04F0] - InheritedSize[0x0308])
	 */
	class AFSDGameMode : public AGameMode
	{
	public:
		class FScriptMulticastDelegate                             OnMatchStarted;                                          // 0x0308(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAllControllersReady;                                   // 0x0318(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerLoggedIn;                                        // 0x0328(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDonkeyCalled;                                          // 0x0338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       GenerationStarted;                                       // 0x0348(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S78J[0x7];                                   // 0x0349(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPheromoneSpawnerComponent*                          PheromoneComponent;                                      // 0x0350(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UEnemySpawnManager*                                  EnemySpawnManager;                                       // 0x0358(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObjectivesManager*                                  ObjectivesManager;                                       // 0x0360(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UKeepInsideWorld*                                    KeepInsideWorld;                                         // 0x0368(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMissionManager*                                     MissionManager;                                          // 0x0370(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UEncounterManager*                                   EncounterManagerComponent;                               // 0x0378(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCritterManager*                                     CritterManager;                                          // 0x0380(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AFSDPlayerController*>                        PlayerControllers;                                       // 0x0388(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		class UFormationsManagerComponent*                         FormationsManager;                                       // 0x0398(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_83P6[0x20];                                  // 0x03A0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              DropPodClass[0x28];                                      // 0x03C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              MuleClass[0x28];                                         // 0x03E8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              DropodEscapeClass[0x28];                                 // 0x0410(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              droneClass[0x28];                                        // 0x0438(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              CheatUI[0x28];                                           // 0x0460(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		float                                                      ContinueCountdown;                                       // 0x0488(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K4B3[0x4];                                   // 0x048C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       PreventAllLatejoin;                                      // 0x0490(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PreventLateJoinOnMissionStart;                           // 0x0491(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4MY3[0x2];                                   // 0x0492(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlayerSpawnHeightOffset;                                 // 0x0494(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FriendlyFireGracePeriod;                                 // 0x0498(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7X9I[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UEnemyDescriptor*>                            ForcedEnemyPool;                                         // 0x04A0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       UseNormalEncounters;                                     // 0x04B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseStationaryEncounter;                                  // 0x04B1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AllowSpecialEncounters;                                  // 0x04B2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MKIL[0x5];                                   // 0x04B3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnemyWaveManager*                                   CachedWaveManager;                                       // 0x04B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TA2Q[0x30];                                  // 0x04C0(0x0030) MISSED OFFSET (PADDING)

	public:
		void StartGame();
		void SpawnMissionCriticalItems(ECriticalItemPass pass);
		void SignalEndLevelToClients();
		void ResetDeaths();
		void RecieveEndLevel();
		void RecieveAllDwarvesDown();
		void Recieve_ContinueTimerEnded();
		void ReceivePostSeamlessTravel();
		void OnObjectivesInitialized();
		void OnLevelGenerationComplete(int32_t pass);
		void OnControllerDestroyed(class AActor* Controller);
		void LoadSpaceRig();
		void LoadMission(const class FString& MapName);
		void HostAbortMission();
		void HandlePlayerBanning(class AFSDPlayerController* FSDPlayerController);
		class UEnemyWaveManager* GetWaveManager();
		class AActor* GetPlayerStart(class AFSDPlayerController* Controller);
		class UClass* GetMuleClass();
		bool GetMissionWasAborted();
		class UEncounterManager* GetEncounterManager();
		struct FSoftObjectPath GetDropPodPath();
		struct FSoftObjectPath GetDropPodEscapePath();
		class UClass* GetDropPodEscapeClass();
		class UClass* GetDropPodClass();
		struct FSoftObjectPath GetDronePath();
		class UClass* GetDroneClass();
		class UDifficultyManager* GetDifficultyManager();
		int32_t GetCurrentLevel();
		bool FSDSetPause(class APlayerController* PC, EPauseReason pauseReason);
		bool FSDKickPlayer(class APlayerController* KickedPlayer, const class FText& KickReason);
		bool FSDClearPause(EPauseReason pauseReason);
		void EndLevel();
		void DonkeyButtonPressed();
		void DestroyNonLocalPlayers();
		void Debug_ShowPlayerSpheres();
		bool AllPlayersHaveSelectedCharacter();
		bool AllPlayersHaveGeneratedLevel();
		void AddControllerForGracePeriod(class APlayerCharacter* APlayerCharacter);
		void AboutMission();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDGameModeSpaceRig
	 * Size -> 0x0018 (FullSize[0x0508] - InheritedSize[0x04F0])
	 */
	class AFSDGameModeSpaceRig : public AFSDGameMode
	{
	public:
		unsigned char                                              AmountOfPlayersSpawnedInMedbay;                          // 0x04F0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       StartedSession;                                          // 0x04F1(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_27YM[0x16];                                  // 0x04F2(0x0016) MISSED OFFSET (PADDING)

	public:
		class AActor* GetFreeSpawnOfType(ESpacerigStartType aType, class AFSDPlayerController* AController);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDGameplayStatics
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDGameplayStatics : public UBlueprintFunctionLibrary
	{
	public:
		class UFXSystemComponent* SpawnScaledEmitterAtLocation(class UObject* WorldContextObject, const struct FScaledEffect& ScaledEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy);
		class UDecalComponent* SpawnDecalData(class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& UpVector, const struct FDecalData& DecalData, bool randomRollRotation);
		class UDecalComponent* SpawnDecalAtActor(class AActor* Actor, class UMaterialInterface* DecalMaterial, float Size, float Duration, float FadeDuration);
		class UDecalComponent* SpawnDecal(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& Location, const struct FVector& UpVector, float Size, float Duration, float FadeDuration);
		void SetControllerVibrationSubmixSend(class UObject* WorldContextObject, class UAudioComponent* AudioComponent, float SendLevel);
		void SetControllerSpeakerSubmixSend(class UObject* WorldContextObject, class UAudioComponent* AudioComponent, float SendLevel);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDTagSettings
	 * Size -> 0x00F0 (FullSize[0x0120] - InheritedSize[0x0030])
	 */
	class UFSDTagSettings : public UDataAsset
	{
	public:
		struct FGameplayTagQuery                                   IsFriendlyQuery;                                         // 0x0030(0x0048) Edit, NativeAccessSpecifierPublic
		struct FGameplayTagQuery                                   IsNeutralQuery;                                          // 0x0078(0x0048) Edit, NativeAccessSpecifierPublic
		struct FGameplayTagQuery                                   IsHostileQuery;                                          // 0x00C0(0x0048) Edit, NativeAccessSpecifierPublic
		struct FFSDTagsRoot                                        Root;                                                    // 0x0108(0x0018) Edit, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDGameSession
	 * Size -> 0x0020 (FullSize[0x0258] - InheritedSize[0x0238])
	 */
	class AFSDGameSession : public AGameSession
	{
	public:
		TArray<struct FUniqueNetIdRepl>                            KickedPlayers;                                           // 0x0238(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<struct FUniqueNetIdRepl>                            BannedPlayers;                                           // 0x0248(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDGameState
	 * Size -> 0x0410 (FullSize[0x06A0] - InheritedSize[0x0290])
	 */
	class AFSDGameState : public AGameState
	{
	public:
		class FScriptMulticastDelegate                             OnMissionTimeUpdated;                                    // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTerrainGenerated;                                      // 0x02A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTerrainGenerationStarting;                             // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMatchStarted;                                          // 0x02C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMatchEnded;                                            // 0x02D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGameEventCompletedEvent;                               // 0x02E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerJoined;                                          // 0x02F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerLeave;                                           // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnContinueActive;                                        // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnContinueCountdownChanged;                              // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAllDwarvesDown;                                        // 0x0330(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeamMemberCampaignMissionChanged;                      // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnemyKilledEvent;                                      // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerCharacterRegistered;                             // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    CurrentLevel;                                            // 0x0370(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JP0K[0x4];                                   // 0x0374(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATeamTransport*                                      EscapePod;                                               // 0x0378(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              FSDSessionID;                                            // 0x0380(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBoscoReviveCounterChanged;                             // 0x0390(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bTeamDown;                                               // 0x03A0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0P04[0x7];                                   // 0x03A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTeamDown;                                              // 0x03A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BZ85[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnObjectivesCompleted;                                   // 0x03C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnObjectiveAdded;                                        // 0x03D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDifficultyChanged;                                     // 0x03E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCountdownStarted;                                      // 0x03F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCountdownTimeChanged;                                  // 0x0400(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCountdownFinished;                                     // 0x0410(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class ADeepCSGWorld*                                       CSGWorld;                                                // 0x0420(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    LastSupplyPodTimeStamp;                                  // 0x0428(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    LastCleaningPodTimeStamp;                                // 0x042C(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AProceduralSetup*                                    ProceduralSetup;                                         // 0x0430(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DelayLateJoin;                                           // 0x0438(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A5H0[0x7];                                   // 0x0439(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimitiveComponent*                                 FakeMovementBase;                                        // 0x0440(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PlayerSurvivalCreditBonus;                               // 0x0448(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ResourceAmountPenalty;                                   // 0x044C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ObjectivesCreditPenalty;                                 // 0x0450(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ObjectivesXPPenaltyNormal;                               // 0x0454(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ObjectivesXPPenaltyDeepDives;                            // 0x0458(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IW75[0x4];                                   // 0x045C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                TextMissionCompleted;                                    // 0x0460(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class FText                                                TextSecondaryObjective;                                  // 0x0478(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class FText                                                TextSurvivalBonus;                                       // 0x0490(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class FText                                                TextMined;                                               // 0x04A8(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class FText                                                TextCollected;                                           // 0x04C0(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class FText                                                TextBonus;                                               // 0x04D8(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		int32_t                                                    BoscoReviveCounter;                                      // 0x04F0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U8X6[0x4];                                   // 0x04F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USpawnEffectsComponent*                              SpawnEffects;                                            // 0x04F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDynamicMeshScaler*                                  MeshScaler;                                              // 0x0500(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGemProximityTracker*                                GemProximityTracker;                                     // 0x0508(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAttackerManagerComponent*                           AttackerManager;                                         // 0x0510(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDifficultyManager*                                  DifficultyManagerComponent;                              // 0x0518(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundMixManagerComponent*                           SoundMixManager;                                         // 0x0520(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USeasonReplicatorComponent*                          SeasonReplicatorComponent;                               // 0x0528(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTeamResourcesComponent*                             TeamResources;                                           // 0x0530(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsOnSpaceRig;                                            // 0x0538(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PlayerMadeItToDropPod;                                   // 0x0539(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WFKR[0x6];                                   // 0x053A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class APlayerCharacter*>                            ActivePlayerCharacters;                                  // 0x0540(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		struct FReplicatedObjectives                               Objectives;                                              // 0x0550(0x0018) Net, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class FText                                                CompletedGameEventName;                                  // 0x0568(0x0018) BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGeneratedMissionSeed                               GeneratedMissionSeed;                                    // 0x0580(0x0058) Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		bool                                                       objectivesCompleted;                                     // 0x05D8(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9HYE[0x7];                                   // 0x05D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDifficultySetting*                                  CurrentDifficultySetting;                                // 0x05E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RememberDifficulty;                                      // 0x05E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_APKC[0x7];                                   // 0x05E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPlayerProximityTracker*                             ProximityTracker;                                        // 0x05F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UShowroomManager*                                    ShowroomManager;                                         // 0x05F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AGameStats*                                          GameStats;                                               // 0x0600(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   MissionTime;                                             // 0x0608(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UN9Z[0x4];                                   // 0x060C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   MissionStartTime;                                        // 0x0610(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   MissionHaz;                                              // 0x0614(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PreventLatejoinCharacterDuplication;                     // 0x0618(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       StartPressed;                                            // 0x0619(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ContinuePressed;                                         // 0x061A(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UAF2[0x1];                                   // 0x061B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ContinuesCountdown;                                      // 0x061C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AllDwarvesDown;                                          // 0x0620(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       missionAborted;                                          // 0x0621(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0CY5[0x2];                                   // 0x0622(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CountdownRemaining;                                      // 0x0624(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                countdownText;                                           // 0x0628(0x0018) BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		int32_t                                                    HostGlobalSeed;                                          // 0x0640(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanCarryOverResources;                                   // 0x0644(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4T2R[0x1B];                                  // 0x0645(0x001B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             SessionLeaderChanged;                                    // 0x0660(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6VSR[0x8];                                   // 0x0670(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerState*                                        CurrentPlayerSessionLeader;                              // 0x0678(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XQKY[0x20];                                  // 0x0680(0x0020) MISSED OFFSET (PADDING)

	public:
		void WaitForInitialGenerationDone(class AFSDGameState* GameState, const struct FLatentActionInfo& LatentInfo);
		void StartCountdown(int32_t Duration, const class FText& countdownName);
		void SetPreventLatejoinCharacterDuplication(bool prevent);
		void SetPlayersHaveReachedDroppod(bool newHasPlayerReached);
		void SetGeneratedMissionParameters(class UGeneratedMission* mission);
		void SetCurrentDifficulty(class UDifficultySetting* Setting, bool updateSessionSettings);
		void SetCompletionData(bool objectivesCompleted, int32_t playersInPod);
		void ReceiveGeneratedMissionReplicated();
		void PostLocalizedGameMessage(const class FText& Msg, TArray<class FText> Arguments);
		void PostGameMessage(const class FString& Msg);
		void OnRep_StartPressed(bool oldStartPressed);
		void OnRep_ObjectivesCompleted();
		void OnRep_MissionTime();
		void OnRep_GeneratedMissionSeed();
		void OnRep_FSDSessionID();
		void OnRep_CurrentDifficultySetting();
		void OnRep_CountdownText();
		void OnRep_CountdownRemaining(int32_t prevTime);
		void OnRep_ContinuePressed();
		void OnRep_ContinueCountdown();
		void OnRep_CompletedGameEvent();
		void OnRep_BoscoReviveCounter();
		void OnRep_AllDwarvesDown();
		int32_t MissionEndscreenSeed();
		bool IsTutorialMission();
		bool IsCountingDown();
		void InitObjectives();
		void HostDisbandedTeam();
		bool HasObjectivesReplicated();
		void HandleSeamlessTravelEvent();
		class AFSDPlayerState* GetServerPlayerState();
		TArray<class UObjective*> GetSecondaryObjectives();
		class AProceduralSetup* GetProceduralSetup();
		class UObjective* GetPrimaryObjective();
		bool GetPreventLatejoinCharacterDuplication();
		bool GetPlayersHaveReachedDroppod();
		TArray<class UPlayerCharacterID*> GetPlayableCharacterIDs();
		TArray<class UObjective*> GetObjectives();
		TArray<class AFSDPlayerState*> GetNetworkSortedPlayerArray();
		int32_t GetMissionTime();
		bool GetMissionSuccessful();
		int32_t GetMissionStartTime();
		int32_t GetMissionRewardCreditSum();
		TArray<struct FCreditsReward> GetMissionRewardCredits();
		bool GetMissionCompletedCreditReward(bool Primary, int32_t* OutReward);
		int32_t GetGlobalMissionSeed();
		class AGameStats* GetGameStats();
		TMap<class UResourceData*, float> GetEndscreenResources();
		class UDifficultyManager* GetDifficultyManager();
		TMap<class UResourceData*, float> GetCollectedResources();
		TArray<class UFSDEvent*> GetActiveEventsFromMission();
		void ClientNewMessage(const struct FFSDChatMessage& Msg);
		void Client_StartPressed();
		void Client_NewLocalizedMessage(const struct FFSDLocalizedChatMessage& Msg);
		bool AllMissionEndResultsReceived();
		void All_SpawnScaledEffectAt(const struct FScaledEffect& Effect, const struct FVector_NetQuantize& Location);
		void All_SpawnScaledEffectAndCueAt(const struct FScaledEffect& Effect, class USoundCue* audio, const struct FVector_NetQuantize& Location);
		void All_ServerQuit();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDGameUserSettings
	 * Size -> 0x0440 (FullSize[0x0560] - InheritedSize[0x0120])
	 */
	class UFSDGameUserSettings : public UGameUserSettings
	{
	public:
		unsigned char                                              UnknownData_KSVB[0x8];                                   // 0x0120(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSettingsChanged;                                       // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUseHoldToRunChanged;                                   // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFOVChanged;                                            // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLanguageChanged;                                       // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGameServerNameChanged;                                 // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFontSizeChanged;                                       // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJukeboxStreamerModeChanged;                            // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bJukeboxStreamerMode;                                    // 0x0198(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bGraphicSettingsChanged;                                 // 0x0199(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VG55[0x6];                                   // 0x019A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CurrentUserSetSaveSlotName;                              // 0x01A0(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCanShowBloodChanged;                                   // 0x01B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<class FName, bool>                                    NamedBoolSettings;                                       // 0x01C0(0x0050) Config, NativeAccessSpecifierPublic
		struct FModdingUISettings                                  ModdingUISettings;                                       // 0x0210(0x0060) BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnColorVisionDeficiencySettingsChanged;                  // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FColorVisionDeficiencySettings                      ColorVisionDeficiency;                                   // 0x0280(0x0008) BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    ServerSearchRegion;                                      // 0x0288(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ServerSearchPasswordRequired;                            // 0x028C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2ZCP[0x3];                                   // 0x028D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnModdingSettingsChanged;                                // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      volumeCharacterVoice;                                    // 0x02A0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      volumeMissionControl;                                    // 0x02A4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      volumeMaster;                                            // 0x02A8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      volumeSFX;                                               // 0x02AC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      volumeMusic;                                             // 0x02B0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CQ97[0x4];                                   // 0x02B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CurrentAudioOutputDeviceId;                              // 0x02B8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F0D1[0x10];                                  // 0x02C8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UseDefaultAudioOutputDevice;                             // 0x02D8(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JASR[0x3];                                   // 0x02D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Sharpening;                                              // 0x02DC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AntiAliasingType;                                        // 0x02E0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       TemporalAAUpsamplingEnabled;                             // 0x02E4(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_POHZ[0x3];                                   // 0x02E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      volumeVoice;                                             // 0x02E8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    UpscalingType;                                           // 0x02EC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AmdFsrMode;                                              // 0x02F0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AmdFsr2Mode;                                             // 0x02F4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AmdFsrSharpness;                                         // 0x02F8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AmdFsr2Sharpness;                                        // 0x02FC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EUDLSSMode                                                 NvidiaDlssMode;                                          // 0x0300(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AHX3[0x3];                                   // 0x0301(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NvidiaDlssSharpness;                                     // 0x0304(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FSDResolutionScale;                                      // 0x0308(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ENVidiaReflexMode                                          ReflexMode;                                              // 0x030C(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_068M[0x3];                                   // 0x030D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WeaponSpwayScale;                                        // 0x0310(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2X5D[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundClass*                                         soundClassCharacterVoices;                               // 0x0318(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundClass*                                         soundClassMissionControl;                                // 0x0320(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundClass*                                         soundClassMaster;                                        // 0x0328(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundClass*                                         soundClassSFX;                                           // 0x0330(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundClass*                                         soundClassUI;                                            // 0x0338(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundClass*                                         soundClassMusic;                                         // 0x0340(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundClass*                                         soundClassVoice;                                         // 0x0348(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ChatFontSize;                                            // 0x0350(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseVoiceChat;                                           // 0x0354(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUsePushToTalk;                                          // 0x0355(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GN5B[0x2];                                   // 0x0356(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LocalGameServerName;                                     // 0x0358(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              LocalGameServerNameFiltered;                             // 0x0368(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AppearOffline;                                           // 0x0378(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AutoRefreshServerlist;                                   // 0x0379(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QZ0N[0x2];                                   // 0x037A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MouseXSensitivity;                                       // 0x037C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MouseYSensitivity;                                       // 0x0380(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseSeperateSensetivity;                                  // 0x0384(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       InvertMouse;                                             // 0x0385(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       InvertScroolWheel;                                       // 0x0386(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseHoldToRun;                                            // 0x0387(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseToggleLaserpointer;                                   // 0x0388(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BA96[0x3];                                   // 0x0389(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FOV;                                                     // 0x038C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HeadbobbingScale;                                        // 0x0390(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraShakeScale;                                        // 0x0394(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChatFadeTime;                                            // 0x0398(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseStreamerProgram;                                      // 0x039C(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       SoundOnChatMessage;                                      // 0x039D(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PhotosensitiveMode;                                      // 0x039E(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ShowUIAnimations;                                        // 0x039F(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseProfanityFilter;                                      // 0x03A0(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ILNP[0x3];                                   // 0x03A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForceFeedbackScale;                                      // 0x03A4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       InvertFlightControls;                                    // 0x03A8(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableDx12ByDefault;                                     // 0x03A9(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KNL9[0x2];                                   // 0x03AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HDRColorGamma;                                           // 0x03AC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EConsoleGraphicsMode                                       ConsoleGraphicsMode;                                     // 0x03B0(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BZEP[0x3];                                   // 0x03B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StaticResoultionScale;                                   // 0x03B4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseManuelGrahpicsMode;                                   // 0x03B8(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_US0X[0x3];                                   // 0x03B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FHUDElements                                        HUDElements;                                             // 0x03BC(0x0080) Config, NoDestructor, NativeAccessSpecifierPublic
		struct FCharacterOptions                                   CharacterOptions;                                        // 0x043C(0x0004) BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic
		float                                                      DownedTurnDirection_Controller;                          // 0x0440(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DownedTurnDirection_Mouse;                               // 0x0444(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UIDPIScale;                                              // 0x0448(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CAG3[0x4];                                   // 0x044C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       EnableCustomUIScale;                                     // 0x0450(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FKPK[0x7];                                   // 0x0451(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnInputSourceChanged;                                    // 0x0458(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       CheckCursorOutOfBounds;                                  // 0x0468(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4XSS[0x7];                                   // 0x0469(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnEnableTutorialHintsChanged;                            // 0x0470(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowFPSChanged;                                        // 0x0480(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowNetInfoLevelChanged;                               // 0x0490(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDx12Enabled;                                           // 0x04A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FIntPoint                                           ResolutionToBeApplied;                                   // 0x04B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       VSyncToBeApplied;                                        // 0x04B8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Dx12ToBeApplied;                                         // 0x04B9(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EWindowMode                                                InFullscreenModeToBeApplied;                             // 0x04BA(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       InFullscreenModeToBeAppliedValid;                        // 0x04BB(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       VSyncToBeAppliedValid;                                   // 0x04BC(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Dx12ToBeAppliedValid;                                    // 0x04BD(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ResolutionToBeAppliedValid;                              // 0x04BE(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EscMenuActive;                                           // 0x04BF(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowUpgradeExtraDetails;                                // 0x04C0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DVAK[0x7];                                   // 0x04C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnShowUpgradeExtraDetailsChanged;                        // 0x04C8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCustomKeyBindingsChanged;                              // 0x04D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    LastNiagaraShaderVerions;                                // 0x04E8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasKeyboardBeenConnected;                                // 0x04EC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EFSDInputSource                                            CurrentInputSource;                                      // 0x04ED(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EFSDInputSource                                            RequestedInputSource;                                    // 0x04EE(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6Y4M[0x1];                                   // 0x04EF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FCustomKeyBinding>                           CustomKeyBindings;                                       // 0x04F0(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FCustomKeyBinding>                           CustomControllerBindings;                                // 0x0500(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		bool                                                       SwapControllerThumbsticks;                               // 0x0510(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTutorialHintsEnabled;                                   // 0x0511(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowSubtitles;                                          // 0x0512(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowFPS;                                                // 0x0513(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ShowNetInfoLevel;                                        // 0x0514(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanShowBlood;                                           // 0x0518(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PreventLatejoinCharacterDuplication;                     // 0x0519(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TranslatorDebugModeEnabled;                              // 0x051A(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QN7H[0x5];                                   // 0x051B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PreviousCulture;                                         // 0x0520(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FControllerSettings                                 ControllerSettings;                                      // 0x0530(0x0010) Config, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuid>                                       SelectedDifficultyLevels;                                // 0x0540(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuid>                                       DifficultyLevelsAddedByDefault;                          // 0x0550(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected

	public:
		void UpdateVolumeSettings(class USoundClass* CharacterVoices, class USoundClass* MissionControl, class USoundClass* Master, class USoundClass* Music, class USoundClass* SFX, class USoundClass* UI, class USoundClass* Voice);
		void UpdateForceFeedbackScaleOnController(class APlayerController* Controller);
		bool ToggleTranslatorDebugMode();
		bool ToggleShowUpgradeExtraDetails();
		void ToggleModdingServerFilter(unsigned char ServerFilter, bool Enable);
		void SetZiplineGunAutoSwitch(bool shouldAutoSwitch);
		void SetWeaponSwayScale(float Scale);
		void SetVSyncEnabledToBeApplied(bool bEnable);
		void SetVolume(EVolumeType volumeType, float Volume);
		void SetVoiceChatEnabled(bool bEnable);
		void SetUseToggleTerrainScanner(bool useToggleTerrainScanner);
		void SetUseToggleLaserpointer(bool UseToggleLaserpointer);
		void SetUseStreamerProgram(bool UseStreamerProgram);
		void SetUseSeparateSensitivity(bool newSetting);
		void SetUseProfanityFilter(bool shouldUse);
		void SetUseManualGraphicsMode(bool bEnabled);
		void SetUseHoldToRun(bool UseHoldToRun);
		void SetUseDefaultAudioOutputDevice(class UObject* WorldContextObject, bool UseDefault);
		void SetUseCustomUIScale(bool UseCustomScale);
		void SetUpscalingType(int32_t Type);
		void SetUIDPIScale(float uiscale);
		void SetTutorialHintsEnabled(bool Enabled);
		void SetTurn180Mode(ETurn180Mode InMode);
		void SetTemporalAAUpscalingEnabled(bool bEnable);
		void SetSwapControllerThumbsticks(bool InSwapThumbsticks);
		void SetSteamSearchRegion(ESteamSearchRegion InRegion);
		void SetStaticResolutionScale(float percentage);
		void SetShowUIAnimations(bool shouldShow);
		void SetShowSubtitles(bool Show);
		void SetShowSandboxLabel(bool InShowLabel);
		void SetShowNetInfoLevel(int32_t Level);
		void SetShowFPS(bool Visible);
		void SetSharpening(float Sharpening);
		void SetServerSearchPasswordRequired(bool InPasswordRequired);
		void SetScreenResolutionToBeApplied(const struct FIntPoint& Resolution);
		void SetReflexMode(ENVidiaReflexMode ReflexMode);
		void SetPushToTalk(bool bEnable);
		void SetPreviousItemEnabledOnController(bool InEnabled);
		void SetPreventLatejoinCharacterDuplication(bool prevent);
		void SetPlaySoundOnChatMessage(bool playSoundOnMessage);
		void SetPhotosensitiveMode(bool modeOn);
		void SetNvidiaDlssSharpness(float Sharpness);
		void SetNvidiaDlssMode(EUDLSSMode Mode);
		void SetMouseYSensitivity(float newSensitivity);
		void SetMouseXSensitivity(float newSensitivity);
		void SetModdingSortBy(unsigned char SortField, bool SortAscending);
		void SetLensFlaresEnabled(bool Enabled);
		void SetJukeboxStreamerMode(bool InStreamerMode);
		void SetInvertMouseWheel(bool invertMouseWheel);
		void SetInvertMouse(bool InvertMouse);
		void SetInvertFlightControls(bool Invert);
		void SetInputSource(EFSDInputSource NewSource);
		void SetHoldToFire(bool HoldToFire);
		void SetHoldToBreakImmobilization(bool holdToBreak);
		void SetHeadBobbingScale(float HeadbobbingScale);
		void SetHDRColorGamma(float Gamma);
		void SetGrapplingHookAutoSwitch(bool shouldAutoSwitch);
		void SetGamma(float gamme);
		void SetGameServerName(int32_t localUserNum, const class FString& Name);
		void SetFullscreenModeToBeApplied(EWindowMode InFullscreenMode);
		void SetFOV(float FOV);
		void SetForceFeedbackScale(float Scale);
		void SetDx12EnabledToBeApplied(bool bEnable);
		void SetDownCameraTurnDirection(EFSDInputSource InputSource, float InDirection);
		void SetDisableMasterEQ(bool B);
		void SetDifficultySelected(class UDifficultySetting* Difficulty, bool IsSelected);
		void SetDebugLocalizerMode(bool bEnable);
		void SetCurrentUserSaveSlotName(class UObject* WorldContextObject, const class FString& saveSlotName, ESaveSlotChangeProcedure changeProcedure);
		void SetConsoleGraphicsMode(EConsoleGraphicsMode Mode);
		void SetColorVisionDeficiency(EColorVisionDeficiency InType, float InSeverity);
		void SetCheckForOutOfBoundsEnabled(bool Enabled);
		void SetChatFontSize(int32_t inFontSize);
		void SetChatFadeTime(float FadeTime);
		void SetChatEnabledOnController(bool InEnabled);
		void SetCanShowBlood(bool bloodAllowed);
		void SetCameraShakeScale(float CameraShakeScale);
		void SetBloomEnabled(bool Enabled);
		void SetAutoRefreshServerlist(bool Value);
		bool SetAudioOutputDevice(class UObject* WorldContextObject, const class FString& DeviceID);
		bool SetAudioInputDevice(const class FString& DeviceName);
		void SetAppearOffline(bool bEnable);
		void SetAntiAliasingType(int32_t AntiAliasingType);
		void SetAMDFSRSharpness(float Sharpness);
		void SetAMDFSRMode(int32_t Mode);
		void SetAMDFSR2Sharpness(float Sharpness);
		void SetAMDFSR2Mode(int32_t Mode);
		void SetAimSensitivity(float NewValue);
		void SetAimOuterAcceleration(float NewValue);
		void SetAimDeadZone(float NewValue);
		void ResetGraphicsChanges();
		void ResetControllerSettings();
		void PostInitFSDUserSettings(class UObject* WorldContextObject);
		bool IsVoiceChatEnabled();
		bool IsUpscalingTypeSupported(int32_t Type);
		bool IsNvReflexAvailable();
		bool IsManaulGraphicsModeAvailable();
		bool IsDx12Enabled();
		bool IsDebugLocalizerModeEnabled();
		bool IsCurrentInputSource(EFSDInputSource InputSource);
		void InitializeDifficultySelection(class UObject* WorldContext, TArray<class UDifficultySetting*> StartSelection);
		bool HasAudioOutputDeviceChanged(class FString* AudioDeviceChangedTo);
		bool GetZiplineGunAutoSwitch();
		float GetWeaponSwayScale();
		bool GetVSyncEnabledToBeApplied();
		float GetVolume(EVolumeType volumeType);
		bool GetUseToggleTerrainScanner();
		bool GetUseToggleLaserpointer();
		bool GetUseStreamerProgram();
		bool GetUseSeparateSensitivity();
		bool GetUseProfanityFilter();
		bool GetUseManualGraphicsMode();
		bool GetUseHoldToRun();
		bool GetUseDefaultAudioOutputDevice();
		bool GetUseCustomUIScale();
		int32_t GetUpscalingType();
		float GetUIDPIScale();
		bool GetTutorialHintsEnabled();
		ETurn180Mode GetTurn180Mode();
		bool GetTemporalAAUpscalingEnabled();
		ESteamSearchRegion GetSteamSearchRegion();
		float GetStaticResolutionScale();
		bool GetShowUIAnimations();
		bool GetShowSubtitles();
		bool GetShowSandboxLabel();
		int32_t GetShowNetInfoLevel();
		bool GetShowFPS();
		float GetSharpening();
		struct FIntPoint GetScreenResolutionToBeApplied();
		ENVidiaReflexMode GetReflexMode();
		bool GetPushToTalk();
		bool GetPreviousItemEnabledOnController();
		bool GetPreventLatejoinCharacterDuplication();
		bool GetPlaySoundOnChatMessage();
		bool GetPhotosensitiveMode();
		float GetNvidiaDlssSharpness();
		EUDLSSMode GetNvidiaDlssMode();
		float GetMouseYSensitivity();
		float GetMouseXSensitivity();
		bool GetModdingServerFilterEnabled(unsigned char ServerFilter);
		bool GetLensFlaresEnabled();
		bool GetIsDifficultySelected(class UDifficultySetting* Difficulty);
		bool GetInvertMouseWheel();
		bool GetInvertMouse();
		bool GetInvertFlightControls();
		EFSDInputSource GetInputSource();
		bool GetHoldToFire();
		bool GetHoldToBreakImmobilization();
		float GetHeadBobbingScale();
		float GetHDRColorGamma();
		bool GetGrapplingHookAutoSwitch();
		float GetGamma();
		EWindowMode GetFullscreenModeToBeApplied();
		class UFSDGameUserSettings* GetFSDGameUserSettings();
		float GetFOV();
		float GetForceFeedbackScale();
		bool GetDx12EnabledToBeApplied();
		float GetDownCameraTurnDirection(EFSDInputSource InputSource);
		bool GetDisableMasterEQ();
		class FString GetCurrentUserSaveSlotName();
		EFSDInputSource GetCurrentInputSource();
		bool GetCurrentAudioOutputDevice(class UObject* WorldContextObject, class FString* AudioDevice);
		class FString GetCurrentAudioInputDeviceName();
		float GetCurrentAudioInputDeviceAmplitude(int32_t localUserId);
		EConsoleGraphicsMode GetConsoleGraphicsMode();
		bool GetCheckForOutOfBounds();
		int32_t GetChatFontSize();
		float GetChatFadeTime();
		bool GetChatEnabledOnController();
		float GetCameraShakeScale();
		bool GetBloomEnabled();
		bool GetAvaliableAudioOutputDevices(class UObject* WorldContextObject, TArray<class FString>* AudioDevices);
		bool GetAvaliableAudioInputDevices(TArray<class FString>* AudioDevices);
		bool GetAvailableScreenResolutionsForNonPrimaryMonitors(TArray<struct FIntPoint>* Resolutions);
		bool GetAutoRefreshServerlist();
		class FString GetAudioOutputDeviceName(class UObject* WorldContextObject, const class FString& DeviceID);
		bool GetAppearOffline();
		int32_t GetAntiAliasingType();
		float GetAMDFSRSharpness();
		int32_t GetAMDFSRMode();
		float GetAMDFSR2Sharpness();
		int32_t GetAMDFSR2Mode();
		float GetAimSensitivity();
		float GetAimOuterAcceleration();
		float GetAimDeadZone();
		class FString GameServerNameFiltered();
		class FString GameServerName();
		void FSDSetResolutionScale(float NewScaleNormalized);
		bool FSDSetCurrentLanguage(class UObject* WorldContextObject, const class FString& Culture);
		class UFSDGameUserSettings* FSDGameUserSettings();
		bool ConsoleGraphicsModeAvailable(EConsoleGraphicsMode Mode);
		void ClearCustomKeyBindings(bool InGamepadKeys);
		bool CanShowBlood();
		void ApplyGraphicsChanges();
		void ApplyConsoleGraphicsMode();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDHUD
	 * Size -> 0x0028 (FullSize[0x0338] - InheritedSize[0x0310])
	 */
	class AFSDHUD : public AHUD
	{
	public:
		class FScriptMulticastDelegate                             SetObjectivesVisible;                                    // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHUDVisibilityChanged;                                  // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              IsVisibleFlags;                                          // 0x0330(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1BQ7[0x7];                                   // 0x0331(0x0007) MISSED OFFSET (PADDING)

	public:
		bool ToggleHUDVisibility(EHUDVisibilityReason reason);
		void ShowObjectives(bool InVisibility);
		void SetObjectivesVisible__DelegateSignature(bool InVisible, bool animate);
		void SetHUDVisible(bool IsVisible, EHUDVisibilityReason reason);
		void RadarPointAdded(class URadarPointComponent* radarPoint);
		void PlayerSpawned(class APlayerCharacter* Player);
		void OnVisibilityChanged();
		bool IsHUDVisibleFlagSet(EHUDVisibilityReason reason);
		void HudVisibilityChanged__DelegateSignature(bool InHudVisible);
		void HandleSeamlessTravel();
		bool GetHUDVisible();
		class AFSDHUD* GetFSDHUD(class APlayerController* InPlayerController);
		void CameraDroneSpawned(class APlayerCameraDrone* Drone);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpaceRigHUD
	 * Size -> 0x0018 (FullSize[0x0350] - InheritedSize[0x0338])
	 */
	class ASpaceRigHUD : public AFSDHUD
	{
	public:
		TArray<struct FNotificationEntry>                          NotificationQueue;                                       // 0x0338(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       bNotificationQueueActive;                                // 0x0348(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O1ZD[0x7];                                   // 0x0349(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetNotificationQueueActive(bool Inactive);
		void ReceiveNotificationQueueActivated();
		void ReceiveNotificationAdded();
		void QueueWindowClass();
		void QueueNotificationObject(class UObject* InObject);
		bool IsNotificationQueueEmpty();
		class UObject* DequeueNotificationObject();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDMainHUDWidget
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class UFSDMainHUDWidget : public UUserWidget
	{
	public:
		void PushEvent(class UWidget* eventWidget, bool Left);
		void PopEvent(class UWidget* eventWidget, bool Left);
		void OnRadarPointAdded(class URadarPointComponent* Point);
		void AddRadarPoint(class URadarPointComponent* Point);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDInWorldWidget
	 * Size -> 0x0008 (FullSize[0x0268] - InheritedSize[0x0260])
	 */
	class UFSDInWorldWidget : public UUserWidget
	{
	public:
		bool                                                       bHUDVisibile;                                            // 0x0260(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O56I[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (PADDING)

	public:
		void ReceiveHUDVisibilityChanged(bool InHudVisible);
		void CallbackHUDVisibilityChanged(bool InHudVisible);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDJoinSessionCallbackProxy
	 * Size -> 0x0168 (FullSize[0x0198] - InheritedSize[0x0030])
	 */
	class UFSDJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
	{
	public:
		class FScriptMulticastDelegate                             OnSuccess;                                               // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailure;                                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WTOK[0x128];                                 // 0x0050(0x0128) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObject*                                             WorldContextObject;                                      // 0x0178(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y6SB[0x18];                                  // 0x0180(0x0018) MISSED OFFSET (PADDING)

	public:
		class UFSDJoinSessionCallbackProxy* FSDJoinSession(class UObject* WorldContextObject, class APlayerController* PlayerController, const struct FBlueprintSessionResult& SearchResult, const class FString& FSDPassword, bool fromInvite);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDKismetArrayExtensionFunctions
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDKismetArrayExtensionFunctions : public UKismetArrayLibrary
	{
	public:
		void Array_GetRandom(TArray<int32_t> TargetArray, int32_t* Item);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDLobbyHandler
	 * Size -> 0x0138 (FullSize[0x0160] - InheritedSize[0x0028])
	 */
	class UFSDLobbyHandler : public UObject
	{
	public:
		unsigned char                                              UnknownData_XJFP[0x138];                                 // 0x0028(0x0138) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDLookupSessionId
	 * Size -> 0x0158 (FullSize[0x0188] - InheritedSize[0x0030])
	 */
	class UFSDLookupSessionId : public UOnlineBlueprintCallProxyBase
	{
	public:
		class FScriptMulticastDelegate                             OnSuccess;                                               // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnFailure;                                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FLCN[0x138];                                 // 0x0050(0x0138) MISSED OFFSET (PADDING)

	public:
		class UFSDLookupSessionId* FSDLookupSessionId(class UObject* WorldContextObject, const class FString& SessionKey);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDMath
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDMath : public UBlueprintFunctionLibrary
	{
	public:
		struct FVector SphericalToCartesian(float Radius, float azimuth, float elecation);
		bool PercentageCheck(float percentage);
		void GetAzimuthAndElevation(const struct FVector& Direction, const struct FTransform& coordinateSystem, float* azimuth, float* elevation);
		float CubicSegmentLength(const struct FVector& p0, const struct FVector& tangent1, const struct FVector& p1, const struct FVector& tangent2);
		struct FVector CubicInterpBlueprint(const struct FVector& p0, const struct FVector& tangent1, const struct FVector& p1, const struct FVector& tangent2, float alpha);
		void CartesianToSpherical(const struct FVector& Location, float* outAzimuth, float* outElevation, float* OutRadius);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDOnlineSessionClient
	 * Size -> 0x0000 (FullSize[0x01C8] - InheritedSize[0x01C8])
	 */
	class UFSDOnlineSessionClient : public UOnlineSessionClient
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDOnlineSystemUtils
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDOnlineSystemUtils : public UBlueprintFunctionLibrary
	{
	public:
		void TryToResolvePrivilege(class APlayerState* PlayerState, EBlueprintableUserPrivileges Privilege, EBlueprintablePrivilegeResults reason);
		void ShowUpgradeAccountUI();
		void ShowAccountPicker(class UFSDGameInstance* gInstance, int32_t GamePlayerID);
		void OpenURLInOverlay(const class FString& URL, const class FScriptDelegate& OnOverlayClosed);
		void OpenProfileWithEvent(class APlayerState* Requestor, class APlayerState* Requestee, const class FScriptDelegate& OnProfileWindowClosed);
		void OpenProfileByUserId(class APlayerState* Requestor, const class FString& RequesteeUserID);
		void OpenProfile(class APlayerState* Requestor, class APlayerState* Requestee);
		class FText OnlinePlayBlockReasonToString(EBlueprintablePrivilegeResults reason);
		void GetOnlinePlayBlockReasons(TArray<EBlueprintablePrivilegeResults>* reasons);
		void GetIsUpdatePending(const class FScriptDelegate& Delegate);
		void GetIsPrivilegeAllowed(class APlayerState* PlayerState, EBlueprintableUserPrivileges Privilege, const class FScriptDelegate& Delegate);
		class FText GetInviteFeatureBlockReason(class UObject* WorldContextObject, EInviteBlockReason reason);
		EInviteBlockReason CanPlayerInvite(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDPhysicalMaterial
	 * Size -> 0x00F8 (FullSize[0x0178] - InheritedSize[0x0080])
	 */
	class UFSDPhysicalMaterial : public UPhysicalMaterial
	{
	public:
		float                                                      BreakingDecelerationScale;                               // 0x0080(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BreakingFrictionScale;                                   // 0x0084(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxAccelerationScale;                                    // 0x0088(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       RepulsePlayer;                                           // 0x008C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N91V[0x3];                                   // 0x008D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFloatInterval                                      RepulsePlayerVelocity;                                   // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RepulsePlayerRandomDegreeOffset;                         // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9P1N[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           RepulsePlayerSound;                                      // 0x00A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFXSystemAsset*                                      RepulsePlayerParticle;                                   // 0x00A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFXSystemAsset*                                      ImpactParticles;                                         // 0x00B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstance*                                   ImpactMaterialOverride;                                  // 0x00B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ImpactSound;                                             // 0x00C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           MeleeImpactSound;                                        // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseImpactDecalOverrides;                                 // 0x00D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IO2K[0x7];                                   // 0x00D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDecalData>                                  ImpactDecals;                                            // 0x00D8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class USoundCue*                                           FirstPersonDamageIndicatorSound;                         // 0x00E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsWeakPoint;                                             // 0x00F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AllowFrozenBonus;                                        // 0x00F1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSubhealthCollider;                                     // 0x00F2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QBR1[0x1];                                   // 0x00F3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DamageMultiplier;                                        // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      FootstepParticle;                                        // 0x00F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstance*                                   FootstepMaterialOverride;                                // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDecalData                                          LeftFootprintDecal;                                      // 0x0108(0x0020) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDecalData                                          RightFootprintDecal;                                     // 0x0128(0x0020) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class USoundCue*                                           FootstepSound;                                           // 0x0148(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExtraFallVelocity;                                       // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G0EF[0x4];                                   // 0x0154(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFXSystemAsset*                                      FallImpactEffect;                                        // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           FallImpactSound;                                         // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       alwaysPenetrate;                                         // 0x0168(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RS0U[0x7];                                   // 0x0169(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ReactiveTerrain;                                         // 0x0170(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UFXSystemComponent* SpawnImpactParticlesFromHit(class UObject* WorldContextObject, const struct FHitResult& HitResult);
		class UFXSystemComponent* SpawnImpactParticles(class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& Normal);
		class UFSDPhysicalMaterial* GetPhysicalMaterialFromPrimitive(class UPrimitiveComponent* Component);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OptionalBloodPhysicalMaterial
	 * Size -> 0x0008 (FullSize[0x0180] - InheritedSize[0x0178])
	 */
	class UOptionalBloodPhysicalMaterial : public UFSDPhysicalMaterial
	{
	public:
		class UParticleSystem*                                     BloodlessImpactParticles;                                // 0x0178(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDPlayerCameraManager
	 * Size -> 0x0010 (FullSize[0x2820] - InheritedSize[0x2810])
	 */
	class AFSDPlayerCameraManager : public APlayerCameraManager
	{
	public:
		unsigned char                                              UnknownData_LK83[0x10];                                  // 0x2810(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDPlayerControllerBase
	 * Size -> 0x0068 (FullSize[0x05D8] - InheritedSize[0x0570])
	 */
	class AFSDPlayerControllerBase : public APlayerController
	{
	public:
		class UMaterialParameterCollection*                        GlobalMaterialParameterCollection;                       // 0x0570(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerVoiceStatusChanged;                              // 0x0578(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3038[0x3];                                   // 0x0588(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bStartWithBlackScreen;                                   // 0x058B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BXVS[0x14];                                  // 0x058C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWindowManager*                                      WindowManager;                                           // 0x05A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPlatformComponent>                          PlatformComponentClasses;                                // 0x05A8(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6NUQ[0x20];                                  // 0x05B8(0x0020) MISSED OFFSET (PADDING)

	public:
		void ToggleAnalogCursor(bool Visible);
		void StopAspectRatioAxisConstraint();
		void StartAspectRatioAxisConstraint();
		void ShowEscapeMenu();
		void SetHUDVisible(bool IsVisible, EHUDVisibilityReason reason);
		void Server_Cheat_SwitchCharacter(class UPlayerCharacterID* NewCharacter);
		void RecievePreClientTravel();
		void RecieveHUDVisibilityChanged(bool IsVisible);
		void OpenStandaloneMinersManualPage(EMinersManualSinglePage page);
		void OpenStandaloneMinersManual(EMinersManualSection Section, const struct FGuid& ID);
		bool IsPlayerBlocked(const class FString& UserId);
		bool IsHUDVisibleFlagSet(EHUDVisibilityReason reason);
		class UEscapeMenuWindow* GetEscapeMenu();
		void Client_WasKicked(EDisconnectReason reason);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDPlayerController
	 * Size -> 0x0100 (FullSize[0x06D8] - InheritedSize[0x05D8])
	 */
	class AFSDPlayerController : public AFSDPlayerControllerBase
	{
	public:
		class FScriptMulticastDelegate                             OnEndLevelReceived;                                      // 0x05D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReceiveVoiceChanged;                                   // 0x05E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTransmitVoiceChanged;                                  // 0x05F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLevelFinished;                                         // 0x0608(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowTutorialHint;                                      // 0x0618(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowTutorialWidget;                                    // 0x0628(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeTutorialHintDuration;                            // 0x0638(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHideCurrentTutorialHint;                               // 0x0648(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerCharacterPossesed;                               // 0x0658(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K4CC[0x10];                                  // 0x0668(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnChatOpened;                                            // 0x0678(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class UPerkUsageComponent*                                 PerkUsageComponent;                                      // 0x0688(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTerrainLatejoinComponent*                           LateJoinComponent;                                       // 0x0690(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsOnSpaceRig;                                            // 0x0698(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bReceivedEndLevel;                                       // 0x0699(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BY8E[0x6];                                   // 0x069A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USoundMix*>                                   InitialSoundMixes;                                       // 0x06A0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       ServerTravelDone;                                        // 0x06B0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R0IB[0x7];                                   // 0x06B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFSDWidgetEffectsComponent*                          WidgetEffects;                                           // 0x06B8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESpacerigStartType                                         SpacerigSpawnType;                                       // 0x06C0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NW1M[0x13];                                  // 0x06C1(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDetectGravityChanges;                                   // 0x06D4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HPU2[0x3];                                   // 0x06D5(0x0003) MISSED OFFSET (PADDING)

	public:
		void ToggleVoiceOn(bool Enabled);
		void SpawnHUDLocal(class UClass* hudClass);
		void SpawnHUDAsync();
		void ShowTutorialWidget(class UClass* TutorialWidget, bool ignoreQueue);
		void ShowTutorialHint(const class FText& Text, const class FText& Title, const class FText& TaskText, class UTexture2D* Image, float Duration);
		void SetPlayerStart(class AActor* Start);
		void SetAchievementProgressFromServer(class UFSDAchievement* AchievementToSet, float Progress);
		void ServerSetUserHoldToRun(bool Value);
		void Server_TravelDone();
		void Server_TakeDamageFrom(class UDamageComponent* Damage, const struct FVector& Location);
		void Server_SetLateJoinDone();
		void Server_SetGenerationStatus(const class FString& Status, float Fraction);
		void Server_SetGenerationFraction(float Fraction);
		void Server_SetGenerationDone();
		void Server_SetExtraEndScreenTime(float extraTime);
		void Server_SetControllerReady();
		void Server_ResetHUD();
		void Server_Relay_SetArmorIndexDestroyed(class USimpleArmorDamageComponent* ArmorComponent, int32_t Index, EArmorDamageType DamageType);
		void Server_NewMessage(const class FString& Sender, const class FString& Text, EChatSenderType SenderType);
		void Server_DrawProjectileDebugPath(bool bDraw);
		void SendLevelUpStatistics(int32_t currentRank);
		void RecievePawnDestroyed();
		void RecieveOnControllerReady();
		void ReceivingVoiceSignature__DelegateSignature(bool isRecieving);
		void ReceiveEndLevel();
		void ReceivedEndLevelDelegate__DelegateSignature();
		void Receive_EndLevel_WaitForData(bool areObjectivesCompleted, int32_t numberOfPlayersInPod);
		void ReadyToContinueFromEndScreen();
		void OnShowTutorialHint__DelegateSignature(const class FText& Text, const class FText& Title, const class FText& TaskText, class UTexture2D* Image, float Duration);
		void OnSaveGamePlayerProgressChanged(int32_t Rank, int32_t Stars);
		void OnSaveGameCreditsChanged(int32_t Credits);
		void OnSaveGameCharacterProgressChanged(class UClass* CharacterClass, int32_t Level, float Progress);
		void OnPlayerStateSelectedCharacterChanged(class UClass* CharacterClass);
		void OnPlayerSpawnBegin(int32_t PlayerId);
		void OnHideTutorialHint__DelegateSignature(bool wasWatched);
		void OnGenerationDone();
		void OnChangeTutorialWidget__DelegateSignature(class UClass* TutorialWidget, bool bIgnoreQueue);
		void OnChangeTutorialHintDuration__DelegateSignature(float NewDuration);
		void LevelFinishedSignature__DelegateSignature();
		void HideTutorialHint(bool watched);
		bool GetUseToggleTerrainScanner();
		bool GetUseToggleLaserpointer();
		bool GetUseHoldToRun();
		class AActor* GetPlayerStart();
		class AFSDPlayerState* GetFSDPlayerState();
		void FlushRender();
		class AActor* FindPlayerStart(class UPlayerCharacterID* characterID);
		void EndLevel();
		void Client_PlayCue(class USoundCue* SoundCue);
		void Client_EndLevel_WaitForData(bool areObjectivesCompleted, int32_t numberOfPlayersInPod);
		void Client_CollectVanityItem(class UTreasureRewarder* rewarder, class UVanityItem* targetItem, class UPlayerCharacterID* targetCharacter);
		void Client_CollectTreasureVictoryPose(class UTreasureRewarder* rewarder, class UVictoryPose* targetPose, class UPlayerCharacterID* targetCharacter);
		void Client_CollectTreasureSkin(class UTreasureRewarder* rewarder, class UItemSkin* targetSkin, class UItemID* targetItem);
		void Client_CollectPickaxePart(class UTreasureRewarder* rewarder, class UPickaxePart* targetPart);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDPlayerStart
	 * Size -> 0x0010 (FullSize[0x0230] - InheritedSize[0x0220])
	 */
	class AFSDPlayerStart : public AActor
	{
	public:
		class UPlayerCharacterID*                                  PrefferedClassID;                                        // 0x0220(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFSDPlayerController*                                usedBy;                                                  // 0x0228(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpacerigStart
	 * Size -> 0x0030 (FullSize[0x0280] - InheritedSize[0x0250])
	 */
	class ASpacerigStart : public APlayerStart
	{
	public:
		class FScriptMulticastDelegate                             OnPlayerSpawn;                                           // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerLeave;                                           // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class AFSDPlayerController*                                usedBy;                                                  // 0x0270(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESpacerigStartType                                         StartType;                                               // 0x0278(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IL3O[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDPlayerState
	 * Size -> 0x0188 (FullSize[0x04A8] - InheritedSize[0x0320])
	 */
	class AFSDPlayerState : public APlayerState
	{
	public:
		class FScriptMulticastDelegate                             OnPlayerCharacterSpawned;                                // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerTalkingChanged;                                  // 0x0330(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSelectedCharacterChanged;                              // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      FractionLevelGenerated;                                  // 0x0350(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GTX7[0x4];                                   // 0x0354(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LevelGenerationState;                                    // 0x0358(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSupplyStatusChangedEvent;                              // 0x0368(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnemyKilledEvent;                                      // 0x0378(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UVanityItem*>                                 LatestEquipedVanity;                                     // 0x0388(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		class UClass*                                              SelectedCharacter;                                       // 0x0398(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsServer;                                               // 0x03A0(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShouldCopyProperties;                                    // 0x03A1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              gameOwnerStatus;                                         // 0x03A2(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsOnSpaceRig;                                            // 0x03A3(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WRHI[0x4];                                   // 0x03A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPlayerStatsComponent*                               PlayerStatsComponent;                                    // 0x03A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerRejoinState*                                  RejoinState;                                             // 0x03B0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USaveGameStateComponent*                             SaveGameStateComponent;                                  // 0x03B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class APlayerCharacter*                                    PlayerCharacter;                                         // 0x03C0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInMission;                                             // 0x03C8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsTalking;                                               // 0x03C9(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasGeneratedLevel;                                       // 0x03CA(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasSelectedCharacter;                                    // 0x03CB(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PlayerSortId;                                            // 0x03CC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnPlayerNameChanged;                                     // 0x03D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnFractionLevelGenerated;                                // 0x03E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnLevelGenerationStateChanged;                           // 0x03F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UPlayerResourceComponent*                            PlayerResources;                                         // 0x0400(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              SupplyAmmoStatus;                                        // 0x0408(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              SupplyHealthStatus;                                      // 0x0409(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CUJW[0x6];                                   // 0x040A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRewardTexts                                        RewardTexts;                                             // 0x0410(0x0090) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W0SK[0x8];                                   // 0x04A0(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetSelectedCharacterID(class UPlayerCharacterID* characterID);
		void SetSelectedCharacter(class UClass* NewCharacter);
		void SetHasGeneratedLevel(bool hasgenerated);
		void SetCanOnlySpectate(bool canOnlySpectate);
		void ServerSetSelectedCharacter(class UClass* NewCharacter);
		void Server_SetSupplyStatus(unsigned char StatusHealth, unsigned char StatusAmmo);
		void Server_SetGameOwnerStatus(int32_t gameOwnerStatus);
		void OnRep_SupplyHealthStatus();
		void OnRep_SupplyAmmoStatus();
		void OnRep_SelectedCharacter();
		void OnRep_PlayerCharacter();
		void OnRep_LevelGenerationState();
		void OnRep_GameOwnerStatus();
		void OnRep_FractionLevelGenerated();
		void OnLateJoinFinished();
		bool HasNormalOwnerStatus();
		int32_t GetXPRewardsSum();
		TArray<struct FXPReward> GetXPRewards();
		TArray<struct FXPReward> GetXPRewardDeepDive(int32_t StagesCompleted);
		int32_t GetUIPing();
		float GetSupplyHealthStatus();
		float GetSupplyAmmoStatus();
		int32_t GetSelectedCharacterLevel();
		class UPlayerCharacterID* GetSelectedCharacterID();
		class UClass* GetSelectedCharacter();
		struct FCharacterProgress GetSelectCharacterProgress();
		class UPlayerResourceComponent* GetPlayerResourceComponent();
		int32_t GetPlayerRank();
		class AFSDPlayerController* GetPlayerController();
		bool GetHasGeneratedLevel();
		bool GetGameOwnerStatus(EGameOwnerStatus Status);
		TArray<struct FCreditsReward> GetDeepDiveCreditsReward(int32_t StagesCompleted, int32_t goldCollected);
		EChatSenderType GetChatSenderType();
		struct FCharacterProgress GetCharacterProgress(class UPlayerCharacterID* characterID);
		int32_t GetCharacterLevel(class UPlayerCharacterID* characterID);
		void CharacterSelected();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDPostProcessingActor
	 * Size -> 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
	 */
	class AFSDPostProcessingActor : public AActor
	{
	public:
		EPostProcessingType                                        PostProcessingType;                                      // 0x0220(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L5DZ[0x7];                                   // 0x0221(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPostProcessComponent*                               PostProcessComponent;                                    // 0x0228(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FWeightedBlendables                                 InitialBlendables;                                       // 0x0230(0x0010) Transient, Protected, NativeAccessSpecifierProtected

	public:
		void UnapplyPostProcessingBlendablesByType(class UObject* WorldContext, EPostProcessingType Type);
		void UnapplyPostProcessingBlendablesByID(class UObject* WorldContext, const class FName& InID);
		void UnapplyPostProcessingBlendable(class UObject* WorldContext, EPostProcessingType Type);
		void UnapplyAllPostProcessingBlendables(class UObject* WorldContext);
		void SetupHDRColorGamma();
		void SetPostProcessManager(class APostProcessingManager* InManager);
		class UMaterialInstanceDynamic* GetPostProcessingMaterialInstance(class UObject* WorldContext, class UMaterialInterface* Material);
		class UMaterialInstanceDynamic* ApplyPostProcessingMaterial(class UObject* WorldContext, EPostProcessingType Type, class UMaterialInterface* Material, float InWeight, const class FName& InID);
		void ApplyPostProcessingBlendable(class UObject* WorldContext, EPostProcessingType Type, float InWeight, const class FName& InID);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDProjectileMovementComponent
	 * Size -> 0x0070 (FullSize[0x0240] - InheritedSize[0x01D0])
	 */
	class UFSDProjectileMovementComponent : public UProjectileMovementComponent
	{
	public:
		class FScriptMulticastDelegate                             OnProjectilePenetrate;                                   // 0x01D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProjectileOutOfPropulsion;                             // 0x01E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bShouldPenetrate : 1;                                    // 0x01F0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1QTI[0x7];                                   // 0x01F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      IgnoreCollisionAgainst;                                  // 0x01F8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		bool                                                       InvertIgnoreCollisionAgainst;                            // 0x0208(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D35G[0x7];                                   // 0x0209(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         AccelerationCurve;                                       // 0x0210(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AccelerationMultiplier;                                  // 0x0218(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxPropulsionTime;                                       // 0x021C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCancelPenetration : 1;                                  // 0x0220(0x0001) BIT_FIELD BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FB4F[0x1F];                                  // 0x0221(0x001F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDRateLimiter
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UFSDRateLimiter : public UObject
	{
	public:
		unsigned char                                              UnknownData_9PXQ[0x88];                                  // 0x0028(0x0088) MISSED OFFSET (PADDING)

	public:
		bool RateLimted();
		void K2_Enqueue(const class FScriptDelegate& OnRateLimitOpen, const class FString& ID);
		bool IsQueueEmpty();
		bool IsQueued(const class FString& ID);
		void Init(int32_t rateLimit, float rateTimeLimit, bool useBurstLimit, int32_t burstLimit, float burstTimeLimit);
		void IncreaseLimitCounter();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GDKRateLimiter
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UGDKRateLimiter : public UGameInstanceSubsystem
	{
	public:
		class UFSDRateLimiter*                                     Handler;                                                 // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDRefinery
	 * Size -> 0x0108 (FullSize[0x0398] - InheritedSize[0x0290])
	 */
	class AFSDRefinery : public ADroppableOutpost
	{
	public:
		class FScriptMulticastDelegate                             OnRefineryStateChanged;                                  // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRefineryProgressChanged;                               // 0x02A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPipelineRegistered;                                    // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPipelineSegmentPlaced;                                 // 0x02C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnExtractorPodSpawned;                                   // 0x02D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USingleUsableComponent*                              UsableStartRefining;                                     // 0x02E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USingleUsableComponent*                              UsableLaunchRocket;                                      // 0x02E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<float, class UDialogDataAsset*>                       ProgressMissionShouts;                                   // 0x02F0(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    LaunchRocketButtonPressedShout;                          // 0x0340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BuilderItem;                                             // 0x0348(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RefiningTotalDuration;                                   // 0x0350(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatRange                                         PipelineBreakCoolDown;                                   // 0x0354(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PipelineBreakTimePenaltyPerAdditionalPlayers;            // 0x0364(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FInt32Range                                         MaxSegmentBreakDowns;                                    // 0x0368(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SegmentBreakDownPenaltyPerAdditionalPlayers;             // 0x0378(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P1MT[0x8];                                   // 0x037C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ERefineryState                                             RefineryState;                                           // 0x0384(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ERefineryState                                             PreviousRefineryState;                                   // 0x0385(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              RefiningProgressReplicated;                              // 0x0386(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E87V[0x1];                                   // 0x0387(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class APipelineStart*>                              PipelineStarts;                                          // 0x0388(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void SetRefineryState(ERefineryState InState);
		void RefineryStateDelegate__DelegateSignature(ERefineryState InRefineryState);
		void RefineryProgressDelegate__DelegateSignature(float InProgress01);
		void RefineryPipelineSegmentDelegate__DelegateSignature(class APipelineSegment* InSegment);
		void RefineryPipelineDelegate__DelegateSignature(class APipelineStart* InPipelineStart);
		void RefineryExtractPodDelegate__DelegateSignature(class APipelineExtractorPod* InExtractorPod);
		void ReceiveRefineryStateChanged(ERefineryState InState);
		void ReceivePipelineStateChanged(class APipelineStart* InPipeline, EPipelineBuildState InState);
		void ReceivePipelineStartReady(class APipelineStart* InPipelineStart);
		void OnStartRefiningPressed(class APlayerCharacter* InCharacter, EInputKeys Key);
		void OnRep_RefineryState(ERefineryState InOldState);
		void OnPlayerCharacterRegistered(class APlayerCharacter* InCharacter);
		void OnPipelineStateChanged(class APipelineStart* InPipelineStart, EPipelineBuildState InPipelineState);
		void OnObjectivesChanged();
		void OnLaunchRocketPressed(class APlayerCharacter* InCharacter, EInputKeys Key);
		float GetRefiningProgress();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDRefineryAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UFSDRefineryAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_0RPT[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDSaveGame
	 * Size -> 0x0C10 (FullSize[0x0C38] - InheritedSize[0x0028])
	 */
	class UFSDSaveGame : public USaveGame
	{
	public:
		class FScriptMulticastDelegate                             OnCreditsChanged;                                        // 0x0028(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterSaveChanged;                                  // 0x0038(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterCanRetire;                                    // 0x0048(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterRetired;                                      // 0x0058(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerProgressChanged;                                 // 0x0068(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTutorialsReset;                                        // 0x0078(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPersonalMetricsChanged;                                // 0x0088(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAnonymousMetricsChanged;                               // 0x0098(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemUnlocked;                                          // 0x00A8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemPurchased;                                         // 0x00B8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemUINotificationChange;                              // 0x00C8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    VersionNumber;                                           // 0x00D8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMilestoneResetShown;                                    // 0x00DC(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bYearTwoGiftClaimed;                                     // 0x00DD(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QLYD[0x2];                                   // 0x00DE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnForgingXPChanged;                                      // 0x00E0(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnResourceAmountChanged;                                 // 0x00F0(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkinUnlocked;                                          // 0x0100(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OEZA[0x10];                                  // 0x0110(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           SaveSlotTimeStamp;                                       // 0x0120(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPerkPointsChanged;                                     // 0x0128(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FMissionStatSave                                    MissionStatsSave;                                        // 0x0138(0x0018) NativeAccessSpecifierPublic
		struct FMilestoneSave                                      Milestones;                                              // 0x0150(0x0010) NativeAccessSpecifierPublic
		struct FPerkClaimsSave                                     OwnedPerks;                                              // 0x0160(0x0018) NativeAccessSpecifierPublic
		struct FCharacterPerksSave                                 EquippedPerks;                                           // 0x0178(0x0010) NativeAccessSpecifierPublic
		struct FAchievementSave                                    AchievementSave;                                         // 0x0188(0x0020) NativeAccessSpecifierPublic
		TArray<struct FCharacterPerksSave>                         EquippedPerkLoadouts;                                    // 0x01A8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		struct FCharacterPerksSave                                 RandomEquippedPerkLoadout;                               // 0x01B8(0x0010) NativeAccessSpecifierPublic
		struct FVanityMasterySave                                  VanityMasterySave;                                       // 0x01C8(0x0010) NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVanityMasteryChanged;                                  // 0x01D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FJettyBootsSave                                     JettyBootsSave;                                          // 0x01E8(0x0028) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZBBC[0x8];                                   // 0x0210(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSchematicSave                                      SchematicSave;                                           // 0x0218(0x0040) NativeAccessSpecifierPublic
		struct FPromotionRewardsSave                               PromotionRewardsSave;                                    // 0x0258(0x0058) NativeAccessSpecifierPublic
		struct FFSDEventRewardsSave                                FSDEventRewardsSave;                                     // 0x02B0(0x00A0) NativeAccessSpecifierPublic
		struct FSeasonSave                                         SeasonSave;                                              // 0x0350(0x0050) NativeAccessSpecifierPublic
		struct FGameDLCSave                                        GameDLCSave;                                             // 0x03A0(0x0050) NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponMaintenanceChanged;                              // 0x03F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FWeaponMaintenance                                  WeaponMaintenance;                                       // 0x0400(0x0018) NativeAccessSpecifierPublic
		int32_t                                                    SaveCreatedInPatch;                                      // 0x0418(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SFR8[0x4];                                   // 0x041C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              AnonymousID;                                             // 0x0420(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PerkPoints;                                              // 0x0430(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasRecievedDiscordReward;                                // 0x0434(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EFSDFaction                                                Faction;                                                 // 0x0435(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WUV0[0x2];                                   // 0x0436(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGuid>                                       UnLockedMissions;                                        // 0x0438(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TMap<struct FGuid, struct FUnLockedMissionParameters>      UnLockedMissionParameters;                               // 0x0448(0x0050) Protected, NativeAccessSpecifierProtected
		TArray<struct FGuid>                                       UnLockedPlanetZones;                                     // 0x0498(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FCampaignSave                                       CampaignSave;                                            // 0x04A8(0x0050) Protected, NativeAccessSpecifierProtected
		struct FDeepDiveSave                                       DeepDiveSave;                                            // 0x04F8(0x0070) Protected, NativeAccessSpecifierProtected
		TArray<struct FCharacterSave>                              CharacterSaves;                                          // 0x0568(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    Credits;                                                 // 0x0578(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LastBoughtDailyDealSeed;                                 // 0x057C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FForgingSave                                        Forging;                                                 // 0x0580(0x0018) Protected, NativeAccessSpecifierProtected
		struct FDrinkSave                                          Drinks;                                                  // 0x0598(0x0058) Protected, NativeAccessSpecifierProtected
		TArray<struct FUpgradeLoadout>                             ItemUpgradeLoadouts;                                     // 0x05F0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bIgnoreRandomLoadout;                                    // 0x0600(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YVT6[0x7];                                   // 0x0601(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGuid>                                       PurchasedItemUpgrades;                                   // 0x0608(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuid>                                       UnlockedItems;                                           // 0x0618(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuid>                                       OwnedItems;                                              // 0x0628(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TMap<struct FGuid, int32_t>                                EnemiesKilled;                                           // 0x0638(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<struct FGuid, struct FItemNotificationInfo>           ItemsWithNotification;                                   // 0x0688(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<struct FGuid, struct FSkinList>                       UnlockedItemSkins;                                       // 0x06D8(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnlockedPickaxeParts[0x50];                              // 0x0728(0x0050) UNKNOWN PROPERTY: SetProperty
		TArray<class UVanityItem*>                                 UnLockedVanityItems;                                     // 0x0778(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuid>                                       UnLockedVanityItemIDs;                                   // 0x0788(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuid>                                       HiddenUICategories;                                      // 0x0798(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    LastCollectedCommunityRewardPeriodID;                    // 0x07A8(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YFVS[0x4];                                   // 0x07AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              MinersManualKnownObjects[0x50];                          // 0x07B0(0x0050) UNKNOWN PROPERTY: SetProperty
		struct FEventRewardSave                                    EventRewardSave;                                         // 0x0800(0x0050) Protected, NativeAccessSpecifierProtected
		struct FItemUINotifications                                ItemUINotifications;                                     // 0x0850(0x0068) Protected, NativeAccessSpecifierProtected
		class FString                                              RejoinSessionId;                                         // 0x08B8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       FirstRejoinAttempt;                                      // 0x08C8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HaveItemUpgradesBeenFixed;                               // 0x08C9(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasOpenedDeepDiveTerminal;                              // 0x08CA(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KNU1[0x5];                                   // 0x08CB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FResourcesSave                                      Resources;                                               // 0x08D0(0x00A0) Protected, NativeAccessSpecifierProtected
		bool                                                       FirstSession;                                            // 0x0970(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7GYP[0x7];                                   // 0x0971(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FWatchedTutorial>                            WatchedTutorials;                                        // 0x0978(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FConsoleOptionsInSaveGame                           ConsoleOptions;                                          // 0x0988(0x0148) Protected, NativeAccessSpecifierProtected
		struct FGDKWinOptionsInSaveGame                            WinGDKOptions;                                           // 0x0AD0(0x0070) Protected, NativeAccessSpecifierProtected
		struct FOptionsInSaveGame                                  WindowsOptions;                                          // 0x0B40(0x0008) NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       HasCompletedTutorial;                                    // 0x0B48(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasPlayedTutorial;                                       // 0x0B49(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowHowToRestartTutorialPrompt;                          // 0x0B4A(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasPlayedIntroMessage;                                   // 0x0B4B(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasSentSteamInfo;                                        // 0x0B4C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasClaimedSteamGroupLoot;                                // 0x0B4D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsBoscoAllowed;                                          // 0x0B4E(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasJoinedXboxClub;                                       // 0x0B4F(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasSeenAnalyticsPopUp;                                   // 0x0B50(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AllowAnalyticsTracking;                                  // 0x0B51(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AllowPersonalAnalyticsTracking;                          // 0x0B52(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsModded;                                                // 0x0B53(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Index;                                                   // 0x0B54(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              Name;                                                    // 0x0B58(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TotalPlayTimeSeconds;                                    // 0x0B68(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3I3L[0x4];                                   // 0x0B6C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FGuid, int32_t>                                SelectedLoadout;                                         // 0x0B70(0x0050) Protected, NativeAccessSpecifierProtected
		uint32_t                                                   userIdx;                                                 // 0x0BC0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   CurrLoadoutIdx;                                          // 0x0BC4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   SaveToDiskCounter;                                       // 0x0BC8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   BackupSaveIndex;                                         // 0x0BCC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   ExternalBackupSaveIndex;                                 // 0x0BD0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NumberOfGamesPlayed;                                     // 0x0BD4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerCharacterID*                                  LastPlayedCharacter;                                     // 0x0BD8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowInfoScreen;                                          // 0x0BE0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VAU2[0x7];                                   // 0x0BE1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LastShownVersion;                                        // 0x0BE8(0x0010) BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSonyInputSettings                                  SonyInputSettings;                                       // 0x0BF8(0x0030) NoDestructor, Protected, NativeAccessSpecifierProtected
		class UFSDGameInstance*                                    FSDGameInstance;                                         // 0x0C28(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WN44[0x8];                                   // 0x0C30(0x0008) MISSED OFFSET (PADDING)

	public:
		void TutorialsResetDelegate__DelegateSignature();
		bool TrySellResource(class UResourceData* Resource, int32_t Amount, int32_t* Price);
		bool TryDeductResources(TMap<class UResourceData*, int32_t> Resources);
		bool TryDeductCredits(int32_t Amount);
		bool TryBuyResource(class UResourceData* Resource, int32_t Amount, int32_t* Price);
		void SkinSignature__DelegateSignature(class UItemSkin* Skin, class UItemID* ItemID);
		bool ShouldDisplayFirstSchematicMessage();
		void SetSonyInputSettingMotionXMapping(ESonyControllerMotionMapping NewValue);
		void SetSonyInputSettingLightMode(ESonyControllerLightMode NewValue);
		void SetSonyInputSettingFloat(class UObject* WorldContext, ESonyInputSettingsFloats Setting, float NewValue);
		void SetSonyInputSettingBool(ESonyInputSettingsBools Setting, bool NewValue);
		bool SetPersonalAnalytics(bool State);
		void SetIsModded(bool modded);
		void SetIndexAndName(int32_t Index, const class FString& Name);
		void SetIgnoreRandomLoadout(bool inIgnoreRandomLoadout);
		void SetHasSentSteamInfo();
		void SetHasJoinedXboxClub();
		void SetHasClaimSteamGroupLoot();
		void SetFaction(EFSDFaction newFaction, bool Reasign);
		void SetEquippedItemID(EItemCategory Category, class UPlayerCharacterID* PlayerId, class UItemID* Item);
		void SetEquippedItem(EItemCategory Category, class UPlayerCharacterID* PlayerId, class UClass* Item);
		void SetDiscordReward(bool State);
		void SetCharacterLoadout(class UPlayerCharacterID* characterID, int32_t loadoutNumber);
		void SetBoscoAllowed(bool aIsBoscoAllowed);
		bool SetAnonymousAnalytics(bool State);
		void SaveToDisk();
		bool SaveSlotToDisk(class UFSDSaveGame* SaveSlot, const class FString& slotName, int32_t userIdx);
		void RetirementSignature__DelegateSignature(class UClass* CharacterClass, int32_t RetirementCount);
		int32_t RetireCharacter(class UPlayerCharacterID* characterID);
		void ResourceAmountChangedDelegate__DelegateSignature(class UResourceData* Resource, float currentAmount);
		void ResetTutorials();
		void ResetSonyTouchSettings();
		void ResetSonyMotionSettings();
		void ResetSonyDualSenseSettings();
		void ResetRejoinSessionId();
		void RejoinAttempted();
		void RefreshLoadoutFromCharacter(class UPlayerCharacterID* characterID);
		bool RecievedDiscordReward();
		class FString PromotedClassesString();
		void PlayerProgressChangedSignature__DelegateSignature(int32_t Rank, int32_t Stars);
		void PersonalMatricsChangedSignature__DelegateSignature(bool AllowPersonalMetrics);
		void PerkPointsChangedSignature__DelegateSignature(int32_t PerkPoints, int32_t Change);
		void MarkRetirementRewardScreenSeen(class UPlayerCharacterID* characterID);
		void MarkFirstSchematicMessageSeen();
		void LevelUpCharacter(class UObject* WorldContext, class UPlayerCharacterID* characterID);
		void ItemUnlockedDelegate__DelegateSignature();
		void ItemUINotificationDelegate__DelegateSignature();
		bool IsObsolete();
		bool IsInMinersManual(const struct FGuid& ObjectID);
		bool IsFirstRejoinAttempt();
		bool HasSeenRetirementRewardScreen();
		bool HasCredits(int32_t Amount);
		bool HasCharacterRetired(class UPlayerCharacterID* characterID);
		bool HasCharacterCompletedRetirementCampaign(class UPlayerCharacterID* characterID);
		bool HasBackupWithMoreProgress(class UFSDGameInstance* GameInstance);
		bool HasAnyCharacterRetired();
		int32_t GetTotalGamesPlayed();
		int32_t GetTotalCharacterXP();
		ESonyControllerMotionMapping GetSonyInputSettingMotionXMapping();
		ESonyControllerLightMode GetSonyInputSettingLightMode();
		float GetSonyInputSettingFloat(ESonyInputSettingsFloats Setting);
		bool GetSonyInputSettingBool(ESonyInputSettingsBools Setting);
		struct FDateTime GetSlotTimeStamp();
		class FString GetSlotLoadedFrom();
		int32_t GetSelectedLoadoutIndex(class UPlayerCharacterID* characterID);
		class FString GetSaveSlotName(int32_t userIdx);
		int32_t GetResourceSellingPrice(class UResourceData* Resource, int32_t Amount);
		int32_t GetResourceBuyingPrice(class UResourceData* Resource, int32_t Amount);
		float GetResourceAmount(class UResourceData* Resource);
		int32_t GetRequiredXPForLevel(int32_t Level);
		class FString GetRejoinSessionId();
		int32_t GetPurchasableItemCount();
		int32_t GetPlayerRetirementRank();
		int32_t GetPlayerRank();
		int32_t GetPerkPoints();
		class FString GetName();
		int32_t GetMaxSaveSlots();
		int32_t GetMainSaves(class UFSDGameInstance* GameInstance, TArray<class UFSDSaveGame*>* outMainSaves);
		bool GetIsModded();
		int32_t GetIndex();
		bool GetHasSentSteamInfo();
		bool GetHasClaimedSteamGroupLoot();
		EFSDFaction GetFaction();
		class UItemID* GetEquippedItemID(EItemCategory Category, class UPlayerCharacterID* PlayerId);
		class UClass* GetEquippedItem(EItemCategory Category, class UPlayerCharacterID* PlayerId);
		int32_t GetCredits();
		int32_t GetClassXP(class UPlayerCharacterID* characterID);
		int32_t GetClassLevel(class UPlayerCharacterID* characterID);
		int32_t GetCharacterRetirementCount(const struct FGuid& PlayerId);
		bool GetBoscoAllowed();
		int32_t GetAvailableUserSlotIndex(class UFSDGameInstance* GameInstance);
		TArray<class UFSDSaveGame*> GetAllSavesFromDisk(class UFSDGameInstance* GameInstance);
		void ForgingXPDelegate__DelegateSignature(float XP);
		void ForceSetIsModded(bool modded);
		void FixNamingOfMainSave(class UFSDSaveGame* mainsave);
		bool DeleteFromDisk(class UFSDGameInstance* GameInstance, const class FString& slotName, int32_t userIdx);
		bool DeductPerkPoints(int32_t Amount);
		void CreditsChangedSignature__DelegateSignature(int32_t Credits);
		void CraftingMasteryChanged__DelegateSignature(const struct FVanityMasteryResult& Result);
		void CheckPromotionAchievementProgress(class UObject* WorldContext, bool IsRetroactive);
		void CharacterSignature__DelegateSignature(class UClass* CharacterClass);
		void CharacterProgressChangedSignature__DelegateSignature(class UClass* CharacterClass, int32_t Level, float Progress);
		bool CanAfford(TMap<class UResourceData*, int32_t> Resources);
		void AnonymousMatricsChangedSignature__DelegateSignature(bool AllowAnonymousMetrics);
		void AddPerkPoints(int32_t Amount);
		void AddGamePlayed();
		int32_t AddCredits(int32_t Amount);
		int32_t AddClassXP(class UObject* WorldContext, class UPlayerCharacterID* characterID, int32_t XP);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OptionalUICategory
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UOptionalUICategory : public UDataAsset
	{
	public:
		class FScriptMulticastDelegate                             OnVisibilityChanged;                                     // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FGuid                                               Guid;                                                    // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                Description;                                             // 0x0050(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		void VisibilityChanged__DelegateSignature(class UOptionalUICategory* Category, bool IsVisible);
		void SetVisible(class UObject* WorldContext, bool IsCategoryVisible);
		bool IsVisible(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDSendToURL
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UFSDSendToURL : public UObject
	{
	public:
		unsigned char                                              UnknownData_30RY[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDSessionHandler
	 * Size -> 0x0148 (FullSize[0x0170] - InheritedSize[0x0028])
	 */
	class UFSDSessionHandler : public UObject
	{
	public:
		unsigned char                                              UnknownData_FA9N[0x148];                                 // 0x0028(0x0148) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDSessionUpdater
	 * Size -> 0x0168 (FullSize[0x0190] - InheritedSize[0x0028])
	 */
	class UFSDSessionUpdater : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnNewFSDSessionID;                                       // 0x0028(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_URL3[0x148];                                 // 0x0038(0x0148) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFSDSessionHandler*                                  SessionHandler;                                          // 0x0180(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFSDLobbyHandler*                                    LobbyHandler;                                            // 0x0188(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDSkeletalMeshComponent
	 * Size -> 0x0000 (FullSize[0x0ED0] - InheritedSize[0x0ED0])
	 */
	class UFSDSkeletalMeshComponent : public USkeletalMeshComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDSplineLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDSplineLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool SplineComponentSphereTrace(class USplineComponent* SplineComponent, float Radius, ETraceTypeQuery TraceType, float StepSize, TArray<class AActor*> IgnoreActors, struct FHitResult* OutHitResult, const struct FVector& Offset);
		void SetStartAndEndTangentsCurve2D(struct FInterpCurveVector2D* Curve, const struct FVector2D& StartTangent, const struct FVector2D& EndTangent);
		TArray<struct FTransform> GetSplineComponentTransforms(class USplineComponent* SplineComponent, float StepSize, ESplineCoordinateSpace Space);
		void GetLocationAndTangentsAtSplinePoint(class USplineComponent* Spline, int32_t PointIndex, struct FVector* Location, struct FVector* ArriveTangent, struct FVector* LeaveTangent, ESplineCoordinateSpace CoordinateSpace);
		void EvalCurveScaled2D(const struct FInterpCurveVector2D& Curve, float Key, const struct FVector2D& ScaleBy, struct FVector2D* OutPosition, struct FVector2D* OutTangent);
		void EvalCurve2D(const struct FInterpCurveVector2D& Curve, float Key, struct FVector2D* OutPosition, struct FVector2D* OutTangent);
		void DrawCurveScaled2D(struct FPaintContext* Context, const struct FInterpCurveVector2D& Curve, const struct FVector2D& ScaleBy, const struct FCurve2DAppearance& Appearance, float Opacity);
		void DrawCurve2D(struct FPaintContext* Context, const struct FInterpCurveVector2D& Curve, const struct FCurve2DAppearance& Appearance, float Opacity);
		void DrawBezierScaled2D(struct FPaintContext* Context, const struct FVector2D& InStartPos, const struct FVector2D& InStartTangent, const struct FVector2D& InEndPos, const struct FVector2D& InEndTangent, const struct FCurve2DAppearance& InAppearance, const struct FVector2D& ScaleBy, float Opacity, bool InClampTangents);
		void DrawBezier2D(struct FPaintContext* Context, const struct FVector2D& InStartPos, const struct FVector2D& InStartTangent, const struct FVector2D& InEndPos, const struct FVector2D& InEndTangent, const struct FCurve2DAppearance& InAppearance, float Opacity, bool InClampTangents);
		struct FInterpCurveVector2D CreateCurveWithTangents2D(TArray<struct FVector2D> Positions, const struct FVector2D& StartTangent, const struct FVector2D& EndTangent, EInterpCurveMode Mode);
		struct FInterpCurveVector2D CreateCurve2D(TArray<struct FVector2D> Positions, EInterpCurveMode Mode);
		void ConvertSplineDistanceToInputKey(class USplineComponent** SplineComponent, class USplineComponent* OptionalTargetSpline);
		bool CarveAroundSplinePoints(class UObject* WorldContext, const struct FVector& InStartLocation, const struct FVector& InStartTangent, const struct FVector& InEndLocation, const struct FVector& InEndTangent, float InRadius, class UTerrainMaterial* InTerrainMaterial, ECarveFilterType InCarveFilter, EPreciousMaterialOptions InPrecious);
		bool CarveAroundSplineMesh(class USplineMeshComponent* InMesh, float InRadius, class UTerrainMaterial* InTerrainMaterial, ECarveFilterType InCarveFilter, EPreciousMaterialOptions InPrecious);
		float ApproximateSplineDistanceAtWorldLocation(class USplineComponent* Spline, const struct FVector& WorldLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDSteamUserStats
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UFSDSteamUserStats : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_N63X[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDSteamUtils
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDSteamUtils : public UBlueprintFunctionLibrary
	{
	public:
		bool PlayerIsFollowingUsOnSteam();
		void OpenURLInSteamBrowser(const class FString& URL);
		bool IsTextFilteringInitialized();
		bool IsSteamLoaded();
		bool IsDev(class APlayerState* PlayerState);
		bool InitializeFilterText();
		bool HasSupporterUpgrade();
		bool HasDeluxeEdition();
		bool HasContentCreatorEdition();
		class FString GetSteamRegion();
		class FString GetSteamLanguage();
		class FString GetSteamBranchString();
		ESteamBranch GetSteamBranch();
		class FString GetPlayerSteamName();
		class FString GetPlayerSteamID();
		class FString FilterProfanityText(const class FString& inputMessage);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDPS4Utils
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDPS4Utils : public UBlueprintFunctionLibrary
	{
	public:
		void SetUGCAllowed(bool bAllowed);
		bool IsUGCAllowed();
		bool IsPS4SystemLoaded();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDTutorialSettings
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UFSDTutorialSettings : public UDataAsset
	{
	public:
		int32_t                                                    RequiredCPTreasures;                                     // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RequiredCPMachineEvents;                                 // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RequiredCPVeterans;                                      // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N08W[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FNewPlayerMutator>                           FirstMissionsMutators;                                   // 0x0040(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDLevelLoadingPersistentWidget
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class UFSDLevelLoadingPersistentWidget : public UUserWidget
	{
	public:
		void SetFadeProgress(float fade, bool ToSpaceRig, class UTexture* LoadingImage);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDLabelWidget
	 * Size -> 0x0000 (FullSize[0x02A8] - InheritedSize[0x02A8])
	 */
	class UFSDLabelWidget : public UTextBlock
	{
	public:
		void SetWrapTextAt(float WrapAt);
		void SetWrappingPolicy(ETextWrappingPolicy Policy);
		void SetMargin(const struct FMargin& NewMargin);
		void SetLineHeightPercentage(float percentage);
		void SetFontSize(int32_t Size);
		int32_t GetFontSize();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDWidgetBlueprintLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void WidgetDelegate__DelegateSignature(class UUserWidget* Widget);
		void WidgetCreatedOrReusedDelegate__DelegateSignature(bool WasCreated, class UUserWidget* Widget, int32_t ActiveIndex);
		void ToggleAnimationLooping(class UObject* WorldContext, class UWidgetAnimation* InAnimation, const struct FWidgetAnimationSettings& InSettings, bool InLoop, bool* OutPlayingChanged, bool* OutIsPlaying);
		bool TextSmallerThan(const class FText& Text1, const class FText& Text2);
		bool TextGreaterThan(const class FText& Text1, const class FText& Text2);
		TArray<class UWidget*> SortWidgetArray(TArray<class UWidget*> InWidgets, const class FScriptDelegate& InCompareFunction);
		void SimpleBox(struct FPaintContext* Context, const struct FVector2D& Position, const struct FVector2D& Size, const struct FLinearColor& Tint);
		struct FTimerHandle SetTimerForNextTick(class UObject* WorldContext, const class FScriptDelegate& TimerDelegate);
		void SetSizeBoxSettings(class USizeBox** InSizeBox, const struct FSizeBoxSettings& InSettings);
		void SetProgressBarType(class UProgressBar* InProgressBar, EProgressBarFillType InType);
		void SetMousePosition(class UObject* WorldContextObject, int32_t X, int32_t Y);
		void SetChildrenVisibility(class UPanelWidget* Panel, ESlateVisibility Visibility, int32_t StartIndex, class UClass* OptionalClassFilter);
		void ScrubAnimation(class UObject* WorldContext, class UWidgetAnimation* InAnimation, float Progress01);
		void ScaleTextBlockToHeight(class UTextBlock* TextBlock, float TargetHeight, bool SetMinimimumWidth);
		void ScaleImageToHeight(class UImage* Image, float TargetHeight);
		void PrintStrings(class UObject* WorldContextObject, TArray<class FString> InStrings, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
		class FString MidIgnoringWhiteSpace(const class FString& Source, int32_t Index, int32_t Count);
		struct FVector2D MeasureTextSize(const class FText& Text, const struct FSlateFontInfo& Font);
		struct FVector2D MeasureTextBlockSize(class UTextBlock* TextBlock);
		void Line(struct FPaintContext* Context, const struct FVector2D& Pos1, const struct FVector2D& Pos2, const struct FLinearColor& Tint);
		struct FLinearColor LerpColors(TArray<struct FLinearColor> Colors, bool Interpolate, float Progress01);
		int32_t LengthIgnoringWhitespace(const class FString& Source);
		bool IsWindowsPlatform(class UObject* WorldContextObject);
		bool IsWhiteSpaceAt(const class FString& Source, int32_t Index);
		bool IsWhiteSpace(const class FString& Source);
		bool IsHUDVisible(class UObject* WorldContextObject);
		class FString IntToRomanNumeral(int32_t Value);
		bool HasAnyVisibleChildren(class UPanelWidget* Panel, int32_t StartIndex, class UClass* OptionalClassFilter);
		class FString GetShortTimeString(int32_t TotalSeconds, bool BlinkDelimiter);
		class UWindowWidget* GetParentWindowWidget(class UUserWidget* InWidget);
		class UUserWidget* GetParentUserWidget(class UUserWidget* InWidget);
		class AFSDPlayerState* GetOwningFSDPlayerState(class UWidget* Target);
		class FText GetKeyName(const struct FKey& Key);
		float GetFontMaxHeight(const struct FSlateFontInfo& Font);
		float GetFontBaseline(const struct FSlateFontInfo& Font);
		class UWidget* GetFocusedWidget(class UObject* WorldContextObject, class APlayerController* Controller);
		class UUserWidget* GetFocusableParentUserWidget(class UUserWidget* InWidget);
		struct FVector2D GetDrawSize(struct FPaintContext* InContext);
		class UFSDCheatManager* GetCheatManager(class UObject* WorldContextObject);
		class UWidget* FindChildWidget(class UPanelWidget** ParentWidget, class UClass* WidgetClass, bool SearchChildren);
		class UVerticalBox* CreateVerticalBox(class UObject* WorldContext);
		class UTextBlock* CreateTextBlock(class UObject* WorldContext, const class FText& Text, const struct FSlateFontInfo& Font, ETextJustify Justification, const struct FLinearColor& Color, bool WrapText);
		class USpacer* CreateSpacer(class UObject* WorldContext, const struct FVector2D& Size);
		TArray<class UUserWidget*> CreateOrReuseChildrenWithCallbackEx(class UPanelWidget* Panel, int32_t Count, class UClass* WidgetClass, const class FScriptDelegate& OnCreatedOrReused, const class FScriptDelegate& OnCollapsed);
		TArray<class UUserWidget*> CreateOrReuseChildrenWithCallback(class UPanelWidget* Panel, int32_t Count, class UClass* WidgetClass, const class FScriptDelegate& OnCreatedOrReused);
		TArray<class UUserWidget*> CreateOrReuseChildren(class UPanelWidget* Panel, int32_t Count, class UClass* WidgetClass);
		class UImage* CreateImageSized(class UObject* WorldContext, class UTexture2D* Texture, const struct FLinearColor& Tint, const struct FVector2D& Size);
		class UImage* CreateImageFromBrush(class UObject* WorldContext, const struct FSlateBrush& InBrush, const struct FLinearColor& InColorAndOpacity);
		class UImage* CreateImage(class UObject* WorldContext, class UTexture2D* Texture, const struct FLinearColor& Tint, bool AutoSize);
		class UHorizontalBox* CreateHorizontalBox(class UObject* WorldContext);
		bool CompareWidgetsDelegate__DelegateSignature(class UWidget* InFirstWidget, class UWidget* InSecondWidget);
		class FText ClampTextLength(const class FText& Text, int32_t MaxLength, const class FText& CutOffIndicator);
		void Box(struct FPaintContext* Context, const struct FVector2D& Position, const struct FVector2D& Size, const struct FSlateBrush& Brush, const struct FLinearColor& Tint);
		bool AreWidgetsIntersecting(class UWidget* InWidget1, class UWidget* InWidget2);
		class UWidget* AddWidgetToRow(class UVerticalBox* VerticalBox, class UWidget* Widget, int32_t MaxWidgetsPerRow, float WidgetSpacing, float RowSpacing, class UHorizontalBoxSlot** OutSlot, class UHorizontalBox** OutRow);
		class UWidget* AddChildToVerticalBoxEx(class UVerticalBox* VerticalBox, class UWidget* Widget, EHorizontalAlignment HorizontalAlignment, EVerticalAlignment VerticalAlignment, float Size, const struct FMargin& Padding, class UVerticalBoxSlot** OutSlot, class UVerticalBox** OutVerticalBox);
		class UWidget* AddChildToUniformGridEx(class UUniformGridPanel* GridPanel, class UWidget* Widget, EHorizontalAlignment HorizontalAlignment, EVerticalAlignment VerticalAlignment, int32_t Column, int32_t Row, class UUniformGridSlot** OutSlot, class UUniformGridPanel** OutGridPanel);
		class UWidget* AddChildToOverlayEx(class UOverlay* OverlayPanel, class UWidget* Widget, EHorizontalAlignment HorizontalAlignment, EVerticalAlignment VerticalAlignment, const struct FMargin& Padding, class UOverlaySlot** OutSlot, class UOverlay** OutOverlayPanel);
		class UWidget* AddChildToHorizontalBoxEx(class UHorizontalBox* HorizontalBox, class UWidget* Widget, EHorizontalAlignment HorizontalAlignment, EVerticalAlignment VerticalAlignment, float Size, const struct FMargin& Padding, class UHorizontalBoxSlot** OutSlot, class UHorizontalBox** OutHorizontalBox);
		class UWidget* AddChildToCanvasEx(class UCanvasPanel* CanvasPanel, class UWidget* Widget, const struct FAnchors& Anchors, const struct FMargin& Offsets, bool AutoSize, int32_t Z_Order, class UCanvasPanelSlot** OutSlot, class UCanvasPanel** OutCanvasPanel);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDWidgetEffectsComponent
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UFSDWidgetEffectsComponent : public UActorComponent
	{
	public:
		TArray<struct FWidgetPing>                                 WidgetPings;                                             // 0x00B0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FWidgetFade>                                 WidgetFades;                                             // 0x00C0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FWidgetTextCounter>                          WidgetTextCounters;                                      // 0x00D0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FCustomCounter>                              CustomCounters;                                          // 0x00E0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FWidgetMover>                                WidgetMovers;                                            // 0x00F0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void StartTextCounter(class UObject* WorldContext, class UTextBlock** Widget, float Start, float End, float Duration, int32_t MaxDigits, float StartDelay);
		void StartCounter(class UObject* WorldContext, class UObject* Owner, float Start, float End, float Duration, const class FScriptDelegate& OnCount, float StartDelay);
		void PingWidget(class UObject* WorldContext, class UWidget* Widget, float Amount, float Duration, EPingType PingType, float StartDelay);
		void MoveWidget(class UObject* WorldContext, class UUserWidget* Widget, const struct FVector2D& Start, const struct FVector2D& End, float Duration, EMoveType MoveType, float StartDelay);
		void MoveOutWidget(class UObject* WorldContext, class UUserWidget* Widget, const struct FVector2D& MoveToOffset, float Duration, float StartDelay);
		void MoveInWidget(class UObject* WorldContext, class UUserWidget* Widget, const struct FVector2D& MoveFromOffset, float Duration, float StartDelay);
		void FadeWidget(class UObject* WorldContext, class UUserWidget* Widget, float StartFade, float EndFade, float Duration, float StartDelay);
		void FadeOutWidget(class UObject* WorldContext, class UUserWidget* Widget, float Duration, float StartDelay);
		void FadeInWidget(class UObject* WorldContext, class UUserWidget* Widget, float Duration, float StartDelay);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDWorldSettings
	 * Size -> 0x0008 (FullSize[0x03A8] - InheritedSize[0x03A0])
	 */
	class AFSDWorldSettings : public AWorldSettings
	{
	public:
		class UPlayerCharacterID*                                  CharacterClass;                                          // 0x03A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDXboxUtils
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDXboxUtils : public UBlueprintFunctionLibrary
	{
	public:
		void ShowStoreUIForStoreItem(class UObject* WorldContextObject, const class FString& storeItemName);
		void ShowStoreUI(class UObject* WorldContextObject);
		bool ShowCheatTerminal();
		bool IsDCLCheckComplete(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDPFPUtils
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDPFPUtils : public UBlueprintFunctionLibrary
	{
	public:
		bool IsPlayfabLoaded();
		class FString GetPlayfabUserId();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TrackBuilderItem
	 * Size -> 0x0058 (FullSize[0x0428] - InheritedSize[0x03D0])
	 */
	class ATrackBuilderItem : public AAnimatedItem
	{
	public:
		unsigned char                                              UnknownData_1OX6[0x8];                                   // 0x03D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCrosshairAggregator*                                CrosshairAggregator;                                     // 0x03D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPlaceableObstructionType                                  ObstructionType;                                         // 0x03E0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_01K3[0x3];                                   // 0x03E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ObstructionLocation;                                     // 0x03E4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             GroundNormal;                                            // 0x03F0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YVX6[0x14];                                  // 0x03FC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DefaultSegmentType;                                      // 0x0410(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATrackBuilderSegment*                                NextSegment;                                             // 0x0418(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPlacingSegment;                                       // 0x0420(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JVC4[0x7];                                   // 0x0421(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdatePlacement(const struct FTransform& InTransform, class UTrackBuilderConnectPoint* InConnectPoint, bool bPlacementValid, bool InUpdateServer);
		void ServerUpdatePlacement(const struct FTransform& InTransform, bool bPlacementValid, class UTrackBuilderConnectPoint* InConnectPoint);
		void ServerFinishPlacement(const struct FTransform& FinalLocation, class UTrackBuilderConnectPoint* ConnectPoint);
		void ServerCancelPlacement();
		void ServerBeginPlaceSegment(class UTrackBuilderUsable* InUsable);
		void ReceiveBeginPlaceSegment();
		void OnRep_NextSegment();
		class UClass* GetSegmentType();
		void FinishPlacement(const struct FTransform& FinalLocation, class UTrackBuilderConnectPoint* ConnectPoint);
		void CancelPlacement();
		struct FVector AdjustInitialLocation(const struct FVector& Location);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FuelLineBuilderItem
	 * Size -> 0x0010 (FullSize[0x0438] - InheritedSize[0x0428])
	 */
	class AFuelLineBuilderItem : public ATrackBuilderItem
	{
	public:
		class UItemPlacerAggregator*                               SegmentPlacer;                                           // 0x0428(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C6E0[0x8];                                   // 0x0430(0x0008) MISSED OFFSET (PADDING)

	public:
		void ReceivePlacementUpdated(bool InCanPlace, bool InConnecting, float InDistanceProgress);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FuelLineEndPoint
	 * Size -> 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
	 */
	class AFuelLineEndPoint : public AActor
	{
	public:
		class UFuelLineConnectPoint*                               ConnectPoint;                                            // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                StaticMesh;                                              // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              AllowedSegment;                                          // 0x0230(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       OpenForConnection;                                       // 0x0238(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZAFL[0x7];                                   // 0x0239(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetOpenForConnection(bool Open);
		void ReceivePing(bool InValidPlacement);
		bool IsOpenForConnection();
		void CallbackConnectedWithSegment(class UTrackBuilderConnectPoint* InConnectPoint, class ATrackBuilderSegment* InSegment);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TrackBuilderConnectPoint
	 * Size -> 0x0040 (FullSize[0x04B0] - InheritedSize[0x0470])
	 */
	class UTrackBuilderConnectPoint : public USphereComponent
	{
	public:
		class FScriptMulticastDelegate                             OnConnectedWithSegment;                                  // 0x0470(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              ConnectType;                                             // 0x0480(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ATrackBuilderSegment>                 ConnectedSegment;                                        // 0x0488(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxConnectRadius;                                        // 0x0490(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConnectDistance;                                         // 0x0494(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             MaxAngles;                                               // 0x0498(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5W80[0xC];                                   // 0x04A4(0x000C) MISSED OFFSET (PADDING)

	public:
		void OnRep_ConnectedSegment();
		struct FTransform GetConnectTransform(const struct FTransform& FromWorldTransform);
		bool Disconnect(class ATrackBuilderSegment* InSegment);
		void ConnectionDelegate__DelegateSignature(class UTrackBuilderConnectPoint* InConnectPoint, class ATrackBuilderSegment* InSegment);
		bool Connect(class ATrackBuilderSegment* InSegment);
		bool CanConnectWith(class ATrackBuilderSegment* InSegment, const struct FTransform& FromWorldTransform);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FuelLineConnectPoint
	 * Size -> 0x0000 (FullSize[0x04B0] - InheritedSize[0x04B0])
	 */
	class UFuelLineConnectPoint : public UTrackBuilderConnectPoint
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TrackBuilderSegment
	 * Size -> 0x0070 (FullSize[0x0290] - InheritedSize[0x0220])
	 */
	class ATrackBuilderSegment : public AActor
	{
	public:
		class UTrackBuilderUsable*                                 NextSegmentUsable;                                       // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APlayerCharacter>                     BuiltByCharacter;                                        // 0x0228(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UTrackBuilderUsable>                  BuiltFromUsable;                                         // 0x0230(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTrackBuilderPoint                                  SegmentEndTransform;                                     // 0x0238(0x0028) Transient, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FTrackBuilderPoint                                  ServerSegmentEndTransform;                               // 0x0260(0x0028) Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IE9Y[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		bool UpdatePlacement(const struct FTransform& InTransform, class UTrackBuilderConnectPoint* InConnectPoint, bool InPlacementValid, class AItem* PlaceableItem);
		void ReceivPlacementValidChanged(bool InIsValid);
		void ReceivePlacementStateChanged(ETrackBuildPlacementState NewState);
		void ReceivePlacementChangedEnd(const struct FTransform& NewEndTransform, class UTrackBuilderConnectPoint* InConnectPoint);
		void ReceivePlacementChangedBegin(const struct FTransform& NewEndTransform, class UTrackBuilderConnectPoint* InConnectPoint);
		bool ReceiveCanPlaceAt(const struct FTransform& InCandidateTransform, class UTrackBuilderConnectPoint* InConnectPoint);
		void OnRep_SegmentEndTransform();
		class UTrackBuilderUsable* GetTrackStartUsable();
		class AActor* GetTrackStartActor();
		struct FTransform GetStartTransform();
		struct FTransform GetSegmentEndTransform();
		ETrackBuildPlacementState GetPlacementState();
		class ATrackBuilderSegment* GetNextSegment(bool bForward);
		bool GetIsSegmentEndTransformValid();
		class UTrackBuilderConnectPoint* GetConnectPoint();
		bool CanPlaceAt(const struct FTransform& InCandidateTransform, class UTrackBuilderConnectPoint* InConnectPoint, class AItem* PlaceableItem);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FuelLineSegment
	 * Size -> 0x0038 (FullSize[0x02C8] - InheritedSize[0x0290])
	 */
	class AFuelLineSegment : public ATrackBuilderSegment
	{
	public:
		class USplineMeshComponent*                                FuelLineSplineMesh;                                      // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineComponent*                                    FuelLineSplineComponent;                                 // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                FuelLineEndPostMesh;                                     // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USimpleHealthComponent*                              DeconstructHealthComponent;                              // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     PreviewEndPostLocation;                                  // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EndPostHeightOffset;                                     // 0x02B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxLength;                                               // 0x02BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasMaxTurnAngle;                                        // 0x02C0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_54Z5[0x3];                                   // 0x02C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxTurnAngle;                                            // 0x02C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ClientUpdateStartTransform(const struct FVector& NewStartLocation);
		void ChangeStartTransform(const struct FTransform& ChangedStartLocation);
		void CallbackOnDeath(class UHealthComponentBase* InHealthComponent);
		void CallbackCanStartNextSegmentChanged(bool InCanStart);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FuelLineStart
	 * Size -> 0x0058 (FullSize[0x0278] - InheritedSize[0x0220])
	 */
	class AFuelLineStart : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnFuelLineConnected;                                     // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFuelLineStarted;                                       // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFirstFuelLineSegment;                                  // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                StaticMesh;                                              // 0x0250(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOutlineComponent*                                   OutlineComponent;                                        // 0x0258(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USimpleObjectInfoComponent*                          ObjectInfoComponent;                                     // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFuelLineStartUsable*                                UsableStartFuelLine;                                     // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFuelLineConnected;                                      // 0x0270(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2Q1E[0x7];                                   // 0x0271(0x0007) MISSED OFFSET (PADDING)

	public:
		void ReceiveFuelLineConnected();
		void OnRep_FuelLineConnected();
		void FuelLineStartedDelegate__DelegateSignature(bool InFuelLineStarted);
		void FuelLineConnectedDelegate__DelegateSignature(class AFuelLineEndPoint* InFuelLineStart);
		void FirstFuelLineDelegate__DelegateSignature(class AFuelLineSegment* InFirstSegment);
		void CallbackNextSegmentChanged(class UTrackBuilderUsable* InUsable, class ATrackBuilderSegment* InSegment);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TrackBuilderUsable
	 * Size -> 0x0040 (FullSize[0x01B0] - InheritedSize[0x0170])
	 */
	class UTrackBuilderUsable : public UInstantUsable
	{
	public:
		class FScriptMulticastDelegate                             OnNextSegmentChanged;                                    // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              BuilderItemType;                                         // 0x0180(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ColliderName;                                            // 0x0188(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     TrackStartComponent;                                     // 0x0198(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATrackBuilderSegment*                                NextSegment;                                             // 0x01A0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APlayerCharacter>                     InUseBy;                                                 // 0x01A8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SegmentDelegate__DelegateSignature(class UTrackBuilderUsable* InUsable, class ATrackBuilderSegment* InSegment);
		void OnRep_NextSegment();
		void OnNextSegmentDestroyed(class AActor* InActor);
		struct FTransform GetStartTransform();
		void FinishUse(class APlayerCharacter* User, class ATrackBuilderSegment* InSegment);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FuelLineStartUsable
	 * Size -> 0x0000 (FullSize[0x01B0] - InheritedSize[0x01B0])
	 */
	class UFuelLineStartUsable : public UTrackBuilderUsable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameAnimationSettings
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UGameAnimationSettings : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameData
	 * Size -> 0x07A0 (FullSize[0x07C8] - InheritedSize[0x0028])
	 */
	class UGameData : public UObject
	{
	public:
		class UKPISettings*                                        KPI_Settings;                                            // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGVisibilityGroups                                  VisibilityGroups;                                        // 0x0030(0x0058) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class UPromotionRewardsSettings*                           PromotionRewardsSettings;                                // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeaponMaintenanceSettings*                          WeaponMaintenanceSettings;                               // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDEventCollection*                                 FsdEventsSettings;                                       // 0x0098(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGameActivitySettings*                               GameActivitySettings;                                    // 0x00A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDanceSettings*                                      DanceSettings;                                           // 0x00A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGameAnimationSettings*                              AnimationSettings;                                       // 0x00B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEnemySettings*                                      EnemySettings;                                           // 0x00B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageSettings*                                     DamageSettings;                                          // 0x00C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlanetZoneSetup*                                    ZoneSettings;                                            // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTreasureSettings*                                   TreasureSettings;                                        // 0x00D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDrinkSettings*                                      DrinkSettings;                                           // 0x00D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUpgradeSettings*                                    UpgradeSettings;                                         // 0x00E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USpawnSettings*                                      SpawnSettings;                                           // 0x00E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVanitySettings*                                     VanitySettings;                                          // 0x00F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UKeyBindingSettings*                                 KeyBindingSettings;                                      // 0x00F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDeepDiveSettings*                                   DeepDiveSettings;                                        // 0x0100(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBEESettings*                                        BEESettings;                                             // 0x0108(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEncounterSettings*                                  EncounterSettings;                                       // 0x0110(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UForginSettings*                                     ForgingSettings;                                         // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USchematicSettings*                                  SchematicSettings;                                       // 0x0120(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemSkinSettings*                                   SkinSettings;                                            // 0x0128(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USpecialEventSettings*                               SpecialEventSettings;                                    // 0x0130(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProceduralSettings*                                 ProceduralSettings;                                      // 0x0138(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPickaxeSettings*                                    PickaxeSettings;                                         // 0x0140(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDTagSettings*                                     TagSettings;                                             // 0x0148(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemSettings*                                       ItemSettings;                                            // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDynamicIconSettings*                                DynamicIconSettings;                                     // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UShowroomSettings*                                   ShowroomSettings;                                        // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVictoryPoseSettings*                                VictoryPoseSettings;                                     // 0x0168(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDTutorialSettings*                                TutorialSettings;                                        // 0x0170(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULegacySettings*                                     LegacySettings;                                          // 0x0178(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEffectSettings*                                     EffectSettings;                                          // 0x0180(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAfflictionSettings*                                 AfflictionSettings;                                      // 0x0188(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCommunityGoalSettings*                              CommunityGoalSettings;                                   // 0x0190(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDailyDealSettings*                                  DailyDealSettings;                                       // 0x0198(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTerrainMaterialSettings*                            TerrainMaterialSettings;                                 // 0x01A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USaveGameSettings*                                   SaveGameSettings;                                        // 0x01A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGDItemCategoryIDs                                  ItemCategoryIDs;                                         // 0x01B0(0x0040) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<class UTexture2D*>                                  LoadoutIconList;                                         // 0x01F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UMinersManual*                                       MinersManual;                                            // 0x0200(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGDDamageClasses                                    DamageClasses;                                           // 0x0208(0x0060) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FGDStats                                            Stats;                                                   // 0x0268(0x0148) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FGDResources                                        Resources;                                               // 0x03B0(0x00F0) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGDTerrainTypes                                     TerrainTypes;                                            // 0x04A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FGDGameStatsTracking                                GameStatsTracking;                                       // 0x04B0(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGDAudio                                            audio;                                                   // 0x04D0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGDDifficulty                                       Difficulty;                                              // 0x0520(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UStatusEffectSettings*                               StatusEffects;                                           // 0x0530(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGDCharacterRetirement                              Retirement;                                              // 0x0538(0x00C0) Edit, Protected, NativeAccessSpecifierProtected
		struct FGDPlayerAndCharacterProgression                    PlayerAndCharacterProgression;                           // 0x05F8(0x00A0) Edit, EditConst, Protected, NativeAccessSpecifierProtected
		class UCharacterSettings*                                  CharacterSettings;                                       // 0x0698(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAchievementList*                                    Achievements;                                            // 0x06A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGlobalMissionSetup*                                 MissionSetup;                                            // 0x06A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USeasonSettings*                                     SeasonSettings;                                          // 0x06B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerCharacterID*                                  DefaultCharacterID;                                      // 0x06B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerCharacterID*                                  DefaultEditorCharacterID;                                // 0x06C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        XBoxExcludeRoomTag;                                      // 0x06C8(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LSIC[0xE8];                                  // 0x06D0(0x00E8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAssetsToLoadSettings                               AssetsToLoad;                                            // 0x07B8(0x0010) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void UnloadPreloadedAssets();
		void LoadDefaultAssetsBlocking(class UAsyncManager* AsyncManager);
		bool IsCheatConsolesEnabled();
		TArray<class UPlayerCharacterID*> GetRankedHeroIDs();
		class FText GetPlayerRankName(int32_t Rank);
		class UPlayerCharacterID* GetPlayerCharacterID(const struct FGuid& ID);
		struct FGDPerks GetPerkData();
		struct FGDMissionStats GetMissionStats();
		struct FGDMilestones GetMileStonesData();
		class UInventoryList* GetInventoryList(class UPlayerCharacterID* characterID);
		class UDifficultySetting* GetDifficultySetting(int32_t Index);
		int32_t GetDifficultyIndex(class UDifficultySetting* Difficulty);
		class UClass* GetDefaultEditorCharacter();
		class UClass* GetDefaultCharacter();
		struct FRetirementCostItem GetCharacterRetirementCost(class UObject* WorldContext, class UPlayerCharacterID* ID);
		TArray<class UHUDVisibilityGroup*> GetAllVisibilityGroups();
		TArray<class UMissionStat*> GetAllMissionStats();
		TArray<class UMilestoneAsset*> GetAllMilestones();
		TArray<class UMissionStat*> GetAllInfirmaryStats();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.KPISettings
	 * Size -> 0x0208 (FullSize[0x0238] - InheritedSize[0x0030])
	 */
	class UKPISettings : public UDataAsset
	{
	public:
		struct FGDMissionStats                                     MissionStats;                                            // 0x0030(0x0168) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FGDMilestones                                       Milestones;                                              // 0x0198(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FGDPerks                                            perks;                                                   // 0x01A8(0x0090) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DLCBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UDLCBase : public UDataAsset
	{
	public:
		void QueryAllDLC();
		bool IsUnlocked();
		bool IsDLCUnLocked(class UDLCBase* dlc);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameDLC
	 * Size -> 0x01E8 (FullSize[0x0218] - InheritedSize[0x0030])
	 */
	class UGameDLC : public UDLCBase
	{
	public:
		unsigned char                                              UnknownData_XSUR[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bFakeUnlockedStateInEditor;                              // 0x0038(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEditorUnlockedState;                                    // 0x0039(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VTYE[0x2];                                   // 0x003A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SteamID;                                                 // 0x003C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SteamName;                                               // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              OddishID;                                                // 0x0050(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              XBoxDLCName;                                             // 0x0060(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FString, class FString>                         SonyAdditionalContentLabelMap;                           // 0x0070(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FString                                              UWPStoreID;                                              // 0x00C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowOnDLCScreen;                                         // 0x00D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UWD8[0x7];                                   // 0x00D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              banner[0x28];                                            // 0x00D8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              Banner_16_10[0x28];                                      // 0x0100(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              InfoScreenOverlay[0x28];                                 // 0x0128(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AnnouncementWidget[0x28];                                // 0x0150(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		struct FGuid                                               SavegameID;                                              // 0x0178(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class UResourceData*, int32_t>                        Resources;                                               // 0x0188(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		int32_t                                                    PerformancePoints;                                       // 0x01D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HZW5[0x4];                                   // 0x01DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              Movie[0x28];                                             // 0x01E0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_XHR7[0x10];                                  // 0x0208(0x0010) MISSED OFFSET (PADDING)

	public:
		bool ShouldBeAnnounced(class UObject* WorldContext);
		bool OpenStorePage(class UObject* WorldContext);
		void MarkAnnounced(class UObject* WorldContext);
		class FString GetSonyAdditionalContentId();
		class UTexture2D* GetInfoScreenOverlay();
		class UTexture2D* GetBanner_16_10();
		class UTexture2D* GetBanner();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameDLCSettings
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UGameDLCSettings : public UDataAsset
	{
	public:
		unsigned char                                              StoreDLCs[0x50];                                         // 0x0030(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		TArray<class UGameDLC*> GetStoreDLCs(class UObject* WorldContext);
		TArray<class UGameDLC*> GetAnnouncableDLCs(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TimedDLC
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UTimedDLC : public UDLCBase
	{
	public:
		struct FDateTime                                           StartDate;                                               // 0x0030(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDateTime                                           EndDate;                                                 // 0x0038(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AlwaysLockedDLC
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAlwaysLockedDLC : public UDLCBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlatformExclusiveDLC
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UPlatformExclusiveDLC : public UDLCBase
	{
	public:
		EFSDTargetPlatform                                         Platform;                                                // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8T9H[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AndDLC
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UAndDLC : public UDLCBase
	{
	public:
		TArray<class UDLCBase*>                                    DLCs;                                                    // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OrDLC
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UOrDLC : public UDLCBase
	{
	public:
		TArray<class UDLCBase*>                                    DLCs;                                                    // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NotDLC
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UNotDLC : public UDLCBase
	{
	public:
		class UDLCBase*                                            dlc;                                                     // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EventRewardFrame
	 * Size -> 0x0030 (FullSize[0x0250] - InheritedSize[0x0220])
	 */
	class AEventRewardFrame : public AActor
	{
	public:
		class USpecialEventUsableComponent*                        EventUsable;                                             // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AEventRewardDispenser*>                       Dispensers;                                              // 0x0228(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       keyInserted;                                             // 0x0238(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F9SP[0x7];                                   // 0x0239(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      EventPlayerIDs;                                          // 0x0240(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		void TurnOff();
		void SetKeyInserted(bool keyInserted);
		void SetDispenseRewards(bool dispensRewards);
		void RegisterDispenser(class AEventRewardDispenser* Dispenser);
		bool GetDispensRewards();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EventRewardDispenser
	 * Size -> 0x0040 (FullSize[0x0260] - InheritedSize[0x0220])
	 */
	class AEventRewardDispenser : public AActor
	{
	public:
		struct FUniqueNetIdRepl                                    PlayerId;                                                // 0x0220(0x0028) BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AEventRewardFrame*                                   DispenserFrame;                                          // 0x0248(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PoweredUp;                                               // 0x0250(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsActivated;                                             // 0x0251(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NKHF[0x6];                                   // 0x0252(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USchematic*                                          SelectedReward;                                          // 0x0258(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetSelectedReward(class USchematic* InReward);
		bool PowerUp(class APlayerCharacter* InPlayerCharacter);
		void OnRewardSelected();
		void OnRep_SelectedReward();
		void OnRep_PoweredUp();
		void OnRep_PlayerId();
		void OnRep_IsActivated();
		void OnPoweredUp();
		void OnOwnerAssigned();
		void OnOpenDispenser();
		bool IsOwningPlayer(class APlayerCharacter* PlayerCharacter);
		class APlayerCharacter* GetPlayerCharacter();
		class AFSDPlayerState* GetPlayer();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EventRewardType
	 * Size -> 0x0098 (FullSize[0x00C8] - InheritedSize[0x0030])
	 */
	class UEventRewardType : public UDataAsset
	{
	public:
		class FText                                                Title;                                                   // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		unsigned char                                              IconFront[0x28];                                         // 0x0048(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              IconBack[0x28];                                          // 0x0070(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FLinearColor                                        IconFrontTint;                                           // 0x0098(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        IconBackTint;                                            // 0x00A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        BackgroundTint;                                          // 0x00B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EventStarterButton
	 * Size -> 0x0028 (FullSize[0x0248] - InheritedSize[0x0220])
	 */
	class AEventStarterButton : public AActor
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USingleUsableComponent*                              Usable;                                                  // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBootupEvent;                                           // 0x0230(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_88PX[0x4];                                   // 0x0240(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       Booted;                                                  // 0x0244(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsOpenForUse;                                            // 0x0245(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsEventActive;                                           // 0x0246(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9YG2[0x1];                                   // 0x0247(0x0001) MISSED OFFSET (PADDING)

	public:
		void SetIsEventActive(bool IsEventActive);
		void OnUseProgress(float Progress);
		void OnRep_OpenForUse();
		void OnRep_Booted();
		void OnOpenedForUse(bool wasOpened);
		void OnBooted();
		void CloseForUse(class APlayerCharacter* User, EInputKeys Key);
		void BootUpEvent();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameEventAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UGameEventAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_JPKF[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EventStarterAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UEventStarterAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_UKTW[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CoreInfuserAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UCoreInfuserAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_MFDE[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		void OnRewardSelected();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CoreInfuserPlatformAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UCoreInfuserPlatformAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_DAR8[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EventParticipant
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UEventParticipant : public UInterface
	{
	public:
		bool SetupEvent(class AGameEvent* GameEvent);
		void OnEventTriggered();
		void OnEventProgress(float Progress);
		void OnEventOpened();
		void OnEventFinished(bool eventSuccess);
		bool AdvanceOneObjective();
		bool AddEventProgress(float Progress);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGameFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SpawnOrUpdateAudio2D(class UObject* WorldContext, class UAudioComponent** AudioComponent, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, const class FName& FloatParamName, float FloatParam);
		void SetUsePushToTalk(bool Enable);
		void SetGlobalGravityZ(class UObject* WorldContextObject, float GravityZ);
		void SetGlobalGravityScale(class UObject* WorldContextObject, float GravityScale);
		bool IsWorldTickEnabled(class UObject* WorldContextObject);
		void IsTearingDown(class UObject* caller, bool* IsTearingDown);
		bool IsPlayingOffline(class UObject* WorldContextObject);
		bool IsPlayInEditor(class UObject* WorldContextObject);
		class UWindowManager* GetWindowManager(class UObject* WorldContextObject);
		bool GetUsePushToTalk();
		class UWindowWidget* GetTopWindow(class UObject* WorldContextObject);
		class FString GetProjectVersion();
		int32_t GetNumPlayers(class UObject* WorldContext);
		int32_t GetNumAdditionalPlayers(class UObject* WorldContext);
		class FString GetMajorProjectVersion();
		class APlayerCharacter* GetLocalPlayerCharacter(class UObject* WorldContext);
		class UGoogleAnalyticsWrapper* GetGoogleAnalyticsWrapper(class UObject* WorldContextObject);
		float GetGlobalGravityZ(class UObject* WorldContextObject);
		class AFSDGameModeSpaceRig* GetFSDSRGameMode(class UObject* WorldContextObject);
		class UFSDSaveGame* GetFSDSaveGame(class UObject* WorldContextObject);
		class AFSDGameState* GetFSDGameState(class UObject* WorldContextObject);
		class AFSDGameMode* GetFSDGameMode(class UObject* WorldContextObject);
		class UFSDGameInstance* GetFSDGameInstance(class UObject* WorldContextObject);
		class UGameData* GetFSDGameData();
		void GetDeepDiveManager(class UObject* WorldContextObject);
		class ADeepCSGWorld* GetCSGWorld(class UObject* WorldContextObject);
		int32_t GetChangelist();
		class UCampaignManager* GetCampaingManager(class UObject* WorldContextObject);
		class UAsyncManager* GetAsyncManager(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameModeFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGameModeFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsCloseToImportantLocation(class AFSDGameState* GameState, const struct FVector& Location);
		struct FTransform FindEscapePodLocationAtDistance(class UObject* WorldContextObject, float Distance, float aboveDistanceBias, class AActor* optionalFrom);
		void AddSeamlessTravelEventKey(class UObject* WorldContextObject, class USeamlessTravelEventKey* Key);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GameStats
	 * Size -> 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
	 */
	class AGameStats : public AInfo
	{
	public:
		int32_t                                                    NumberOfPlayersEscapedInPod;                             // 0x0220(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TotalGoldMined;                                          // 0x0224(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    TotalEnemiesKilled;                                      // 0x0228(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MissionHaz;                                              // 0x022C(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class USeamlessTravelEventKey*>                     EventKeys;                                               // 0x0230(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPublic

	public:
		void OnPlayerMinedGold(class UCappedResource* Resource, float Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourceBasedObjective
	 * Size -> 0x0000 (FullSize[0x0180] - InheritedSize[0x0180])
	 */
	class UResourceBasedObjective : public UObjective
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GatherGemsObjective
	 * Size -> 0x0018 (FullSize[0x0198] - InheritedSize[0x0180])
	 */
	class UGatherGemsObjective : public UResourceBasedObjective
	{
	public:
		int32_t                                                    GemsRequired;                                            // 0x0180(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GemsSpawnedModifier;                                     // 0x0184(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    GemsCollected;                                           // 0x0188(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DUN8[0x4];                                   // 0x018C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGemResourceData*                                    GemResource;                                             // 0x0190(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnResourceChanged(class UCappedResource* CappedResource, float Amount);
		void OnRep_GemsCollected(int32_t prevAmount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GatheItemsObjective
	 * Size -> 0x0018 (FullSize[0x0198] - InheritedSize[0x0180])
	 */
	class UGatheItemsObjective : public UResourceBasedObjective
	{
	public:
		int32_t                                                    ItemsRequired;                                           // 0x0180(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ItemsSpawnedModifier;                                    // 0x0184(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ItemsCollected;                                          // 0x0188(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DKIO[0x4];                                   // 0x018C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCollectableResourceData*                            ItemResource;                                            // 0x0190(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnResourceChanged(class UCappedResource* CappedResource, float Amount);
		void OnRep_ItemsCollected(int32_t prevAmount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Gem
	 * Size -> 0x0018 (FullSize[0x0280] - InheritedSize[0x0268])
	 */
	class AGem : public ACarriableItem
	{
	public:
		class UCarriableInstantUsable*                             Usable;                                                  // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UResourceData*                                       ResourceType;                                            // 0x0270(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ResourceAmount;                                          // 0x0278(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       hasBeenReleased;                                         // 0x027C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W54Y[0x3];                                   // 0x027D(0x0003) MISSED OFFSET (PADDING)

	public:
		void SetHasBeenReleased(bool hasBeenReleased);
		bool GetHasBeenReleased();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GemTracker
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UGemTracker : public UActorComponent
	{
	public:
		class FName                                                TrackName;                                               // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CustomValue;                                             // 0x00B8(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3L98[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GemProximityTracker
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UGemProximityTracker : public UActorComponent
	{
	public:
		TArray<TWeakObjectPtr<class UGemTracker>>                  Trackers;                                                // 0x00B0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic
		TArray<struct FTrackPositionList>                          TrackerLists;                                            // 0x00C0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GemResourceData
	 * Size -> 0x0070 (FullSize[0x0160] - InheritedSize[0x00F0])
	 */
	class UGemResourceData : public UResourceData
	{
	public:
		class UDebrisPositioning*                                  DebrisPositioning;                                       // 0x00F0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CheckIfCompletelyCoveredByTerrain;                       // 0x00F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ENN8[0x3];                                   // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FIRandRange                                         GemValue;                                                // 0x00FC(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BU4M[0x4];                                   // 0x0104(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGemResourceCreator*                                 ResourceCreator;                                         // 0x0108(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InfluencerRange;                                         // 0x0110(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_077Y[0x4];                                   // 0x0114(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              Debris[0x10];                                            // 0x0118(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              GemClasses[0x10];                                        // 0x0128(0x0010) UNKNOWN PROPERTY: ArrayProperty
		float                                                      ImportantRadius;                                         // 0x0138(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T95N[0x4];                                   // 0x013C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      GemClassesLoaded;                                        // 0x0140(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UDebrisBase*>                                 DebrisLoaded;                                            // 0x0150(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		int32_t GetCollectedGemsCreditValue(class AFSDGameState* GameState);
		int32_t GetCollectedGemsAmount(class AFSDGameState* GameState);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GemResourceCreator
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UGemResourceCreator : public UDataAsset
	{
	public:
		class UGemResourceData*                                    ResourceData;                                            // 0x0030(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CheckIfFreeSpaceAbove;                                   // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IFAI[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SearchSize;                                              // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandomGemResourceCreator
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class URandomGemResourceCreator : public UGemResourceCreator
	{
	public:
		class UCurveFloat*                                         PlacementDistanceProbabilityCurve;                       // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DistributedGemResourceCreator
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class UDistributedGemResourceCreator : public UGemResourceCreator
	{
	public:
		float                                                      MinDistanceBetweenGems;                                  // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SVQ8[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GeneratedMission
	 * Size -> 0x00F8 (FullSize[0x0120] - InheritedSize[0x0028])
	 */
	class UGeneratedMission : public UObject
	{
	public:
		class UBiome*                                              Biome;                                                   // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Seed;                                                    // 0x0030(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    GlobalSeed;                                              // 0x0034(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionTemplate*                                    Template;                                                // 0x0038(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                MissionName;                                             // 0x0040(0x0018) BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected
		class UClass*                                              PrimaryObjective;                                        // 0x0058(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      SecondaryObjectives;                                     // 0x0060(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TMap<class UClass*, struct FGMMutatorItem>                 Mutators;                                                // 0x0070(0x0050) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UMissionWarning*>                             MissionWarnings;                                         // 0x00C0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UMissionMutator*                                     MissionMutator;                                          // 0x00D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionComplexity*                                  ComplexityLimit;                                         // 0x00D8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionDuration*                                    DurationLimit;                                           // 0x00E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              MissionDNA;                                              // 0x00E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EMissionStructure                                          MissionStructure;                                        // 0x00F0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInSeasonEventZone;                                     // 0x00F1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       WouldBeInSeasonEventZone;                                // 0x00F2(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanHaveMutators;                                         // 0x00F3(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q7ZE[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              LoaderLevelSequence[0x28];                               // 0x00F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		void Recieve_SetupPLS(class AProceduralSetup* pls);
		bool IsSingleMission();
		bool IsPlagueMission();
		bool IsLocked(class AFSDPlayerController* Player);
		bool IsDeepDive();
		struct FObjectiveMissionIcon GetSecondaryObjectiveIcon();
		class UClass* GetPLS();
		TArray<class UMutator*> GetMutators(class UClass* mutatorClass);
		float GetMissionScale();
		class UMissionDNA* GetMissionDNA();
		class AProceduralSetup* CreatePLS(int32_t Seed);
		bool AreMissionsEqual(class UGeneratedMission* Other);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RoomGenerationItem
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ARoomGenerationItem : public AGenerationItem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GetFriendsListBlueprintCallProxy
	 * Size -> 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
	 */
	class UGetFriendsListBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
	{
	public:
		class FScriptMulticastDelegate                             OnSuccess;                                               // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailure;                                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UObject*                                             WorldContextObject;                                      // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FT6R[0x20];                                  // 0x0058(0x0020) MISSED OFFSET (PADDING)

	public:
		class UGetFriendsListBlueprintCallProxy* GetFriendsList(class UObject* WorldContextObject, const class FString& ListName);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GlobalMissionSetup
	 * Size -> 0x00F0 (FullSize[0x0120] - InheritedSize[0x0030])
	 */
	class UGlobalMissionSetup : public UDataAsset
	{
	public:
		struct FIRandRange                                         ExtraBiomes;                                             // 0x0030(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FIRandRange                                         AdditionalMissionsForExtraBiomes;                        // 0x0038(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FIRandRange                                         MissionsPerZone;                                         // 0x0040(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FMissionBiomeItem>                           Biomes;                                                  // 0x0048(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FMissionTemplateItem>                        AvailableMissions;                                       // 0x0058(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      FacilityMutatorChance;                                   // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TA1F[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMissionNameBank*                                    MissionNames;                                            // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FIRandRange                                         MutatorWarningCount;                                     // 0x0078(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FIRandRange                                         ExtraSeasonWarningCount;                                 // 0x0080(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		float                                                      DoubleWarningChance;                                     // 0x0088(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CUSZ[0x4];                                   // 0x008C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMissionMutator*>                             Mutators;                                                // 0x0090(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UMissionWarning*>                             Warnings;                                                // 0x00A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TMap<class UMissionWarning*, class UMissionWarning*>       IncompatibleWarnings;                                    // 0x00B0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<class UPlanetZone*>                                 PlanetZones;                                             // 0x0100(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FRequiredMissionItem>                        GlobalRequiredMissions;                                  // 0x0110(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		TArray<struct FMissionTemplateItem> GetAllPossibleMissions();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GlowPlant
	 * Size -> 0x0070 (FullSize[0x0290] - InheritedSize[0x0220])
	 */
	class AGlowPlant : public AActor
	{
	public:
		class UStaticMeshComponent*                                TrunkMesh;                                               // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y1XS[0x20];                                  // 0x0228(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPointLightComponent*                                mainLight;                                               // 0x0248(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ENRM[0x4];                                   // 0x0250(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IntensityBase;                                           // 0x0254(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RadiusBase;                                              // 0x0258(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IntensityPerPart;                                        // 0x025C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RadiusPerPart;                                           // 0x0260(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IntensityAllParts;                                       // 0x0264(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RadiusAllParts;                                          // 0x0268(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxIntensity;                                            // 0x026C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinIntensity;                                            // 0x0270(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeOnMaxLight;                                          // 0x0274(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IntensityFadeInTime;                                     // 0x0278(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IntensityFadeOutTime;                                    // 0x027C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxEmissive;                                             // 0x0280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinEmissive;                                             // 0x0284(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EmissiveFadeInTime;                                      // 0x0288(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EmissiveFadeOutTime;                                     // 0x028C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnDeath();
		void OnDamage(class UPrimitiveComponent* hitSphere);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GoogleAnalyticsWrapper
	 * Size -> 0x0128 (FullSize[0x0150] - InheritedSize[0x0028])
	 */
	class UGoogleAnalyticsWrapper : public UObject
	{
	public:
		unsigned char                                              UnknownData_H5JA[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LastUnlockedWeapons;                                     // 0x0030(0x0010) BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              LastKnownClass;                                          // 0x0040(0x0010) BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              BoscoLoadOut;                                            // 0x0050(0x0010) BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       WasCampaign;                                             // 0x0060(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J3VR[0x7];                                   // 0x0061(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LastCampaignName;                                        // 0x0068(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    LastCampaignProgress;                                    // 0x0078(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       WasLastCampaignMission;                                  // 0x007C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UY05[0x3];                                   // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    LastCampaignSize;                                        // 0x0080(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FOXJ[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LastWeaponsLoadout;                                      // 0x0088(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              LastUpgradesLoadout;                                     // 0x0098(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SchematicInformation;                                    // 0x00A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FPartyAnalyticsInformation                          PartyInfo;                                               // 0x00B8(0x0014) BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic
		struct FDeepDiveAnalyticsInformation                       DeepDiveInfo;                                            // 0x00CC(0x000C) BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic
		class FString                                              DiscordCommunityTrackingID;                              // 0x00D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              CommunityGoalsTrackingID;                                // 0x00E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7O7F[0x54];                                  // 0x00F8(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ShouldUpdateSchematicTrackingInformation;                // 0x014C(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LHSK[0x3];                                   // 0x014D(0x0003) MISSED OFFSET (PADDING)

	public:
		void StartMissionPartyInfo(class AFSDGameState* GameState);
		void SetShouldUpdateSchematicInformation();
		void ResetBoscoLoadout();
		void RecordTotalTimeHit(const class FString& Key, const class FString& Campaign, bool Rank, int32_t Time);
		void RecordOpenScreen(const class FString& Key, bool Rank);
		void RecordMachineEventEnd(const class FString& EventName, bool WasCompleted, float completionTime);
		void RecordKickPlayer(const class FString& reason, class APlayerController* KickedPlayer);
		void RecordGAUserTiming(const class FString& TimingCategory, int32_t TimingValue, const class FString& TimingName);
		void RecordGaTreeOfVanityClaim(int32_t NodeID);
		void RecordGASeasonLevelUp();
		void RecordGAMissionTotalTimeHit(const class FString& Key, const class FString& Campaign, bool Rank, int32_t TotalTime, int32_t Progress, int32_t XP, int32_t Credits);
		void RecordGAMissionTimeEvent(int32_t Time);
		void RecordGAEvent(const class FString& EventCategory, const class FString& EventAction, const class FString& EventLabel, int32_t EventValue, EFSDGoogleAnalyticsProperties Property);
		void RecordGADeepDiveStageHit(const class FString& Key, bool Rank, int32_t StageTime, int32_t TimeSinceStartOfDive, int32_t TotalTime, int32_t NitraLeft);
		void RecordGaChallengeReroll(int32_t ChallengeIndex, class USeasonChallenge* Challenge);
		void RecordExtraFailInfo(const class FString& MissionName, const class FString& Stage, const class FString& ExtraText);
		void RecordCustomGAEvent(const class FString& EventCategory, const class FString& EventAction, const class FString& EventLabel, int32_t EventValue, const class FString& TrackingID);
		void RecordContinuousDamage(class AActor* DamageCauser);
		void RecordBossFightEnd(const class FString& BossName, bool WasBossKilled, int32_t BossKills);
		class FString ProcessCampaignName(class UClass* Campaign);
		void PlayerLatejoin();
		void PlayerDropout();
		void OnPlayerLeaveBind(class AFSDPlayerState* PlayerState);
		void OnPlayerJoinBind(class AFSDPlayerState* PlayerState);
		void HandleMatchStarted();
		class FString GetAnalyticsFText(const class FText& Text);
		void EndMissionPartyInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GooGun
	 * Size -> 0x00B0 (FullSize[0x0800] - InheritedSize[0x0750])
	 */
	class AGooGun : public AAmmoDrivenWeapon
	{
	public:
		class FScriptMulticastDelegate                             OnStartCharging;                                         // 0x0750(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndCharging;                                           // 0x0760(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChargingFailed;                                        // 0x0770(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChargeChanged;                                         // 0x0780(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      ChargeTime;                                              // 0x0790(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ShotCostCharged;                                         // 0x0794(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeThreshold;                                         // 0x0798(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoStopCharingAfterSeconds;                             // 0x079C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ShotCostCycle;                                           // 0x07A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EGooGunFireMode                                            FireMode;                                                // 0x07A4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QMVF[0x3];                                   // 0x07A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           FullyChargedFireSound;                                   // 0x07A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ChargedShotCount;                                        // 0x07B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BuckShotSpreadV;                                         // 0x07B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BuckShotSpreadH;                                         // 0x07B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BuckshotArcCompensation;                                 // 0x07BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      ChargeupParticles;                                       // 0x07C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      ChargeupFireMuzzleFlash;                                 // 0x07C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemComponent*                                  ChargeupParticleInstance;                                // 0x07D0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FP_ChargeupMontage;                                      // 0x07D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_ChargeupMontage;                                      // 0x07E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JL89[0x18];                                  // 0x07E8(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnPuddleSuckedIn();
		float GetOverChargeProgress();
		bool GetIsCharging();
		float GetChargeProgress();
		void ChargingDelegate__DelegateSignature();
		void ChargeChangedDelegate__DelegateSignature(float charge);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GooGunProjectile
	 * Size -> 0x0008 (FullSize[0x0348] - InheritedSize[0x0340])
	 */
	class AGooGunProjectile : public AProjectile
	{
	public:
		float                                                      PuddleLifeTime;                                          // 0x0340(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FragmentCount;                                           // 0x0344(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class AGooGunPuddle* SpawnPuddle(const struct FTransform& Transform, class UClass* PuddleClass);
		void DealSocketArmorDamage(class AActor* Actor, class UPrimitiveComponent* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GooGunPuddle
	 * Size -> 0x0050 (FullSize[0x0270] - InheritedSize[0x0220])
	 */
	class AGooGunPuddle : public AActor
	{
	public:
		class USphereComponent*                                    SphereTrigger;                                           // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USimpleHealthComponent*                              SimpleHealth;                                            // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          SpawnSound;                                              // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FGooPuddleStatusEffectTrigger>               StatusEffectTriggers;                                    // 0x0238(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      InflictedStatusEffects;                                  // 0x0248(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		int32_t                                                    ActiveStatusEffectTriggersMask;                          // 0x0258(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LifeTime;                                                // 0x025C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NVS5[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       CollisionOnClients;                                      // 0x0268(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3VQK[0x7];                                   // 0x0269(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetStatusEffect(class UClass* NewStatusEffect);
		void OnStatusEffectAdded(const struct FGooPuddleStatusEffectTrigger& Trigger);
		void OnRep_ActiveStatusEffectTriggersMask(int32_t PreviousMask);
		void OnPuddleEndOverLap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnPuddleBeginOverLap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnHit(float Damage, const struct FDamageData& DamageData, bool anyHealthLost);
		void OnGooIgnited();
		void IgniteGoo();
		void AddStatusEffect(class UClass* NewStatusEffect);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GooGunAnimInstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class UGooGunAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_RB4O[0x4];                                   // 0x02B8(0x0004) Fix Super Size
		float                                                      ChargePercentVisual;                                     // 0x02BC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargePercent;                                           // 0x02C0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OverChargePercent;                                       // 0x02C4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BarrelRotationRate;                                      // 0x02C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8E1E[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetTargetBarrelRotationRate(float RotationRate);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GrabbedStateComponent
	 * Size -> 0x0020 (FullSize[0x0120] - InheritedSize[0x0100])
	 */
	class UGrabbedStateComponent : public UCharacterStateComponent
	{
	public:
		unsigned char                                              UnknownData_WW3X[0x20];                                  // 0x0100(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlyingLifter
	 * Size -> 0x00A0 (FullSize[0x04D0] - InheritedSize[0x0430])
	 */
	class AFlyingLifter : public AAFlyingBug
	{
	public:
		class UPointLightComponent*                                GrabLight;                                               // 0x0430(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGrabberComponent*                                   GrabberComp;                                             // 0x0438(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCapsuleComponent*                                   GrabCapsule;                                             // 0x0440(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAudioComponent*                                     GrabbedIdleLoop;                                         // 0x0448(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInDangerComponent*                                  InDanger;                                                // 0x0450(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAudioComponent*                                     ScreamComponent;                                         // 0x0458(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q6U2[0x8];                                   // 0x0460(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnGrabSuccess;                                           // 0x0468(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      PreventGrabAfterSpawn;                                   // 0x0478(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IT0R[0x5];                                   // 0x047C(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EGrabberState                                              GrabberState;                                            // 0x0481(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F82Q[0x2];                                   // 0x0482(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WanderingSpeed;                                          // 0x0484(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WanderingAcceleration;                                   // 0x0488(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChaseSpeed;                                              // 0x048C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChaseAcceleration;                                       // 0x0490(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarrySpeed;                                              // 0x0494(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarryAcceleration;                                       // 0x0498(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FleeSpeed;                                               // 0x049C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FleeAcceleration;                                        // 0x04A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HVWL[0x4];                                   // 0x04A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CarryCooldown;                                           // 0x04A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J25W[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          FleeSound;                                               // 0x04B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequenceBase*                                   FleeAnimation;                                           // 0x04B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ParalyzeOnGrab;                                          // 0x04C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JEVG[0x3];                                   // 0x04C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExtraUpForce;                                            // 0x04C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ScreamDistance;                                          // 0x04C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_58T7[0x4];                                   // 0x04CC(0x0004) MISSED OFFSET (PADDING)

	public:
		bool SelectAnotherTarget();
		void OnStateBroke(class AActor* aReleasedPlayer, bool fullGrabElapsed);
		void OnRep_State(EGrabberState oldState);
		void OnInDanger();
		void OnActorLeftGrabZone(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnActorEnterGrabZone(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		bool GetJustGrabbed();
		void DropTarget();
		void ChangeState(EGrabberState aGrabberState);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlyingLifterAnimInstance
	 * Size -> 0x0000 (FullSize[0x0340] - InheritedSize[0x0340])
	 */
	class UFlyingLifterAnimInstance : public USimpleMovingEnemyAnimInstance
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GrabberComponent
	 * Size -> 0x00E0 (FullSize[0x0190] - InheritedSize[0x00B0])
	 */
	class UGrabberComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnGrabbedActor;                                          // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReleasedActor;                                         // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FGameplayTagQuery                                   TagFilter;                                               // 0x00D0(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AXHU[0x8];                                   // 0x0118(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     GrabLoopSoundInstance;                                   // 0x0120(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ADeepPathfinderCharacter>             PathfinderOwner;                                         // 0x0128(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class USkeletalMeshComponent>               OwnerMesh;                                               // 0x0130(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           BeginGrabedSound;                                        // 0x0138(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           GrabedLoopSound;                                         // 0x0140(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           EndGrabedSound;                                          // 0x0148(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    BeginGrabbedShout;                                       // 0x0150(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    EndGrabbedShout;                                         // 0x0158(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    AttentionGrabbedShout;                                   // 0x0160(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              CurrentlyGrabbed;                                        // 0x0168(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                GrabAttachName;                                          // 0x0170(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GrabTime;                                                // 0x0178(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarryCooldown;                                           // 0x017C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RevivedGravePeriod;                                      // 0x0180(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EOutline                                                   PlayerOutlineOnGrab;                                     // 0x0184(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EGrabbedStateCameraMode                                    CameraMode;                                              // 0x0185(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TrackPlayerCollision;                                    // 0x0186(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ManualGrabTime;                                          // 0x0187(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanPlayerShoot;                                          // 0x0188(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_44DM[0x1];                                   // 0x0189(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       HeightenSensesImmune;                                    // 0x018A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       NeedsPathToTarget;                                       // 0x018B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BPKA[0x4];                                   // 0x018C(0x0004) MISSED OFFSET (PADDING)

	public:
		void Timer_ReleaseTarget();
		void ReleaseTarget();
		void OnRep_CurrentlyGrabbed(class AActor* oldCurrentlyGrabbed);
		void OnPrimWake(class UPrimitiveComponent* WakingComponent, const class FName& BoneName);
		bool IsGrabbedTargetValid();
		bool HasGrabbed();
		bool GrabTarget(class AActor* aGrabTarget);
		class AActor* GetGrabbedActor();
		bool CanGrabTarget(class AActor* aTarget);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FakePhysGrabberComponent
	 * Size -> 0x0028 (FullSize[0x01B8] - InheritedSize[0x0190])
	 */
	class UFakePhysGrabberComponent : public UGrabberComponent
	{
	public:
		TArray<struct FGrabAvoidClassEntry>                        ActorTypesToAvoid;                                       // 0x0190(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1FMC[0x8];                                   // 0x01A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAvoidActorEntry>                            ActorsToAvoid;                                           // 0x01A8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GrapplingHookGun
	 * Size -> 0x0070 (FullSize[0x0440] - InheritedSize[0x03D0])
	 */
	class AGrapplingHookGun : public AAnimatedItem
	{
	public:
		unsigned char                                              UnknownData_R682[0x8];                                   // 0x03D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCoolDownItemAggregator*                             CoolDownAggregator;                                      // 0x03D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDistance;                                             // 0x03E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R3RF[0x4];                                   // 0x03E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        FPReloadAnim;                                            // 0x03E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TPReloadAnim;                                            // 0x03F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FPGunslingAnim;                                          // 0x03F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TPGunslingAnim;                                          // 0x0400(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_30K4[0x10];                                  // 0x0408(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxSpeed;                                                // 0x0418(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxSpeedReleaseModifier;                                 // 0x041C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WindUpTime;                                              // 0x0420(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AutoFire;                                                // 0x0424(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E8VE[0x3];                                   // 0x0425(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGraplingGunState                                   State;                                                   // 0x0428(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      GrapleStartTime;                                         // 0x0438(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FPDO[0x4];                                   // 0x043C(0x0004) MISSED OFFSET (PADDING)

	public:
		void StopGrapple();
		bool StartGrapple();
		void Server_SetState(const struct FGraplingGunState& NewState);
		void OnRep_State(const struct FGraplingGunState& prevState);
		void OnReleaseHook();
		void OnGrappleUpdate(float DeltaSeconds);
		void OnGrappleStart();
		void OnGrappleFailed(bool TooFar);
		void OnGrappleEnd();
		float GetWindUpProgress();
		float GetCooldownDuration(class UClass* GrapplingHookGun);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GravityChangedComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UGravityChangedComponent : public UActorComponent
	{
	public:
		bool                                                       bAwakeOnGravityChanged;                                  // 0x00B0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D4VB[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UPrimitiveComponent*>                         PrimitiveComponents;                                     // 0x00B8(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void OnGravityChanged(float Gravity, float Change);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MolotovComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UMolotovComponent : public UActorComponent
	{
	public:
		class UDebrisPositioning*                                  Positioning;                                             // 0x00B0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BurningFlamesClass;                                      // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Radius;                                                  // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ISFI[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (PADDING)

	public:
		void Trigger();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AreaSpawnerComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UAreaSpawnerComponent : public UActorComponent
	{
	public:
		class UClass*                                              ActorToSpawn;                                            // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDeepPathFinderSize                                        PathfinderSize;                                          // 0x00B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SL0T[0x3];                                   // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChanceToSpawn;                                           // 0x00BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SpawnInArea(const struct FVector& Origin, float Radius, float maxVerticalDistance, class APawn* Instigator);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HugeExplosionComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UHugeExplosionComponent : public UActorComponent
	{
	public:
		class UParticleSystem*                                     ExplosionEffect;                                         // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExplosionSpeed;                                          // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExplosionSize;                                           // 0x00BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SK74[0x18];                                  // 0x00C0(0x0018) MISSED OFFSET (PADDING)

	public:
		void TriggerExplosion(const struct FVector& Location);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GrenadeAnimationSet
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UGrenadeAnimationSet : public UDataAsset
	{
	public:
		class UAnimMontage*                                        FP_EquipAnimation;                                       // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        TP_EquipAnimation;                                       // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        FP_ThrowAnimation;                                       // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        TP_ThrowAnimation;                                       // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GrenadeProjectionSettings
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UGrenadeProjectionSettings : public UDataAsset
	{
	public:
		TArray<struct FVector>                                     SplinePoints;                                            // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      ProjectionScale;                                         // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VelocityScale;                                           // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ProjectionVisible;                                       // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_81U3[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GroundToAirComponent
	 * Size -> 0x0078 (FullSize[0x0128] - InheritedSize[0x00B0])
	 */
	class UGroundToAirComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnChangedPathfinderState;                                // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UDeepPathfinderMovement*                             CurrentMove;                                             // 0x00C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WalkTime;                                                // 0x00C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WalkTimeMaxRandomOffset;                                 // 0x00CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WalkTimeMinRandomOffset;                                 // 0x00D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       WalkUseTimer;                                            // 0x00D4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JY7T[0x3];                                   // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FStateStats                                         WalkStats;                                               // 0x00D8(0x0014) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      FlyTime;                                                 // 0x00EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlyTimeMaxRandomOffset;                                  // 0x00F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlyTimeMinRandomOffset;                                  // 0x00F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       FlyUseTimer;                                             // 0x00F8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WZZG[0x3];                                   // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FStateStats                                         FlyStats;                                                // 0x00FC(0x0014) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       IsFlying;                                                // 0x0110(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8S85[0x3];                                   // 0x0111(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ADeepPathfinderCharacter>             OwningPathfinder;                                        // 0x0114(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y5Q1[0xC];                                   // 0x011C(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetIsFlying(bool aIsFlying);
		void SetAllowedToChangeState(bool aIsAllowed);
		void OnRep_StateChange();
		bool GetIsWalking();
		bool GetIsFlying();
		void Engage();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GrowthComponent
	 * Size -> 0x0098 (FullSize[0x0148] - InheritedSize[0x00B0])
	 */
	class UGrowthComponent : public UActorComponent
	{
	public:
		class USceneComponent*                                     ScaleComponent;                                          // 0x00B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FRuntimeFloatCurve                                  CurrentGrowthCurve;                                      // 0x00B8(0x0088) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6AW8[0x8];                                   // 0x0140(0x0008) MISSED OFFSET (PADDING)

	public:
		void StopGrow();
		void StartGrow(class USceneComponent* aComponentToScale, const struct FRuntimeFloatCurve& aCurve);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GuntowerActivationPlatform
	 * Size -> 0x0080 (FullSize[0x02A0] - InheritedSize[0x0220])
	 */
	class AGuntowerActivationPlatform : public AActor
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                STMesh;                                                  // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCapsuleComponent*                                   Trigger;                                                 // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProgressUpdatedDelegate;                               // 0x0238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayersInsideChangedDelegate;                          // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProgressFilled;                                        // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YC7K[0x18];                                  // 0x0268(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AGuntowerModule*                                     AssignedModule;                                          // 0x0280(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DoneAt;                                                  // 0x0288(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I0XC[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DisabledTime;                                            // 0x0290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    playersInside;                                           // 0x0294(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Disabled;                                                // 0x0298(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsShutDown;                                              // 0x0299(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MT2C[0x6];                                   // 0x029A(0x0006) MISSED OFFSET (PADDING)

	public:
		void ShutDown();
		void SetPlatformActive(bool IsActive);
		void ReEnable();
		void PlayerSteppedOn(int32_t CurrentCount);
		void PlayerSteppedOff(int32_t CurrentCount);
		void PlayerInsideRevived();
		void PlayerInsideDied(class UHealthComponentBase* Health);
		void OnShutDown();
		void OnRep_PlayersInside(int32_t OldCount);
		void OnRep_IsShutDown();
		void OnRep_Disabled();
		void OnPlayersInsideChanged(int32_t playersInside);
		void OnPlayerLeave(class AFSDPlayerState* PlayerState);
		void OnOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnFinished();
		void OnDisabledChanged(bool IsDisabled);
		void ModuleDestroyed(class UHealthComponentBase* Health);
		int32_t GetPlayerCount();
		class AGuntowerModule* GetAssignedModule();
		void EndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		bool CanWidgetAppear();
		void AssignModule(class AGuntowerModule* towerModule);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GuntowerEvent
	 * Size -> 0x0060 (FullSize[0x03C8] - InheritedSize[0x0368])
	 */
	class AGuntowerEvent : public AGameEvent
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              BaseMesh;                                                // 0x0370(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    EndExplosionDamage;                                      // 0x0378(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FGuntowerModuleLevel>                        GuntowerLevels;                                          // 0x0380(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FName                                                ModuleAttachBone;                                        // 0x0390(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UPGO[0x10];                                  // 0x0398(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TowerExplodeDelay;                                       // 0x03A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayBetweenExplosions;                                  // 0x03AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AGuntowerModule*>                             TowerModules;                                            // 0x03B0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    ActiveHostileModules;                                    // 0x03C0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1VJ3[0x4];                                   // 0x03C4(0x0004) MISSED OFFSET (PADDING)

	public:
		void SpawnModules();
		void OnRep_ModuleActive();
		void OnModulesSpawned();
		void OnModuleExploded(class AGuntowerModule* explodedModule);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TowerModuleBase
	 * Size -> 0x0070 (FullSize[0x0368] - InheritedSize[0x02F8])
	 */
	class ATowerModuleBase : public AFSDPawn
	{
	public:
		unsigned char                                              UnknownData_B16L[0x8];                                   // 0x02F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     Root;                                                    // 0x0300(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              ModuleMesh;                                              // 0x0308(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UStaticMeshComponent*>                        ArmorPlates;                                             // 0x0310(0x0010) Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UEnemyHealthComponent*                               Health;                                                  // 0x0320(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            ModuleRotation;                                          // 0x0328(0x000C) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GEWM[0xC];                                   // 0x0334(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMesh*                                       DestroyedMesh;                                           // 0x0340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           deathSound;                                              // 0x0348(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     deathParticles;                                          // 0x0350(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ArmorLaunchPower;                                        // 0x0358(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HideArmorTime;                                           // 0x035C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ModuleRotationSpeed;                                     // 0x0360(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ConstantRotation;                                        // 0x0364(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EGuntowerModuleState                                       State;                                                   // 0x0365(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4UHL[0x2];                                   // 0x0366(0x0002) MISSED OFFSET (PADDING)

	public:
		void SetState(EGuntowerModuleState State);
		void OnRep_State(EGuntowerModuleState prevState);
		void HideArmorPlates();
		void DoAttack();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AimingTowerModule
	 * Size -> 0x0030 (FullSize[0x0398] - InheritedSize[0x0368])
	 */
	class AAimingTowerModule : public ATowerModuleBase
	{
	public:
		class AActor*                                              Target;                                                  // 0x0368(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            AimRotation;                                             // 0x0370(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      BurstTime;                                               // 0x037C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7V6W[0x4];                                   // 0x0380(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AttackTime;                                              // 0x0384(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CO5A[0x4];                                   // 0x0388(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BurstSize;                                               // 0x038C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F1ZF[0x8];                                   // 0x0390(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GuntowerModule
	 * Size -> 0x00C0 (FullSize[0x03B8] - InheritedSize[0x02F8])
	 */
	class AGuntowerModule : public AFSDPawn
	{
	public:
		unsigned char                                              UnknownData_1H4X[0x8];                                   // 0x02F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ExposeWeakpointSound;                                    // 0x0300(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           deathSound;                                              // 0x0308(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     deathParticles;                                          // 0x0310(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      WeakpointActors;                                         // 0x0318(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class FName                                                BodyBone;                                                // 0x0328(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                TopConnectionPointName;                                  // 0x0330(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            CurrentTurretRotation;                                   // 0x0338(0x000C) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1TG1[0x4];                                   // 0x0344(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequenceBase*                                   IntroductionAnimation;                                   // 0x0348(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                ArmorPiece1;                                             // 0x0350(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                ArmorPiece2;                                             // 0x0358(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                ArmorPiece3;                                             // 0x0360(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              ModuleMesh;                                              // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGunTowerHealthComponent*                            GuntowerModuleHealth;                                    // 0x0370(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AGuntowerEvent*                                      OwningEvent;                                             // 0x0378(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AGuntowerModule*                                     ChildModule;                                             // 0x0380(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WeakpointsExposedTime;                                   // 0x0388(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WeakpointsExposedTimeSolo;                               // 0x038C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GA1T[0x4];                                   // 0x0390(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HideArmorTime;                                           // 0x0394(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ArmorShootoutDelay;                                      // 0x0398(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ArmorLaunchPower;                                        // 0x039C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ModuleID;                                                // 0x03A0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J7GB[0x4];                                   // 0x03A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsPassiveModule;                                         // 0x03A8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ModuleIsActive;                                          // 0x03A9(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AreWeakpointsExposed;                                    // 0x03AA(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AreWeaponsExposed;                                       // 0x03AB(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ConstantRotation;                                        // 0x03AC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsArmorOff;                                              // 0x03AD(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Exploded;                                                // 0x03AE(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A34N[0x9];                                   // 0x03AF(0x0009) MISSED OFFSET (PADDING)

	public:
		void ShootOutArmor();
		void SetModuleActive();
		void OnTearArmor();
		void OnRep_IsModuleActive();
		void OnRep_IsArmorOff();
		void OnRep_Exploded();
		void OnRep_AreWeakpointExposed();
		void OnActivationChanged(bool IsActivated);
		void Introduce();
		void HideWeakpoints();
		void HideArmor();
		int32_t GetModuleID();
		void DoExplosion();
		void DeactivateTowerModule();
		void All_PlayIntroductionAnim();
		void ActivateTowerModule();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HostileGuntowerModule
	 * Size -> 0x0030 (FullSize[0x03E8] - InheritedSize[0x03B8])
	 */
	class AHostileGuntowerModule : public AGuntowerModule
	{
	public:
		unsigned char                                              UnknownData_LLB8[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              DestroyedMesh;                                           // 0x03C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            DestroyedSmoke;                                          // 0x03C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UEnemyComponent*                                     EnemyComponent;                                          // 0x03D0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ModuleMaxHealth;                                         // 0x03D8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            CurrentAimRotation;                                      // 0x03DC(0x000C) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		void OnWeakpointDied(class UHealthComponentBase* Health);
		void OnRep_ModuleMaxHealth();
		void OnModuleDied(class UHealthComponentBase* Health);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HostileTargetingGuntowerModule
	 * Size -> 0x0040 (FullSize[0x0428] - InheritedSize[0x03E8])
	 */
	class AHostileTargetingGuntowerModule : public AHostileGuntowerModule
	{
	public:
		TArray<class AActor*>                                      SensedTargets;                                           // 0x03E8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B8HK[0xC];                                   // 0x03F8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TurretRotationSpeed;                                     // 0x0404(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              TargetedActor;                                           // 0x0408(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetingRotationSpeed;                                  // 0x0410(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                TargetingFromBone;                                       // 0x0414(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeUntilForgetTarget;                                   // 0x041C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6B4D[0x4];                                   // 0x0420(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       AlwaysUpdateAimRotation;                                 // 0x0424(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_53X5[0x3];                                   // 0x0425(0x0003) MISSED OFFSET (PADDING)

	public:
		void OnPerceptionUpdated(class AActor* sensedActor, const struct FAIStimulus& Stimulus);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LMGGuntoweModule
	 * Size -> 0x0088 (FullSize[0x04B0] - InheritedSize[0x0428])
	 */
	class ALMGGuntoweModule : public AHostileTargetingGuntowerModule
	{
	public:
		class UHitscanComponent*                                   HitScanComp;                                             // 0x0428(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    DamageComp;                                              // 0x0430(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     AimAtWhenNoTarget;                                       // 0x0438(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAudioComponent*                                     FireAudio;                                               // 0x0440(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EP10[0x10];                                  // 0x0448(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     TracerEffect;                                            // 0x0458(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     MuzzleEffect;                                            // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ShootTailSound;                                          // 0x0468(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XZ5H[0x8];                                   // 0x0470(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BurstSize;                                               // 0x0478(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3D65[0xC];                                   // 0x047C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxAimOffset;                                            // 0x0488(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IdleAimRotationSpeed;                                    // 0x048C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_09CM[0x10];                                  // 0x0490(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeBetweenShots;                                        // 0x04A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenBursts;                                       // 0x04A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AimSpeed;                                                // 0x04A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CIA0[0x1];                                   // 0x04AC(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsFiresoundPlaying;                                      // 0x04AD(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JAX4[0x2];                                   // 0x04AE(0x0002) MISSED OFFSET (PADDING)

	public:
		void ShowShot(const struct FVector& Location);
		void OnRep_IsFiresoundPlaying();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandomFiringGuntowerModule
	 * Size -> 0x0180 (FullSize[0x0568] - InheritedSize[0x03E8])
	 */
	class ARandomFiringGuntowerModule : public AHostileGuntowerModule
	{
	public:
		class UStaticMeshComponent*                                LaserFrontTop;                                           // 0x03E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                LaserFrontBottom;                                        // 0x03F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                LaserBackTop;                                            // 0x03F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                LaserBackBottom;                                         // 0x0400(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            FrontTopLaserMuzzle;                                     // 0x0408(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            FrontBottomLaserMuzzle;                                  // 0x0410(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            BackTopLaserMuzzle;                                      // 0x0418(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            BackBottomLaserMuzzle;                                   // 0x0420(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P8KK[0xC4];                                  // 0x0428(0x00C4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            OtherCurrentRotation;                                    // 0x04EC(0x000C) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_94DZ[0x10];                                  // 0x04F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     LaserImpact;                                             // 0x0508(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     LaserSound;                                              // 0x0510(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    Damage;                                                  // 0x0518(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BoneSpaceTurretMaxYaw;                                   // 0x0520(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BoneSpaceTurretMaxPitch;                                 // 0x0524(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenAttacks;                                      // 0x0528(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeUntilNextAttack;                                     // 0x052C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ModuleRotationSpeed;                                     // 0x0530(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurretAimSpeed;                                          // 0x0534(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LaserLeghtRatio;                                         // 0x0538(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenHits;                                         // 0x053C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TP0V[0x4];                                   // 0x0540(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChanceToInvert;                                          // 0x0544(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlatformDissolveRadius;                                  // 0x0548(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlatformDissolveSqueeze;                                 // 0x054C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TSQ4[0x10];                                  // 0x0550(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsAttacking;                                             // 0x0560(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O2TG[0x7];                                   // 0x0561(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RadialFireModule
	 * Size -> 0x0048 (FullSize[0x0430] - InheritedSize[0x03E8])
	 */
	class ARadialFireModule : public AHostileGuntowerModule
	{
	public:
		class UClass*                                              ProjectileClass;                                         // 0x03E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            AttackEndRotation;                                       // 0x03F0(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      RotationSpeedTurret;                                     // 0x03FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NOKS[0x4];                                   // 0x0400(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DelayBetweenShots;                                       // 0x0404(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_THZS[0x4];                                   // 0x0408(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsAttacking;                                             // 0x040C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CWNM[0x3];                                   // 0x040D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                LeftFireSocket;                                          // 0x0410(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                RightFireSocket;                                         // 0x0418(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                FrontFireSocket;                                         // 0x0420(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                BackFireSocket;                                          // 0x0428(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnFire();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HomingFireModule
	 * Size -> 0x0018 (FullSize[0x0440] - InheritedSize[0x0428])
	 */
	class AHomingFireModule : public AHostileTargetingGuntowerModule
	{
	public:
		class FName                                                ShootDroneSocket;                                        // 0x0428(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              HomingProjectileClass;                                   // 0x0430(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenShots;                                        // 0x0438(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T8UF[0x4];                                   // 0x043C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HomingDroneBomb
	 * Size -> 0x0050 (FullSize[0x0390] - InheritedSize[0x0340])
	 */
	class AHomingDroneBomb : public AProjectile
	{
	public:
		unsigned char                                              UnknownData_ZPT4[0x8];                                   // 0x0340(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnemyHealthComponent*                               Health;                                                  // 0x0348(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USoundCue*                                           ArmingSound;                                             // 0x0350(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HomingUpdateInterval;                                    // 0x0358(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetSearchInterval;                                    // 0x035C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ArmTime;                                                 // 0x0360(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7Q75[0x4];                                   // 0x0364(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x0368(0x0020) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		float                                                      HomingAccelerationMagnitude;                             // 0x0388(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_654I[0x4];                                   // 0x038C(0x0004) MISSED OFFSET (PADDING)

	public:
		void UpdateHomingSpeed();
		void SearchForTarget();
		void OnRep_HomingAccelerationMagnitude();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GunTowerModuleAnimInstance
	 * Size -> 0x0020 (FullSize[0x02D8] - InheritedSize[0x02B8])
	 */
	class UGunTowerModuleAnimInstance : public UAnimInstance
	{
	public:
		struct FRotator                                            CurrentModuleRotation;                                   // 0x02B8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            CurrentLookAtRotation;                                   // 0x02C4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       IsModuleActive;                                          // 0x02D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AreWeakpointsExposed;                                    // 0x02D1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VF7P[0x6];                                   // 0x02D2(0x0006) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandomFireModuleAnimInstance
	 * Size -> 0x0018 (FullSize[0x02F0] - InheritedSize[0x02D8])
	 */
	class URandomFireModuleAnimInstance : public UGunTowerModuleAnimInstance
	{
	public:
		struct FRotator                                            OtherLookatRotation;                                     // 0x02D8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PV8Q[0xC];                                   // 0x02E4(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GuntowerWeakPoint
	 * Size -> 0x0048 (FullSize[0x0340] - InheritedSize[0x02F8])
	 */
	class AGuntowerWeakPoint : public AFSDPawn
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x02F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UEnemyHealthComponent*                               Health;                                                  // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Mesh;                                                    // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeakpointGlowComponent*                             HitGlow;                                                 // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UEnemyHealthComponent>                ParentHealth;                                            // 0x0318(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageClass*                                        DamageToParent;                                          // 0x0320(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     deathParticles;                                          // 0x0328(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           deathSound;                                              // 0x0330(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2BXY[0x8];                                   // 0x0338(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnExposedChanged(bool isExposed);
		void OnDeath(class UHealthComponentBase* HealthComponent);
		void DamageParent(float ammount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GunTowerHealthComponent
	 * Size -> 0x0000 (FullSize[0x0298] - InheritedSize[0x0298])
	 */
	class UGunTowerHealthComponent : public UEnemyHealthComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HackingToolItem
	 * Size -> 0x0010 (FullSize[0x03E0] - InheritedSize[0x03D0])
	 */
	class AHackingToolItem : public AAnimatedItem
	{
	public:
		TWeakObjectPtr<class UHackingUsableComponent>              HackingUsable;                                           // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GWD7[0x8];                                   // 0x03D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void Server_HackingCompleted(class UHackingUsableComponent* InUsable, bool InHackingSuccessful);
		void ReceiveHackingStarted();
		void ReceivedActionReleased();
		void ReceivedActionPressed();
		void ReceiveActionClick();
		void OnRep_HackingUsable();
		void HackingCompleted(bool InHackingSuccessful);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HackingUsableComponent
	 * Size -> 0x0088 (FullSize[0x01F8] - InheritedSize[0x0170])
	 */
	class UHackingUsableComponent : public UInstantUsable
	{
	public:
		class FScriptMulticastDelegate                             OnHacked;                                                // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             BeingHackedUpdated;                                      // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              ItemType[0x28];                                          // 0x0190(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              HackingWidgetType[0x28];                                 // 0x01B8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		struct FHackingUsableState                                 HackingState;                                            // 0x01E0(0x0014) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DY8F[0x4];                                   // 0x01F4(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_HackingState(const struct FHackingUsableState& oldState);
		void HackedDelegate__DelegateSignature(class APlayerCharacter* InHackedBy);
		bool GetIsHacked();
		bool GetIsBeingHacked();
		void GetHackingWidgetType();
		class APlayerCharacter* GetHackedBy();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HackingToolWidget
	 * Size -> 0x0050 (FullSize[0x02B0] - InheritedSize[0x0260])
	 */
	class UHackingToolWidget : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnHackingFail;                                           // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHackingStageCompleted;                                 // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHackingCompleted;                                      // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRequestUnequipHackingTool;                             // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UHackingUsableComponent>              HackingUsable;                                           // 0x02A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AHackingToolItem>                     HackingTool;                                             // 0x02A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void StartHacking(class UHackingUsableComponent* InHackingUsable, class AHackingToolItem* InHackingTool);
		void RequestUnequipHackingTool();
		void ReceiveHackingToolUnequipped();
		void ReceiveHackingStarted();
		void ReceiveActionReleased();
		void ReceiveActionPressed();
		void ReceiveActionClick();
		void HackingUnequipDelegate__DelegateSignature();
		void HackingStageCompletedDelegate__DelegateSignature(int32_t InNextStage, int32_t InTotalStages);
		void HackingStageComplete(int32_t InNextStage, int32_t InTotalStages);
		void HackingFailDelegate__DelegateSignature(class USoundCue* InFailCue, class UDialogDataAsset* InShout);
		void HackingCompleteDelegate__DelegateSignature(bool InSuccess);
		void HackingComplete(bool InSuccess);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HalloweenSkull
	 * Size -> 0x00C0 (FullSize[0x0470] - InheritedSize[0x03B0])
	 */
	class AHalloweenSkull : public AEnemyDeepPathfinderCharacter
	{
	public:
		struct FVector                                             WobbleSpeeds;                                            // 0x03B0(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             WobbleRanges;                                            // 0x03BC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  AlertedMovement;                                         // 0x03C8(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      AlertedMovementScale;                                    // 0x0450(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AlertedMovementTimeScale;                                // 0x0454(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      JawMovementSpeed;                                        // 0x0458(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V12V[0x14];                                  // 0x045C(0x0014) MISSED OFFSET (PADDING)

	public:
		void OnJawClosed();
		void OnAlert();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HalloweenSkullAnimInstance
	 * Size -> 0x0028 (FullSize[0x02E0] - InheritedSize[0x02B8])
	 */
	class UHalloweenSkullAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_MTVR[0x4];                                   // 0x02B8(0x0004) Fix Super Size
		float                                                      JawMovementSpeedMax;                                     // 0x02BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      JawMovementRange;                                        // 0x02C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SwitchAnimationTimeMin;                                  // 0x02C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SwitchAnimationTimeMax;                                  // 0x02C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      JawPosition;                                             // 0x02CC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1JST[0x10];                                  // 0x02D0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HangingFireCracker
	 * Size -> 0x0050 (FullSize[0x0270] - InheritedSize[0x0220])
	 */
	class AHangingFireCracker : public AActor
	{
	public:
		class UInstantUsable*                                      Usable;                                                  // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              SKMesh;                                                  // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   MovingSparks;                                            // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFSDAudioComponent*                                  FuseSound;                                               // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UStaticMeshComponent*>                        Crackers;                                                // 0x0240(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      CrackerExplosion;                                        // 0x0250(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           CrackerExplosionCue;                                     // 0x0258(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SparkSpeed;                                              // 0x0260(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExplodeRange;                                            // 0x0264(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExplodeImpulse;                                          // 0x0268(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IGD0[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (PADDING)

	public:
		void StartFire();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HeadVanityItem
	 * Size -> 0x00E8 (FullSize[0x0208] - InheritedSize[0x0120])
	 */
	class UHeadVanityItem : public UVanityItem
	{
	public:
		unsigned char                                              Mesh[0x28];                                              // 0x0120(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AnimInstance[0x28];                                      // 0x0148(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		EHeadVanityType                                            HeadVanityType;                                          // 0x0170(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HideEyebrows;                                            // 0x0171(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HideSideburns;                                           // 0x0172(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HideMoustache;                                           // 0x0173(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HideBeard;                                               // 0x0174(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HideAll;                                                 // 0x0175(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RequiresSlimArmor;                                       // 0x0176(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T9CX[0x1];                                   // 0x0177(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UArmorVanityItem*>                            ForceThickAmorsHack;                                     // 0x0178(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       HideHead;                                                // 0x0188(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECharacterHeadMesh                                         HeadMesh;                                                // 0x0189(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_105A[0x6];                                   // 0x018A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              MaterialOverride[0x28];                                  // 0x0190(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              ClassMaterials[0x50];                                    // 0x01B8(0x0050) UNKNOWN PROPERTY: MapProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WidgetComponentCustomMaterial
	 * Size -> 0x0010 (FullSize[0x05B0] - InheritedSize[0x05A0])
	 */
	class UWidgetComponentCustomMaterial : public UWidgetComponent
	{
	public:
		class UMaterialInterface*                                  CustomMaterial;                                          // 0x05A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G8P9[0x8];                                   // 0x05A8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HealthBarComponent
	 * Size -> 0x0000 (FullSize[0x05B0] - InheritedSize[0x05B0])
	 */
	class UHealthBarComponent : public UWidgetComponentCustomMaterial
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HealthDamageTracker
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UHealthDamageTracker : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnTrackedPercentageReachedEvent;                         // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      TiggerOnPercentage;                                      // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8WJ6[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHealthComponentBase*                                Health;                                                  // 0x00C8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ResetTrackedDamage();
		void OnDamageTaken(float Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HeavyParticleCannon
	 * Size -> 0x01E8 (FullSize[0x0938] - InheritedSize[0x0750])
	 */
	class AHeavyParticleCannon : public AAmmoDrivenWeapon
	{
	public:
		class UDamageComponent*                                    Damage;                                                  // 0x0750(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UReflectionHitscanComponent*                         HitscanComponent;                                        // 0x0758(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStickyFlameSpawner*                                 StickyFlamesSpawner;                                     // 0x0760(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFirstPersonNiagaraComponent*                        FirstPersonBeam;                                         // 0x0768(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFirstPersonNiagaraComponent*                        FirstPersonLaserSight;                                   // 0x0770(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraComponent*                                   ThirdPersonBeam;                                         // 0x0778(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_00WB[0x10];                                  // 0x0780(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          BeamHitLocationGenericSound;                             // 0x0790(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          BeamHitLocationEnemySound;                               // 0x0798(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          BeamHitLocationEnemy_Local_Sound;                        // 0x07A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O5FW[0x4];                                   // 0x07A8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BeamHitSoundFadeSwitchTime;                              // 0x07AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          BeamHitLocationTailSound;                                // 0x07B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          BoosterModuleActivated;                                  // 0x07B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnBoosterActiveChanged;                                  // 0x07C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A453[0x10];                                  // 0x07D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UNiagaraSystem*                                      ReflectedBeam;                                           // 0x07E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      ReflectedBeam_PhotoSensitive;                            // 0x07E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      ReflectedLaserSight;                                     // 0x07F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      ImpactParticle;                                          // 0x07F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      ImpactParticle_PhotoSensitive;                           // 0x0800(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      ProjectionModuleParticle;                                // 0x0808(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraComponent*                                   ImpactParticleComp;                                      // 0x0810(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDecalData                                          ImpactDecal_ShortTime;                                   // 0x0818(0x0020) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDecalData                                          ImpactDecal_LongTime;                                    // 0x0838(0x0020) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bReloadOnButtonRelease;                                  // 0x0858(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_78AH[0x3];                                   // 0x0859(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinTimeBetweenBiomassGain;                               // 0x085C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O9HK[0x8];                                   // 0x0860(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       BulkyBeam;                                               // 0x0868(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N9PN[0x3];                                   // 0x0869(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NormalBeamWidth;                                         // 0x086C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BulkyBeamWidth;                                          // 0x0870(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExtraRadialDamagePerSec;                                 // 0x0874(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExtraRadialRangePerSec;                                  // 0x0878(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KKLK[0x14];                                  // 0x087C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CancelCostPercentage;                                    // 0x0890(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeupTime;                                            // 0x0894(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          StartChargeSound;                                        // 0x0898(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2SNX[0x8];                                   // 0x08A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LastDecalLocation;                                       // 0x08A8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsNewDecalBeam;                                          // 0x08B4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CWSB[0x3];                                   // 0x08B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ProjectionModuleDamage;                                  // 0x08B8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JD7U[0x4];                                   // 0x08BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTerrainType*                                        PlatformTerrainType;                                     // 0x08C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L4J7[0xC];                                   // 0x08C8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       BoostActive;                                             // 0x08D4(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bReloadBoostsBeam;                                       // 0x08D5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D7TY[0x2];                                   // 0x08D6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExtraReloadTimeAfterBoost;                               // 0x08D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BoostExtraAmmoCost;                                      // 0x08DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CLB2[0x14];                                  // 0x08E0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BeamDependentReloadDuration;                             // 0x08F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K1T3[0x4];                                   // 0x08F8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           BeamDistanceRange;                                       // 0x08FC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           BeamTesselationRange;                                    // 0x0904(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsBeamActive;                                           // 0x090C(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_69SC[0x2B];                                  // 0x090D(0x002B) MISSED OFFSET (PADDING)

	public:
		void UpdateBeamsVisibility(bool isBeamVisible);
		void UpdateBeam(const struct FReflectionTraceResult& Path);
		void ServerSetBoostActive(bool newActive);
		void Server_SetBeamActive(bool inIsBeamActive);
		void Server_ExplodePlatform(const struct FVector& Location);
		void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);
		void OnRep_BoostActive();
		void OnRep_bIsBeamActive();
		void IsHittngEnemyChanged(bool isHittingEnemy);
		void ChargeUpComplete();
		void ChargeChanged(bool isCharging);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HeliumTank
	 * Size -> 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
	 */
	class AHeliumTank : public AActor
	{
	public:
		class UCurveFloat*                                         PitchCurve;                                              // 0x0220(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPitchedUsers>                               PitchedUsers;                                            // 0x0228(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		class AHeliumTank*                                         Leader;                                                  // 0x0238(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnUsedBy(class APlayerCharacter* User, EInputKeys Key);
		void OnShoutStarted(class APlayerCharacter* Player, class UAudioComponent* audio);
		void OnRep_PitchedUsers();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HeroEnemies
	 * Size -> 0x0098 (FullSize[0x00C0] - InheritedSize[0x0028])
	 */
	class UHeroEnemies : public URunningMissionBP
	{
	public:
		struct FGameplayTagQuery                                   AllowedQuery;                                            // 0x0028(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		TMap<class UEnemyDescriptor*, struct FEliteEnemyEntry>     Entries;                                                 // 0x0070(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnEnemySpawned(class APawn* enemy, class UEnemyDescriptor* descriptor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerCharacterData
	 * Size -> 0x0090 (FullSize[0x00C0] - InheritedSize[0x0030])
	 */
	class UPlayerCharacterData : public UPrimaryDataAsset
	{
	public:
		class UPlayerCharacterID*                                  characterID;                                             // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FHeroInfo                                           HeroInfo;                                                // 0x0038(0x0088) Edit, NativeAccessSpecifierPublic

	public:
		class FText GetSwitchToMessage();
		class UTexture2D* GetSmallIcon();
		class FText GetShortDescription();
		class FText GetName();
		class FText GetLongDescription();
		class UTexture2D* GetIcon();
		class UTexture2D* GetFullSizeImage();
		struct FLinearColor GetColor();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HitReactionComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UHitReactionComponent : public UActorComponent
	{
	public:
		TArray<class UAnimSequenceBase*>                           HitReactions;                                            // 0x00B0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      FirstHitReactBlendIn;                                    // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OverrideHitReactBlendIn;                                 // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GEZS[0x4];                                   // 0x00C8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       AllowHitReactions;                                       // 0x00CC(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E354[0x3];                                   // 0x00CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              SkeletalMesh;                                            // 0x00D0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void PlayHitReaction();
		void OnDamageTaken(float Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HitscanComponent
	 * Size -> 0x00B8 (FullSize[0x0300] - InheritedSize[0x0248])
	 */
	class UHitscanComponent : public UHitscanBaseComponent
	{
	public:
		class FScriptMulticastDelegate                             OnHit;                                                   // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       CanHitInstigator;                                        // 0x0258(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       BulletsCanCarve;                                         // 0x0259(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_31VH[0x2];                                   // 0x025A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FIRandRange                                         NormalBulletsPerCarvingOne;                              // 0x025C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AE5J[0x4];                                   // 0x0264(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CarveDiameter;                                           // 0x0268(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarveNoise;                                              // 0x026C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarveDebrisSize;                                         // 0x0270(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GeneralImpactAudioVolume;                                // 0x0274(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ImpactDelay;                                             // 0x0278(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       OnlyUseImpactEffects;                                    // 0x027C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XYVN[0x3];                                   // 0x027D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFXSystemAsset*                                      ImpactParticles;                                         // 0x0280(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ImpactSound;                                             // 0x0288(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IgnoreAlwaysPenetrate;                                   // 0x0290(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XVVM[0x7];                                   // 0x0291(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      DamagedActorCache;                                       // 0x0298(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1XNV[0x18];                                  // 0x02A8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FHitscanDelayedImpact>                       DelayedImpacts;                                          // 0x02C0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_96SH[0x30];                                  // 0x02D0(0x0030) MISSED OFFSET (PADDING)

	public:
		void Server_RegisterRicochetHit_Terrain(const struct FVector_NetQuantize& Origin, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal, class UFSDPhysicalMaterial* PhysMaterial);
		void Server_RegisterRicochetHit_Destructable(const struct FVector_NetQuantize& Origin, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal, class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial, unsigned char BoneIndex);
		void Server_RegisterRicochetHit(const struct FVector_NetQuantize& Origin, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal, class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial);
		void Server_RegisterHit_Terrain(const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal, class UFSDPhysicalMaterial* PhysMaterial);
		void Server_RegisterHit_Destructable(const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal, class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial, unsigned char BoneIndex);
		void Server_RegisterHit(const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal, class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial);
		void All_ShowRicochetHit_Terrain(const struct FVector_NetQuantize& Origin, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal, unsigned char MaterialID, class UFSDPhysicalMaterial* PhysMaterial);
		void All_ShowRicochetHit_Destructable(const struct FVector_NetQuantize& Origin, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal, class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial, unsigned char BoneIndex);
		void All_ShowRicochetHit(const struct FVector_NetQuantize& Origin, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal, bool SpawnDecal, class UFSDPhysicalMaterial* PhysMaterial);
		void All_ShowHit_Terrain(const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal, unsigned char MaterialID, class UFSDPhysicalMaterial* PhysMaterial);
		void All_ShowHit_Destructable(const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal, class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial, unsigned char BoneIndex);
		void All_ShowHit(const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal, bool SpawnDecal, class UFSDPhysicalMaterial* PhysMaterial);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ThrowableItem
	 * Size -> 0x0090 (FullSize[0x0460] - InheritedSize[0x03D0])
	 */
	class AThrowableItem : public AAnimatedItem
	{
	public:
		unsigned char                                              UnknownData_5O0R[0x8];                                   // 0x03D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ThrowableClass;                                          // 0x03D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FPThrowMontage;                                          // 0x03E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TPThrowMontage;                                          // 0x03E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThrowVelocity;                                           // 0x03F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InheritOwnerVelocityScale;                               // 0x03F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThrowAngle;                                              // 0x03F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CooldownAfterThrow;                                      // 0x03FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanThrowBeforeEquipAnimFinish;                           // 0x0400(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JQDV[0x3];                                   // 0x0401(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CooldownAfterEquip;                                      // 0x0404(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThrowDelay;                                              // 0x0408(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             ThrowOffset;                                             // 0x040C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CooldownLeft;                                            // 0x0418(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E197[0x4];                                   // 0x041C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UItemUpgrade*>                                upgrades;                                                // 0x0420(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UClass*                                              LoadoutItem;                                             // 0x0430(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class AThrowableActor>>              ThrownActors;                                            // 0x0438(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S89C[0x18];                                  // 0x0448(0x0018) MISSED OFFSET (PADDING)

	public:
		void Simulate_Throw(class UClass* ActorClass);
		void Server_Throw(class UClass* ActorClass, const struct FVector& Location);
		void ReceiveItemThrown(class AThrowableActor* thrownActor);
		void ReceiveItemSpawned(class AThrowableActor* thrownActor);
		void OnThrownActorDestroyed(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HolidayThrowableItem
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class AHolidayThrowableItem : public AThrowableItem
	{
	public:
		void CameraModeUpdated(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HostileGuntowerModuleController
	 * Size -> 0x0010 (FullSize[0x0368] - InheritedSize[0x0358])
	 */
	class AHostileGuntowerModuleController : public AFSDAIController
	{
	public:
		class UAIPerceptionComponent*                              Perception;                                              // 0x0358(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7UQB[0x8];                                   // 0x0360(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPerceptionUpdated(class AActor* sensedActor, const struct FAIStimulus& Stimulus);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HttpUtilityLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UHttpUtilityLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HUDActorTrackingSubsystem
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UHUDActorTrackingSubsystem : public UWorldSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnToggleTrackingEvent;                                   // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowAlwaysTrackedEvent;                                // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HUDHealthBar
	 * Size -> 0x00D0 (FullSize[0x0350] - InheritedSize[0x0280])
	 */
	class UHUDHealthBar : public UFSDUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnOwnerDead;                                             // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FLinearColor                                        BackgroundColor;                                         // 0x0290(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        HealthColor;                                             // 0x02A0(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        DamageColor;                                             // 0x02B0(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<EHealthbarType, struct FHealthBarLooks>               HealthBarLooks;                                          // 0x02C0(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        OutlineColor;                                            // 0x0310(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    OutlineThickness;                                        // 0x0320(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HealthAnimationFactor;                                   // 0x0324(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HealthPerCell;                                           // 0x0328(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MinHealthCells;                                          // 0x032C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxHealthCells;                                          // 0x0330(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N31Z[0x4];                                   // 0x0334(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              TargetHealth[0x10];                                      // 0x0338(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		float                                                      AnimatedHealth;                                          // 0x0348(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxHealth;                                               // 0x034C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetHealthComponent(float Damage);
		float GetCurrentHealth();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HUDVisibilityGroup
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class UHUDVisibilityGroup : public UDataAsset
	{
	public:
		class FScriptMulticastDelegate                             OnModeChanged;                                           // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVisibilityChanged;                                     // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		EHUDVisibilityGroups                                       GroupID;                                                 // 0x0050(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JH1G[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                Title;                                                   // 0x0058(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		bool                                                       AllowDynamicMode;                                        // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AllowHiddenMode;                                         // 0x0071(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LM6R[0x6];                                   // 0x0072(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDynamicallyVisible;                                     // 0x0078(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NUUX[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FHUDVisibilityRegisteredWidget>              RegisteredWidgets;                                       // 0x0080(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		EHUDVisibilityMode                                         RecommendedMode;                                         // 0x0090(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EHUDVisibilityMode                                         MinimalMode;                                             // 0x0091(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_35EU[0x6];                                   // 0x0092(0x0006) MISSED OFFSET (PADDING)

	public:
		void VisibilityDelegate__DelegateSignature(class UHUDVisibilityGroup* Group, bool IsVisible);
		void SetModeFromPreset(EHUDVisibilityPresets Preset);
		void SetMode(EHUDVisibilityMode InMode);
		void SetHudGroupDynamicallyVisible(class UHUDVisibilityGroup* Group, bool IsVisible);
		void SetGroupDynamicallyVisible(bool IsVisible);
		void RegisterWidgetWithVisibilityGroup(class UWidget* Widget, class UHUDVisibilityGroup* Group, ESlateVisibility VisibleMode, ESlateVisibility HiddenMode);
		void RegisterMultipleWidgetsWithVisibilityGroup(TArray<class UWidget*> Widgets, class UHUDVisibilityGroup* Group, ESlateVisibility VisibleMode, ESlateVisibility HiddenMode);
		void ModeDelegate__DelegateSignature(class UHUDVisibilityGroup* Group, EHUDVisibilityMode Mode);
		bool IsModeAllowed(EHUDVisibilityMode InMode);
		bool IsInDynamicMode();
		bool IsHudGroupVisible(class UHUDVisibilityGroup* Group);
		bool IsGroupVisible();
		EHUDVisibilityMode GetMode();
		TArray<EHUDVisibilityMode> GetAllowedModes();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HUDWarningWidget
	 * Size -> 0x0000 (FullSize[0x0280] - InheritedSize[0x0280])
	 */
	class UHUDWarningWidget : public UFSDUserWidget
	{
	public:
		void SetData(class UTexture2D* Texture, class USoundBase* PingSound);
		void Ping(bool DestroyAfterPing);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HydraWeedCore
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class AHydraWeedCore : public AEnemyPawn
	{
	public:
		void WakupCore();
		void OnShooterKilled(class AHydraWeedShooter* shooter);
		void OnHealerKilled(class AHydraWeedHealer* healer);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShootingPlant
	 * Size -> 0x0010 (FullSize[0x0358] - InheritedSize[0x0348])
	 */
	class AShootingPlant : public AEnemyPawn
	{
	public:
		bool                                                       IsVisible;                                               // 0x0348(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HQMA[0x7];                                   // 0x0349(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              Target;                                                  // 0x0350(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetTarget(class AActor* Target);
		void OnRep_Target();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HydraWeedShooter
	 * Size -> 0x0008 (FullSize[0x0360] - InheritedSize[0x0358])
	 */
	class AHydraWeedShooter : public AShootingPlant
	{
	public:
		class AHydraWeedCore*                                      Core;                                                    // 0x0358(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HydraWeedHealer
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class AHydraWeedHealer : public AEnemyPawn
	{
	public:
		class AHydraWeedCore*                                      Core;                                                    // 0x0348(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HydraWeedSpawnProjectile
	 * Size -> 0x0010 (FullSize[0x0350] - InheritedSize[0x0340])
	 */
	class AHydraWeedSpawnProjectile : public AProjectile
	{
	public:
		struct FVector                                             TargetLocation;                                          // 0x0340(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EVJO[0x4];                                   // 0x034C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TriggerAI
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTriggerAI : public UInterface
	{
	public:
		bool OnTriggerAI(const class FName& TriggerName);
		void OnMessageAI(const class FName& TriggerName);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Aquisitionable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAquisitionable : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.IconGenerationManager
	 * Size -> 0x01A0 (FullSize[0x01C8] - InheritedSize[0x0028])
	 */
	class UIconGenerationManager : public UObject
	{
	public:
		class AIconGenerationCharacter*                            GeneratorInst;                                           // 0x0028(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AIconGenerationPickaxe*                              PickaxeGeneratorInst;                                    // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AIconGenerationWeapon*                               WeaponGeneratorInst;                                     // 0x0038(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KTF7[0x50];                                  // 0x0040(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGenerateIconInfo>                           ItemGenerationQueue;                                     // 0x0090(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7K6C[0x28];                                  // 0x00A0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EVanitySlot>                                        VanitySlots;                                             // 0x00C8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UVanityItem*>                                 HairColorHairItems;                                      // 0x00D8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              IconCharacter[0x28];                                     // 0x00E8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              IconPickaxe[0x28];                                       // 0x0110(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              IconWeapon[0x28];                                        // 0x0138(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UTextureRenderTarget2D*                              LatestGeneratedTexture;                                  // 0x0160(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AIconGenerationBase*                                 ActiveIconGenerator;                                     // 0x0168(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7R2U[0x58];                                  // 0x0170(0x0058) MISSED OFFSET (PADDING)

	public:
		void GenerateWeaponIcon_Async(class UIconGenerationManager* manager, class UItemSkin* Item, bool inShowCloseUp, class UPlayerCharacterID* Character, class UTextureRenderTarget2D** Icon, const struct FLatentActionInfo& LatentInfo);
		void GenerateVanityIcon_Async(class UIconGenerationManager* manager, class UVanityItem* Item, class UPlayerCharacterID* Character, class UTextureRenderTarget2D** Icon, const struct FLatentActionInfo& LatentInfo);
		void GeneratePickaxeSetIcon_Async(class UIconGenerationManager* manager, const struct FPickaxeSet& PickaxeSet, class UPlayerCharacterID* Character, class UTextureRenderTarget2D** Icon, const struct FLatentActionInfo& LatentInfo);
		void GeneratePickaxePartIcon_Async(class UIconGenerationManager* manager, class UPickaxePart* part, EPickaxePartLocation PickaxePartLocation, class UPlayerCharacterID* Character, class UTextureRenderTarget2D** Icon, const struct FLatentActionInfo& LatentInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.IconGeneratable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UIconGeneratable : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Craftable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCraftable : public UInterface
	{
	public:
		void PreviewItem(class AFSDPlayerState* PlayerState, bool Show);
		bool IsOwned(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		TArray<struct FCraftingCost> GetResourceCost();
		int32_t GetRequiredPlayerRank();
		struct FCraftingCost GetFashioniteCost();
		int32_t GetCraftingCreditsCost();
		class FText GetCraftableName();
		class FText GetCraftableDescription();
		void CraftItemWithFashionite(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		void CraftItem(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		bool CanCraftWithFashionite(class UObject* WorldContextObject);
		bool CanCraft(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FootStepNotifyTarget
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFootStepNotifyTarget : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Health
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UHealth : public UInterface
	{
	public:
		bool IsDead();
		bool IsAlive();
		class AActor* GetOwner();
		float GetMaxHealth();
		EHealthbarType GetHealthbarType();
		float GetHealth();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InputCompatible
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInputCompatible : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MinersManualHandler
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMinersManualHandler : public UInterface
	{
	public:
		void OpenMinersManualPage(EMinersManualSinglePage page);
		void OpenMinersManualFromID(EMinersManualSection Section, const struct FGuid& ID);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ImpactComponent
	 * Size -> 0x0070 (FullSize[0x0120] - InheritedSize[0x00B0])
	 */
	class UImpactComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnImpactedEvent;                                         // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHighAcceleration;                                      // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       DebugText;                                               // 0x00D0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OGVY[0x2B];                                  // 0x00D1(0x002B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       TrackAcceleration;                                       // 0x00FC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TrackVelocity;                                           // 0x00FD(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R1M5[0x6];                                   // 0x00FE(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TriggerHighAccelAt;                                      // 0x0104(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TYUO[0x8];                                   // 0x0108(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TriggerAtVelocityDifference;                             // 0x0110(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0GIJ[0xC];                                   // 0x0114(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetCheckVelocity(bool aCheckVelocity);
		void SetCheckAcceleration(bool aCheckAcceleration);
		void EnableImpactCheckhing(class USceneComponent* cmp);
		void DisableImpactChecking();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponImpactComponent
	 * Size -> 0x0078 (FullSize[0x0128] - InheritedSize[0x00B0])
	 */
	class UWeaponImpactComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnImpactedEvent;                                         // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHighAcceleration;                                      // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       DebugText;                                               // 0x00D0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AOPC[0x3];                                   // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ImpactSocketName;                                        // 0x00D4(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MFWF[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              ActiveMesh;                                              // 0x00E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CRM1[0x28];                                  // 0x00E8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       TrackAcceleration;                                       // 0x0110(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TrackVelocity;                                           // 0x0111(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PK3K[0x6];                                   // 0x0112(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TriggerHighAccelAt;                                      // 0x0118(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P0Q2[0x8];                                   // 0x011C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TriggerAtVelocityDifference;                             // 0x0124(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void EnableImpactCheckhing(class USkeletalMeshComponent* cmp);
		void DisableImpactChecking();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ImpactAudioComponent
	 * Size -> 0x0030 (FullSize[0x0890] - InheritedSize[0x0860])
	 */
	class UImpactAudioComponent : public UAudioComponent
	{
	public:
		class FName                                                AudioParameterSpeed;                                     // 0x0860(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_96SU[0x14];                                  // 0x0868(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DecelerationThreshold;                                   // 0x087C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2BPL[0x4];                                   // 0x0880(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ListenForDeath;                                          // 0x0884(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_92JT[0xB];                                   // 0x0885(0x000B) MISSED OFFSET (PADDING)

	public:
		void OnOwnerDeath(class UHealthComponentBase* HealthComponent);
		class UImpactAudioComponent* AddImpactAudioToActor(class AActor* Actor, class USceneComponent* AttachToComponent, class UClass* ComponentClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDReverbVolume
	 * Size -> 0x0018 (FullSize[0x0238] - InheritedSize[0x0220])
	 */
	class AFSDReverbVolume : public AActor
	{
	public:
		class USphereComponent*                                    Collision;                                               // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UReverbEffect*                                       Reverb;                                                  // 0x0228(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Priority;                                                // 0x0230(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EYDN[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InDangerComponent
	 * Size -> 0x0038 (FullSize[0x00E8] - InheritedSize[0x00B0])
	 */
	class UInDangerComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnInDanger;                                              // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UHealthComponentBase>                 ParentHealthComponent;                                   // 0x00C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageTimeLimit;                                         // 0x00C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageThreshold;                                         // 0x00CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RunsOnClients;                                           // 0x00D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LJE4[0x17];                                  // 0x00D1(0x0017) MISSED OFFSET (PADDING)

	public:
		void SetIsActive(bool aFlag);
		void OnDamage(float Amount);
		bool GetIsActive();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NetMontageAble
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNetMontageAble : public UInterface
	{
	public:
		float QueueMontage(class UAnimMontage* Montage);
		class USkeletalMeshComponent* GetSkeletalMesh();
		class UAnimInstance* GetAnimInstance();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InfectedStateComponent
	 * Size -> 0x0050 (FullSize[0x01E0] - InheritedSize[0x0190])
	 */
	class UInfectedStateComponent : public UCharacterBreakOutState
	{
	public:
		struct FRandRange                                          CleanseAmount;                                           // 0x0190(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class USoundBase*                                          AudioFreeOfInfection;                                    // 0x0198(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDPhysicalMaterial*                                InfectedPhysicalMaterial;                                // 0x01A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDPhysicalMaterial*                                DwarfFleshMaterial;                                      // 0x01A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPawnAffliction*                                     InfectedAffliction;                                      // 0x01B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        InfectedMontage;                                         // 0x01B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        InfectedAndBreakingFreeMontage;                          // 0x01C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BreakingFreeMontageDuration;                             // 0x01C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F3OJ[0x14];                                  // 0x01CC(0x0014) MISSED OFFSET (PADDING)

	public:
		void Server_Breakout();
		void ReceiveOnCleansing();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InfectionMasterComponent
	 * Size -> 0x00A8 (FullSize[0x0158] - InheritedSize[0x00B0])
	 */
	class UInfectionMasterComponent : public UActorComponent
	{
	public:
		class UClass*                                              WeakpointPopSTE;                                         // 0x00B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WeakpointPopSTERange;                                    // 0x00B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              InfectionPoints;                                         // 0x00BC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ExtraInfectionPointsWithMorePlayers;                     // 0x00BD(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AJKZ[0x2];                                   // 0x00BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpikeScale;                                              // 0x00C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InfectionScale;                                          // 0x00C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       KillWhenAllPointsDestroyed;                              // 0x00C8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4QKL[0x3];                                   // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ScaleDownOnDeathTime;                                    // 0x00CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  BaseMat;                                                 // 0x00D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  GlowMat;                                                 // 0x00D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStaticMesh*>                                 InfectionPointMeshes;                                    // 0x00E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UStaticMesh*>                                 InfectionSpikeMeshes;                                    // 0x00F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UHealthComponent*                                    HealthComponent;                                         // 0x0100(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UStaticMeshComponent*>                        MeshComponents;                                          // 0x0108(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NOGP[0x8];                                   // 0x0118(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   RandomSeed;                                              // 0x0120(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YSKV[0x34];                                  // 0x0124(0x0034) MISSED OFFSET (PADDING)

	public:
		void OnRep_RandomSeed();
		void OnDeath(class UHealthComponentBase* enemy);
		void InfectionPointDestroyed(const class FName& Name);
		void DealWeakpointDamage(const class FName& SocketName);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NotifyMessageReceiver
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNotifyMessageReceiver : public UInterface
	{
	public:
		bool OnNotifyMessageReceived(const class FName& TriggerName);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InputCaptureWidget
	 * Size -> 0x0040 (FullSize[0x02A0] - InheritedSize[0x0260])
	 */
	class UInputCaptureWidget : public UUserWidget
	{
	public:
		struct FCustomKeySetting                                   Settings;                                                // 0x0260(0x0038) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		EKeyBindingSlot                                            InputSlot;                                               // 0x0298(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsGamepadKey;                                           // 0x0299(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCapturing;                                              // 0x029A(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HDHL[0x5];                                   // 0x029B(0x0005) MISSED OFFSET (PADDING)

	public:
		void SetData(const struct FCustomKeySetting& InSettings, EKeyBindingSlot InInputSlot, bool InIsGamepadKey);
		void SetCurrentBinding(const struct FKey& InKey);
		void ReceiveKeyChanged(const struct FKey& InKey);
		void ReceiveKeyCaptured(const struct FKey& InKey);
		void ReceiveCapturingChanged(bool InCapturing);
		struct FKey GetCurrentBinding();
		bool FindCurrentSettingsForKey(const struct FKey& InKey, struct FCustomKeySetting* OutSettings);
		void ClearCurrentBinding();
		void BindActionToKey(const struct FCustomKeySetting& InAction, const struct FKey& InKey, EKeyBindingSlot InSlot, bool SaveToDisk);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InputFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInputFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetMouseSmoothingOn(bool smoothingOn);
		bool IsMouseSmoothingOn();
		bool IsMouseEventAction(const struct FPointerEvent& MouseEvent, const class FName& ActionName, bool IgnoreCustomBindings);
		bool IsKeyEventActionAny(const struct FKeyEvent& KeyEvent, TArray<class FName> ActionNames, bool IgnoreCustomBindings);
		bool IsKeyEventAction(const struct FKeyEvent& KeyEvent, const class FName& ActionName, bool IgnoreCustomBindings);
		bool IsInputActionDown(class APlayerController* InPlayerController, const class FName& InActionName);
		bool IsAxisMappedToDirectional(const class FName& InActionName, const struct FKey& Key, int32_t Direction, bool IgnoreCustomBindings);
		bool IsAnyInputActionDown(class APlayerController* InPlayerController, TArray<class FName> InActionNames);
		bool IsActionMappedTo(const class FName& InActionName, const struct FKey& Key, bool IgnoreCustomBindings);
		bool GetAxisMapping(const class FName& InActionName, int32_t Axis, bool InGamepadKeys, struct FInputAxisKeyMapping* OutResult);
		bool GetActionMapping(const class FName& InActionName, bool InGamepadKeys, struct FInputActionKeyMapping* OutResult);
		bool FindInputDisplay(class APlayerController* PlayerController, const class FName& InputName, EFSDInputSource InputSource, int32_t LayoutIndex, struct FInputDisplay* OutInputDisplay);
		class UTexture2D* FindActionIcon(const class FName& InActionName, bool InGamepadKeys);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InsectSwarmEnemy
	 * Size -> 0x0008 (FullSize[0x03B8] - InheritedSize[0x03B0])
	 */
	class AInsectSwarmEnemy : public AEnemyDeepPathfinderCharacter
	{
	public:
		class UParticleSystemComponent*                            SwarmParticles;                                          // 0x03B0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InsectSwarmSpawner
	 * Size -> 0x0020 (FullSize[0x0368] - InheritedSize[0x0348])
	 */
	class AInsectSwarmSpawner : public AEnemyPawn
	{
	public:
		class UClass*                                              SwarmType;                                               // 0x0348(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpawnHeightOffset;                                       // 0x0350(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AlertDistance;                                           // 0x0354(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      respawnDelay;                                            // 0x0358(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AInsectSwarmEnemy>                    SwarmInstance;                                           // 0x035C(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VJN9[0x4];                                   // 0x0364(0x0004) MISSED OFFSET (PADDING)

	public:
		class UStaticMeshComponent* Receive_GetStaticMesh();
		void OnSwarmSpawned(class AInsectSwarmEnemy* Swarm);
		void OnSwarmDestroyed(class AActor* DestroyedActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InstancedMeshOnSpline
	 * Size -> 0x0038 (FullSize[0x05C0] - InheritedSize[0x0588])
	 */
	class UInstancedMeshOnSpline : public UInstancedStaticMeshComponent
	{
	public:
		class USplineComponent*                                    Spline;                                                  // 0x0588(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    NumInstances;                                            // 0x0590(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Speed;                                                   // 0x0594(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VerticalOffset;                                          // 0x0598(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             Scale;                                                   // 0x059C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FTransform>                                  NewInstancesTransforms;                                  // 0x05A8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		float                                                      Phase;                                                   // 0x05B8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J4D6[0x4];                                   // 0x05BC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetSpeed(float newSpeed);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InstancedNiagaraComponent
	 * Size -> 0x00B8 (FullSize[0x02B0] - InheritedSize[0x01F8])
	 */
	class UInstancedNiagaraComponent : public USceneComponent
	{
	public:
		TArray<struct FEmitterConnection>                          Emitters;                                                // 0x01F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JF9N[0x10];                                  // 0x0208(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UNiagaraComponent*                                   NiagaraComponent;                                        // 0x0218(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RJ3G[0x90];                                  // 0x0220(0x0090) MISSED OFFSET (PADDING)

	public:
		void SpawnParticlesFromName(const struct FVector& Location, const class FName& EmitterName);
		void SpawnParticles(const struct FVector& Location, int32_t EmitterIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InventoryBase
	 * Size -> 0x0078 (FullSize[0x0128] - InheritedSize[0x00B0])
	 */
	class UInventoryBase : public UActorComponent
	{
	public:
		TArray<class AActor*>                                      ActorsSelectable;                                        // 0x00B0(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		TArray<class AActor*>                                      ActorsNonSelectable;                                     // 0x00C0(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		struct FEquippedActorData                                  ReplicatedEquippedActor;                                 // 0x00D0(0x0010) Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		struct FEquippedActorData                                  EquippedActor;                                           // 0x00E0(0x0010) Transient, NoDestructor, NativeAccessSpecifierPrivate
		class AActor*                                              LastEquippedActors[0x2];                                 // 0x00F0(0x0010) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1WRR[0x8];                                   // 0x0100(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDelayedActorSwitchData                             DelayedActorSwitchOldActor;                              // 0x0108(0x0020) Transient, NoDestructor, NativeAccessSpecifierPrivate

	public:
		void Server_SetEquippedActor(const struct FEquippedActorData& Actor, bool CallClientDelayed);
		void Server_EquipExternalActor(class AActor* Actor);
		void OnRep_EquippedActor(struct FEquippedActorData* OldActor);
		void OnRep_ActorsSelectable();
		void OnRep_ActorsNonSelectable();
		TArray<class AActor*> GetSelectableActors();
		TArray<class AActor*> GetAllItems();
		void EquipPrevious();
		void EquipNull();
		void EquipNext();
		void EquipLast();
		void EquipAtIndex(int32_t Index, bool ignoreUsing);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InventoryComponent
	 * Size -> 0x0160 (FullSize[0x0288] - InheritedSize[0x0128])
	 */
	class UInventoryComponent : public UInventoryBase
	{
	public:
		class FScriptMulticastDelegate                             OnItemsLoaded;                                           // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemClicked;                                           // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemEquipped;                                          // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemUnequipped;                                        // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGrenadeCountChanged;                                   // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFlareCountChanged;                                     // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMaxFlareCountChanged;                                  // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFlareProduction;                                       // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnResuppliedEvent;                                       // 0x01A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCarriableChangedEvent;                                 // 0x01B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UInventoryList*                                      InventoryList;                                           // 0x01C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ThrownGrenadeClass;                                      // 0x01D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              flareClass;                                              // 0x01D8(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             FlareOffset;                                             // 0x01E0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FPGV[0x4];                                   // 0x01EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           OutOfFlaresSound;                                        // 0x01F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    OutOfFlaresShout;                                        // 0x01F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OAIC[0x4];                                   // 0x0200(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FlareAngle;                                              // 0x0204(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlareCooldown;                                           // 0x0208(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlareProductionTime;                                     // 0x020C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        FlareChromaColor;                                        // 0x0210(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlareProductionTimeLeft;                                 // 0x0220(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxFlares;                                               // 0x0224(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Flares;                                                  // 0x0228(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlareCooldownRemaining;                                  // 0x022C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UItemUpgrade*>                                FlareUpgrades;                                           // 0x0230(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       bItemsLoaded;                                            // 0x0240(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4EKZ[0x7];                                   // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APickaxeItem*                                        MiningItem;                                              // 0x0248(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AThrownGrenadeItem*                                  GrenadeItem;                                             // 0x0250(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ALaserPointerItem*                                   LaserPointerItem;                                        // 0x0258(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATerrainScannerItem*                                 TerrainScannerItem;                                      // 0x0260(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ARessuplyPodItem*                                    ResupplyItem;                                            // 0x0268(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ARecallableSentryGunItem*                            RecallableSentryGunItem;                                 // 0x0270(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7VVS[0x10];                                  // 0x0278(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateFromSaveGameInSlot(EItemCategory Category);
		void StartGrenadeThrow();
		void Server_ThrowItem(class AActor* Item, const struct FVector& force, bool PlayMontage);
		void Server_ThrowFlare();
		void ResupplyGrenades(float percentage);
		void Resupply(float percentage);
		void PickupItemInstance(class AItem* Item);
		class AItem* PickupItem(class UClass* itemClass);
		void OnRep_FlareClass();
		bool IsTerrainScannerEquipped();
		bool HasPickedUpItem();
		bool HasDrink();
		int32_t GetTotalAmmoLeft();
		class ARecallableSentryGunItem* GetRecallableSentryGunItem();
		class AItem* GetOrCreateUnlistedItem(class UClass* ItemType);
		class AItem* GetItem(EItemCategory Category);
		class AItem* GetEquippedItem();
		class AActor* GetCarriedItem();
		bool EquipCategory(EItemCategory Category);
		void Equip(class AItem* Item);
		void EndGrenadeThrow();
		void DropPickedupItem();
		void Client_Resupply(float percentage);
		void AnimationNotify2();
		void AnimationNotify1();
		void All_PlayThrowMontage(class AActor* Item);
		void AddItemClass(class UClass* itemClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InventoryList
	 * Size -> 0x0158 (FullSize[0x0188] - InheritedSize[0x0030])
	 */
	class UInventoryList : public UDataAsset
	{
	public:
		unsigned char                                              IconWeaponSetOutline[0x28];                              // 0x0030(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              IconWeaponSetFill[0x28];                                 // 0x0058(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              LaserpointerMarkerMaterial[0x28];                        // 0x0080(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              LaserpointerBeamMaterial[0x28];                          // 0x00A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UItemID*                                             LaserPointerItem;                                        // 0x00D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UItemID*                                             TerrainScannerItem;                                      // 0x00D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UItemID*                                             ResupplyItem;                                            // 0x00E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UItemID*>                                     PrimaryWeapons;                                          // 0x00E8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UItemID*>                                     SecondaryWeapons;                                        // 0x00F8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UItemID*>                                     TraversalTools;                                          // 0x0108(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UItemID*>                                     ClassTools;                                              // 0x0118(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UItemID*>                                     Armors;                                                  // 0x0128(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UItemID*>                                     Flares;                                                  // 0x0138(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UItemID*>                                     Grenades;                                                // 0x0148(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UItemID*>                                     MiningTools;                                             // 0x0158(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MCY5[0x20];                                  // 0x0168(0x0020) MISSED OFFSET (PADDING)

	public:
		class UItemID* GetPreviousUnlockedItem(class UObject* WorldContextObject, EItemCategory Category, class UItemID* currentItem);
		class UItemID* GetPreviousItem(EItemCategory Category, class UItemID* currentItem);
		int32_t GetNumberOfItems(EItemCategory Category);
		class UItemID* GetNextUnlockedItem(class UObject* WorldContextObject, EItemCategory Category, class UItemID* currentItem);
		class UItemID* GetNextItem(EItemCategory Category, class UItemID* currentItem);
		TArray<class UClass*> GetLoadedItemListFiltered(EItemCategory Category, const class FScriptDelegate& Filter);
		TArray<class UClass*> GetLoadedItemList(EItemCategory Category);
		TArray<class UItemID*> GetItemList(EItemCategory Category);
		int32_t GetItemIndex(EItemCategory Category, class UItemID* Item);
		TArray<class UItemID*> GetAllItemsList();
		void CheckForInventoryAchievements(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlaySoundInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPlaySoundInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileSpawner
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UProjectileSpawner : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RejoinListener
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class URejoinListener : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawnReleasedActor
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USpawnReleasedActor : public UInterface
	{
	public:
		bool OnSpawnRelease_Released();
		bool OnSpawnRelease_Attached(class AActor* Parent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Targetable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTargetable : public UInterface
	{
	public:
		void ShowDamageEffects(class UParticleSystem* Particles, const struct FVector& Location, const struct FRotator& Orientation);
		class UHealthComponentBase* GetTargetHealthComponent();
		struct FVector GetTargetCenterMass();
		bool GetIsTargetable();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimNotify_CycleItemComplete
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_CycleItemComplete : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HeatMaterialComponent
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UHeatMaterialComponent : public UActorComponent
	{
	public:
		class FName                                                ParameterName;                                           // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxEffect;                                               // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1UNW[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInstanceDynamic*>                    MaterialIntances;                                        // 0x00C0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		void OnTemperatureChanged(float Temperature, bool overHeated);
		void AddHeatMaterial(class UMaterialInstanceDynamic* MaterialInstance);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemAquisitionSource
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class UItemAquisitionSource : public USavableDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemCharacterAnimationSet
	 * Size -> 0x0170 (FullSize[0x01A0] - InheritedSize[0x0030])
	 */
	class UItemCharacterAnimationSet : public UDataAsset
	{
	public:
		class UAnimSequence*                                       FP_Idle;                                                 // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        FP_InspectWeapon;                                        // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       FP_Walk;                                                 // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       FP_Sprint;                                               // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        FP_JumpStart_Montage;                                    // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       FP_JumpStart;                                            // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       FP_JumpLoop;                                             // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       FP_JumpLand;                                             // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       FP_JumpLand_Aim;                                         // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       FP_Downed;                                               // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace1D*                                       TP_LookUpDown;                                           // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace1D*                                       TP_LookUpDown_Aim;                                       // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Sprint;                                               // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Idle;                                                 // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Idle_Aim;                                             // 0x00A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_LookForward;                                          // 0x00A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_LookForward_Aim;                                      // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_JumpStart;                                            // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_JumpStart_Aim;                                        // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_JumpLoop;                                             // 0x00C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_JumpLoop_Aim;                                         // 0x00D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        TP_JumpLand;                                             // 0x00D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Walk_Forward;                                         // 0x00E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Walk_Forward_Aim;                                     // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Run_Forward;                                          // 0x00F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Run_Forward_Aim;                                      // 0x00F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Walk_Right;                                           // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Walk_Right_Aim;                                       // 0x0108(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Run_Right;                                            // 0x0110(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Run_Right_Aim;                                        // 0x0118(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Walk_Left;                                            // 0x0120(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Walk_Left_Aim;                                        // 0x0128(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Run_Left;                                             // 0x0130(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Run_Left_Aim;                                         // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Walk_Back;                                            // 0x0140(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Walk_Back_Aim;                                        // 0x0148(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Run_Back;                                             // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Run_Back_Aim;                                         // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Revived;                                              // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Downed;                                               // 0x0168(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       TP_Downed_Loop;                                          // 0x0170(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FItemLoadoutAnimations                              LoadoutAnimations;                                       // 0x0178(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      CameraOffset;                                            // 0x0190(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W0MV[0x4];                                   // 0x0194(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItemCharacterAnimationSet*                          ParentSet;                                               // 0x0198(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemData
	 * Size -> 0x0118 (FullSize[0x0148] - InheritedSize[0x0030])
	 */
	class UItemData : public UPrimaryDataAsset
	{
	public:
		class UItemID*                                             ItemID;                                                  // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture2D*                                          IconLine;                                                // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture2D*                                          IconBG;                                                  // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture2D*                                          IconDetailed;                                            // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              PreviewImage[0x28];                                      // 0x0050(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              PreviewActor[0x28];                                      // 0x0078(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class FText                                                Name;                                                    // 0x00A0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                Category;                                                // 0x00B8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                Description;                                             // 0x00D0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		int32_t                                                    CreditCost;                                              // 0x00E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MD37[0x4];                                   // 0x00EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UResourceData*, float>                          ResourceCost;                                            // 0x00F0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		int32_t                                                    RequiredCharacterLevel;                                  // 0x0140(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FK1U[0x4];                                   // 0x0144(0x0004) MISSED OFFSET (PADDING)

	public:
		class UTexture2D* GetPreviewImage(class UObject* WorldContext);
		class UClass* GetPreviewActorClass();
		TArray<struct FCraftingCost> GetCraftingCost();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemDispenser
	 * Size -> 0x0068 (FullSize[0x0288] - InheritedSize[0x0220])
	 */
	class AItemDispenser : public AActor
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInstantUsable*                                      Usable;                                                  // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemSpawned;                                           // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemTaken;                                             // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class AActor*>                                      ItemHistory;                                             // 0x0250(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9QE4[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              itemClass;                                               // 0x0268(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              spawnedItem;                                             // 0x0270(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ItemSpawnTime;                                           // 0x0278(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialItemSpawnTime;                                    // 0x027C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsOpen;                                                  // 0x0280(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       KillItemsOnDestuction;                                   // 0x0281(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DCQ0[0x6];                                   // 0x0282(0x0006) MISSED OFFSET (PADDING)

	public:
		void SpawnItem();
		void Open();
		void OnUsed(class APlayerCharacter* User, EInputKeys Key);
		void OnRep_SpawnedItem(class AActor* oldItem);
		void OnRep_IsOpen();
		void OnPickedUpItem(class AActor* Item);
		void OnOpenChanged(bool Open);
		void OnItemSpawnedEvent(class AActor* Item);
		bool HasItem();
		class AActor* GetItem();
		void Close();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponMaintenanceSettings
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UWeaponMaintenanceSettings : public UDataAsset
	{
	public:
		TArray<int32_t>                                            LevelXPRequirements;                                     // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UItemSkin*>                                   LevelRewards;                                            // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		struct FSpaceRigNotification                               WeaponUnlockedNotification;                              // 0x0050(0x0040) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponMaintenanceAquisition
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UWeaponMaintenanceAquisition : public UItemAquisitionBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponMaintenanceItemWidget
	 * Size -> 0x0030 (FullSize[0x0290] - InheritedSize[0x0260])
	 */
	class UWeaponMaintenanceItemWidget : public UUserWidget
	{
	public:
		class UItemID*                                             WeaponID;                                                // 0x0260(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerCharacterID*                                  characterID;                                             // 0x0268(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemSkin*                                           Reward;                                                  // 0x0270(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemData*                                           WeaponData;                                              // 0x0278(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWeaponMaintenanceState                                    MaintenanceState;                                        // 0x0280(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7LOG[0x3];                                   // 0x0281(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaintenanceLevel;                                        // 0x0284(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaintenanceXP;                                           // 0x0288(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaintenanceTargetXP;                                     // 0x028C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetWeapon(class UObject* WorldContext, class UItemID* InWeaponID, class UPlayerCharacterID* InCharacterID);
		void RefreshFromSavegame(class UObject* WorldContext);
		void Receive_RefreshedFromSavegame();
		void Receive_CanLevelUp();
		bool LevelUp(class UObject* WorldContext);
		int32_t GetMaxLevel();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponMaintenanceTabWidget
	 * Size -> 0x0000 (FullSize[0x02A0] - InheritedSize[0x02A0])
	 */
	class UWeaponMaintenanceTabWidget : public UWindowWidget
	{
	public:
		bool HasNewNotifications(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemMarker
	 * Size -> 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
	 */
	class AItemMarker : public AActor
	{
	public:
		bool                                                       bMarkerValid;                                            // 0x0220(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bMarkerVisible;                                          // 0x0221(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1LV1[0x6];                                   // 0x0222(0x0006) MISSED OFFSET (PADDING)

	public:
		void OnMarkerVisibilityChanged(bool Visible);
		void OnMarkerValidChanged(bool Valid);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemPlacerAggregator
	 * Size -> 0x0128 (FullSize[0x01F0] - InheritedSize[0x00C8])
	 */
	class UItemPlacerAggregator : public UItemAggregator
	{
	public:
		TArray<TWeakObjectPtr<class AActor>>                       IgnoreActors;                                            // 0x00C8(0x0010) ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMarkerSpawned;                                         // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnPlacementChanged;                                      // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		float                                                      PlacementDistance;                                       // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxOffsetZ;                                              // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinOffsetZ;                                              // 0x0100(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ItemHeight;                                              // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    ShoutOnPlaced;                                           // 0x0108(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              MarkerType;                                              // 0x0110(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanOnlyPlaceOnTerrain;                                   // 0x0118(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EWGM[0x7];                                   // 0x0119(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagQuery                                   ExcludeTags;                                             // 0x0120(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      InvalidAroundActors;                                     // 0x0168(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		float                                                      InvalidAroundSize;                                       // 0x0178(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HEJG[0x4];                                   // 0x017C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AItemMarker*                                         PlacementMarker;                                         // 0x0180(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AItem*                                               Item;                                                    // 0x0188(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPlacementActive;                                      // 0x0190(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsMarkerHidden;                                         // 0x0191(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsMarkerValid;                                          // 0x0192(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanPlaceMarker;                                         // 0x0193(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BI9U[0xC];                                   // 0x0194(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          LastPlacement;                                           // 0x01A0(0x0030) BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VN0K[0x20];                                  // 0x01D0(0x0020) MISSED OFFSET (PADDING)

	public:
		void ToggleValid(bool Valid);
		void TogglePlacement(bool Inactive);
		void ToggleMarkerHidden(bool InHidden);
		void PlacementUpdatedDelegate__DelegateSignature(bool InPlacementValid, const struct FTransform& InPlacement);
		void MarkerDelegate__DelegateSignature(class AItemMarker* Marker);
		void GetPlacementEx(struct FTransform* Placement, bool* OutValidLocation, bool* OutValidMarker);
		bool GetPlacement(struct FTransform* Placement);
		void ClearIgnoredActors();
		void AddIgnoredActor(class AActor* InActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemPreviewActor
	 * Size -> 0x0050 (FullSize[0x0270] - InheritedSize[0x0220])
	 */
	class AItemPreviewActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_18KZ[0x10];                                  // 0x0220(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItemSkin*                                           CurrentSkinColor;                                        // 0x0230(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemSkin*                                           CurrentSkinMesh;                                         // 0x0238(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LGM2[0x10];                                  // 0x0240(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              itemClass;                                               // 0x0250(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UIconGenerationCameraKey*                            CameraKey_Normal;                                        // 0x0258(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UIconGenerationCameraKey*                            CameraKey_CloseUp;                                       // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LU24[0x8];                                   // 0x0268(0x0008) MISSED OFFSET (PADDING)

	public:
		void SkinItem(class USkinEffect* Skin);
		void SetItemClass(class UClass* itemClass);
		void OnSkinPreviewChanged(class UItemSkin* PreviewSkin);
		void OnSkinItem(class USkinEffect* Skin);
		void OnSkinChanged();
		void ChangeSkin(class UItemSkin* skinMesh, class UItemSkin* skinColor, bool isPreview);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemRefundList
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class UItemRefundList : public UDataAsset
	{
	public:
		bool                                                       ResetListOnSave;                                         // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z4NF[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              Items[0x10];                                             // 0x0038(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TMap<struct FGuid, struct FItemRefundListItem>             ItemsToRefund;                                           // 0x0048(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemsBarIcon
	 * Size -> 0x0028 (FullSize[0x0288] - InheritedSize[0x0260])
	 */
	class UItemsBarIcon : public UUserWidget
	{
	public:
		bool                                                       Selected;                                                // 0x0260(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5ZDG[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItemsBar*                                           ItemBar;                                                 // 0x0268(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class APlayerCharacter*                                    Character;                                               // 0x0270(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AItem*                                               Item;                                                    // 0x0278(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Index;                                                   // 0x0280(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5N42[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnUnselect();
		void OnSelect();
		void OnInit();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemsBar
	 * Size -> 0x0038 (FullSize[0x02B8] - InheritedSize[0x0280])
	 */
	class UItemsBar : public UFSDUserWidget
	{
	public:
		class UClass*                                              DefaultItemWidget;                                       // 0x0280(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowSupplyItem;                                         // 0x0288(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KV9L[0x7];                                   // 0x0289(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UItemsBarIcon*>                               ItemIcons;                                               // 0x0290(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UItemsBarIcon*                                       SupplyIcon;                                              // 0x02A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemsBarIcon*                                       SelectedIcon;                                            // 0x02A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S1RU[0x8];                                   // 0x02B0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnSupplyItemUnequipped(class UItemsBarIcon* ItemIcon);
		void OnSupplyItemEquipped(class UItemsBarIcon* ItemIcon);
		void OnSupplyItemAdded(class UItemsBarIcon* ItemIcon);
		void OnItemUnequipped(class UItemsBarIcon* ItemIcon);
		void OnItemsLoaded();
		void OnItemEquipped(class UItemsBarIcon* ItemIcon);
		void OnItemClicked();
		void OnItemAdded(class UItemsBarIcon* ItemIcon);
		void OnClear();
		void ItemEquipped(class AItem* NewItem);
		void ItemClicked(class AItem* NewItem);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemSettings
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UItemSettings : public UDataAsset
	{
	public:
		TArray<class UItemRefundList*>                             ItemRefunds;                                             // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TMap<class UItemID*, class UItemData*>                     ItemData;                                                // 0x0040(0x0050) Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemSkin
	 * Size -> 0x0080 (FullSize[0x00E0] - InheritedSize[0x0060])
	 */
	class UItemSkin : public USavablePrimaryDataAsset
	{
	public:
		unsigned char                                              UnknownData_PWQY[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSkinUnlocked;                                          // 0x0068(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkinEquipped;                                          // 0x0078(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkinUnequipped;                                        // 0x0088(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UItemAquisitionBase*                                 Aquisition;                                              // 0x0098(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                SkinName;                                                // 0x00A0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UItemSkinSet*                                        SkinSet;                                                 // 0x00B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDynamicIcon*                                        DynamicIcon;                                             // 0x00C0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkinEffect*                                         SkinEffect;                                              // 0x00C8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemID*                                             OwningItem;                                              // 0x00D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerCharacterID*                                  OwningCharacter;                                         // 0x00D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool Unlock(class UObject* WorldContext, class UItemID* ItemID, bool broadcast);
		void Receive_SkinItem(class UObject* Skinnable);
		void Lock(class UObject* WorldContext, class UItemID* ItemID);
		void ItemSkinSignature__DelegateSignature(class UItemSkin* Skin);
		void ItemSkinEquipSignature__DelegateSignature(class UItemSkin* Skin);
		bool IsUnlockedFromStart();
		bool IsLocked(class UObject* WorldContext, class UItemID* skinnableID);
		bool IsEquippedOnItem(class UItemID* ItemID, class AFSDPlayerState* PlayerState);
		EItemSkinType GetSkinType();
		class FText GetSkinName();
		class UItemID* GetOwningItem();
		class UPlayerCharacterID* GetOwningCharacter();
		class UMaterialInstanceDynamic* CreateIcon(class UObject* Owner);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemSkinSettings
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UItemSkinSettings : public UDataAsset
	{
	public:
		class UItemSkinSet*                                        StockSet;                                                // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UItemSkin*>                                   LoadedSkins;                                             // 0x0038(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UItemSkin*>                                   FindableSkins;                                           // 0x0048(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemSkinFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UItemSkinFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemSkinSchematicCollection
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UItemSkinSchematicCollection : public UDataAsset
	{
	public:
		class UItemSkin*                                           Skin;                                                    // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USchematicCategory*                                  Category;                                                // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USchematicPricingTier*                               PricingTier;                                             // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USchematicRarity*                                    Rarity;                                                  // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EItemSkinCollectionType                                    CollectionType;                                          // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EItemSkinCollectionType                                    LastGeneratedCollectionType;                             // 0x0051(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZEQX[0x6];                                   // 0x0052(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USchematic*>                                  Schematics;                                              // 0x0058(0x0010) Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemSkinSet
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UItemSkinSet : public UDataAsset
	{
	public:
		bool                                                       ColorIsLockedToSet;                                      // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N7KU[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                SkinName;                                                // 0x0038(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class UDynamicIcon*                                        PaintJobDynamicIcon;                                     // 0x0050(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDynamicIcon*                                        FrameworkDynamicIcon;                                    // 0x0058(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemUpgrade
	 * Size -> 0x00F8 (FullSize[0x0150] - InheritedSize[0x0058])
	 */
	class UItemUpgrade : public USavableDataAsset
	{
	public:
		unsigned char                                              UnknownData_I96F[0x8];                                   // 0x0058(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCrafted;                                               // 0x0060(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEquipped;                                              // 0x0070(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUnequipped;                                            // 0x0080(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FText                                                Name;                                                    // 0x0090(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                Description;                                             // 0x00A8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		int32_t                                                    Cost;                                                    // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseOldCost;                                              // 0x00C4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EUpgradeTiers                                              UpgradeTier;                                             // 0x00C5(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EUpgradeClass                                              upgradeClass;                                            // 0x00C6(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G3RJ[0x1];                                   // 0x00C7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItemUpgradeCategory*                                Category;                                                // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class UResourceData*, float>                          UpgradeCraftingCost;                                     // 0x00D0(0x0050) Edit, EditConst, Protected, NativeAccessSpecifierProtected
		TArray<class UResourceData*>                               ResourceCost;                                            // 0x0120(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UItemUpgradeElement*>                         Elements;                                                // 0x0130(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FItemUpgradeStatText>                        StatTexts;                                               // 0x0140(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void UnequipUpgrade(class UClass* itemClass, class AFSDPlayerState* PlayerState);
		void ItemUpgradeSignature__DelegateSignature(class UItemUpgrade* Upgrade);
		TArray<struct FItemUpgradeStatText> GetUpgradeStatTexts();
		class FText GetUpgradeName(class UItemUpgrade* Upgrade);
		TArray<struct FCraftingCost> GetUpgradeCost();
		class FString GetSourceName();
		struct FUpgradeValues GetGenericUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UItemUpgrade* upgradeClass);
		float GetCreditsCost();
		void EquipUpgrade(class UClass* itemClass, class AFSDPlayerState* PlayerState);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CombinedUpgrade
	 * Size -> 0x0020 (FullSize[0x0170] - InheritedSize[0x0150])
	 */
	class UCombinedUpgrade : public UItemUpgrade
	{
	public:
		unsigned char                                              CombinedUpgrades[0x10];                                  // 0x0150(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TArray<class UItemUpgrade*>                                LoadedUpgrades;                                          // 0x0160(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		TArray<class UItemUpgrade*> GetUpgrades();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OverclockUpgrade
	 * Size -> 0x0008 (FullSize[0x0178] - InheritedSize[0x0170])
	 */
	class UOverclockUpgrade : public UCombinedUpgrade
	{
	public:
		class USchematicCategory*                                  SchematicCategory;                                       // 0x0170(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemUpgradeCategory
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UItemUpgradeCategory : public UDataAsset
	{
	public:
		class FText                                                CategoryName;                                            // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                CategoryDescription;                                     // 0x0048(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          CategoryIcon;                                            // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FColor                                              CategoryTint;                                            // 0x0068(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1RYI[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemUpgradeCondition
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UItemUpgradeCondition : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerShieldsItemUpgradeCondition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UPlayerShieldsItemUpgradeCondition : public UItemUpgradeCondition
	{
	public:
		struct FFloatInterval                                      ShieldPercentageRequired;                                // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileClassFilterItemUpgradeCondition
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UProjectileClassFilterItemUpgradeCondition : public UItemUpgradeCondition
	{
	public:
		TArray<class UClass*>                                      ProjectileClasses;                                       // 0x0028(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemUpgradeElement
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UItemUpgradeElement : public UDataAsset
	{
	public:
		bool ElementOf(class UItemUpgrade* upg);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MuzzleEffectUpgradeElement
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UMuzzleEffectUpgradeElement : public UItemUpgradeElement
	{
	public:
		class UFXSystemAsset*                                      FPMuzzleFlash;                                           // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      TPMuzzleFlash;                                           // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FireWeaponSoundUpgradeElement
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UFireWeaponSoundUpgradeElement : public UItemUpgradeElement
	{
	public:
		class USoundCue*                                           FireSound;                                               // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TracerUpgradeElement
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UTracerUpgradeElement : public UItemUpgradeElement
	{
	public:
		class UFXSystemAsset*                                      Tracer;                                                  // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HitScanImpactUpgradeElement
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UHitScanImpactUpgradeElement : public UItemUpgradeElement
	{
	public:
		class UFXSystemAsset*                                      ImpactParticle;                                          // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ImpactSound;                                             // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TrailUpgradeElement
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UTrailUpgradeElement : public UItemUpgradeElement
	{
	public:
		class UFXSystemAsset*                                      Trail;                                                   // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ReplaceMaterialUpgradeElement
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UReplaceMaterialUpgradeElement : public UItemUpgradeElement
	{
	public:
		class UMaterialInterface*                                  TargetMaterial;                                          // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  ReplaceWithMaterial;                                     // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ReplaceSkeletonMeshUpgradeElement
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UReplaceSkeletonMeshUpgradeElement : public UItemUpgradeElement
	{
	public:
		class USkeletalMesh*                                       TargetMesh;                                              // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMesh*                                       ReplaceWithMesh;                                         // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ReplaceWithAnimInstance;                                 // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileUpgradeElement
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UProjectileUpgradeElement : public UItemUpgradeElement
	{
	public:
		class UParticleSystem*                                     NewTrailParticle;                                        // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemUpgradePreviewComponent
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UItemUpgradePreviewComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnPreviewUpgradeChanged;                                 // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UItemUpgrade*                                        PreviewUpgrade;                                          // 0x00C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H4Y5[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetPreviewUpgrade(class UItemUpgrade* InUpgrade);
		void RefreshPreviewUpgrade();
		void ItemUpgradeDelegate__DelegateSignature(class UItemUpgrade* PreviewUpgrade);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StandardItemUpgrade
	 * Size -> 0x0008 (FullSize[0x0158] - InheritedSize[0x0150])
	 */
	class UStandardItemUpgrade : public UItemUpgrade
	{
	public:
		float                                                      Amount;                                                  // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsPercentage;                                            // 0x0154(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V67B[0x3];                                   // 0x0155(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AmmoDrivenWeaponUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UAmmoDrivenWeaponUpgrade : public UStandardItemUpgrade
	{
	public:
		EAmmoDrivenWeapnUpgradeType                                upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VFV0[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EAmmoDrivenWeapnUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponHitCounterUpgrade
	 * Size -> 0x0008 (FullSize[0x0158] - InheritedSize[0x0150])
	 */
	class UWeaponHitCounterUpgrade : public UItemUpgrade
	{
	public:
		class UClass*                                              ComponentClass;                                          // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, class UClass* ComponentClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BeltDrivenWeaponUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UBeltDrivenWeaponUpgrade : public UStandardItemUpgrade
	{
	public:
		EBeltDrivenWeaponUpgrade                                   upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5EJ4[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EBeltDrivenWeaponUpgrade upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GatlingGunUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UGatlingGunUpgrade : public UStandardItemUpgrade
	{
	public:
		EGatlingGunUpgrade                                         upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E4HK[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EGatlingGunUpgrade upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AssaultRifleUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UAssaultRifleUpgrade : public UStandardItemUpgrade
	{
	public:
		EAssaultRifleUpgrade                                       upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0UVX[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EAssaultRifleUpgrade upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoltActionRifleUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UBoltActionRifleUpgrade : public UStandardItemUpgrade
	{
	public:
		EBoltActionRifleUpgrades                                   upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7VC3[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EBoltActionRifleUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DualMachinePistolsUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UDualMachinePistolsUpgrade : public UStandardItemUpgrade
	{
	public:
		EDualMachinePistolsUpgrades                                upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_60NU[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EDualMachinePistolsUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ChargedWeaponUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UChargedWeaponUpgrade : public UStandardItemUpgrade
	{
	public:
		EChargedWeaponUpgrades                                     upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BAVI[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EChargedWeaponUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CoilgunUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UCoilgunUpgrade : public UStandardItemUpgrade
	{
	public:
		ECoilgunUpgrades                                           upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PL0J[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ECoilgunUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AutoCannonUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UAutoCannonUpgrade : public UStandardItemUpgrade
	{
	public:
		EAutoCannonUpgrades                                        upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KUJQ[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EAutoCannonUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SawedOffShotgunUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class USawedOffShotgunUpgrade : public UStandardItemUpgrade
	{
	public:
		ESawedOffShotgunUpgrades                                   upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VAXB[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ESawedOffShotgunUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BurstWeaponUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UBurstWeaponUpgrade : public UStandardItemUpgrade
	{
	public:
		EBurstWeaponUpgrades                                       upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H28T[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EBurstWeaponUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AutoShotgunUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UAutoShotgunUpgrade : public UStandardItemUpgrade
	{
	public:
		EAutoShotgunUpgrades                                       upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UK97[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EAutoShotgunUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BasicPistolUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UBasicPistolUpgrade : public UStandardItemUpgrade
	{
	public:
		EBasicPistol                                               upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VXHJ[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EBasicPistol upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RevolverUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class URevolverUpgrade : public UStandardItemUpgrade
	{
	public:
		ERevolerUpgrades                                           upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NFM8[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ERevolerUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CryoSprayUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UCryoSprayUpgrade : public UStandardItemUpgrade
	{
	public:
		ECryoSprayUpgrades                                         upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GZDE[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ECryoSprayUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CryoSprayProjectileUpgrade
	 * Size -> 0x0010 (FullSize[0x0160] - InheritedSize[0x0150])
	 */
	class UCryoSprayProjectileUpgrade : public UItemUpgrade
	{
	public:
		float                                                      MaxFireCost;                                             // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BaseArch;                                                // 0x0154(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ProjectileClass;                                         // 0x0158(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* ProjectileClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxeUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UPickaxeUpgrade : public UStandardItemUpgrade
	{
	public:
		EPickaxeUpgradeType                                        upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FSVN[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EPickaxeUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlameThrowerUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UFlameThrowerUpgrade : public UStandardItemUpgrade
	{
	public:
		EFlameThrowerUpgradeType                                   upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U92F[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EFlameThrowerUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StickyFlameStatusEffectUpgrade
	 * Size -> 0x0008 (FullSize[0x0158] - InheritedSize[0x0150])
	 */
	class UStickyFlameStatusEffectUpgrade : public UItemUpgrade
	{
	public:
		class UClass*                                              StatusEffect;                                            // 0x0150(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* StatusEffect);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DoubleDrillUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UDoubleDrillUpgrade : public UStandardItemUpgrade
	{
	public:
		EDoubleDrillUpgradeType                                    upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QIJU[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EDoubleDrillUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InventoryItemUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UInventoryItemUpgrade : public UStandardItemUpgrade
	{
	public:
		EInventoryItemUpgradeType                                  upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z7RN[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EInventoryItemUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CapacityUpgrade
	 * Size -> 0x0000 (FullSize[0x0158] - InheritedSize[0x0158])
	 */
	class UCapacityUpgrade : public UStandardItemUpgrade
	{
	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, int32_t componentIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CooldownUpgrade
	 * Size -> 0x0000 (FullSize[0x0158] - InheritedSize[0x0158])
	 */
	class UCooldownUpgrade : public UStandardItemUpgrade
	{
	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MultiHitscanUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UMultiHitscanUpgrade : public UStandardItemUpgrade
	{
	public:
		EMultiHitscanUpgradeType                                   upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AD72[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EMultiHitscanUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ReflectionHitscanUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UReflectionHitscanUpgrade : public UStandardItemUpgrade
	{
	public:
		EReflectionHitscanUpgradeType                              upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9HQW[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EReflectionHitscanUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HitscanBaseUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UHitscanBaseUpgrade : public UStandardItemUpgrade
	{
	public:
		EHitScanBaseUpgradeType                                    upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6MEU[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EHitScanBaseUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageUpgrade
	 * Size -> 0x0010 (FullSize[0x0168] - InheritedSize[0x0158])
	 */
	class UDamageUpgrade : public UStandardItemUpgrade
	{
	public:
		EDamageUpgrade                                             upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDamageComponentType                                       DamageComponentType;                                     // 0x0159(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DPBC[0x6];                                   // 0x015A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              RequiredClass;                                           // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* upgradedItem, class AFSDPlayerState* Player, EDamageUpgrade upgradeType, EDamageComponentType DamageComponentType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlatDamageUpgrade
	 * Size -> 0x0028 (FullSize[0x0178] - InheritedSize[0x0150])
	 */
	class UFlatDamageUpgrade : public UItemUpgrade
	{
	public:
		float                                                      Damage;                                                  // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8RTY[0x4];                                   // 0x0154(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageClass*                                        DamageClass;                                             // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              RequiredClass;                                           // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       MergeWithOtherFlatDamageUpgrades;                        // 0x0168(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VAL2[0x7];                                   // 0x0169(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageCondition*                                    Condition;                                               // 0x0170(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UDamageClass* DamageClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandomDamageUpgrade
	 * Size -> 0x0008 (FullSize[0x0158] - InheritedSize[0x0150])
	 */
	class URandomDamageUpgrade : public UItemUpgrade
	{
	public:
		struct FRandRange                                          DamageRange;                                             // 0x0150(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageConversionUpgrade
	 * Size -> 0x0020 (FullSize[0x0170] - InheritedSize[0x0150])
	 */
	class UDamageConversionUpgrade : public UItemUpgrade
	{
	public:
		class UDamageClass*                                        DamageClass;                                             // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConversionPercentage;                                    // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DamageIsAdded;                                           // 0x015C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J2VK[0x3];                                   // 0x015D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              RequiredClass;                                           // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageCondition*                                    Condition;                                               // 0x0168(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* upgradedItem, class AFSDPlayerState* Player, class UDamageClass* DamageClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GatlingHotShellsBonusUpgrade
	 * Size -> 0x0018 (FullSize[0x0168] - InheritedSize[0x0150])
	 */
	class UGatlingHotShellsBonusUpgrade : public UItemUpgrade
	{
	public:
		class UDamageClass*                                        DamageClass;                                             // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConversionPercentage;                                    // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DamageIsAdded;                                           // 0x015C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T3RG[0x3];                                   // 0x015D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TemperatureRequired;                                     // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FSOE[0x4];                                   // 0x0164(0x0004) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UDamageClass* DamageClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TargetSpecificDamageBonusUpgrade
	 * Size -> 0x0058 (FullSize[0x01A8] - InheritedSize[0x0150])
	 */
	class UTargetSpecificDamageBonusUpgrade : public UItemUpgrade
	{
	public:
		float                                                      Bonus;                                                   // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CP0S[0x4];                                   // 0x0154(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagQuery                                   tagQuery;                                                // 0x0158(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		class FName                                                Key;                                                     // 0x01A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, const class FName& Key);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TargetStateDamageBonusUpgrade
	 * Size -> 0x0010 (FullSize[0x0160] - InheritedSize[0x0150])
	 */
	class UTargetStateDamageBonusUpgrade : public UItemUpgrade
	{
	public:
		ETargetStateDamageBonusType                                TargetState;                                             // 0x0150(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VQ5Q[0x3];                                   // 0x0151(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Bonus;                                                   // 0x0154(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageClass*                                        DamageClass;                                             // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ETargetStateDamageBonusType TargetState);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusDamageBonusUpgrade
	 * Size -> 0x0020 (FullSize[0x0170] - InheritedSize[0x0150])
	 */
	class UStatusDamageBonusUpgrade : public UItemUpgrade
	{
	public:
		TArray<class UClass*>                                      StatusEffects;                                           // 0x0150(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		float                                                      Bonus;                                                   // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WH80[0x4];                                   // 0x0164(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageClass*                                        DamageClass;                                             // 0x0168(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* StatusEffect);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusAndStateDamageBonusUpgrade
	 * Size -> 0x0030 (FullSize[0x0180] - InheritedSize[0x0150])
	 */
	class UStatusAndStateDamageBonusUpgrade : public UItemUpgrade
	{
	public:
		TArray<class UClass*>                                      StatusEffects;                                           // 0x0150(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<ETargetStateDamageBonusType>                        TargetStates;                                            // 0x0160(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      Bonus;                                                   // 0x0170(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1EXB[0x4];                                   // 0x0174(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageClass*                                        DamageClass;                                             // 0x0178(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PushSatusEffectDamageBonusUpgrade
	 * Size -> 0x0018 (FullSize[0x0168] - InheritedSize[0x0150])
	 */
	class UPushSatusEffectDamageBonusUpgrade : public UItemUpgrade
	{
	public:
		class UClass*                                              StatusEffect;                                            // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Chance;                                                  // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IgnoreArmorHit;                                          // 0x015C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JJNE[0x3];                                   // 0x015D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageCondition*                                    Condition;                                               // 0x0160(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* StatusEffect);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PushDynamicStatusEffectDamageBonusUpgrade
	 * Size -> 0x0010 (FullSize[0x0160] - InheritedSize[0x0150])
	 */
	class UPushDynamicStatusEffectDamageBonusUpgrade : public UItemUpgrade
	{
	public:
		class FName                                                Key;                                                     // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStatusEffectItem*                                   StatusEffectItem;                                        // 0x0158(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, const class FName& Key);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ModifyDynamicStatusEffectDamageBonusUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UModifyDynamicStatusEffectDamageBonusUpgrade : public UStandardItemUpgrade
	{
	public:
		EModifyStatusEffectDamageUpgrade                           upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_561C[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* upgradedItem, class AFSDPlayerState* Player, EModifyStatusEffectDamageUpgrade upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LockCountSTEBonusUpgrade
	 * Size -> 0x0010 (FullSize[0x0160] - InheritedSize[0x0150])
	 */
	class ULockCountSTEBonusUpgrade : public UItemUpgrade
	{
	public:
		class UClass*                                              StatusEffect;                                            // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseTotalLockCount;                                       // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M4YI[0x3];                                   // 0x0159(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Amount;                                                  // 0x015C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* StatusEffect);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageTagBonusUpgrade
	 * Size -> 0x0010 (FullSize[0x0160] - InheritedSize[0x0150])
	 */
	class UDamageTagBonusUpgrade : public UItemUpgrade
	{
	public:
		TArray<class UDamageTag*>                                  Tags;                                                    // 0x0150(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ConditionalDamageTagBonusUpgrade
	 * Size -> 0x0018 (FullSize[0x0168] - InheritedSize[0x0150])
	 */
	class UConditionalDamageTagBonusUpgrade : public UItemUpgrade
	{
	public:
		TArray<class UDamageTag*>                                  Tags;                                                    // 0x0150(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UDamageCondition*                                    Condition;                                               // 0x0160(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ConditionalDamageModifierUpgrade
	 * Size -> 0x0018 (FullSize[0x0168] - InheritedSize[0x0150])
	 */
	class UConditionalDamageModifierUpgrade : public UItemUpgrade
	{
	public:
		class UDamageCondition*                                    Condition;                                               // 0x0150(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FDamageModifierItem>                         Modifiers;                                               // 0x0158(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FearAoEBonusUpgrade
	 * Size -> 0x0008 (FullSize[0x0158] - InheritedSize[0x0150])
	 */
	class UFearAoEBonusUpgrade : public UItemUpgrade
	{
	public:
		float                                                      FearFactor;                                              // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      range;                                                   // 0x0154(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SingleUsableUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class USingleUsableUpgrade : public UStandardItemUpgrade
	{
	public:
		ESingleUsableUpgradeType                                   upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CISH[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* subItem, class AFSDPlayerState* Player, ESingleUsableUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlareUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UFlareUpgrade : public UStandardItemUpgrade
	{
	public:
		EFlareUpgradeType                                          upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0C4O[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* flareClass, EFlareUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GrenadeUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UGrenadeUpgrade : public UStandardItemUpgrade
	{
	public:
		EGrenadeUpgradeType                                        upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WWA9[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* flareClass, EGrenadeUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LineCutterUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class ULineCutterUpgrade : public UStandardItemUpgrade
	{
	public:
		ELineCutterUpgradeType                                     upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1D02[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, ELineCutterUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LineCutterProjectileUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class ULineCutterProjectileUpgrade : public UStandardItemUpgrade
	{
	public:
		ELineCutterProjectileUpgradeType                           upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZVJE[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, ELineCutterProjectileUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileUpgrade
	 * Size -> 0x0018 (FullSize[0x0170] - InheritedSize[0x0158])
	 */
	class UProjectileUpgrade : public UStandardItemUpgrade
	{
	public:
		EProjectileUpgrade                                         upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8HH1[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ProjectileClass;                                         // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemUpgradeCondition*                               Condition;                                               // 0x0168(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* upgradedItem, class AFSDPlayerState* Player, EProjectileUpgrade upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlareGunUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UFlareGunUpgrade : public UStandardItemUpgrade
	{
	public:
		EFlaregunUpgrades                                          upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DHOD[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EFlaregunUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlaregunProjectileUpgrade
	 * Size -> 0x0010 (FullSize[0x0168] - InheritedSize[0x0158])
	 */
	class UFlaregunProjectileUpgrade : public UStandardItemUpgrade
	{
	public:
		EFlaregunProjectileUpgrades                                upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_97RE[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ProjectileClass;                                         // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* upgradedItem, class AFSDPlayerState* Player, EFlaregunProjectileUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ChargedProjectileUpgrade
	 * Size -> 0x0010 (FullSize[0x0168] - InheritedSize[0x0158])
	 */
	class UChargedProjectileUpgrade : public UStandardItemUpgrade
	{
	public:
		EChargedProjectileUpgrades                                 upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8VW7[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ProjectileClass;                                         // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* upgradedActor, class AFSDPlayerState* Player, EChargedProjectileUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ElectricalSMGUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UElectricalSMGUpgrade : public UStandardItemUpgrade
	{
	public:
		EElectricalSMGUpgrades                                     upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZVI7[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, EElectricalSMGUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ZiplineGunUpgrade
	 * Size -> 0x0010 (FullSize[0x0168] - InheritedSize[0x0158])
	 */
	class UZiplineGunUpgrade : public UStandardItemUpgrade
	{
	public:
		EZiplineGunUpgrades                                        upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3MS0[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ProjectileClass;                                         // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, EZiplineGunUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GrapplingHookUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UGrapplingHookUpgrade : public UStandardItemUpgrade
	{
	public:
		EGrapplingHookUpgrade                                      upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9T2B[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, EGrapplingHookUpgrade upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SentryGunUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class USentryGunUpgrade : public UStandardItemUpgrade
	{
	public:
		ESentryGunUpgradeType                                      upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PHYQ[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ESentryGunUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SentryGunTypeUpgrade
	 * Size -> 0x0010 (FullSize[0x0160] - InheritedSize[0x0150])
	 */
	class USentryGunTypeUpgrade : public UItemUpgrade
	{
	public:
		class UClass*                                              SentryGunType;                                           // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              MarkerType;                                              // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShieldGeneratorUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UShieldGeneratorUpgrade : public UStandardItemUpgrade
	{
	public:
		EShieldGeneratorUpgrades                                   upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N4JA[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EShieldGeneratorUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AddComponentUpgrade
	 * Size -> 0x0010 (FullSize[0x0160] - InheritedSize[0x0150])
	 */
	class UAddComponentUpgrade : public UItemUpgrade
	{
	public:
		class UClass*                                              ComponentClass;                                          // 0x0150(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ServerOnly;                                              // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QJ1A[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		bool GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* ComponentClass, bool includePreview);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TriggeredStatusEffectUpgrade
	 * Size -> 0x0028 (FullSize[0x0178] - InheritedSize[0x0150])
	 */
	class UTriggeredStatusEffectUpgrade : public UItemUpgrade
	{
	public:
		unsigned char                                              UnknownData_9NH4[0x10];                                  // 0x0150(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              StatusEffect;                                            // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETriggeredStatusEffectType                                 upgradeType;                                             // 0x0168(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DCLZ[0x3];                                   // 0x0169(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AoERange;                                                // 0x016C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              OwnerEffect;                                             // 0x0170(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnEffectShouldTrigger(class AActor* PlayerCharacter);
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, class UClass* StatusEffect, ETriggeredStatusEffectType aUpgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ArmorUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UArmorUpgrade : public UStandardItemUpgrade
	{
	public:
		EArmorUpgradeType                                          upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RPK1[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* armorClass, EArmorUpgradeType aUpgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ArmorStatUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UArmorStatUpgrade : public UStandardItemUpgrade
	{
	public:
		class UPawnStat*                                           Stat;                                                    // 0x0158(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedStatValue(class AFSDPlayerState* Player, class UClass* armorClass, class UPawnStat* Stat);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BoscoUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UBoscoUpgrade : public UStandardItemUpgrade
	{
	public:
		EBoscoUpgrades                                             upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8UIA[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, EBoscoUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlatformGunUpgrade
	 * Size -> 0x0008 (FullSize[0x0158] - InheritedSize[0x0150])
	 */
	class UPlatformGunUpgrade : public UItemUpgrade
	{
	public:
		EPlatformGunUpgrades                                       myUpgradeType;                                           // 0x0150(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GNOH[0x7];                                   // 0x0151(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, EPlatformGunUpgrades aUpgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DetPackUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UDetPackUpgrade : public UStandardItemUpgrade
	{
	public:
		EDetPackUpgrades                                           upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZFTS[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EDetPackUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BonusDamageUpgrade
	 * Size -> 0x0008 (FullSize[0x0158] - InheritedSize[0x0150])
	 */
	class UBonusDamageUpgrade : public UItemUpgrade
	{
	public:
		class UDamageBonusBase*                                    DamageBonus;                                             // 0x0150(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileLauncherBaseUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UProjectileLauncherBaseUpgrade : public UStandardItemUpgrade
	{
	public:
		EProjectileLauncherBaseUpgradeType                         upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IQGK[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EProjectileLauncherBaseUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MicroMissileLauncherUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UMicroMissileLauncherUpgrade : public UStandardItemUpgrade
	{
	public:
		EMicroMissileLauncherUpgrades                              upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TI0J[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EMicroMissileLauncherUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponSwitchProjectileUpgrade
	 * Size -> 0x0010 (FullSize[0x0160] - InheritedSize[0x0150])
	 */
	class UWeaponSwitchProjectileUpgrade : public UItemUpgrade
	{
	public:
		struct FProjectileSwitch                                   Projectile;                                              // 0x0150(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, class UClass* ComponentClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GooGunUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UGooGunUpgrade : public UStandardItemUpgrade
	{
	public:
		EGooGunUpgrades                                            upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3E29[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EGooGunUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GooGunProjectileUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UGooGunProjectileUpgrade : public UStandardItemUpgrade
	{
	public:
		EGooGunProjectileUpgrades                                  upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C1IJ[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, class UClass* upgradedItem, EGooGunProjectileUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LockOnWeaponUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class ULockOnWeaponUpgrade : public UStandardItemUpgrade
	{
	public:
		ELockOnWeaponUpgrades                                      upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0K40[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ELockOnWeaponUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlasmaCarbineUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UPlasmaCarbineUpgrade : public UStandardItemUpgrade
	{
	public:
		EPlasmaCarbineUpgrades                                     upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EC4J[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EPlasmaCarbineUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CrossbowUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UCrossbowUpgrade : public UStandardItemUpgrade
	{
	public:
		ECrossbowUpgrades                                          upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CDYB[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* Projectile, class AFSDPlayerState* Player, ECrossbowUpgrades upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponChargeProgressDamageBonus
	 * Size -> 0x0018 (FullSize[0x0168] - InheritedSize[0x0150])
	 */
	class UWeaponChargeProgressDamageBonus : public UItemUpgrade
	{
	public:
		class UDamageClass*                                        DamageClass;                                             // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      ChargeRange;                                             // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      DamageBonusRange;                                        // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HeavyParticleCannonUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UHeavyParticleCannonUpgrade : public UStandardItemUpgrade
	{
	public:
		EHeavyParticleCannonUpgrade                                upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IOYD[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EHeavyParticleCannonUpgrade upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CapsuleHitscanUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UCapsuleHitscanUpgrade : public UStandardItemUpgrade
	{
	public:
		ECapsuleHitscanUpgradeType                                 upgradeType;                                             // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J5OV[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ECapsuleHitscanUpgradeType upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MicrowavegunUpgrade
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UMicrowavegunUpgrade : public UStandardItemUpgrade
	{
	public:
		EMicrowaveGunUpgrade                                       upgradeType;                                             // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QIKG[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EMicrowaveGunUpgrade upgradeType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Upgradable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UUpgradable : public UInterface
	{
	public:
		void Upgraded(TArray<class UItemUpgrade*> upgrades);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UpgradableGear
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UUpgradableGear : public UInterface
	{
	public:
		void GetGearStatEntry(class AFSDPlayerState* PlayerState, TArray<struct FGearStatEntry>* Stats);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Vacuumable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UVacuumable : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JellyBreeder
	 * Size -> 0x0068 (FullSize[0x0498] - InheritedSize[0x0430])
	 */
	class AJellyBreeder : public AAFlyingBug
	{
	public:
		class UAnimSequenceBase*                                   EggSpawnAnimation;                                       // 0x0430(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     EggParticles;                                            // 0x0438(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          EggSound;                                                // 0x0440(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEnemyDescriptor*                                    EnemyToSpawn;                                            // 0x0448(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              EggClass;                                                // 0x0450(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenBursts;                                       // 0x0458(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenEggs;                                         // 0x045C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CloseToSpawnEggTime;                                     // 0x0460(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N3AI[0xC];                                   // 0x0464(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhysicalMaterial*                                   WeakPointMaterial;                                       // 0x0470(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPhysicalMaterial*                                   UnWeakPointMaterial;                                     // 0x0478(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    EggBurstSize;                                            // 0x0480(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YWKB[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxJellies;                                              // 0x0488(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XSVP[0x4];                                   // 0x048C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MultiplierOnHighPlayerCount;                             // 0x0490(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInBreedMode;                                           // 0x0494(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R3NU[0x3];                                   // 0x0495(0x0003) MISSED OFFSET (PADDING)

	public:
		void SpawnEnemies(class AProjectile* Egg, int32_t AmountToSpawn);
		void PlaySpawnEggAnim();
		void OnRep_BreedMode();
		void OnJellyDestroyed(class AActor* AActor);
		void BreedModeFlipped(bool aIsLayingEggs);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JellyBreederAnimInstance
	 * Size -> 0x0010 (FullSize[0x0350] - InheritedSize[0x0340])
	 */
	class UJellyBreederAnimInstance : public UFlyingBugAnimInstance
	{
	public:
		bool                                                       ReadyToSpawnEggs;                                        // 0x0340(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2H5K[0xF];                                   // 0x0341(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JellyEggAnimInstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class UJellyEggAnimInstance : public UAnimInstance
	{
	public:
		struct FVector                                             force;                                                   // 0x02B8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LLP6[0xC];                                   // 0x02C4(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JetBootsBox
	 * Size -> 0x0018 (FullSize[0x0238] - InheritedSize[0x0220])
	 */
	class AJetBootsBox : public AActor
	{
	public:
		unsigned char                                              UnknownData_OBIH[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTerrainPlacementComponent*                          terrainPlacement;                                        // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USpecialEvent*                                       SpecialEvent;                                            // 0x0230(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JetBootsBoxSpawner
	 * Size -> 0x0078 (FullSize[0x0298] - InheritedSize[0x0220])
	 */
	class AJetBootsBoxSpawner : public AActor
	{
	public:
		unsigned char                                              JetBootsBoxClass[0x28];                                  // 0x0220(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		struct FFloatInterval                                      SpawnIntervalFromDropPod;                                // 0x0248(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxSpawnLocationTries;                                   // 0x0250(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XC29[0x4];                                   // 0x0254(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDebrisPositioning*                                  DebrisPositioning;                                       // 0x0258(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTerrainPlacementComponent*                          terrainPlacement;                                        // 0x0260(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AJetBootsBox*                                        JetBootsBoxInstance;                                     // 0x0268(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              JetBootsBoxClassLoaded;                                  // 0x0270(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZP7C[0x20];                                  // 0x0278(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JetBootsSettings
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UJetBootsSettings : public UDataAsset
	{
	public:
		float                                                      JetForce;                                                // 0x0030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AirControlSpeed;                                         // 0x0034(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxAirSpeed;                                             // 0x0038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxJetFuel;                                              // 0x003C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      JetFuelCost;                                             // 0x0040(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      JetFuelRechargeRate;                                     // 0x0044(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      JetFuelRechargeDelay;                                    // 0x0048(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OutOfFuelRechargeDelay;                                  // 0x004C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JetBootsMovementComponent
	 * Size -> 0x0108 (FullSize[0x01B8] - InheritedSize[0x00B0])
	 */
	class UJetBootsMovementComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_K6LT[0x18];                                  // 0x00B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             FuelUpdated;                                             // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             FuelUpdatedNonLocal;                                     // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UJetBootsSettings*                                   Settings;                                                // 0x00E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           UseSound;                                                // 0x00F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           DeactivatedSound;                                        // 0x00F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           OverHeatSound;                                           // 0x0100(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     UseAudioComponent;                                       // 0x0108(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     OverHeatAudioComponent;                                  // 0x0110(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     DeactivatedAudioComponent;                               // 0x0118(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     TP_UseAudioComponent;                                    // 0x0120(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     TP_OverHeatAudioComponent;                               // 0x0128(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     TP_DeactivatedAudioComponent;                            // 0x0130(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      FootParticles;                                           // 0x0138(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      FootParticlesFP;                                         // 0x0140(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                FootSocketNameLeft;                                      // 0x0148(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                FootSocketNameRight;                                     // 0x0150(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMesh*                                       FootAttachMesh;                                          // 0x0158(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              LFootAttachMeshComponent;                                // 0x0160(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              RFootAttachMeshComponent;                                // 0x0168(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraComponent*                                   LeftFootParticles;                                       // 0x0170(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraComponent*                                   RightFootParticles;                                      // 0x0178(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemComponent*                                  FPFootParticles;                                         // 0x0180(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class APlayerCharacter*                                    Character;                                               // 0x0188(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FromJumpDelay;                                           // 0x0190(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FromTerrainStartDelay;                                   // 0x0194(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OverHeatAtPercent;                                       // 0x0198(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AddPlayerAirVelocityToThrowFactor;                       // 0x019C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentJetFuel;                                          // 0x01A0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L5C4[0xC];                                   // 0x01A4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsUsing;                                                 // 0x01B0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       isFromTakeOff;                                           // 0x01B1(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       overHeated;                                              // 0x01B2(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MKX4[0x5];                                   // 0x01B3(0x0005) MISSED OFFSET (PADDING)

	public:
		void Server_SetOverheated(bool Current);
		void Server_SetIsUsing(bool Current, bool last, bool isFromTakeOff);
		void Server_SetCurrentJetFuel(float Current);
		void RemoveJetBoots();
		void Receive_OnTakeOffLocal();
		void Receive_OnOverheatedChanged(bool overHeated);
		void Receive_OnDestroy();
		void Receive_OnCharacterSet(class APlayerCharacter* Player);
		void Receive_OnActiveChangedServer(bool IsActive, bool fromTakeOff);
		void Receive_OnActiveChangedNonLocal(bool IsActive, bool fromTakeOff);
		void Receive_OnActiveChangedLocal(bool IsActive, bool fromTakeOff);
		void OnStateChanged(ECharacterState State);
		void OnRep_OverHeated(bool lastOverheated);
		void OnRep_IsUsing(bool lastUsing);
		void OnRep_CurrentJetFuel();
		void OnPlayerCharacterHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnJumpReleased();
		void OnJumpPressed();
		void OnCameraModeChanged(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode);
		void Client_SetIsUsing(bool IsUsing);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JetPackItem
	 * Size -> 0x0038 (FullSize[0x0408] - InheritedSize[0x03D0])
	 */
	class AJetPackItem : public AAnimatedItem
	{
	public:
		unsigned char                                              UnknownData_46US[0x4];                                   // 0x03D0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ActiveTime;                                              // 0x03D4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         VerticalAccelerationCurve;                               // 0x03D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VerticalAcceleration;                                    // 0x03E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxVerticalSpeed;                                        // 0x03E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxHorizontalSpeed;                                      // 0x03E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxHorizontalDrift;                                      // 0x03EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurnDuration;                                            // 0x03F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RechargeDuration;                                        // 0x03F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Fuel;                                                    // 0x03F8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Active;                                                  // 0x03FC(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N0MZ[0x3];                                   // 0x03FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPlayerMovementComponent*                            CharacterMovement;                                       // 0x0400(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Server_StopThruster();
		void Server_StartThruster();
		void OnRep_Fuel(float OldFuel);
		void OnRep_Active();
		void OnFuelChanged(float Value, float Delta);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JettyBootsArcadeActor
	 * Size -> 0x0090 (FullSize[0x02B0] - InheritedSize[0x0220])
	 */
	class AJettyBootsArcadeActor : public AActor
	{
	public:
		class UJettyBootUsableComponent*                           StartGameUsable;                                         // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FJettyBootsPlayer                                   Player;                                                  // 0x0228(0x000C) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MaxDistanceToPlay;                                       // 0x0234(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     MaxDistanceComponent;                                    // 0x0238(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WSSL[0x8];                                   // 0x0240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAnimMontage*>                                AnimPlaying;                                             // 0x0248(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UAnimMontage*>                                AnimFailed;                                              // 0x0258(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UAnimMontage*>                                AnimSucces;                                              // 0x0268(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FJettyBootNPC>                               HighScoreNPCs;                                           // 0x0278(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FJettyBootsSave                                     JettyBootsSave;                                          // 0x0288(0x0028) Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected

	public:
		void SetActivePlayer(class APlayerCharacter* InPlayer);
		void Server_ReplayPackage(const struct FJettyBootsReplay& InPackage);
		void ReceiveReplayPackage(const struct FJettyBootsReplay& InPackage);
		void ReceivePlayerChanged();
		void ReceiveHighScoreChanged();
		void OnRep_Save();
		void OnRep_Player(const struct FJettyBootsPlayer& OldPlayer);
		void OnPlayerCharacterDestroyed(class AActor* InActor);
		void OnCharacterMoved(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);
		void OnCharacterMontageEnded(class UAnimMontage* InMontage, bool InInterrupted);
		bool IsPlayerWithinDistance();
		int32_t GetLastHighScoreIndex();
		TArray<struct FJettyBootsScore> GetHighScores();
		class APlayerCharacter* GetActivePlayer();
		void ClearHighScores();
		void All_ReplayPackage(const struct FJettyBootsReplay& InPackage);
		void AddHighScoreServer(const struct FJettyBootsScore& InScore);
		void AddHighScoreClient(const struct FJettyBootsScore& InScore);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SingleUsableComponent
	 * Size -> 0x00F0 (FullSize[0x0210] - InheritedSize[0x0120])
	 */
	class USingleUsableComponent : public UUsableComponent
	{
	public:
		class FScriptMulticastDelegate                             OnUsedBy;                                                // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUseBegin;                                              // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUseEnd;                                                // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProgress;                                              // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUsableChanged;                                         // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUserCountChanged;                                      // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailed;                                                // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USoundCue*                                           AudioBeginUse;                                           // 0x0190(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           AudioFailedUse;                                          // 0x0198(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           AudioCompletedUse;                                       // 0x01A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    BoscoLaserpointerShout;                                  // 0x01A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CoopUse;                                                 // 0x01B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FRDG[0x7];                                   // 0x01B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPawnStat*                                           UseSpeedStat;                                            // 0x01B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CoopUseMultiplier;                                       // 0x01C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Usable;                                                  // 0x01C4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TurnOffAfterUse;                                         // 0x01C5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       MultipleUse;                                             // 0x01C6(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SY1H[0x1];                                   // 0x01C7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bShowUsingUI;                                            // 0x01C8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WQIP[0x7];                                   // 0x01C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              UsableIcon[0x28];                                        // 0x01D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      useDuration;                                             // 0x01F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Progress;                                                // 0x01FC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DesiredProgress;                                         // 0x0200(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    userCount;                                               // 0x0204(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     AudioBeginUseInstance;                                   // 0x0208(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Use(class APlayerCharacter* User, EInputKeys Key, float DeltaTime);
		void SetProgress(float Value);
		void SetCanUse(bool CanUse);
		void OnRep_UserCount();
		void OnRep_Usable();
		void OnRep_DesiredProgress();
		void Cheat_Use(class APlayerCharacter* User, EInputKeys Key);
		void All_PlayFailedAudio();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JettyBootUsableComponent
	 * Size -> 0x0008 (FullSize[0x0218] - InheritedSize[0x0210])
	 */
	class UJettyBootUsableComponent : public USingleUsableComponent
	{
	public:
		int32_t                                                    CreditPrice;                                             // 0x0210(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YP4B[0x4];                                   // 0x0214(0x0004) MISSED OFFSET (PADDING)

	public:
		bool DeductCredits(class APlayerCharacter* User, class UMissionStat* InCreditCounter);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JettyBootsArcadeWidget
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class UJettyBootsArcadeWidget : public UUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpriteRectLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USpriteRectLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FSpriteRect TranslateSpriteRect(const struct FSpriteRect& Rect, const struct FVector2D& Offset);
		bool SpriteRectIntersectsAny(const struct FSpriteRect& A, TArray<struct FSpriteRect> Others);
		bool SpriteRectIntersects(const struct FSpriteRect& A, const struct FSpriteRect& B);
		void MoveSpriteRect(struct FSpriteRect* Rect, const struct FVector2D& Offset);
		struct FSpriteRect MakeSpriteRectFromPoints(const struct FVector2D& Start, const struct FVector2D& End);
		struct FSpriteRect MakeSpriteRectFromCenter(const struct FVector2D& Center, const struct FVector2D& Size);
		void MakeGateSpriteRects(int32_t CanvasHeight, int32_t GateWidth, const struct FVector& OpeningPos, float OpeningHeight, struct FSpriteRect* OutTopRect, struct FSpriteRect* OutBottomRect);
		struct FVector2D GetSpriteRectSize(const struct FSpriteRect& Rect);
		struct FVector2D GetSpriteRectCenter(const struct FSpriteRect& Rect);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpriteRectWidget
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class USpriteRectWidget : public UUserWidget
	{
	public:
		struct FVector2D                                           Position;                                                // 0x0260(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           Size;                                                    // 0x0268(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetSize(const struct FVector2D& InSize);
		void SetPositionAndSize(const struct FVector2D& InPosition, const struct FVector2D& InSize);
		void SetPosition(const struct FVector2D& InPosition);
		void Move(const struct FVector2D& InOffset);
		struct FSpriteRect GetSpriteRect();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.JettyBootSettings
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UJettyBootSettings : public UDataAsset
	{
	public:
		TArray<struct FJettyBootSetting>                           LevelSettings;                                           // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		struct FJettyBootSetting GetLevelSetting(int32_t InLevel);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.KeepInsideWorld
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UKeepInsideWorld : public UActorComponent
	{
	public:
		TArray<TWeakObjectPtr<class AActor>>                       ActorsToKeepInsideWorld;                                 // 0x00B0(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		int32_t                                                    IteratorIndex;                                           // 0x00C0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EMLV[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (PADDING)

	public:
		void UnregisterForKeepInsideWorld(class UObject* WorldContextObject, class AActor* Actor);
		void RegisterForKeepInsideWorld(class UObject* WorldContextObject, class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.KillEnemiesObjective
	 * Size -> 0x0020 (FullSize[0x01A0] - InheritedSize[0x0180])
	 */
	class UKillEnemiesObjective : public UObjective
	{
	public:
		int32_t                                                    EnemyCount;                                              // 0x0180(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ExtraEnemies;                                            // 0x0184(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDebrisPositioning*                                  Positioning;                                             // 0x0188(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEnemyDescriptor*                                    EnemyTarget;                                             // 0x0190(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    EnemiesKilled;                                           // 0x0198(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    EnemiesToKill;                                           // 0x019C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void RegisterTargetSpawned(class APawn* Target);
		void ReceiveTargetKilled(class UHealthComponentBase* Health);
		void OnTargetKilled(class UHealthComponentBase* Health);
		void OnRep_EnemiesToKill(int32_t prevAmount);
		void OnRep_EnemiesKilled(int32_t prevAmount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LaserPointerMarker
	 * Size -> 0x0078 (FullSize[0x0298] - InheritedSize[0x0220])
	 */
	class ALaserPointerMarker : public AActor
	{
	public:
		struct FLaserPointerData                                   LookAtData;                                              // 0x0220(0x0060) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class AActor*                                              LookAtActor;                                             // 0x0280(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPrimitiveComponent*                                 LookAtComponent;                                         // 0x0288(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    LookAtTerrainMaterial;                                   // 0x0290(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class APlayerCharacter* GetCharacter();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LaserPointerWaypoint
	 * Size -> 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
	 */
	class ALaserPointerWaypoint : public AActor
	{
	public:
		TWeakObjectPtr<class APlayerCharacter>                     Character;                                               // 0x0220(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ALaserPointerItem>                    LaserPointer;                                            // 0x0228(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Normal;                                                  // 0x0230(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Index;                                                   // 0x023C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnShow();
		void OnHide();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LaserPointerItem
	 * Size -> 0x01A8 (FullSize[0x0578] - InheritedSize[0x03D0])
	 */
	class ALaserPointerItem : public AAnimatedItem
	{
	public:
		class FScriptMulticastDelegate                             OnMarkerPlaced;                                          // 0x03D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              MarkerType;                                              // 0x03E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              SecondaryMarkerType;                                     // 0x03E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ALaserPointerMarker>                  ActiveMarker;                                            // 0x03F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               enemyTags;                                               // 0x03F8(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		class UClass*                                              WaypointType;                                            // 0x0418(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxWaypoints;                                            // 0x0420(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MTMX[0x4];                                   // 0x0424(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ALaserPointerWaypoint*>                       Waypoints;                                               // 0x0428(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    NextWaypointIndex;                                       // 0x0438(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GCZA[0x4];                                   // 0x043C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MarkerLifeTime;                                          // 0x0440(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1VN6[0x4];                                   // 0x0444(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDialogDataAsset*                                    DefaultLookAtShout;                                      // 0x0448(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    DefaultEnemyShout;                                       // 0x0450(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     PointerComponent;                                        // 0x0458(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FHitResult                                          LookAtHit;                                               // 0x0460(0x0088) BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UObjectInfoComponent>                 LookAtInfo;                                              // 0x04E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UTerrainMaterial>                     LookAtTerrainMaterial;                                   // 0x04F0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLaserPointerData                                   LookAtData;                                              // 0x04F8(0x0060) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		float                                                      LookAtDistance;                                          // 0x0558(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VMKT[0x4];                                   // 0x055C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDialogDataAsset*                                    LookAtShout;                                             // 0x0560(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    MissionControlLookAtShout;                               // 0x0568(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFSDGameState*                                       GameState;                                               // 0x0570(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UnlockToMinersManual(class UObject* WorldContextObject, const struct FGuid& ObjectID);
		void ToggleLaserVisible(bool aVisible);
		void ServerPlaceMarker(const struct FVector& Location, class AActor* Actor, class UPrimitiveComponent* Cmponent, class UTerrainMaterial* TerrainMaterial, ELaserPointerMarkerType eMarkerType);
		void Server_SecondaryUse();
		void OnPointOfInterest(class AActor* TargetActor, const struct FVector& TargetLocation, class UTexture2D* TargetIcon);
		void GetPointTransform(struct FTransform* PointTransform);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LegacySettings
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class ULegacySettings : public UDataAsset
	{
	public:
		unsigned char                                              ArmorMeshes[0x10];                                       // 0x0030(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LevelGenerationDebris
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class ULevelGenerationDebris : public UActorComponent
	{
	public:
		class UDebrisBase*                                         Debris;                                                  // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObject*                                             Influencer;                                              // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      range;                                                   // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SelfActivate;                                            // 0x00C4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8U2B[0x3];                                   // 0x00C5(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LightStrobingComponent
	 * Size -> 0x00E8 (FullSize[0x0198] - InheritedSize[0x00B0])
	 */
	class ULightStrobingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_VTV1[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLightStrobeChannel                                 DefaultChannel;                                          // 0x00C0(0x00D0) Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      PhotosensitiveMultiplier;                                // 0x0190(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AutoSetup;                                               // 0x0194(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RUNP[0x3];                                   // 0x0195(0x0003) MISSED OFFSET (PADDING)

	public:
		struct FLightStrobeChannel GetChannel(int32_t Index);
		void AddStrobeChannel(const struct FLightStrobeChannel& Channel);
		void AddMesh(class UMeshComponent* Mesh, int32_t Channel);
		void AddMaterial(class UMaterialInstanceDynamic* Mid, int32_t Channel);
		void AddLight(class UPointLightComponent* Light, int32_t Channel);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LimbDismembermentList
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class ULimbDismembermentList : public UDataAsset
	{
	public:
		TArray<class FName>                                        Bones;                                                   // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GibPartsList
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UGibPartsList : public UDataAsset
	{
	public:
		TArray<class UStaticMesh*>                                 GibMeshes;                                               // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void SetGibMeshesAndMaterialsOnFX(class UNiagaraComponent* ns, class UMaterialInstance* Material, float Scale);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LineSegmentCarverComponent
	 * Size -> 0x0040 (FullSize[0x0490] - InheritedSize[0x0450])
	 */
	class ULineSegmentCarverComponent : public UGenerationComponent
	{
	public:
		TArray<struct FLineSegmentCarverPoint>                     LinePoints;                                              // 0x0450(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       Visible;                                                 // 0x0460(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T687[0x3];                                   // 0x0461(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Layer;                                                   // 0x0464(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Cielingheight;                                           // 0x0468(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FloorDepth;                                              // 0x046C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  CeilingNoiseOverride;                                    // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  WallNoiseOverride;                                       // 0x0478(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  FloorNoiseOverride;                                      // 0x0480(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseDetailNoise;                                          // 0x0488(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S86N[0x7];                                   // 0x0489(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LineSegmentCarver
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ALineSegmentCarver : public AGenerationItem
	{
	public:
		class ULineSegmentCarverComponent*                         LineComponent;                                           // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G9XX[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LineCutterProjectile
	 * Size -> 0x01F0 (FullSize[0x0530] - InheritedSize[0x0340])
	 */
	class ALineCutterProjectile : public AProjectile
	{
	public:
		struct FScaledEffect                                       EletricHitEffect;                                        // 0x0340(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FScaledEffect                                       ProjectileDisappearEffect;                               // 0x0350(0x0010) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      SwipeRadius;                                             // 0x0360(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DoubleLineDistanceMultiplier;                            // 0x0364(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OverlapRadius;                                           // 0x0368(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DestroyOnTerrainCollision;                               // 0x036C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDead;                                                  // 0x036D(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasReversedDirection;                                   // 0x036E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsHoming;                                               // 0x036F(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GEJ9[0x54];                                  // 0x0370(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FlyStraighTime;                                          // 0x03C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EImpactDecalSize                                           EletricDecalSize;                                        // 0x03C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EImpactDecalSize                                           ImpactDecalSize;                                         // 0x03C9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QB2S[0x46];                                  // 0x03CA(0x0046) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLineDestroy;                                           // 0x0410(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnLineLifespanEnd;                                       // 0x0420(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnPerformHit;                                            // 0x0430(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnLineEffectHide;                                        // 0x0440(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		struct FVector                                             LeftLastPosition;                                        // 0x0450(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             RightLastPosition;                                       // 0x045C(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     LineRoot;                                                // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     LeftSphere;                                              // 0x0470(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     RightSphere;                                             // 0x0478(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     LeftSphere2;                                             // 0x0480(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     RightSphere2;                                            // 0x0488(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     LeftSphere3;                                             // 0x0490(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     RightSphere3;                                            // 0x0498(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            BeamParticle;                                            // 0x04A0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            BeamParticle2;                                           // 0x04A8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            BeamParticle3;                                           // 0x04B0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            LeftHitParticles;                                        // 0x04B8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            RightHitParticles;                                       // 0x04C0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotationSpeed;                                           // 0x04C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            LineRotation;                                            // 0x04CC(0x000C) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		ELineRotation                                              RotationMode;                                            // 0x04D8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShouldExplode;                                           // 0x04D9(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       OnlyOne;                                                 // 0x04DA(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDoubleLine;                                            // 0x04DB(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasPlasmaTrail;                                          // 0x04DC(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XSVP[0x3];                                   // 0x04DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LineMaxSize;                                             // 0x04E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LineExpansionDelay;                                      // 0x04E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeToLineExpansion;                                     // 0x04E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FireRate;                                                // 0x04EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    DamageComponent;                                         // 0x04F0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    InitialDamageComponent;                                  // 0x04F8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    InitialHitDamageMultiplier;                              // 0x0500(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InhibitImpactDecalsTime;                                 // 0x0504(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinTimeBetweenImpactDecals;                              // 0x0508(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_STO1[0x24];                                  // 0x050C(0x0024) MISSED OFFSET (PADDING)

	public:
		void UpdateBeamLocations();
		void TerrainSweep(const struct FVector& Left, const struct FVector& Right);
		void StartSpawningTrail();
		void SpawnDecal(struct FHitResult* Result);
		void SetExtraBeamVisibility(bool IsVisible);
		void Server_RemoveDebris(int32_t instance, int32_t Component);
		void PerformHit__DelegateSignature(const struct FHitResult& Result);
		void OnRep_LineRotation();
		void LineLifeSpanDestroy__DelegateSignature();
		void LineEffectHide__DelegateSignature();
		void LineDestroy__DelegateSignature(const struct FHitResult& Result);
		void Fire(const struct FVector& Origin, const struct FVector& Direction, float Distance);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GuntowerLineProjectile
	 * Size -> 0x0070 (FullSize[0x03B0] - InheritedSize[0x0340])
	 */
	class AGuntowerLineProjectile : public AProjectile
	{
	public:
		class FScriptMulticastDelegate                             OnLineDestroy;                                           // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class USceneComponent*                                     LeftLinePoint;                                           // 0x0350(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     RightLinePoint;                                          // 0x0358(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    DamageComponent;                                         // 0x0360(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            BeamParticles;                                           // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlatformDissolveRadius;                                  // 0x0370(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlatformDissolveSqueeze;                                 // 0x0374(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            HitParticles;                                            // 0x0378(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G7ZT[0x20];                                  // 0x0380(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeBetweenLineChecks;                                   // 0x03A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZESY[0xC];                                   // 0x03A4(0x000C) MISSED OFFSET (PADDING)

	public:
		void TurnOffParticles();
		void LineDestroy__DelegateSignature(const struct FHitResult& Result);
		void Fire(const struct FVector& Origin, const struct FVector& Direction, float Distance);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LineSegmentFillerComponent
	 * Size -> 0x0040 (FullSize[0x0490] - InheritedSize[0x0450])
	 */
	class ULineSegmentFillerComponent : public UGenerationComponent
	{
	public:
		TArray<struct FLineSegmentFillerPoint>                     LinePoints;                                              // 0x0450(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       Visible;                                                 // 0x0460(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EFVB[0x7];                                   // 0x0461(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFloodFillSettings*                                  NoiseOverride;                                           // 0x0468(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRandRange                                          RangeScale;                                              // 0x0470(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FRandRange                                          NoiseRangeScale;                                         // 0x0478(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GCL6[0x10];                                  // 0x0480(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LineSegmentFiller
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ALineSegmentFiller : public AGenerationItem
	{
	public:
		class ULineSegmentFillerComponent*                         LineComponent;                                           // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FUIX[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LineSpikeTaskBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULineSpikeTaskBase : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WaitTask
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UWaitTask : public ULineSpikeTaskBase
	{
	public:
		float                                                      WaitTime;                                                // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UJ1O[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       SkipIfLast;                                              // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OnlyOnce;                                                // 0x0031(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3IW3[0x6];                                   // 0x0032(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayEffectsTask
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPlayEffectsTask : public ULineSpikeTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShootTask
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UShootTask : public ULineSpikeTaskBase
	{
	public:
		unsigned char                                              UnknownData_DCYS[0x1];                                   // 0x0028(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       HasToFinish;                                             // 0x0029(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4C33[0x6];                                   // 0x002A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AquireTargetTask
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UAquireTargetTask : public ULineSpikeTaskBase
	{
	public:
		unsigned char                                              UnknownData_WDLW[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ForceNewTarget;                                          // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XH4Q[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpecialAttackComponent
	 * Size -> 0x0030 (FullSize[0x0120] - InheritedSize[0x00F0])
	 */
	class USpecialAttackComponent : public UAttackBaseComponent
	{
	public:
		TArray<class UAnimMontage*>                                Montages;                                                // 0x00F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G4GX[0x10];                                  // 0x0100(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAttackActionNotify;                                    // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		void TriggerAttack(const class FName& Name);
		class UAnimMontage* SelectMontage();
		void Receive_OnPerformAttack();
		void Receive_OnAborted();
		void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);
		void OnFrozen(bool IsFrozen);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LineSpikeAttack
	 * Size -> 0x0140 (FullSize[0x0260] - InheritedSize[0x0120])
	 */
	class ULineSpikeAttack : public USpecialAttackComponent
	{
	public:
		unsigned char                                              UnknownData_OOTM[0x10];                                  // 0x0120(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  TentacleMaterial;                                        // 0x0130(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstance*                                   ActiveMaterial;                                          // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class UNiagaraComponent>>            ActiveParticles;                                         // 0x0140(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      TentacleImpactParticles;                                 // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      StartWaveParticles;                                      // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           TentacleImpactSound;                                     // 0x0160(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           TentacleExitSound;                                       // 0x0168(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           StartWaveSound;                                          // 0x0170(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SCYU[0x60];                                  // 0x0178(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UNiagaraComponent*                                   Tentacles;                                               // 0x01D8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ULineSpikeTaskBase*>                          Sequence;                                                // 0x01E0(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      Children;                                                // 0x01F0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    SequenceLoops;                                           // 0x0200(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4DYZ[0x1C];                                  // 0x0204(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SpikeClass;                                              // 0x0220(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TentaclesBurried;                                        // 0x0228(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WDEQ[0x3];                                   // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxStepUpheight;                                         // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LBOZ[0x4];                                   // 0x0230(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      firstSpikeDelay;                                         // 0x0234(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      firstSpikeExtraDistance;                                 // 0x0238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDistanceToGround;                                     // 0x023C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceBetweenSpikes;                                   // 0x0240(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenSpikes;                                       // 0x0244(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TentacleStretchPower;                                    // 0x0248(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TentacleSearchDistance;                                  // 0x024C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TentacleInGroundOffset;                                  // 0x0250(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MinSpikeCount;                                           // 0x0254(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxFails;                                                // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GE9J[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_TentaclesBurried();
		void All_PlayEffects();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LoadoutFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULoadoutFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetCurrLoadout(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId, const struct FLoadoutCopy& newLoadout);
		void RandomizeWeaponLoadout(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId, int32_t loadoutIndex);
		void RandomizeAllRandomWeaponLoadout(class APlayerCharacter* Player);
		struct FLoadoutCopy GetCurrentLoadout(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId);
		void CopyPasteWeaponLoadout(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId, int32_t fromIndex, int32_t toIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LoadoutItem
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULoadoutItem : public UInterface
	{
	public:
		class UClass* GetLoadoutItemClass();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LoadoutItemProxy
	 * Size -> 0x0020 (FullSize[0x0390] - InheritedSize[0x0370])
	 */
	class ALoadoutItemProxy : public AItem
	{
	public:
		class UItemCharacterAnimationSet*                          AnimationSet;                                            // 0x0370(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FItemLoadoutAnimations                              LoadoutAnimations;                                       // 0x0378(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		class UClass* GetLoadoutItemFromClass(class UClass* ActorClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LocalizationFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULocalizationFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		TArray<struct FLocalizedLanguageInfo> GetLocalizedLanguages();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDLocalizationSettings
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UFSDLocalizationSettings : public UDeveloperSettings
	{
	public:
		TArray<struct FFSDTranslationProgress>                     CommunityTranslationProgress;                            // 0x0038(0x0010) Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LockOnBeam
	 * Size -> 0x0140 (FullSize[0x0360] - InheritedSize[0x0220])
	 */
	class ALockOnBeam : public AActor
	{
	public:
		class USplineComponent*                                    BeamSpline;                                              // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineMeshComponent*                                BeamMeshComponent01;                                     // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineMeshComponent*                                BeamMeshComponent02;                                     // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineMeshComponent*                                BeamMeshComponent03;                                     // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     BlockedNodeComponent;                                    // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     PreviewLocationComponent;                                // 0x0248(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  BeamMaterial;                                            // 0x0250(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  BlockedBeamMaterial;                                     // 0x0258(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  SeekerMaterial;                                          // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BeamThicknessScale;                                      // 0x0268(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UL6R[0xC];                                   // 0x026C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ALockOnWeapon>                        Item;                                                    // 0x0278(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               TargetActor;                                             // 0x0280(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4B5Q[0x10];                                  // 0x0288(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBeamCollision                                      Collision;                                               // 0x0298(0x00C8) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void ReceiveItemSet();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LockOnTrackingWidget
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class ULockOnTrackingWidget : public UActorTrackingWidget
	{
	public:
		void OnLockOn(int32_t numberOfLockOnsOnThisTarget, int32_t totalNumberOfLockOns);
		void OnFireComplete(int32_t numberOfLockOnsOnThisTarget);
		void CleanUpWidget(bool showFade);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LockOnWeapon
	 * Size -> 0x01B8 (FullSize[0x0908] - InheritedSize[0x0750])
	 */
	class ALockOnWeapon : public AAmmoDrivenWeapon
	{
	public:
		class FScriptMulticastDelegate                             OnLockingStarted;                                        // 0x0750(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLockingStopped;                                        // 0x0760(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMaxTargetsChanged;                                     // 0x0770(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLockOnCountChanged;                                    // 0x0780(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLockonTargetRotationUpdated;                           // 0x0790(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class AActor*                                              AimTarget;                                               // 0x07A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LockOnDamageMultiplier;                                  // 0x07A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ShotsPerTarget;                                          // 0x07AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxTargets;                                              // 0x07B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenLockedShots;                                  // 0x07B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LockOnTime;                                              // 0x07B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxLockOnDegree;                                         // 0x07BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LoseLockOnDegree;                                        // 0x07C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DegreeTolerance;                                         // 0x07C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxLockOnRange;                                          // 0x07C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPrioritizeLowHitPoint;                                  // 0x07CC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAlwaysHitTarget;                                        // 0x07CD(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NKN1[0x2];                                   // 0x07CE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxLockOnDuration;                                       // 0x07D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLockOnControlsSentryGun;                                // 0x07D4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSentryGunShootsOnLockedShot;                            // 0x07D5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NC2T[0x2];                                   // 0x07D6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              TrackingWidgetClass;                                     // 0x07D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              LockOnBeamClass;                                         // 0x07E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              AoeActorClass;                                           // 0x07E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AoeHitCountThreshhold;                                   // 0x07F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseLockOnTargetStatusEffect;                             // 0x07F4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TXE4[0x3];                                   // 0x07F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              LockOnTargetStatusEffect;                                // 0x07F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PushStatusEffectEveryXLock;                              // 0x0800(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KFLU[0x30];                                  // 0x0804(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    LockOnCount;                                             // 0x0834(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OJ0Z[0x30];                                  // 0x0838(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageComponent*                                    DamageComponent;                                         // 0x0868(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHitscanComponent*                                   HitscanComponent;                                        // 0x0870(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTracerData                                         ChargedShotTracer;                                       // 0x0878(0x0030) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      ChargeSpeed;                                             // 0x08A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SlowMovementAtCharge;                                    // 0x08AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       FearEnabled;                                             // 0x08B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZLRB[0x3];                                   // 0x08B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FearFactorBase;                                          // 0x08B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FearFactorPerShotBonus;                                  // 0x08B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FearRange;                                               // 0x08BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FearRangePerShotBonus;                                   // 0x08C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4OZZ[0x2];                                   // 0x08C4(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsMovementSlowed;                                        // 0x08C6(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Charging;                                                // 0x08C7(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeProgress;                                          // 0x08C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       LastShotWasLockedOn;                                     // 0x08CC(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F4V4[0x3];                                   // 0x08CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LockOnRecoilMult;                                        // 0x08D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4230[0x34];                                  // 0x08D4(0x0034) MISSED OFFSET (PADDING)

	public:
		void UpdateRifleEye();
		void SetMuzzleDirection(const struct FVector& TargetLocation);
		void Server_TriggerAoe(const struct FVector& Location);
		void Server_SetTotalLockCount(int32_t totalLockCount);
		void Server_SetLockCount(const struct FLockCounter& LockCounter);
		void Server_SetIsMovementSlowed(bool bisMovementSlowed);
		void Server_SetIsLatestShotLockedOn(bool bisShotLockedOn);
		void Server_SetIsChargingShot(bool bisCharging);
		void Server_PushStatusEffect(class AActor* Target);
		void Server_PopStatusEffect(class AActor* Target);
		void Server_FiringComplete(int32_t ShotsFired);
		void RefundAmmo();
		void OnRep_AimTarget();
		void OnMovementSlowed(bool isSlowed);
		void OnHitDeadTarget();
		void OnHit(const struct FHitResult& Hit, bool alwaysPenetrate);
		void OnAsyncFireComplete();
		void MuzzleLerpToTarget(const struct FVector& TargetLocation);
		void MaxTargetsDelegate__DelegateSignature(int32_t InMaxTargets);
		void LockonTargetRotationUpdated__DelegateSignature(bool hasTargetLockon, const struct FRotator& socketRotation);
		void LockOnRifleLockingOnState__DelegateSignature();
		void LockOnCountDelegate__DelegateSignature(int32_t InCurrentCount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LookingAtWidget
	 * Size -> 0x0048 (FullSize[0x02A8] - InheritedSize[0x0260])
	 */
	class ULookingAtWidget : public UUserWidget
	{
	public:
		float                                                      TargetSelectDuration;                                    // 0x0260(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetLostDuration;                                      // 0x0264(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APlayerCharacter>                     Character;                                               // 0x0268(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UCharacterSightComponent>             CharacterSight;                                          // 0x0270(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               CurrentTarget;                                           // 0x0278(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UPawnAfflictionComponent>             CurrentTargetAfflictions;                                // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              CurrentTargetHealth[0x10];                               // 0x0288(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		bool                                                       CanCurrentTargetTakeDamage;                              // 0x0298(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PVS3[0x3];                                   // 0x0299(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TargetLostTime;                                          // 0x029C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTargetSet;                                              // 0x02A0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IBD5[0x7];                                   // 0x02A1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetCurrentTarget(class AActor* NewActor, float OverrideTargetLostTime);
		void ResetCurrentTarget();
		void ReceiveUpdateTarget(class AActor* InCurrentTarget, float DeltaTime);
		void ReceiveTargetLost();
		void ReceiveNewTarget(class AActor* InCurrentTarget);
		bool IsValidTarget(class AActor* TargetActor);
		bool IsBossFight();
		class UHealthComponentBase* GetLookingAtHealth();
		class AActor* GetLookingAtActor();
		bool GetCharacterTemperatureEffect(float* TemperatureEffect);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LookingAtContentWidget
	 * Size -> 0x0040 (FullSize[0x02A0] - InheritedSize[0x0260])
	 */
	class ULookingAtContentWidget : public UUserWidget
	{
	public:
		TWeakObjectPtr<class AActor>                               CurrentTarget;                                           // 0x0260(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UPawnAfflictionComponent>             CurrentTargetAfflictions;                                // 0x0268(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class USimpleObjectInfoComponent>           CurrentTargetInfo;                                       // 0x0270(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              CurrentTargetHealth[0x10];                               // 0x0278(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		TWeakObjectPtr<class UHackingUsableComponent>              CurrentHackingComponent;                                 // 0x0288(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UPetComponent>                        CurrentPetComponent;                                     // 0x0290(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWeakPointHit;                                           // 0x0298(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_APVJ[0x7];                                   // 0x0299(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateCurrentTarget(float DeltaSeconds, class AActor* InTargetActor);
		void RegisterWeakPointHit();
		void ReceiveUpdateTarget(class AActor* InCurrentTarget, float DeltaTime);
		void ReceiveNewTarget(class AActor* InCurrentTarget);
		class FText GetTargetOwnerName();
		class FText GetTargetName();
		float GetTargetHealthPct();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TreasureBeacon
	 * Size -> 0x0080 (FullSize[0x02A0] - InheritedSize[0x0220])
	 */
	class ATreasureBeacon : public AActor
	{
	public:
		unsigned char                                              UnknownData_3J2F[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     RootComp;                                                // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainPlacementComponent*                          terrainPlacement;                                        // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDebrisPositioning*                                  TreasurePositioning;                                     // 0x0238(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDebrisPositioning*                                  DebrisPartsPositioning;                                  // 0x0240(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         AvoidCostCurve;                                          // 0x0248(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         AvoidCostCurveDebris;                                    // 0x0250(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxRange;                                                // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinRange;                                                // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DebrisSpawnRange;                                        // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G5WG[0x4];                                   // 0x0264(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DebrisPartClass;                                         // 0x0268(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DebrisPartsToSpawn;                                      // 0x0270(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxSpawnLocationTries;                                   // 0x0274(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UYCU[0x18];                                  // 0x0278(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              TreasureClass;                                           // 0x0290(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATreasureContainer*                                  TreasureInstance;                                        // 0x0298(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SpawnDebreeParts();
		void ActivateTreasure();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TreasureContainer
	 * Size -> 0x0070 (FullSize[0x0290] - InheritedSize[0x0220])
	 */
	class ATreasureContainer : public AActor
	{
	public:
		unsigned char                                              UnknownData_X43K[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     Root;                                                    // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOncePerPlayerUsableComponent*                       CollectUsable;                                           // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FAT9[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItemAquisitionSource*                               AquisitionSource;                                        // 0x0240(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class APlayerCharacter*>                            Collectors;                                              // 0x0248(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		class APlayerCharacter*                                    LastJoiner;                                              // 0x0258(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FTreasureWeight>                             PossibleRewarders;                                       // 0x0260(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UTreasureRewarder*                                   TreasureRewarder;                                        // 0x0270(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0J2I[0x12];                                  // 0x0278(0x0012) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       PreventLatejoiners;                                      // 0x028A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_J4PS[0x5];                                   // 0x028B(0x0005) MISSED OFFSET (PADDING)

	public:
		void TestAwardTreasure();
		void SetPreventFurtherLatejoiners(bool prevent);
		void SetCanCollectTreasure(bool canCollect);
		void OnRep_LastJoiner();
		void OnRep_Collectors();
		void OnPlayerLatejoined(class APlayerCharacter* joiner);
		void OnPlayerCollectedTreasure(class APlayerCharacter* collector, EInputKeys Key);
		void OnLocalPlayerCollectedTreasure(class APlayerCharacter* Player);
		void OnDisableChestLocally();
		void OnContainerActivated();
		bool GetPreventFurtherLatejoiners();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LostPack
	 * Size -> 0x0000 (FullSize[0x0220] - InheritedSize[0x0220])
	 */
	class ALostPack : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MasteryIconWidget
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class UMasteryIconWidget : public UUserWidget
	{
	public:
		void ReceiveUnlocked();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MeleeAttackComponent
	 * Size -> 0x0070 (FullSize[0x0168] - InheritedSize[0x00F8])
	 */
	class UMeleeAttackComponent : public UDamageAttackComponent
	{
	public:
		TArray<class UAnimMontage*>                                Montages;                                                // 0x00F8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UTargetValidator*                                    HitValidator;                                            // 0x0108(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4R5L[0x8];                                   // 0x0110(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       CenterOnTarget;                                          // 0x0118(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VG06[0x7];                                   // 0x0119(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAttackEffect*>                               AttackEffects;                                           // 0x0120(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q38P[0x8];                                   // 0x0130(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAttackStartedEvent;                                    // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnDamageAppliedEvent;                                    // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnAttackEndedEvent;                                      // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		class UAnimMontage* SelectMontage();
		void OnPerformAttack(const class FName& Name);
		void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MeshCarveAttackEffect
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UMeshCarveAttackEffect : public UAttackEffect
	{
	public:
		float                                                      ExpensiveNoise;                                          // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6OSO[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         CarveMesh;                                               // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarverOffset;                                            // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            CarverOrientation;                                       // 0x003C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             CarverScale;                                             // 0x0048(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                Socket;                                                  // 0x0054(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A0R4[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MessagingSubSystem
	 * Size -> 0x12D8 (FullSize[0x1308] - InheritedSize[0x0030])
	 */
	class UMessagingSubSystem : public UGameInstanceSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnNewMessage;                                            // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_APJT[0x12C8];                                // 0x0040(0x12C8) MISSED OFFSET (PADDING)

	public:
		class FString MessageSenderIdAsString(const struct FFSDChatMessage& Msg);
		float MessageAge(const struct FFSDChatMessage& Msg);
		void LatestMessages(int32_t Num, bool resetAge, TArray<struct FFSDChatMessage>* OutMessages);
		void ClearMessages();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MeteorDefenseEvent
	 * Size -> 0x0048 (FullSize[0x03B0] - InheritedSize[0x0368])
	 */
	class AMeteorDefenseEvent : public AGameEvent
	{
	public:
		TArray<struct FProgressShout>                              ProgressShouts;                                          // 0x0368(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I43E[0x20];                                  // 0x0378(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Duration;                                                // 0x0398(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialProgress;                                         // 0x039C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class APlagueMeteor*                                       meteor;                                                  // 0x03A0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AHFF[0x8];                                   // 0x03A8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetMeteor(class APlagueMeteor* meteor);
		class APlagueMeteor* GetMeteor();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlagueMeteorSpawner
	 * Size -> 0x0078 (FullSize[0x0328] - InheritedSize[0x02B0])
	 */
	class APlagueMeteorSpawner : public ADebrisLocationFinder
	{
	public:
		class FScriptMulticastDelegate                             OnSpawnedMeteor;                                         // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_46PH[0x8];                                   // 0x02C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              MeteorActorClass[0x28];                                  // 0x02C8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		struct FRandRange                                          EscortSpawnFromMuleRange;                                // 0x02F0(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      EscortSpawnFromImportantRange;                           // 0x02F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EscortMinimum2DSpawnDistFromPath;                        // 0x02FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EscortMinimumZSpawnDistFromPath;                         // 0x0300(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DropLocationHeightOffset;                                // 0x0304(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ImportantLocationRange;                                  // 0x0308(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C19H[0x4];                                   // 0x030C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              MeteorActorClassLoaded;                                  // 0x0310(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C6LC[0x10];                                  // 0x0318(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DropRockCrackerPodsSpawner
	 * Size -> 0x0060 (FullSize[0x0310] - InheritedSize[0x02B0])
	 */
	class ADropRockCrackerPodsSpawner : public ADebrisLocationFinder
	{
	public:
		class APlagueMeteor*                                       meteor;                                                  // 0x02B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              MeteorActorClass[0x28];                                  // 0x02B8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              RockCrackerIndicationClass[0x28];                        // 0x02E0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              UnknownData_SC6K[0x8];                                   // 0x0308(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MicroMissileLauncher
	 * Size -> 0x00B0 (FullSize[0x0800] - InheritedSize[0x0750])
	 */
	class AMicroMissileLauncher : public AAmmoDrivenWeapon
	{
	public:
		class FScriptMulticastDelegate                             OnStartCharging;                                         // 0x0750(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndCharging;                                           // 0x0760(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class FName>                                        MuzzleNames;                                             // 0x0770(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      ChargeTime;                                              // 0x0780(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ChargeMaxFireCount;                                      // 0x0784(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BuckShotDelay;                                           // 0x0788(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShotDirectionHorizontalDegreeOffset;                     // 0x078C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShotDirectionVerticleDegreeOffset;                       // 0x0790(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EMicroMissileLauncherFireMode                              FireMode;                                                // 0x0794(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DisableHomingOnRelease;                                  // 0x0795(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A8JN[0x2];                                   // 0x0796(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxHomingProjectiles;                                    // 0x0798(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IO0D[0x4];                                   // 0x079C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        WPN_Fire_Empty_Mag;                                      // 0x07A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_Fire_Level2;                                         // 0x07A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_Fire_Level2_Empty_Mag;                               // 0x07B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_Fire_Level3;                                         // 0x07B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_Fire_Level3_Empty_Mag;                               // 0x07C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_Mag_Feed;                                            // 0x07C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_Mag_And_Barrel_Feed;                                 // 0x07D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ChargedMissileFireSound;                                 // 0x07D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7NNN[0x20];                                  // 0x07E0(0x0020) MISSED OFFSET (PADDING)

	public:
		void Server_SetIsCharging(bool isCharging);
		void Server_SetChargedMissile(bool isCharged);
		bool IsNextShotBuckShot();
		int32_t GetChargeCurrentFireCount();
		void ChargingDelegate__DelegateSignature();
		void All_SetChargedMissile(bool isCharged);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MicroMissileLauncherAnimInstance
	 * Size -> 0x0068 (FullSize[0x0320] - InheritedSize[0x02B8])
	 */
	class UMicroMissileLauncherAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_WT0R[0x8];                                   // 0x02B8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_B4WF[0x50];                                  // 0x02C0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AMicroMissileLauncher*                               Weapon;                                                  // 0x0310(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y2RK[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnMontageEndedInternal(class UAnimMontage* Montage, bool interrupted);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MicrowaveWeapon
	 * Size -> 0x0240 (FullSize[0x0990] - InheritedSize[0x0750])
	 */
	class AMicrowaveWeapon : public AAmmoDrivenWeapon
	{
	public:
		class UDamageComponent*                                    DamageComp;                                              // 0x0750(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCapsuleHitscanComponent*                            CapsuleHitscanComp;                                      // 0x0758(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFirstPersonNiagaraComponent*                        FP_MuzzleParticle;                                       // 0x0760(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   TP_MuzzleParticle;                                       // 0x0768(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    ExplodingTargetsDamageComponent;                         // 0x0770(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    RadiantSuperheaterHeat;                                  // 0x0778(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    RadiantSuperheaterFrostShock;                            // 0x0780(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLenseActivated;                                        // 0x0788(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLenseDeactivated;                                      // 0x0798(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S8AT[0x10];                                  // 0x07A8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SwitchTime;                                              // 0x07B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MDQT[0xC];                                   // 0x07BC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              GammaContaminationSTE;                                   // 0x07C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              GammaContaminationZoneSTE;                               // 0x07D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GammaContaminationRange;                                 // 0x07D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_04AF[0x34];                                  // 0x07DC(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ExplodableBlisterClass;                                  // 0x0810(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlisteringNecrosisChance;                                // 0x0818(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinTimeBetweenBlisteringNecrosis;                        // 0x081C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XNDN[0x8];                                   // 0x0820(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              FireEffect;                                              // 0x0828(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      NeuroEffects;                                            // 0x0830(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UClass*                                              NeuroToSpread;                                           // 0x0840(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              SlowEffect;                                              // 0x0848(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      ImpactParticleEnemies;                                   // 0x0850(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      ImpactParticleTerrain;                                   // 0x0858(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      NeuroSpreadParticles;                                    // 0x0860(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     P_NeuroSpreadParticles;                                  // 0x0868(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           NeuroSpreadSound;                                        // 0x0870(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      MicrowaveMuzzle;                                         // 0x0878(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraComponent*                                   MuzzleComp;                                              // 0x0880(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              ActorsInCapsule[0x50];                                   // 0x0888(0x0050) UNKNOWN PROPERTY: SetProperty
		float                                                      WeaponRange;                                             // 0x08D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShotWidth;                                               // 0x08DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageInterval;                                          // 0x08E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IZLM[0x8];                                   // 0x08E4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      KilledTargetsExplosionChance;                            // 0x08EC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      ExplosionOCSystem;                                       // 0x08F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I0SE[0xC];                                   // 0x08F8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NeuroSpreadRadius;                                       // 0x0904(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QVP6[0x4];                                   // 0x0908(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMicrowaveLense                                     WideLense;                                               // 0x090C(0x0014) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FMicrowaveLense                                     FocusLense;                                              // 0x0920(0x0014) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YKS9[0x4];                                   // 0x0934(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TemperatureAmplification;                                // 0x0938(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RadiantSuperheaterActive;                                // 0x093C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YGPW[0x3];                                   // 0x093D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RadiantSuperheaterFrostShockChance;                      // 0x0940(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RadiantSuperheaterHeatShockChance;                       // 0x0944(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X0US[0xC];                                   // 0x0948(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RadiantSuperheaterMinColdDamage;                         // 0x0954(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RadiantSuperheaterMinHeatDamage;                         // 0x0958(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RadiantSuperheaterFrostTransferFactor;                   // 0x095C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RadiantSuperheaterHeatTransferFactor;                    // 0x0960(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ColdTempAmpMultiplier;                                   // 0x0964(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UEnemyTemperatureComponent>           RadiantSuperheaterTarget;                                // 0x0968(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SlowOnHit;                                               // 0x0970(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ITLE[0x7];                                   // 0x0971(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              HeatSink;                                                // 0x0978(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DW4K[0x10];                                  // 0x0980(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateMuzzleAnim(bool InIsFiring);
		void SpawnExplosiveBoil(class UPrimitiveComponent* Target, const struct FMultiHitscanHit& Hit);
		void ShowBoilerRayExplosion_Server(const struct FVector_NetQuantize& Location, const struct FRotator& Rotation);
		void ShowBoilerRayExplosion(const struct FVector_NetQuantize& Location, const struct FRotator& Rotation);
		void Server_SetLensePower(float lensepower);
		void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);
		void OnShowHitEffect(const struct FVector& ImpactPoint, const struct FVector& ImpactNormal, bool hitEnemy);
		void OnServerHitscanHit(const struct FMultiHitScanHits& Hits);
		void OnRadiantSuperHeaterAoe();
		void OnPushedDamageEffect(class UHealthComponentBase* healthComp);
		void HeatUpdated(float SmoothedTemperature);
		void EndCharacterOverheatAnim();
		void All_ShowNeuroSpread(const struct FVector& Location);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Boil
	 * Size -> 0x0018 (FullSize[0x0238] - InheritedSize[0x0220])
	 */
	class ABoil : public AActor
	{
	public:
		TArray<class UFSDPhysicalMaterial*>                        PhysicalMaterials;                                       // 0x0220(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MaterialIndex;                                           // 0x0230(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JI6M[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_MaterialIndex();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MilestoneAsset
	 * Size -> 0x0088 (FullSize[0x00B8] - InheritedSize[0x0030])
	 */
	class UMilestoneAsset : public UDataAsset
	{
	public:
		class FScriptMulticastDelegate                             OnMilestoneClaimed;                                      // 0x0030(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMilestoneReached;                                      // 0x0040(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FGuid                                               SavegameID;                                              // 0x0050(0x0010) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          LargeImage;                                              // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                FormattedTitle;                                          // 0x0068(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		int32_t                                                    FormattedValueOffset;                                    // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CountValueAsTotal;                                       // 0x0084(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FUQY[0x3];                                   // 0x0085(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMissionStat*                                        TrackingStat;                                            // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerCharacterID*                                  TrackingCharacterID;                                     // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FMilestoneTier>                              Tiers;                                                   // 0x0098(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    LastTierReached;                                         // 0x00A8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPendingMilestoneReached;                                // 0x00AC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RJYM[0xB];                                   // 0x00AD(0x000B) MISSED OFFSET (PADDING)

	public:
		TArray<class UMilestoneAsset*> SortMilestonesByProgress(class UObject* WorldContext, TArray<class UMilestoneAsset*>* Milestones);
		void OnMissionStatChanged(class UObject* WorldContext, class UMissionStat* Stat, float Value);
		bool IsCompleted(class UObject* WorldContext);
		bool IsClaimable(class UObject* WorldContext);
		class FText GetTitleForTier(int32_t Tier);
		class FText GetTitle(class UObject* WorldContext);
		int32_t GetNextPerkPointsReward(class UObject* WorldContext);
		void GetCurrentProgress(class UObject* WorldContext, int32_t* Tier, float* Progress, float* CurrentCount, float* TargetCount);
		int32_t GetClaimedTier(class UObject* WorldContext);
		bool GetClaimedProgress(class UObject* WorldContext, int32_t* Tier, float* Progress, float* CurrentCount, float* TargetCount);
		class UTexture2D* GetCategoryIcon();
		void ClearPendingMilestoneReached();
		int32_t ClaimNextTier(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MineralTradeData
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UMineralTradeData : public UDataAsset
	{
	public:
		TArray<class FText>                                        MineralTradeTickerTexts;                                 // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MinersManualData
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class UMinersManualData : public UDataAsset
	{
	public:
		struct FSoftMinersManualDescription                        Description;                                             // 0x0030(0x0080) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void GetText(class FText* Headline, class FText* richText);
		class UTexture2D* GetFrontImage();
		class UTexture2D* GetBackgroundImage();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LoreScreenMasterWidget
	 * Size -> 0x0078 (FullSize[0x02D8] - InheritedSize[0x0260])
	 */
	class ULoreScreenMasterWidget : public UUserWidget
	{
	public:
		class FText                                                PageName;                                                // 0x0260(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		unsigned char                                              SolidImage[0x28];                                        // 0x0278(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              TransparentImage[0x28];                                  // 0x02A0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FLinearColor                                        BackgroundColor;                                         // 0x02C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MinersManual
	 * Size -> 0x0170 (FullSize[0x01A0] - InheritedSize[0x0030])
	 */
	class UMinersManual : public UDataAsset
	{
	public:
		unsigned char                                              BasicsPages[0x10];                                       // 0x0030(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TMap<int32_t, class FText>                                 BasicsPageHeaders;                                       // 0x0040(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		unsigned char                                              CombatPages[0x10];                                       // 0x0090(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              ExtraMissionPages[0x10];                                 // 0x00A0(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              ResourcePages[0x10];                                     // 0x00B0(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TArray<class UEnemyMinersManualData*>                      Enemies;                                                 // 0x00C0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              BiomeReferences[0x10];                                   // 0x00D0(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              MissionReferences[0x10];                                 // 0x00E0(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TArray<struct FDamageTypeDescription>                      DamageTypeInfo;                                          // 0x00F0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TMap<int32_t, struct FMissionTypeDescription>              MissionDescriptions;                                     // 0x0100(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		TMap<int32_t, struct FBiomeFeatures>                       BiomeFeatureDescriptions;                                // 0x0150(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		bool IsObjectInMinersManual(class UObject* WorldContext, class UObject* Object);
		bool IsMissionUnlocked(class UObject* WorldContext, class UMissionTemplate* mission);
		bool IsBiomeUnlocked(class UObject* WorldContext, class UBiome* Biome);
		TArray<class FText> GetUnlockedCreatureLore(class UObject* WorldContext, class UEnemyMinersManualData* enemy, float* completePercentage);
		void GetMissions();
		void GetMissionInfo(int32_t MissionTypeIndex, class FText* InfoHeadline, class FText* InfoDescription, TArray<struct FMissionStepDescription>* Steps);
		int32_t GetEnemyKillCount(class UObject* WorldContext, const struct FGuid& EnemyID);
		TArray<class UEnemyMinersManualData*> GetEnemiesSorted();
		TArray<class UEnemyMinersManualData*> GetEnemies();
		void GetDamageTypeDescriptions(TArray<EDamageType> damageTypes, TArray<struct FDamageTypeDescription>* Icon);
		void GetDamageTypeDescription(EDamageType damageTypes, struct FDamageTypeDescription* Icon);
		void GetBiomes();
		TArray<class UMinersManualData*> GetBiomeFeatures(int32_t BiomeIndex);
		TArray<struct FDamageTypeDescription> GetAllDamageTypeDescriptions();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionComplexity
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UMissionComplexity : public UDataAsset
	{
	public:
		class FText                                                Title;                                                   // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      HazardBonus;                                             // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    NumberOfDots;                                            // 0x004C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGuid                                               SavegameID;                                              // 0x0050(0x0010) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionDuration
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UMissionDuration : public UDataAsset
	{
	public:
		class FText                                                Title;                                                   // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      HazardBonus;                                             // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    NumberOfDots;                                            // 0x004C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGuid                                               SavegameID;                                              // 0x0050(0x0010) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMissionFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FDateTime GetGlobalMissionBaseTime();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionGenerationManager
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UMissionGenerationManager : public UGameInstanceSubsystem
	{
	public:
		TMap<int32_t, struct FGeneratedMissionGroup>               AllMissionGroups;                                        // 0x0030(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       ResetSelectedMission;                                    // 0x0080(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KYP2[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (PADDING)

	public:
		TArray<class UGeneratedMission*> GetMissions(int32_t Seed);
		class UGeneratedMission* GetMissionFromSeeds(int32_t GlobalSeed, int32_t MissionSeed);
		TArray<class UGeneratedMission*> GetAvailableMissionsWithSeasonContentCheck(bool HasOptedOutOfSeasonContent);
		TArray<class UGeneratedMission*> GetAvailableMissions();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionManager
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UMissionManager : public UActorComponent
	{
	public:
		TArray<class URunningMissionBP*>                           RunningBlueprints;                                       // 0x00B0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		void OnMatchStarted();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionModeManager
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMissionModeManager : public UInterface
	{
	public:
		void StartDive();
		void ReInitialize();
		bool IsLastStage();
		bool IsActive();
		int32_t GetStage();
		void GetPerObjectiveXP(int32_t* perPrimary, int32_t* perSecondary);
		int32_t GetNumberOfStages();
		void GetMissionModeCheatUI();
		void GetMissionCompleteScreen(bool missionSuccessful);
		void GetMissionBarWidget();
		float GetHazardBonus(class UObject* WorldContextObject, class UGeneratedMission* mission);
		class UGeneratedMission* GetActiveMission();
		class FText GetActiveDiveName();
		bool CompleteCurrentSingleMission();
		bool AreAllSelectedClassesQualified();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionMutator
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UMissionMutator : public UDataAsset
	{
	public:
		class UClass*                                              MissionBP;                                               // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              BannedObjectives[0x10];                                  // 0x0038(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TArray<class UMutator*>                                    Mutators;                                                // 0x0048(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FText                                                Title;                                                   // 0x0058(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                RichDescription;                                         // 0x0070(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          Icon;                                                    // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Mutator
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UMutator : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VeinMutator
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UVeinMutator : public UMutator
	{
	public:
		class UVeinResourceData*                                   VeinResource;                                            // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      modifier;                                                // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FDBZ[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CraftingMaterialMutator
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UCraftingMaterialMutator : public UMutator
	{
	public:
		float                                                      modifier;                                                // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JI1M[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourceMutator
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UResourceMutator : public UMutator
	{
	public:
		TArray<class UResourceData*>                               Resources;                                               // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      modifier;                                                // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CNL8[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SupplyPodMutator
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USupplyPodMutator : public UMutator
	{
	public:
		float                                                      CostModifier;                                            // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M789[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerShieldsMutator
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UPlayerShieldsMutator : public UMutator
	{
	public:
		float                                                      ShieldModifier;                                          // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WYFT[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyRarityMutator
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UEnemyRarityMutator : public UMutator
	{
	public:
		float                                                      RarityMultiplier;                                        // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpawnAmountMultiplier;                                   // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DifficultyMultiplier;                                    // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZKTO[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnemyDescriptor*                                    EnemyDescriptor;                                         // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ForceStationaryEncounterMutator
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UForceStationaryEncounterMutator : public UMutator
	{
	public:
		class UEnemyGroupDescriptor*                               EnemyGroup;                                              // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FIRandRange                                         GroupSize;                                               // 0x0038(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EncounterOverrideMutator
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UEncounterOverrideMutator : public UMutator
	{
	public:
		float                                                      MobileEncounterScale;                                    // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StationaryEncounterScale;                                // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NoHeadlightMutator
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UNoHeadlightMutator : public UMutator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DifficultyMutator
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UDifficultyMutator : public UMutator
	{
	public:
		float                                                      ExtraLargeEnemyDamageResistanceMultiplier;               // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnemyDamageResistanceMultiplier;                         // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SmallEnemyDamageResistanceMultiplier;                    // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnemyDamageModifierMultiplier;                           // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnemyCountModifierMultiplier;                            // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WeakpointDamageMultiplier;                               // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HazardBonus;                                             // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ProjectileSpeedModifier;                                 // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AttackCooldownModifier;                                  // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpeedModifier;                                           // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourceVeinMutator
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UResourceVeinMutator : public UMutator
	{
	public:
		class UResourceData*                                       Resource;                                                // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VeinLengthMultiplier;                                    // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RangeMultiplier;                                         // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NoiseRangeMultiplier;                                    // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_431O[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RewardMutator
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class URewardMutator : public UMutator
	{
	public:
		class FText                                                RewardText;                                              // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      XPMultiplier;                                            // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CreditMultiplier;                                        // 0x004C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CommunicationMutator
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UCommunicationMutator : public UMutator
	{
	public:
		float                                                      PitchMultiplier;                                         // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D7F2[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ExplosiveEnemiesMutator
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UExplosiveEnemiesMutator : public UMutator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InfestedEnemiesMutator
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UInfestedEnemiesMutator : public UMutator
	{
	public:
		TArray<class UParticleSystem*>                             SpawnEffects;                                            // 0x0030(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		class UParticleSystem* GetParticleSystem(class AFSDPawn* enemy);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NoOxygenMutator
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UNoOxygenMutator : public UMutator
	{
	public:
		float                                                      OxygenReplenishmentRate;                                 // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N1MT[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              OxygenComponent[0x28];                                   // 0x0038(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              ReplenishOxygenEffect[0x28];                             // 0x0060(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerDamageTakenMutator
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UPlayerDamageTakenMutator : public UMutator
	{
	public:
		float                                                      DamageMultiplier;                                        // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RHFY[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              SkipDamageClasses[0x50];                                 // 0x0038(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaveItemsMutator
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UCaveItemsMutator : public UMutator
	{
	public:
		class UClass*                                              Item;                                                    // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DebrisActorMutator
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UDebrisActorMutator : public UMutator
	{
	public:
		unsigned char                                              DebrisActor[0x28];                                       // 0x0030(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EliteEnemiesMutator
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UEliteEnemiesMutator : public UMutator
	{
	public:
		float                                                      SpawnChanceModifier;                                     // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxElites;                                               // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EliteCooldown;                                           // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QFHJ[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionPlayerAndCharacterWidget
	 * Size -> 0x0040 (FullSize[0x02A0] - InheritedSize[0x0260])
	 */
	class UMissionPlayerAndCharacterWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_FQHD[0x40];                                  // 0x0260(0x0040) MISSED OFFSET (PADDING)

	public:
		void UpdateValues(int32_t PlayerRank, int32_t PlayerStars, int32_t CharacterLevel, float CharacterProgress);
		void StepCounter(float TimeScale, bool* CounterFinished);
		void PingPlayerRank();
		void PingCharacterLevel(int32_t Level, int32_t Stars);
		void InitCounter(const struct FPlayerProgress& PlayerProgressStart, const struct FCharacterProgress& CharacterProgressStart, const struct FPlayerProgress& PlayerProgressFinish, const struct FCharacterProgress& CharacterProgressFinish);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionResultInfo
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class UMissionResultInfo : public UObject
	{
	public:
		bool                                                       HasInfo;                                                 // 0x0028(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7R7J[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MissionTime;                                             // 0x002C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MissionTotalHazBonus;                                    // 0x0030(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JBFZ[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                MissionHazName;                                          // 0x0038(0x0018) BlueprintVisible, Transient, NativeAccessSpecifierPublic
		float                                                      MissionHazBonus;                                         // 0x0050(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ComplexityBonus;                                         // 0x0054(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ComplexityDots;                                          // 0x0058(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LenghtBonus;                                             // 0x005C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    LenghtDots;                                              // 0x0060(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_56ZE[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FText>                                        WarningTitles;                                           // 0x0068(0x0010) BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class UTexture2D*>                                  WarningIcons;                                            // 0x0078(0x0010) BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<float>                                              WarningBonusses;                                         // 0x0088(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      TotalCreditsSum;                                         // 0x0098(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TotalXPSum;                                              // 0x009C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       wasSuccess;                                              // 0x00A0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1IQG[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		float GetWarningBonusSum();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDMissionSettings
	 * Size -> 0x00B8 (FullSize[0x00F0] - InheritedSize[0x0038])
	 */
	class UFSDMissionSettings : public UDeveloperSettings
	{
	public:
		struct FSoftObjectPath                                     DefaultRoomGenerator;                                    // 0x0038(0x0018) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, struct FMissionHazardSetting>                MissionComplexitySettings;                               // 0x0050(0x0050) Edit, Config, Protected, NativeAccessSpecifierProtected
		TMap<int32_t, struct FMissionHazardSetting>                MissionDurationSettings;                                 // 0x00A0(0x0050) Edit, Config, Protected, NativeAccessSpecifierProtected

	public:
		float GetTotalHazardBonus(class UObject* WorldContextObject, class UGeneratedMission* mission, class UDifficultySetting* DifficultySetting);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionStatCategory
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UMissionStatCategory : public UDataAsset
	{
	public:
		class FText                                                Title;                                                   // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          Icon;                                                    // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionStat
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UMissionStat : public UDataAsset
	{
	public:
		class FScriptMulticastDelegate                             OnCountChanged;                                          // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FGuid                                               SavegameID;                                              // 0x0040(0x0010) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                Title;                                                   // 0x0050(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UMissionStatCategory*                                Category;                                                // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDAchievement*                                     StatAchievement;                                         // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EMissionStatType                                           MissionStatType;                                         // 0x0078(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DoNotShowInMissionStatView;                              // 0x0079(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowAllValuesCombined;                                   // 0x007A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowHighestValue;                                        // 0x007B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GJYS[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (PADDING)

	public:
		void StatCountChanged__DelegateSignature(class UObject* WorldContext, class UMissionStat* MissionStat, float Value);
		float SetStatValue(class UObject* WorldContext, class APlayerCharacter* Character, float Amount);
		class FText MissionStatToText(EMissionStatType StatType, float Value);
		void Increment(class UObject* WorldContext, class UMissionStat* Stat, class UClass* CharacterClass, float Amount);
		float GetStatMinCount(class UObject* WorldContext);
		float GetStatMaxCount(class UObject* WorldContext);
		class FText GetStatCountTotalAsText(class UObject* WorldContext);
		float GetStatCountTotal(class UObject* WorldContext);
		float GetStatCountPct(class UObject* WorldContext, class UClass* CharacterClass);
		class FText GetStatCountAsText(class UObject* WorldContext, class UPlayerCharacterID* characterID);
		float GetStatCount(class UObject* WorldContext, class UPlayerCharacterID* characterID);
		class FString GetSourceTitle();
		class FText GetLowestStatCountAsText(class UObject* WorldContext);
		class UTexture2D* GetIcon();
		class FText GetHighestStatCountAsText(class UObject* WorldContext);
		class FText GetCategoryTitle();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionStatsCollector
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UMissionStatsCollector : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_SH9W[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerCharacter*                                    Character;                                               // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VQAI[0x18];                                  // 0x00C0(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnResourceIncremented(class UCappedResource* Resource, float Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GlobalMissionParameters
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UGlobalMissionParameters : public UDataAsset
	{
	public:
		TArray<struct FResourceSpawner>                            DefaultResources;                                        // 0x0030(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionTemplate
	 * Size -> 0x01C0 (FullSize[0x0218] - InheritedSize[0x0058])
	 */
	class UMissionTemplate : public USavableDataAsset
	{
	public:
		TArray<struct FResourceSpawner>                            ResourceDistribution;                                    // 0x0058(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UClass*                                              PrimaryObjective;                                        // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      SecondaryObjectives;                                     // 0x0070(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      DeepDiveObjectives;                                      // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UMutator*>                                    BaseMutators;                                            // 0x0090(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              pls[0x28];                                               // 0x00A0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              Level[0x28];                                             // 0x00C8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              GameMode[0x28];                                          // 0x00F0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		TArray<class UMissionComplexity*>                          LockedComplexities;                                      // 0x0118(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UMissionDuration*>                            LockedDurations;                                         // 0x0128(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FText                                                MissionName;                                             // 0x0138(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		unsigned char                                              MissionImageLarge[0x28];                                 // 0x0150(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              MissionButtonImage[0x28];                                // 0x0178(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UTexture2D*                                          MissionIcon;                                             // 0x01A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          MissionIconSmall;                                        // 0x01A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        MissionColor;                                            // 0x01B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MissionTypeIndex;                                        // 0x01C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0OJJ[0x4];                                   // 0x01C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              MissionTypeAnalyticsIndex;                               // 0x01C8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      DNA;                                                     // 0x01D8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              DebrisComponents[0x10];                                  // 0x01E8(0x0010) UNKNOWN PROPERTY: ArrayProperty
		bool                                                       MustBeUnlocked;                                          // 0x01F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q50M[0x3];                                   // 0x01F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RoomEncounerScale;                                       // 0x01FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StationaryEnemyScale;                                    // 0x0200(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PLO2[0x4];                                   // 0x0204(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              Tutorials[0x10];                                         // 0x0208(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		void Receive_SetMissionParameters(class UGeneratedMission* mission, struct FRandomStream* Random);
		bool IsLocked(class UFSDSaveGame* SaveGame);
		TArray<class UMissionDuration*> GetValidDurations();
		TArray<class UMissionComplexity*> GetValidComplexities();
		void GetSoftReferenceToPLS();
		struct FObjectiveMissionIcon GetPrimaryObjectiveIconFromAsset(class UMissionTemplate* mission, bool getSmallVersion);
		struct FObjectiveMissionIcon GetPrimaryObjectiveIcon(bool getSmallVersion);
		class UClass* GetPLS();
		class UClass* GetObjectiveClass();
		int32_t GetMissionTypeIndex();
		class UTexture2D* GetMissionImageLarge();
		class UTexture2D* GetMissionButtonImage();
		class UGeneratedMission* GenerateMission(class UObject* WorldContextObject, class UBiome* Biome, int32_t Seed, int32_t GlobalSeed, int32_t missionIndex, class UMissionComplexity* limitComplexity, class UMissionDuration* limitDuration, class UMissionMutator* Mutator, TArray<class UMissionWarning*> Warnings, TArray<class UClass*> forceSecondary);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionNameBank
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UMissionNameBank : public UDataAsset
	{
	public:
		TArray<class FText>                                        FirstNames;                                              // 0x0030(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class FText>                                        LastNames;                                               // 0x0040(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		TArray<class FText> GetRandomGeneratedNames(struct FRandomStream* Random, int32_t Count);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MissionWarning
	 * Size -> 0x00C0 (FullSize[0x00F0] - InheritedSize[0x0030])
	 */
	class UMissionWarning : public UDataAsset
	{
	public:
		unsigned char                                              MissionBP[0x28];                                         // 0x0030(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UClass*                                              OptionalExtraObjective;                                  // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              BannedObjectives[0x10];                                  // 0x0060(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TArray<class UMissionMutator*>                             BannedMutators;                                          // 0x0070(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       DoubleWarning;                                           // 0x0080(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MVRJ[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMutator*>                                    Mutators;                                                // 0x0088(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FText                                                Title;                                                   // 0x0098(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                RichDescription;                                         // 0x00B0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          Icon;                                                    // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          CampaignIcon;                                            // 0x00D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HazardBonus;                                             // 0x00D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_68QF[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMissionStat*                                        MissionCompletedStat;                                    // 0x00E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CampaignWeight;                                          // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NMEL[0x4];                                   // 0x00EC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MOD_MakeEliteEnemy
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UMOD_MakeEliteEnemy : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MULE
	 * Size -> 0x0018 (FullSize[0x03A8] - InheritedSize[0x0390])
	 */
	class AMULE : public ADeepPathfinderCharacter
	{
	public:
		class UHealthComponent*                                    HealthComponent;                                         // 0x0390(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USimpleObjectInfoComponent*                          ObjectInfo;                                              // 0x0398(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDown;                                                  // 0x03A0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XPJK[0x7];                                   // 0x03A1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetIsDown(bool IsDown);
		void SetControlledByDropShip(bool Control);
		void OnRep_IsDown();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Molly
	 * Size -> 0x0038 (FullSize[0x03E0] - InheritedSize[0x03A8])
	 */
	class AMolly : public AMULE
	{
	public:
		class FScriptMulticastDelegate                             OnCalledByChanged;                                       // 0x03A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UResourceBank*                                       ResourceBank;                                            // 0x03B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOutlineComponent*                                   OutlineComponent;                                        // 0x03C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnReachedDropShip;                                       // 0x03C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APlayerCharacter>                     CalledBy;                                                // 0x03D8(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetOpenForDeposit(bool Open);
		void SetGotoDropShip(const struct FVector& Location);
		void SetCalledBy(class APlayerCharacter* InPlayer);
		void OnRep_CalledBy();
		class UDialogDataAsset* GetCallingShout();
		void EnableButton();
		void CalledByDelegate__DelegateSignature(class APlayerCharacter* InPlayer);
		void AddTrayEffect(class UNiagaraSystem* Effect, int32_t numberOfTraysAffected);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MiniMule
	 * Size -> 0x0010 (FullSize[0x03B8] - InheritedSize[0x03A8])
	 */
	class AMiniMule : public AMULE
	{
	public:
		TArray<class AGem*>                                        LostLegs;                                                // 0x03A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		void SetLegsVisibleOnScanner();
		void OnLegsSetVisible();
		TArray<class AGem*> FindLegsInLevelSortedByDistance();
		void CheatRepair();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MotionAudioController
	 * Size -> 0x0054 (FullSize[0x08C0] - InheritedSize[0x086C])
	 */
	class UMotionAudioController : public UFSDAudioComponent
	{
	public:
		float                                                      IncreseSpeed;                                            // 0x086C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DecaySpeed;                                              // 0x0870(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       DebugText;                                               // 0x0874(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       Clamp;                                                   // 0x0875(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       Interp;                                                  // 0x0876(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_T4AG[0x1];                                   // 0x0877(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AccelerationThreshold;                                   // 0x0878(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DR5R[0xC];                                   // 0x087C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpeedThreshold;                                          // 0x0888(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      FadeInTime;                                              // 0x088C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      FadeOutTime;                                             // 0x0890(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       AutoPlayOnSpeedThreshold;                                // 0x0894(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LAVA[0x2B];                                  // 0x0895(0x002B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MountedGun
	 * Size -> 0x0028 (FullSize[0x0248] - InheritedSize[0x0220])
	 */
	class AMountedGun : public AActor
	{
	public:
		unsigned char                                              UnknownData_CJNE[0x10];                                  // 0x0220(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeaponFireComponent*                                WeaponFire;                                              // 0x0238(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGunLogicComponent*                                  GunLogic;                                                // 0x0240(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Server_Test();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GunLogicComponent
	 * Size -> 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
	 */
	class UGunLogicComponent : public UActorComponent
	{
	public:
		class UWeaponFireComponent*                                WeaponFire;                                              // 0x00B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMeshComponent*                                      Mesh;                                                    // 0x00B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RateOfFire;                                              // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_734D[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     MuzzleParticles;                                         // 0x00C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     TracerParticles;                                         // 0x00D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           FireSound;                                               // 0x00D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinTracerDistance;                                       // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TracerSpeed;                                             // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SL87[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetMesh(class UMeshComponent* Mesh);
		void OnWeaponFireEnded();
		void OnWeaponFired(const struct FVector& Location);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MouseCursorWidget
	 * Size -> 0x0008 (FullSize[0x0288] - InheritedSize[0x0280])
	 */
	class UMouseCursorWidget : public UFSDUserWidget
	{
	public:
		EFSDInputSource                                            TargetInput;                                             // 0x0280(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsHovering;                                             // 0x0281(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NUTT[0x6];                                   // 0x0282(0x0006) MISSED OFFSET (PADDING)

	public:
		void OnUnhover();
		void OnInputSourceChanged(EFSDInputSource Source);
		void OnHover();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MoustacheVanityItem
	 * Size -> 0x0058 (FullSize[0x0178] - InheritedSize[0x0120])
	 */
	class UMoustacheVanityItem : public UVanityItem
	{
	public:
		unsigned char                                              Mesh[0x28];                                              // 0x0120(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AnimInstance[0x28];                                      // 0x0148(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		bool                                                       RequiresSlimArmor;                                       // 0x0170(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J5FX[0x7];                                   // 0x0171(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MultiHitscanComponent
	 * Size -> 0x00C0 (FullSize[0x0308] - InheritedSize[0x0248])
	 */
	class UMultiHitscanComponent : public UHitscanBaseComponent
	{
	public:
		class FScriptMulticastDelegate                             OnHit;                                                   // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
		int32_t                                                    BulletsPerShot;                                          // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GeneralImpactAudioVolume;                                // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CountMultiHits;                                          // 0x0260(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JMX8[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      DamagedActorCache;                                       // 0x0268(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		struct FMultiHitScanHits                                   Hits;                                                    // 0x0278(0x0030) Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      ActorsHit;                                               // 0x02A8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DZ6M[0x50];                                  // 0x02B8(0x0050) MISSED OFFSET (PADDING)

	public:
		void Server_RegisterHit(const struct FMultiHitScanHits& hitResults);
		void All_ShowHit(const struct FMultiHitScanHits& hitResults);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MultiprojectileSpawner
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UMultiprojectileSpawner : public UActorComponent
	{
	public:
		TArray<struct FProjectileSpawnData>                        ProjectileData;                                          // 0x00B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       ProjectilesIgnoreEachOther;                              // 0x00C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O8OJ[0x3F];                                  // 0x00C1(0x003F) MISSED OFFSET (PADDING)

	public:
		bool GetIsFiring();
		void Fire(const struct FVector& Velocity, const struct FVector& Origin);
		class UMultiprojectileSpawner* FindMultiProjectileSpawner(class AActor* Actor, class UDataAsset* RangedAttack);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MultiTargeter
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMultiTargeter : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MusicLibrary
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UMusicLibrary : public UDataAsset
	{
	public:
		unsigned char                                              MusicCues[0x10];                                         // 0x0030(0x0010) UNKNOWN PROPERTY: ArrayProperty
		class UMusicCategory*                                      Category;                                                // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MusicCategory
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UMusicCategory : public UDataAsset
	{
	public:
		float                                                      FadeDuration;                                            // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KR58[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MusicReplicator
	 * Size -> 0x0018 (FullSize[0x0238] - InheritedSize[0x0220])
	 */
	class AMusicReplicator : public AActor
	{
	public:
		TArray<struct FActiveMusicItem>                            ActiveMusic;                                             // 0x0220(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1YYY[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_ActiveMusic();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MusicManager
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class UMusicManager : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_2O9D[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FMusicHandle, struct FActiveAudioItem>         ActiveAudio;                                             // 0x0040(0x0050) Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HHTE[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (PADDING)

	public:
		void StopHandle(const struct FMusicHandle& Handle);
		void StopCategory(class UMusicCategory* Category);
		void SetIsPaused(bool IsPaused);
		struct FMusicHandle PlayLibrary(class UMusicLibrary* library, int32_t musicIndex);
		struct FMusicHandle Play(class USoundBase* Music, class UMusicCategory* Category);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NeedleSprayer
	 * Size -> 0x00E0 (FullSize[0x0300] - InheritedSize[0x0220])
	 */
	class ANeedleSprayer : public AActor
	{
	public:
		unsigned char                                              UnknownData_2179[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     Root;                                                    // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              SKMesh;                                                  // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHitscanComponent*                                   FireComponent;                                           // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHitscanComponent*                                   OnSpawnedEffectComponent;                                // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPointLightComponent*                                MuzzleFlashLight;                                        // 0x0248(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   MuzzleFlashParticleSys;                                  // 0x0250(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   ImpactParticleComponent;                                 // 0x0258(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     ShotOriginPivot;                                         // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHitscanComponent*                                   HitscanComponent;                                        // 0x0268(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDAudioComponent*                                  SoundEnd;                                                // 0x0270(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        ReloadAnimation;                                         // 0x0278(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxRotations;                                            // 0x0280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LinesPerRotation;                                        // 0x0284(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           ShotAngleFromTop;                                        // 0x0288(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeployDelay;                                             // 0x0290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LifeTime;                                                // 0x0294(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenRotations;                                    // 0x0298(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RearmTime;                                               // 0x029C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvoidCloseOffset;                                        // 0x02A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShotOriginOffset;                                        // 0x02A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxRearms;                                               // 0x02A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FAS3[0x4];                                   // 0x02AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       PlayAnimationOnBeginPlay;                                // 0x02B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PlayAnimationOnReload;                                   // 0x02B1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DrawDebugLines;                                          // 0x02B2(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YEU2[0x1];                                   // 0x02B3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DebugLinesDuration;                                      // 0x02B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PG3T[0x48];                                  // 0x02B8(0x0048) MISSED OFFSET (PADDING)

	public:
		void OnSpinningChanged(bool isSpinning);
		void OnHit(const struct FHitResult& Result, bool IsPenetrating);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NewsTextLists
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UNewsTextLists : public UDataAsset
	{
	public:
		TArray<class FText>                                        Verb;                                                    // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FText>                                        Person;                                                  // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FText>                                        Creature;                                                // 0x0050(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FText>                                        Resource;                                                // 0x0060(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FText>                                        Minerals;                                                // 0x0070(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FText>                                        MineralFactions;                                         // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NewsTextHeadlines
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UNewsTextHeadlines : public UDataAsset
	{
	public:
		TArray<class FText>                                        MineralTradeTicker;                                      // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NiagaraSpawnerAndCacheGenerator
	 * Size -> 0x0048 (FullSize[0x0268] - InheritedSize[0x0220])
	 */
	class ANiagaraSpawnerAndCacheGenerator : public AActor
	{
	public:
		unsigned char                                              UnknownData_Q0OS[0x10];                                  // 0x0220(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFXSystemAsset*>                              ToGenerate;                                              // 0x0230(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UFXSystemComponent*>                          Generating;                                              // 0x0240(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4TU3[0x18];                                  // 0x0250(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NoiseCarveAttackEffect
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UNoiseCarveAttackEffect : public UAttackEffect
	{
	public:
		float                                                      ExpensiveNoise;                                          // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarveDiameterCM;                                         // 0x002C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarveNoiseCM;                                            // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarveBurnThicknessCM;                                    // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarverOffset;                                            // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                Socket;                                                  // 0x003C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EXVC[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NoiseFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNoiseFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SphericalNoiseMovementComponent(class UObject* WorldContextObject, class USceneComponent* Component, const struct FVector& Center, float Radius, float Speed, float TimeOffset);
		void SphericalNoiseMovementActor(class UObject* WorldContextObject, class AActor* Actor, const struct FVector& Center, float Radius, float Speed, float TimeOffset);
		struct FVector NoiseSphere3D(class UObject* WorldContextObject, float Time, float Radius);
		struct FVector2D NoiseSphere2D(class UObject* WorldContextObject, float Time, float Radius);
		float Noise3D(class UObject* WorldContextObject, float X, float Y, float Z);
		float Noise2D(class UObject* WorldContextObject, float X, float Y);
		float Noise(class UObject* WorldContextObject, float X);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NoiseVisualizor
	 * Size -> 0x0040 (FullSize[0x0260] - InheritedSize[0x0220])
	 */
	class ANoiseVisualizor : public AActor
	{
	public:
		unsigned char                                              UnknownData_0W8P[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFloodFillSettings*                                  FloodFillSettings;                                       // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FreqMultiplier;                                          // 0x0230(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AmplitudeMultiplier;                                     // 0x0234(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             NoiseSize;                                               // 0x0238(0x000C) Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PointSize;                                               // 0x0244(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PostNoiseAmplitude;                                      // 0x0248(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Octaves;                                                 // 0x024C(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Origin;                                                  // 0x0250(0x000C) Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowNoise;                                               // 0x025C(0x0001) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowTerrainNoise;                                        // 0x025D(0x0001) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NJHA[0x2];                                   // 0x025E(0x0002) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NoisyPathfinderComponent
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UNoisyPathfinderComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_0EIF[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NoisyPathfinderTest
	 * Size -> 0x0090 (FullSize[0x02B0] - InheritedSize[0x0220])
	 */
	class ANoisyPathfinderTest : public AActor
	{
	public:
		struct FVector                                             Start;                                                   // 0x0220(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             End;                                                     // 0x022C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             StartDirection;                                          // 0x0238(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             EndDirection;                                            // 0x0244(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DirectionDistance;                                       // 0x0250(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DirectionPenalty;                                        // 0x0254(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ZPenaltyPower;                                           // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ZPenaltyScale;                                           // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistancePenaltyScale;                                    // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RandomPenaltyScale;                                      // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPathObstacle>                               Obstacles;                                               // 0x0268(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UTunnelSegmentSetting*                               TunnelSettings;                                          // 0x0278(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTunnelParameters*                                   TunnelParameters;                                        // 0x0280(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    StepSize;                                                // 0x0288(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Realtime;                                                // 0x028C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CarvePath;                                               // 0x028D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanDiagonal;                                             // 0x028E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0814[0x1];                                   // 0x028F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFloodFillSettings*                                  FloodFillSettings;                                       // 0x0290(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ADeepCSGWorld*                                       CSGWorld;                                                // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8UMD[0x10];                                  // 0x02A0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NoMovementStateComponent
	 * Size -> 0x0008 (FullSize[0x0108] - InheritedSize[0x0100])
	 */
	class UNoMovementStateComponent : public UCharacterStateComponent
	{
	public:
		bool                                                       DisableHeadLightOnEnter;                                 // 0x0100(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableHeadLightOnExit;                                   // 0x0101(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3YTY[0x6];                                   // 0x0102(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AttachedStateComponent
	 * Size -> 0x0030 (FullSize[0x0130] - InheritedSize[0x0100])
	 */
	class UAttachedStateComponent : public UCharacterStateComponent
	{
	public:
		bool                                                       DisableHeadLightOnEnter;                                 // 0x0100(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableHeadLightOnExit;                                   // 0x0101(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SM1L[0x2];                                   // 0x0102(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxPitch;                                                // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7OSH[0x28];                                  // 0x0108(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OxygenComponent
	 * Size -> 0x0060 (FullSize[0x0110] - InheritedSize[0x00B0])
	 */
	class UOxygenComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnOxygenChanged;                                         // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOxygenReplenishingEvent;                               // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      OxygenGivenOnRevive;                                     // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentOxygen;                                           // 0x00D4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OxygenReplinishmentRate;                                 // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NetworkedOxygen;                                         // 0x00DC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CKNA[0x8];                                   // 0x00E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsReplenishingOxygen;                                    // 0x00E8(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DIX4[0x3];                                   // 0x00E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OxygenDepletionPersecond;                                // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FOxygenCallback>                             Callbacks;                                               // 0x00F0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BKBG[0x8];                                   // 0x0100(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              NoOxygenStatusEffect;                                    // 0x0108(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void RegisterOxygenEvent(const class FScriptDelegate& OxygenCallback, float oxygenLevel, bool triggerOnOxygenLoss);
		void OnRevived();
		void OnRep_NetworkedOxygen(int32_t OldValue);
		void OnRep_IsReplenishingOxygen();
		void OnDeath(class UHealthComponentBase* HealthComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OxygenSourceComponent
	 * Size -> 0x0038 (FullSize[0x00E8] - InheritedSize[0x00B0])
	 */
	class UOxygenSourceComponent : public UActorComponent
	{
	public:
		float                                                      SourceRadius;                                            // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CenterOffset;                                            // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnOxygenActivationChanged;                               // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UNoOxygenMutator*                                    Mutator;                                                 // 0x00C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YX2T[0x18];                                  // 0x00D0(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnTimerTick();
		void OnSourceActivated();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CampaignNotification
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UCampaignNotification : public UObject
	{
	public:
		class UCampaign*                                           Campaign;                                                // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCampaignMission*                                    mission;                                                 // 0x0030(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Progress;                                                // 0x0038(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsCampaignCompleted;                                    // 0x003C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_65GD[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NotificationSubSystem
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UNotificationSubSystem : public UGameInstanceSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnNewSpaceRigNotificationEvent;                          // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCampaignNotification;                                  // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FSpaceRigNotification>                       SpaceRigNotifications;                                   // 0x0050(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UCampaignNotification*                               CampaignNotification;                                    // 0x0060(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool GetNextSpaceRigNotification(struct FSpaceRigNotification* NextNotification);
		void ClearCampaignNotifications();
		void AddSpaceRigNotification(const struct FSpaceRigNotification& NewNotification, const class FString& ID, bool TriggerEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerCharacterID
	 * Size -> 0x0048 (FullSize[0x00A0] - InheritedSize[0x0058])
	 */
	class UPlayerCharacterID : public USavableDataAsset
	{
	public:
		class FName                                                AssetName;                                               // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              Character[0x28];                                         // 0x0060(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class FString                                              AnalyticsID;                                             // 0x0088(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerCharacterData*                                CharacterData;                                           // 0x0098(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UPlayerCharacterData* GetCharacterData();
		class UClass* GetCharacterClass();
		class APlayerCharacter* GetCharacter();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemID
	 * Size -> 0x0038 (FullSize[0x0090] - InheritedSize[0x0058])
	 */
	class UItemID : public USavableDataAsset
	{
	public:
		unsigned char                                              Item[0x28];                                              // 0x0058(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UPlayerCharacterID*                                  ItemOwner;                                               // 0x0080(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EItemCategory                                              ItemCategory;                                            // 0x0088(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E9Q1[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		bool IsItemClassChildOf(class UClass* InParentClass);
		class UItemData* GetItemData();
		class UClass* GetItemClass();
		EItemCategory GetItemCategory();
		class AItem* GetItem();
		TArray<class UItemSkin*> GetAllSkins();
		class UClass* GetActorClass();
		class AActor* GetActor();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyID
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class UEnemyID : public USavableDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CategoryID
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UCategoryID : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_XRYP[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               SavegameID;                                              // 0x0038(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerInfoComponent
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class UPlayerInfoComponent : public UObjectInfoComponent
	{
	public:
		unsigned char                                              LookAtShout[0x28];                                       // 0x00B0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class APlayerCharacter*                                    Character;                                               // 0x00D8(0x0008) ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ActorContextWidget
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class UActorContextWidget : public UUserWidget
	{
	public:
		class AActor*                                              ContextActor;                                            // 0x0260(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPrimitiveComponent*                                 ContextPrimitive;                                        // 0x0268(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Update(class UPrimitiveComponent* InContextPrimitive);
		void Show(class UPrimitiveComponent* InContextPrimitive);
		void ReceiveUpdate(class UPrimitiveComponent* InContextPrimitive);
		void ReceiveShow(class UPrimitiveComponent* InContextPrimitive);
		void ReceiveContextActorChanged(class AActor* InContextActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ObjectivesManager
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UObjectivesManager : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnObjectivesCompleted;                                   // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnObjectivesChanged;                                     // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAllRequiredReturnObjectivesCompleted;                  // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UObjective*                                          Objective;                                               // 0x00E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UObjective*>                                  SecondaryObjectives;                                     // 0x00E8(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       ObjectivesInitialized;                                   // 0x00F8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ObjectivesStarted;                                       // 0x00F9(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCheatObjectivesCompleted;                               // 0x00FA(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N95M[0x5];                                   // 0x00FB(0x0005) MISSED OFFSET (PADDING)

	public:
		void OnObjectiveChanged(class UObjective* obj);
		bool HasRequiredSecondaryObjective();
		TArray<class UObjective*> GetSecondaryObjectives();
		class UObjective* GetSecondaryObjective();
		class UObjective* GetPrimaryObjective();
		void ExitPodDescending();
		void ExitPodArrived();
		void DropPodExited();
		bool AreRequiredSecondariesComplete();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ObjectiveWidget
	 * Size -> 0x0060 (FullSize[0x02C0] - InheritedSize[0x0260])
	 */
	class UObjectiveWidget : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnObjectiveWidgetUpdated;                                // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UObjective*                                          MissionObjective;                                        // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPrimaryObjective;                                     // 0x0278(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_12QD[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                ObjectiveText;                                           // 0x0280(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                ObjectiveCounterText;                                    // 0x0298(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          ObjectiveCounterIcon;                                    // 0x02B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bObjectiveCompleted;                                     // 0x02B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZNDA[0x7];                                   // 0x02B9(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetText(const class FText& InText, const class FText& InCounterText, class UTexture2D* InCounterIcon, bool InObjectiveCompleted);
		void SetSimpleText(const class FText& InText, bool InObjectiveCompleted);
		void SetObjective(class UObjective* InObjective, bool InIsPrimaryObjective);
		void ReceiveObjectiveUpdated();
		void ReceiveObjectiveInitialized();
		void OnObjectiveUpdated(class UObjective* InObjective);
		void ObjectiveWidgetDelegate__DelegateSignature(class UObjectiveWidget* InObjectiveWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ObjectTemperatureComponent
	 * Size -> 0x0048 (FullSize[0x0110] - InheritedSize[0x00C8])
	 */
	class UObjectTemperatureComponent : public UTemperatureComponent
	{
	public:
		class FScriptMulticastDelegate                             OnStartBurning;                                          // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      TemperatureChangeScale;                                  // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurnTemperature;                                         // 0x00DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DouseFireTemperature;                                    // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CoolingRate;                                             // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsHeatsourceWhenOnFire;                                  // 0x00E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N571[0x3];                                   // 0x00E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OnFireHeatRange;                                         // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8VQE[0x20];                                  // 0x00F0(0x0020) MISSED OFFSET (PADDING)

	public:
		void TimerCallback();
		void OnDeath(class UHealthComponentBase* HealthComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OldZiplineSalvage
	 * Size -> 0x0018 (FullSize[0x0238] - InheritedSize[0x0220])
	 */
	class AOldZiplineSalvage : public AActor
	{
	public:
		class UClass*                                              ZiplineProjectileClass;                                  // 0x0220(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             RelativeDestinationLocation;                             // 0x0228(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XJDE[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnMatchStarted();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OptionalObjectiveWidget
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class UOptionalObjectiveWidget : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnWidgetUpdated;                                         // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SignalWidgetUpdated();
		void SetObjective(class UObjective* obj);
		void OptionalObjectiveWidgetDelegate__DelegateSignature(class UOptionalObjectiveWidget* InOptionalObjectiveWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OptionalUIWidget
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class UOptionalUIWidget : public UUserWidget
	{
	public:
		class UOptionalUICategory*                                 Category;                                                // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESlateVisibility                                           VisibleFlag;                                             // 0x0268(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESlateVisibility                                           HiddenFlag;                                              // 0x0269(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X0ML[0x6];                                   // 0x026A(0x0006) MISSED OFFSET (PADDING)

	public:
		void OnVisibilityChanged(class UOptionalUICategory* UICategory, bool IsVisible);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OutlineComponent
	 * Size -> 0x0048 (FullSize[0x00F8] - InheritedSize[0x00B0])
	 */
	class UOutlineComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnOutlineChanged;                                        // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		EOutline                                                   DefaultOutline;                                          // 0x00C0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ActiveOnHoldTAB;                                         // 0x00C1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GHRE[0x2];                                   // 0x00C2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CustomLaserPointDuration;                                // 0x00C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LockCounter;                                             // 0x00C8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NHYC[0x1];                                   // 0x00CC(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EOutline                                                   CurrentOutline;                                          // 0x00CD(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I92L[0x2];                                   // 0x00CE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UPrimitiveComponent*>                         OutlinedComponents;                                      // 0x00D0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UPrimitiveComponent*>                         ExcludedComponents;                                      // 0x00E0(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APlayerCharacter>                     Character;                                               // 0x00F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UnlockOutline();
		void ToggleDefaultOutline(bool Visible);
		void SetOutline(EOutline outline);
		void RemoveFromOutline(class UPrimitiveComponent* Component);
		void OutlineChanged__DelegateSignature(EOutline InOutline);
		void OnToggleOutline(bool Visible);
		void OnOwnerDeath(class UHealthComponentBase* HealthComponent);
		void OnItemUnequipped(class AItem* Item);
		void OnItemEquipped(class AItem* Item);
		void LockOutline();
		void EnableActivateOnHoldTab();
		void DisableActiveOnHoldTab();
		void AddToOutline(class UPrimitiveComponent* Component);
		void AddActorToOutline(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OverclockBank
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UOverclockBank : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_IU6L[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UOverclockUpgrade*, class USchematic*>          Overclocks;                                              // 0x0038(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class UItemID*                                             OwningItem;                                              // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OverheatingAggregator
	 * Size -> 0x0038 (FullSize[0x0100] - InheritedSize[0x00C8])
	 */
	class UOverheatingAggregator : public UItemAggregator
	{
	public:
		class FScriptMulticastDelegate                             OnOverheatingProgressChanged;                            // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOverheatedChanged;                                     // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J85X[0x4];                                   // 0x00E8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HeatLossPerSecond;                                       // 0x00EC(0x0004) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OverheatedDuration;                                      // 0x00F0(0x0004) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsOverheated;                                           // 0x00F4(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q027[0x3];                                   // 0x00F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Temperature;                                             // 0x00F8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2GT9[0x4];                                   // 0x00FC(0x0004) MISSED OFFSET (PADDING)

	public:
		void Server_SetTemperature(float NewTemperature);
		void Server_SetIsOverheated(bool NewOverheated);
		void OverheatingProgressChanged__DelegateSignature(float Progress);
		void OverheatedChanged__DelegateSignature(bool overHeated);
		void OnRep_Temperature();
		void OnRep_IsOverheated();
		float GetTemperature();
		float GetOverheatingProgress();
		bool GetIsOverheated();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ParalyzedStateComponent
	 * Size -> 0x0040 (FullSize[0x0140] - InheritedSize[0x0100])
	 */
	class UParalyzedStateComponent : public UCharacterStateComponent
	{
	public:
		unsigned char                                              UnknownData_6NFA[0x8];                                   // 0x0100(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              CaveLeechClass[0x28];                                    // 0x0108(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              UnknownData_RRLE[0x4];                                   // 0x0130(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CameraArmHeightOffset;                                   // 0x0134(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CameraArmSpeed;                                          // 0x0138(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OZ6U[0x4];                                   // 0x013C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ParasiteEnemy
	 * Size -> 0x0058 (FullSize[0x03A0] - InheritedSize[0x0348])
	 */
	class AParasiteEnemy : public AEnemyPawn
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0348(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x0350(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Tentacles1;                                              // 0x0358(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                Tentacles2;                                              // 0x0360(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOutlineComponent*                                   outline;                                                 // 0x0368(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4J0Z[0x18];                                  // 0x0370(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     deathParticles;                                          // 0x0388(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          deathSound;                                              // 0x0390(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UI9U[0x8];                                   // 0x0398(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnSelfDeath(class UHealthComponentBase* aHealthComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PassedOutStateComponent
	 * Size -> 0x0010 (FullSize[0x0110] - InheritedSize[0x0100])
	 */
	class UPassedOutStateComponent : public UCharacterStateComponent
	{
	public:
		class UDialogDataAsset*                                    ReviveShout;                                             // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAllPlayersPassedOut;                                    // 0x0108(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_85HN[0x7];                                   // 0x0109(0x0007) MISSED OFFSET (PADDING)

	public:
		void ReceiveTeamPassedOut();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PathfinderCollisionComponent
	 * Size -> 0x0010 (FullSize[0x04F0] - InheritedSize[0x04E0])
	 */
	class UPathfinderCollisionComponent : public UStaticMeshComponent
	{
	public:
		bool                                                       ActivatePFCollisionAtInit;                               // 0x04E0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EPFCollisionType                                           PFColiType;                                              // 0x04E1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GQ5M[0xE];                                   // 0x04E2(0x000E) MISSED OFFSET (PADDING)

	public:
		void DisablePFCollision();
		void ActivatePFCollision();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PathfinderSplineSegmentCollisionComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UPathfinderSplineSegmentCollisionComponent : public UActorComponent
	{
	public:
		float                                                      Radius;                                                  // 0x00B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EPFCollisionType                                           CollisionType;                                           // 0x00B4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NZF0[0xB];                                   // 0x00B5(0x000B) MISSED OFFSET (PADDING)

	public:
		void UpdateFromSpline(class USplineComponent* SplineComponent, int32_t StartIndex);
		void Update(const struct FVector& SplineStart, const struct FVector& SplineStartTangent, const struct FVector& SplineEnd, const struct FVector& SplineEndTangent);
		void Clear();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PathfinderDebugProbe
	 * Size -> 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
	 */
	class APathfinderDebugProbe : public AActor
	{
	public:
		class AActor*                                              Dest;                                                    // 0x0220(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RaycastDebugProbe
	 * Size -> 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
	 */
	class ARaycastDebugProbe : public AActor
	{
	public:
		class UTerrainType*                                        TerrainType;                                             // 0x0220(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FindPointKeepingDistanceProbe
	 * Size -> 0x0018 (FullSize[0x0238] - InheritedSize[0x0220])
	 */
	class AFindPointKeepingDistanceProbe : public AActor
	{
	public:
		float                                                      MinDistance;                                             // 0x0220(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxDistance;                                             // 0x0224(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              Target;                                                  // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IdealTargetDist;                                         // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3SDQ[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PathfinderFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPathfinderFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FVector SnapToGrid(class UObject* WorldContextObject, const struct FVector& Origin, EDeepPathFinderType PathType, EDeepPathFinderSize PathSize, float maxSnapDistance);
		bool IsPathfinderReady(class UObject* WorldContextObject);
		struct FVector FindRandomPositionOnNavmeshAtDistance(class UObject* WorldContextObject, const struct FVector& Origin, float atDistance);
		struct FVector FindRandomNearbyPositionOnNavmesh(class UObject* WorldContextObject, const struct FVector& Origin, float Radius);
		struct FVector FindPointAlongPathTo(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Destination, float atDistance);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PathfinderVehicle
	 * Size -> 0x0030 (FullSize[0x02B0] - InheritedSize[0x0280])
	 */
	class APathfinderVehicle : public APawn
	{
	public:
		unsigned char                                              UnknownData_VYS8[0x10];                                  // 0x0280(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDeepPathfinderMovement*                             PathfinderMovement;                                      // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHealthComponent*                                    HealthComponent;                                         // 0x02A0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Speed;                                                   // 0x02A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UHUI[0x4];                                   // 0x02AC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PatrolBot
	 * Size -> 0x0250 (FullSize[0x0600] - InheritedSize[0x03B0])
	 */
	class APatrolBot : public AEnemyDeepPathfinderCharacter
	{
	public:
		class UHackingUsableComponent*                             HackingUsable;                                           // 0x03B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnSensingComponent*                               PawnSensing;                                             // 0x03B8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    CollisionSphere;                                         // 0x03C0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    NearTargetSphere;                                        // 0x03C8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            LaserBeam;                                               // 0x03D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            TearingGroundParticles;                                  // 0x03D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UEnemyComponent*                                     EnemyComponent;                                          // 0x03E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    Damage;                                                  // 0x03E8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    BumpDamage;                                              // 0x03F0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnAlertComponent*                                 Alert;                                                   // 0x03F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPlayerImpactCooldownComponent*                      ImpactCooldown;                                          // 0x0400(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAvoidCeilingComponent*                              CeilingAvoidance;                                        // 0x0408(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAudioComponent*                                     RollingAudio;                                            // 0x0410(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAudioComponent*                                     FlyingAudio;                                             // 0x0418(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UProjectileAttackComponent*                          RollingRangedAttack;                                     // 0x0420(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UProjectileAttackComponent*                          FlyingRangedAttack;                                      // 0x0428(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UProjectileAttackComponent*                          MissileAttack;                                           // 0x0430(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1XUV[0xC];                                   // 0x0438(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxMotionSoundVelThresholdFlying;                        // 0x0444(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxMotionSoundVelThreshold;                              // 0x0448(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxTurningMotionSoundVelThreshold;                       // 0x044C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DebugAudio;                                              // 0x0450(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3L9A[0x3];                                   // 0x0451(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HackedAttackMultiplier;                                  // 0x0454(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SKKP[0x18];                                  // 0x0458(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsLockedOn;                                              // 0x0470(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L7EA[0x3];                                   // 0x0471(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DelayAfterLockOn;                                        // 0x0474(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ImpactCue;                                               // 0x0478(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           JumpSound;                                               // 0x0480(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           StartupAccelerationSound;                                // 0x0488(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LaunchPower;                                             // 0x0490(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SKM7[0x4];                                   // 0x0494(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpawnRocketsTime;                                        // 0x0498(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R7L2[0x1];                                   // 0x049C(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EPatrolBotState                                            State;                                                   // 0x049D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BWA7[0x1];                                   // 0x049E(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EPatrolBotControlState                                     ControlState;                                            // 0x049F(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2HY4[0x44];                                  // 0x04A0(0x0044) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HackedAttackSpeedMultiplier;                             // 0x04E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LaserPenetrationDistance;                                // 0x04E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinTurretAngle;                                          // 0x04EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxTurretAngle;                                          // 0x04F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpawnRocketsChance;                                      // 0x04F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GunRange;                                                // 0x04F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RollingAttackCooldown;                                   // 0x04FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlyingAttackCooldown;                                    // 0x0500(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurretLerpSpeed;                                         // 0x0504(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AimDownwardsOffset;                                      // 0x0508(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KG97[0x4];                                   // 0x050C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AccelerationThreshold;                                   // 0x0510(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LowSpeedThreshold;                                       // 0x0514(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2MRI[0x8];                                   // 0x0518(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  SpeedTiltCurve;                                          // 0x0520(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UFakeMoverSettings*                                  RollSettings;                                            // 0x05A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFakeMoverSettings*                                  JumpSettings;                                            // 0x05B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFakeMoverSettings*                                  SpawnRocketsSettings;                                    // 0x05B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanJump;                                                 // 0x05C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2UYR[0x3];                                   // 0x05C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      JumpForce;                                               // 0x05C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartFlyingTimer;                                        // 0x05C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinRollingTime;                                          // 0x05CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxRollingTime;                                          // 0x05D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinFlyingTime;                                           // 0x05D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxFlyingTime;                                           // 0x05D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JS97[0x4];                                   // 0x05DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SinSpeed;                                                // 0x05E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SinSize;                                                 // 0x05E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PLKN[0x4];                                   // 0x05E8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FlyingDampOmega;                                         // 0x05EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RollingDampOmega;                                        // 0x05F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       FiringRockets;                                           // 0x05F4(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Alerted;                                                 // 0x05F5(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KXF1[0x2];                                   // 0x05F6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              CurrentTarget;                                           // 0x05F8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetIsPatrolling(bool patroling);
		void SetHacked();
		void SetFiringRockets(bool firing);
		void ReviveDrone();
		void OnStateChangedEvent(EPatrolBotState CurrentState);
		void OnSpawnRocketsEvent();
		void OnRocketsEnded();
		void OnRevived();
		void OnRep_State();
		void OnRep_IsLockedOn();
		void OnRep_FiringRockets();
		void OnRep_ControlState(EPatrolBotControlState oldState);
		void OnProjectileSpawned();
		void OnMovementStateChanged(EDeepMovementState State);
		void OnLockedOn();
		void OnLandedEvent();
		void OnJumpEvent();
		void OnFireRockets();
		void OnDroneHacked();
		void OnDroneAlerted();
		void OnDisabled();
		void OnDeath(class UHealthComponentBase* aHealthComponent);
		void OnControlStateChanged(EPatrolBotControlState ControlState);
		void OnCollided(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void Jumped();
		bool IsHacked();
		void ImpactSound();
		void EndFireRockets();
		void DisableDrone();
		void All_SetLaserBeamActive(bool Active);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpiderAnimInstance
	 * Size -> 0x0150 (FullSize[0x0458] - InheritedSize[0x0308])
	 */
	class USpiderAnimInstance : public UEnemyAnimInstance
	{
	public:
		unsigned char                                              UnknownData_SYM7[0x8];                                   // 0x0308(0x0008) Fix Super Size
		float                                                      Speed;                                                   // 0x0310(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Velocity;                                                // 0x0314(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WalkCycleSpeed;                                          // 0x0320(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartMovingSpeed;                                        // 0x0324(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StopMovingSpeed;                                         // 0x0328(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WalkCycleMinRate;                                        // 0x032C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WalkCyclePlayRate;                                       // 0x0330(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MeshScale;                                               // 0x0334(0x0004) Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Direction;                                               // 0x0338(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PathDirectionLerpSpeedIn;                                // 0x033C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PathDirectionLerpSpeedOut;                               // 0x0340(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PathDirection;                                           // 0x0344(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HorizontalAngularSpeed;                                  // 0x0348(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HorizontalAngularSpeed_Abs;                              // 0x034C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VerticalAngularSpeed;                                    // 0x0350(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EMoveDirection                                             MoveDirection;                                           // 0x0354(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsMoving;                                                // 0x0355(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsStrafing;                                              // 0x0356(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsMovingAndStrafing;                                     // 0x0357(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFrozen;                                                // 0x0358(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsStaggered;                                             // 0x0359(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SAYG[0x2];                                   // 0x035A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StaggerStrength;                                         // 0x035C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsAirborne;                                              // 0x0360(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PZYW[0x7];                                   // 0x0361(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     FootstepParticle;                                        // 0x0368(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           FootstepSound;                                           // 0x0370(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                FootStepLeftBoneName;                                    // 0x0378(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                FootStepRightBoneName;                                   // 0x0380(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FootStepParticleCullDistance;                            // 0x0388(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XBX0[0x4];                                   // 0x038C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UEnemyPlaySoundKey*, class USoundCue*>          PlaySoundByKeyMap;                                       // 0x0390(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		TMap<class UEnemySpawnEffectsKey*, class UParticleSystem*> SpawnEffectsByKeyMap;                                    // 0x03E0(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		int32_t                                                    RandomWalkCycleIndex;                                    // 0x0430(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BIUA[0x4];                                   // 0x0434(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FRandomWalkCycleEntry>                       RandomWalkCycles;                                        // 0x0438(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       TurnToIdle;                                              // 0x0448(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IdleToTurnLeft;                                          // 0x0449(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IdleToTurnRight;                                         // 0x044A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TurnToWalk;                                              // 0x044B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       WalkToTurnRight;                                         // 0x044C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       WalkToTurnLeft;                                          // 0x044D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInFakePhysics;                                         // 0x044E(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_98FO[0x5];                                   // 0x044F(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESpiderDeathAnimationCategory                              DeathAnimationCategory;                                  // 0x0454(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LUSF[0x3];                                   // 0x0455(0x0003) Fix size for supers

	public:
		void SetMeshScale(float NewScale);
		void SetDeathAnimationCategory(ESpiderDeathAnimationCategory Category);
		void SetDeathAnimation(class UAnimSequenceBase* Animation);
		void PlayForcedCycle(float Duration);
		bool IsNotStrafing();
		bool IsNotStaggered();
		bool IsNotMoving();
		bool IsNotFrozen();
		bool IsNotAirborne();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PatrolBotAnimInstance
	 * Size -> 0x0058 (FullSize[0x04B0] - InheritedSize[0x0458])
	 */
	class UPatrolBotAnimInstance : public USpiderAnimInstance
	{
	public:
		class APatrolBot*                                          PatrolBot;                                               // 0x0458(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            TurretRotation;                                          // 0x0460(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      Tilt;                                                    // 0x046C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Rolling;                                                 // 0x0470(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       NotRolling;                                              // 0x0471(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Disabled;                                                // 0x0472(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       FlyingDisable;                                           // 0x0473(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            WheelRotation;                                           // 0x0474(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            WheelCenterRotation;                                     // 0x0480(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            FloatCenterRotation;                                     // 0x048C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      CurrentTilt;                                             // 0x0498(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TiltSpeed;                                               // 0x049C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WheelSpeedModifier;                                      // 0x04A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FNQT[0xC];                                   // 0x04A4(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PawnAffliction
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UPawnAffliction : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_TKLJ[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          Icon;                                                    // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FColor                                              IconColor;                                               // 0x0040(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FColor                                              IconColorBG;                                             // 0x0044(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowPlayerIcon;                                         // 0x0048(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowOnEnemyHealthbar;                                   // 0x0049(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KIXE[0x6];                                   // 0x004A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPlayerAfflictionOverlay*                            AfflictionOverlay;                                       // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              EnemyEffects[0x10];                                      // 0x0058(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              PlayerFirstPersonEffects[0x10];                          // 0x0068(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              PlayerThirdPersonEffects[0x10];                          // 0x0078(0x0010) UNKNOWN PROPERTY: ArrayProperty
		class UDialogDataAsset*                                    PlayerShoutOnBegin;                                      // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PawnAfflictionComponent
	 * Size -> 0x01B0 (FullSize[0x0260] - InheritedSize[0x00B0])
	 */
	class UPawnAfflictionComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnAfflictionActivatedEvent;                              // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAfflictionDeactivatedEvent;                            // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<class UPawnAffliction*, struct FPawnAfflictionItem>   ActiveAfflictions;                                       // 0x00D0(0x0050) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		struct FAfflictionEntriesArray                             NetworkedAfflictions;                                    // 0x0120(0x0120) Net, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UClass*                                              FrozenEffect;                                            // 0x0240(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BurningEffect;                                           // 0x0248(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EFrozenBitsSize                                            EffectSize;                                              // 0x0250(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HHSL[0x3];                                   // 0x0251(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BaseEffectScale;                                         // 0x0254(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseDormancy;                                             // 0x0258(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G26Y[0x7];                                   // 0x0259(0x0007) MISSED OFFSET (PADDING)

	public:
		void PushAffliction(class UPawnAffliction* Affliction, bool onlyIfNotActive);
		void PopAffliction(class UPawnAffliction* Affliction);
		void OnDeath(class UHealthComponentBase* HealthComponent);
		bool IsAfflictedBy(class UPawnAffliction* Affliction);
		TArray<class UPawnAffliction*> GetActiveAfflictions();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PawnAlertComponent
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UPawnAlertComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnAlertedFromDamage;                                     // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		bool                                                       AutoAlertAI;                                             // 0x00C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ShouldAlertNearby;                                       // 0x00C1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6TWV[0x2];                                   // 0x00C2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AlertRadius;                                             // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K8VY[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void StopAutoAlerting();
		void OnPawnSeen(class APawn* Pawn);
		void OnHit(float Damage, const struct FDamageData& DamageData, bool anyHealthLost);
		void OnAlerted();
		void AleartNearby();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PawnStat
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UPawnStat : public UDataAsset
	{
	public:
		float                                                      StartingValue;                                           // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPawnStatType                                              PawnStatType;                                            // 0x0034(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPawnStatType                                              ValueModificationType;                                   // 0x0035(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IJWE[0x2];                                   // 0x0036(0x0002) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PawnStatsComponent
	 * Size -> 0x0128 (FullSize[0x01D8] - InheritedSize[0x00B0])
	 */
	class UPawnStatsComponent : public UActorComponent
	{
	public:
		struct FPawnStatEntriesArray                               Stats;                                                   // 0x00B0(0x0120) Net, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       UseDormancy;                                             // 0x01D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I7G9[0x7];                                   // 0x01D1(0x0007) MISSED OFFSET (PADDING)

	public:
		void RemoveModifier(class UPawnStat* Stat, float Value);
		float GetStatValue(class UPawnStat* Stat);
		void ChangeModifier(class UPawnStat* Stat, float CurrentValue, float NewValue);
		int32_t AddModifier(class UPawnStat* Stat, float Value);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PerkLogic
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UPerkLogic : public UActorComponent
	{
	public:
		void StartLogic(int32_t Rank);
		class APlayerCharacter* GetCharacter();
		class FText GetAdditionalText(int32_t Rank);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PerkDelegateItem
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UPerkDelegateItem : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnPerkClaimed;                                           // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPerkEquipped;                                          // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPerkUnequipped;                                        // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPerkHighlighted;                                       // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChargesUsedChanged;                                    // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PerkSubsystem
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UPerkSubsystem : public UWorldSubsystem
	{
	public:
		TMap<class UPerkAsset*, class UPerkDelegateItem*>          PerkDelegates;                                           // 0x0030(0x0050) Transient, Protected, NativeAccessSpecifierProtected

	public:
		class UPerkDelegateItem* GetPerkDelegates(class UPerkAsset* Perk);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PerkHUDWidget
	 * Size -> 0x0008 (FullSize[0x0268] - InheritedSize[0x0260])
	 */
	class UPerkHUDWidget : public UUserWidget
	{
	public:
		class UPerkAsset*                                          PerkAsset;                                               // 0x0260(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetPerkAsset(class UPerkAsset* InPerk);
		void ReceivePerkAssetChanged();
		class AFSDPlayerState* GetFSDPlayerState();
		class APlayerCharacter* GetCharacter();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PerkHUDIconWidget
	 * Size -> 0x0008 (FullSize[0x0270] - InheritedSize[0x0268])
	 */
	class UPerkHUDIconWidget : public UPerkHUDWidget
	{
	public:
		float                                                      CoolDownProgress;                                        // 0x0268(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9ROB[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PerkHUDActivationWidget
	 * Size -> 0x0008 (FullSize[0x0270] - InheritedSize[0x0268])
	 */
	class UPerkHUDActivationWidget : public UPerkHUDWidget
	{
	public:
		EPerkHUDActivationLocation                                 Location;                                                // 0x0268(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KDH3[0x7];                                   // 0x0269(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PerkFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPerkFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SplitPerksByUsage(TArray<class UPerkAsset*> perks, TArray<class UPerkAsset*>* OutPassivePerks, TArray<class UPerkAsset*>* OutActivePerks);
		TArray<class UPerkAsset*> SortPerksByUsage(TArray<class UPerkAsset*>* perks);
		void RandomizePerkLoadout(class UObject* WorldContext, class UPlayerCharacterID* characterID);
		bool IsPerkTierUnLocked(class UObject* WorldContext, int32_t Tier);
		int32_t GetRequiredPerkClaimsForTier(int32_t Tier);
		void GetPerkTierState(class UObject* WorldContext, int32_t Tier, bool* TierUnLocked, int32_t* NextRequiredCount, int32_t* NextProgressCount);
		void GetPerkEquipSlots(class UObject* WorldContext, EPerkUsageType InType, class UClass* InCharacterClass, int32_t* OutAvailableSlots, int32_t* OutUnavailableSlots, int32_t* OutPromotionLockedSlots);
		TArray<EPerkSlotType> GetPerkEquipSlotLayout(class UObject* WorldContext, EPerkUsageType InType, class UClass* InCharacterClass);
		TArray<class UPerkAsset*> GetOwnedPerksByType(class UObject* WorldContext, EPerkUsageType InType);
		TArray<class UPerkAsset*> GetOwnedPerks(class UObject* WorldContext);
		int32_t GetHighestPerkTier();
		TArray<class UPerkAsset*> GetCharacterNonEquippedPerks(class UObject* WorldContext, class UPlayerCharacterID* characterID);
		TArray<class UPerkAsset*> GetCharacterEquippedPerks(class UObject* WorldContext, class UPlayerCharacterID* characterID);
		TArray<class UPerkAsset*> GetAvailablePerks();
		int32_t GetAmountOfPurchasedPerks(class UObject* WorldContext);
		class FText FormatRichText(const class FText& SourceText, bool UpperCase, TMap<class FString, class FString> CharTagMap);
		int32_t CalculateClaimablePerkPoints(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PerkUsageComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UPerkUsageComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_EGFN[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPerkUsage>                                  PerkUsageReplicated;                                     // 0x00B8(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QHZC[0x10];                                  // 0x00C8(0x0010) MISSED OFFSET (PADDING)

	public:
		void Server_MarkPerkUsed(class UPerkAsset* Perk);
		void Server_CheatReset();
		void OnRep_PerkUsageReplicated();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PhotographyStateComponent
	 * Size -> 0x0000 (FullSize[0x0100] - InheritedSize[0x0100])
	 */
	class UPhotographyStateComponent : public UCharacterStateComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxeFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPickaxeFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool RemovePickaxePartFromOwned(class UObject* WorldContextObject, class UPickaxePart* part);
		void RandomizePickaxe(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId);
		bool IsPickaxePartEquipped(class UObject* WorldContextObject, EPickaxePartLocation Location, class UPickaxePart* part, class UItemID* pickaxeID);
		void GivePickaxePart(class UObject* WorldContextObject, class UPickaxePart* part);
		TArray<class UPickaxePart*> GetUnlockedPickaxeParts(class UObject* WorldContextObject, EPickaxePartLocation Category);
		TArray<class UPickaxePart*> GetPickaxeParts(class UObject* WorldContextObject, EPickaxePartLocation Category);
		bool GetIsPickAxePartAcquired(class UObject* WorldContextObject, class UPickaxePart* InPickaxePart);
		struct FPickaxeSet GetEquippedPickaxeSet(class UObject* WorldContextObject, class UItemID* pickaxeID);
		class UPickaxePart* GetEquippedPickaxePart(class UObject* WorldContextObject, EPickaxePartLocation partLocation, class UItemID* pickaxeID);
		void EquipPickaxePart(class UObject* WorldContextObject, class UPickaxePart* part, EPickaxePartLocation partLocation, class UItemID* pickaxeID);
		void CopyPastePickaxeLoadout(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId, int32_t fromIndex, int32_t toIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxeItem
	 * Size -> 0x0360 (FullSize[0x06D0] - InheritedSize[0x0370])
	 */
	class APickaxeItem : public AItem
	{
	public:
		unsigned char                                              UnknownData_SC6R[0x10];                                  // 0x0370(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       QuadDamageCarving;                                       // 0x0380(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7IRR[0x7];                                   // 0x0381(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     FP_Root;                                                 // 0x0388(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     TP_Root;                                                 // 0x0390(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     FP_Scale;                                                // 0x0398(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     TP_Scale;                                                // 0x03A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerAnimInstance*                                 FPAnimInstance;                                          // 0x03A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerAnimInstance*                                 TPAnimInstance;                                          // 0x03B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FP_EquipAnimation;                                       // 0x03B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_EquipAnimation;                                       // 0x03C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EquipDuration;                                           // 0x03C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W6F6[0x4];                                   // 0x03CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UItemCharacterAnimationSet*                          CharacterAnimationSet;                                   // 0x03D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y113[0x8];                                   // 0x03D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageComponent*                                    DamageComponent;                                         // 0x03E0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    SpecialDamageComponent;                                  // 0x03E8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpecialCooldown;                                         // 0x03F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpecialCooldownRemaining;                                // 0x03F4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HUXP[0x18];                                  // 0x03F8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCoolDownProgressStyle                              SpecialCooldownUI;                                       // 0x0410(0x0040) Edit, Protected, NativeAccessSpecifierProtected
		int32_t                                                    RockMiningBonus;                                         // 0x0450(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DirtMiningBonus;                                         // 0x0454(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageRange;                                             // 0x0458(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MiningRange;                                             // 0x045C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageRadius;                                            // 0x0460(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6PUV[0x4];                                   // 0x0464(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              OnDamageEnemySlowdownEffect;                             // 0x0468(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               WideDamageTrackingTags;                                  // 0x0470(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		class USoundCue*                                           MiningSound;                                             // 0x0490(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UForceFeedbackEffect*                                MineRumble;                                              // 0x0498(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UForceFeedbackEffect*                                PartialMineRumble;                                       // 0x04A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UForceFeedbackEffect*                                DamageRumble;                                            // 0x04A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GeneralImpactAudioVolume;                                // 0x04B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HitCooldown;                                             // 0x04B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MiningDuration;                                          // 0x04B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceConsideredSameHit;                               // 0x04BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockParticlesScaleFP;                                   // 0x04C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockParticlesScaleTP;                                   // 0x04C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPickaxeState                                              State;                                                   // 0x04C8(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0TM5[0x167];                                 // 0x04C9(0x0167) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           PowerAttackRefreshedSound;                               // 0x0630(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PreventQMining;                                          // 0x0638(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VJOW[0x3];                                   // 0x0639(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      QMiningExpectedDelay;                                    // 0x063C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      QMiningInitialDelay;                                     // 0x0640(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      QMiningReducedPlayRatePct;                               // 0x0644(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		double                                                     QMiningLastHitTime;                                      // 0x0648(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B698[0x1];                                   // 0x0650(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       CanBezerk;                                               // 0x0651(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ORRH[0x6];                                   // 0x0652(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BezerkStatusEffect;                                      // 0x0658(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X5NF[0x2];                                   // 0x0660(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       PowerAttackEnabled;                                      // 0x0662(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A1ZU[0x5];                                   // 0x0663(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EPickaxePartLocation, struct FPickaxeMeshInstance>    EquippedParts;                                           // 0x0668(0x0050) Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  EquippedMaterial;                                        // 0x06B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_72G2[0x10];                                  // 0x06C0(0x0010) MISSED OFFSET (PADDING)

	public:
		void SpecialTargetDamageEffects(const struct FVector& ImpactPoint, const struct FVector& ImpactNormal);
		void SetSpecialCoolDownDuration(float newCooldownDuration);
		void Server_TriggerBezerk();
		void Server_SetState(EPickaxeState NewState);
		void Server_RemoveDebrisInstance(const struct FVector_NetQuantize& HitPos, int32_t DebrisIndex, int32_t remappedIndex);
		void Server_HitBlock(const struct FVector_NetQuantize& Position, int32_t Material, bool removeDebris, bool isSpecial);
		void Server_DoPowerAttack();
		void Server_DigBlock(const struct FVector& carvePos, const struct FVector& carveDirection, int32_t TerrainMaterial, bool isSpecial);
		void Server_DamageTarget(class UPrimitiveComponent* TargetComponent, bool isSpecial, const struct FVector_NetQuantize& ImpactPoint, const struct FVector_NetQuantizeNormal& ImpactNormal, class UFSDPhysicalMaterial* PhysMaterial, unsigned char BoneIndex);
		void RefreshSpecialCooldown();
		void OnRep_State(EPickaxeState oldState);
		void OnLoadoutChanged();
		float GetSpecialCooldownProgress();
		void All_SimulateHitBlock(const struct FVector_NetQuantize& Position, int32_t materia, bool removeDebris, bool isSpecial);
		void All_SimulateDigDebris(const struct FVector_NetQuantize& Position, class UFXSystemAsset* Particles, class USoundCue* cue);
		void All_SimulateDigBlock(const struct FVector_NetQuantize& Position, bool SpawnParticles, int32_t Material, float Density, bool isSpecial);
		void All_SimulateDamageTarget(class UPrimitiveComponent* TargetComponent, bool isSpecial, const struct FVector_NetQuantize& ImpactPoint, const struct FVector_NetQuantizeNormal& ImpactNormal, class UFSDPhysicalMaterial* PhysMaterial, unsigned char BoneIndex);
		void All_DoPowerAttack();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxePreviewActor
	 * Size -> 0x0090 (FullSize[0x02B0] - InheritedSize[0x0220])
	 */
	class APickaxePreviewActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_QE74[0x18];                                  // 0x0220(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     TP_Root;                                                 // 0x0238(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Scale;                                                   // 0x0240(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ODEI[0x4];                                   // 0x024C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EPickaxePartLocation, struct FPickaxeMeshInstance>    EquippedParts;                                           // 0x0250(0x0050) Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UItemID*                                             ItemID;                                                  // 0x02A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  EquippedMaterial;                                        // 0x02A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void PreviewParts(EPickaxePartLocation PreviewLocation, class UPickaxePart* PreviewPart);
		void EquipParts();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxePart
	 * Size -> 0x0028 (FullSize[0x0088] - InheritedSize[0x0060])
	 */
	class UPickaxePart : public USavablePrimaryDataAsset
	{
	public:
		class FText                                                Title;                                                   // 0x0060(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UItemAquisitionBase*                                 Aquisition;                                              // 0x0078(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPickaxePartItem*                                    Item;                                                    // 0x0080(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool GetUnlockedFromStart();
		EPickaxePartLocation GetPrefferedLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxePartItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UPickaxePartItem : public UObject
	{
	public:
		unsigned char                                              UnknownData_U0IX[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxeMaterialPart
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UPickaxeMaterialPart : public UPickaxePartItem
	{
	public:
		unsigned char                                              Material[0x28];                                          // 0x0030(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UDynamicIcon*                                        DynamicIcon;                                             // 0x0058(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UMaterialInstanceDynamic* CreateIcon(class UObject* Owner);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxeMeshPart
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UPickaxeMeshPart : public UPickaxePartItem
	{
	public:
		unsigned char                                              Mesh[0x28];                                              // 0x0030(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxeHeadPart
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class UPickaxeHeadPart : public UPickaxeMeshPart
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxeBladePart
	 * Size -> 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
	 */
	class UPickaxeBladePart : public UPickaxeMeshPart
	{
	public:
		bool                                                       RestrictedToBackside;                                    // 0x0058(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_36BJ[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxeShaftPart
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class UPickaxeShaftPart : public UPickaxeMeshPart
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxeHandlePart
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class UPickaxeHandlePart : public UPickaxeMeshPart
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxePommelPart
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class UPickaxePommelPart : public UPickaxeMeshPart
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxeSettings
	 * Size -> 0x00D0 (FullSize[0x0100] - InheritedSize[0x0030])
	 */
	class UPickaxeSettings : public UDataAsset
	{
	public:
		TMap<class UPlayerCharacterID*, class UClass*>             PickaxePreviewActors;                                    // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic
		class UAnimMontage*                                        Salute_FP;                                               // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        Salute_TP;                                               // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UPickaxePart*>                                Parts;                                                   // 0x0090(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TMap<class UItemID*, struct FDefaultPickaxeParts>          DefaultParts;                                            // 0x00A0(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TGPN[0x10];                                  // 0x00F0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxePartEquip
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPickaxePartEquip : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PillarSettings
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UPillarSettings : public UDataAsset
	{
	public:
		TArray<struct FPillarSegment>                              PillarSegments;                                          // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		struct FRandRange                                          PointRange;                                              // 0x0040(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FRandRange                                          PointNoiseRange;                                         // 0x0048(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FRandRange                                          PillarRangeScale;                                        // 0x0050(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FRandRange                                          PillarNoiseRangeScale;                                   // 0x0058(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  Noise;                                                   // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PillarGenerationComponent
	 * Size -> 0x0020 (FullSize[0x0470] - InheritedSize[0x0450])
	 */
	class UPillarGenerationComponent : public UGenerationComponent
	{
	public:
		TArray<struct FVector>                                     Points;                                                  // 0x0450(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       Visible;                                                 // 0x0460(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RBYR[0x7];                                   // 0x0461(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPillarSettings*                                     PillarSettings;                                          // 0x0468(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PillarGenerationItem
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class APillarGenerationItem : public AGenerationItem
	{
	public:
		class UPillarGenerationComponent*                          PillarComponent;                                         // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PilotingStateComponent
	 * Size -> 0x0020 (FullSize[0x0120] - InheritedSize[0x0100])
	 */
	class UPilotingStateComponent : public UCharacterStateComponent
	{
	public:
		class AActor*                                              Vehicle;                                                 // 0x0100(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D9M9[0x18];                                  // 0x0108(0x0018) MISSED OFFSET (PADDING)

	public:
		void Server_MoveRight(float Value);
		void Server_MoveForward(float Value);
		void OnRep_Vehicle();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PipelineBuilderItem
	 * Size -> 0x0008 (FullSize[0x0430] - InheritedSize[0x0428])
	 */
	class APipelineBuilderItem : public ATrackBuilderItem
	{
	public:
		class UItemPlacerAggregator*                               SegmentPlacer;                                           // 0x0428(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PipelineFinish
	 * Size -> 0x0028 (FullSize[0x0248] - InheritedSize[0x0220])
	 */
	class APipelineFinish : public AActor
	{
	public:
		class UTrackBuilderConnectPoint*                           PipelineEndConnection;                                   // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USingleUsableComponent*                              UsableOrderExtractor;                                    // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ExtractPodClass;                                         // 0x0230(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class APipelineExtractorPod*                               ExtractorPod;                                            // 0x0238(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPipelineCompleted;                                      // 0x0240(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9S2X[0x7];                                   // 0x0241(0x0007) MISSED OFFSET (PADDING)

	public:
		void ReceivePipelineCompleted();
		void ReceiveExtractorPodSpawned(class APipelineExtractorPod* InExtractorPod);
		void OnRep_PipelineCompleted();
		void OnRep_ExtractorPod();
		void OnExtractorPodStateChanged(class ARessuplyPod* InExtractorPod, ERessuplyPodState InState);
		void OnExtractorPodOrdered(class APlayerCharacter* InUser, EInputKeys Key);
		void OnConnectedWithSegment(class UTrackBuilderConnectPoint* InConnectPoint, class ATrackBuilderSegment* InSegment);
		void OnConnectedSegmentActivated(class APipelineSegment* InSegment);
		struct FVector GetLandingOffset();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PipelineExtractorPod
	 * Size -> 0x0010 (FullSize[0x02F0] - InheritedSize[0x02E0])
	 */
	class APipelineExtractorPod : public ARessuplyPod
	{
	public:
		TWeakObjectPtr<class APipelineSegment>                     ConnectedSegment;                                        // 0x02E0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetRotation;                                          // 0x02E8(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_36Y7[0x4];                                   // 0x02EC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetTargetRotation(class APipelineSegment* InPipelineSegment);
		void ReceiveConnectedToSegment(class APipelineSegment* InConnectedSegment);
		void OnRep_ConnectedSegment();
		void ExtractorPodOrderedEvent(class APlayerCharacter* InUser);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PipelineExtractorPodAnimInstance
	 * Size -> 0x0038 (FullSize[0x02F0] - InheritedSize[0x02B8])
	 */
	class UPipelineExtractorPodAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_4HLJ[0x7];                                   // 0x02B8(0x0007) Fix Super Size
		ERefineryState                                             RefineryState;                                           // 0x02BF(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotationSpeed;                                           // 0x02C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APipelineExtractorPod>                Pod;                                                     // 0x02C4(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APipelineSegment>                     ConnectedSegment;                                        // 0x02CC(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APipelineStart>                       PipelineStart;                                           // 0x02D4(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AFSDRefinery>                         Refinery;                                                // 0x02DC(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5GIW[0xC];                                   // 0x02E4(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PipelineSegment
	 * Size -> 0x0118 (FullSize[0x03A8] - InheritedSize[0x0290])
	 */
	class APipelineSegment : public ATrackBuilderSegment
	{
	public:
		class FScriptMulticastDelegate                             OnPipelineBroken;                                        // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPipelineRepaired;                                      // 0x02A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPipelineActivated;                                     // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPipelineStateChanged;                                  // 0x02C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UStaticMesh*                                         StaticMeshUnassembled;                                   // 0x02D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         StaticMeshAssembled;                                     // 0x02D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         StaticMeshFinal;                                         // 0x02E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             EditorEndLocation;                                       // 0x02E8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETraceTypeQuery                                            CarvingTraceType;                                        // 0x02F4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BJ7M[0x3];                                   // 0x02F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  NumberMaterial;                                          // 0x02F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RP5V[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USingleUsableComponent*                              RepairSegmentUsable;                                     // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USingleUsableComponent*                              ActivateSegmentUsable;                                   // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDroneUseComponent*                                  DroneUsable;                                             // 0x0318(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USimpleHealthComponent*                              SegmentHealthComponent;                                  // 0x0320(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineComponent*                                    MovementSpline;                                          // 0x0328(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineComponent*                                    MovementSplineRight;                                     // 0x0330(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineComponent*                                    MovementSplineLeft;                                      // 0x0338(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineMeshComponent*                                PipelineMesh;                                            // 0x0340(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineMeshComponent*                                PipelineOuterMesh;                                       // 0x0348(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              PipelineCapMesh;                                         // 0x0350(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              EndPostMesh;                                             // 0x0358(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                EndPostMeshStatic;                                       // 0x0360(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPathfinderSplineSegmentCollisionComponent*          PathfinderComponent;                                     // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSegmentBroken;                                          // 0x0370(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I0FN[0x3];                                   // 0x0371(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SegmentActivatedProgress;                                // 0x0374(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPipelineBuildState                                        PipelineState;                                           // 0x0378(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_78MZ[0x3];                                   // 0x0379(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APipelineStart>                       PipelineStart;                                           // 0x037C(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinValidLength;                                          // 0x0384(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxValidLength;                                          // 0x0388(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TooSharpExtraLength;                                     // 0x038C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TooSteepExtraLength;                                     // 0x0390(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockedSphereSize;                                       // 0x0394(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BlockedExtraRaytraceRotationOffset;                      // 0x0398(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockedExtraRaytraces;                                   // 0x039C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockedExtraRaytraceDist;                                // 0x03A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockedRayTraceSuccesses;                                // 0x03A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateSplineMesh(class USplineMeshComponent* InMesh, float InProgress, bool InMoveEndCap);
		void SetSegmentBroken(class APlayerCharacter* InUser, bool InSegmentBroken);
		void SetPipelineNumberMaterial(class UMaterialInterface* InNumberMaterial);
		void SetEndPostVisible(bool InVisible);
		void ReceiveSegmentBrokenChanged(bool InSegmentBroken);
		void ReceiveSegmentActivatedProgress(float InProgress);
		void ReceiveSegmentActivated();
		void ReceivePlacementFinished();
		void ReceivePlacementBegin();
		void PipelineStateDelegate__DelegateSignature(EPipelineBuildState InPipelineState);
		void PipelineSegmentDelegate__DelegateSignature(class APipelineSegment* InPipelineSegment);
		void OnRepaired(class APlayerCharacter* InUser);
		void OnRep_SegmentBroken();
		void OnRep_SegmentActivatedProgress();
		class APipelineStart* GetPipelineStart();
		class APipelineSegment* GetNextPipelineSegment(bool bForward);
		bool GetIsSegmentActivated();
		void CallbackSegmentRepaired(class APlayerCharacter* InUser, EInputKeys Key);
		void CallbackSegmentDestroyed(class UHealthComponentBase* InHealth);
		void CallbackSegmentActivatedProgress(float InProgress);
		void CallbackSegmentActivated(class APlayerCharacter* InUser, EInputKeys Key);
		void CallbackPipelineStateChanged(class APipelineStart* InPipelineStart, EPipelineBuildState InState);
		void CallbackNextSegmentChanged(class UTrackBuilderUsable* InUsable, class ATrackBuilderSegment* InSegment);
		void CallbackDroneUsed(int32_t TimesUsed);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PipelineSegmentEndPostAnimInstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class UPipelineSegmentEndPostAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_FESP[0x4];                                   // 0x02B8(0x0004) Fix Super Size
		float                                                      AssemblyTimeTarget;                                      // 0x02BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AssemblyTime;                                            // 0x02C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAssembling;                                             // 0x02C4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6WU0[0xB];                                   // 0x02C5(0x000B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PipelineStart
	 * Size -> 0x0050 (FullSize[0x0270] - InheritedSize[0x0220])
	 */
	class APipelineStart : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnBuildStateChanged;                                     // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    PipelineID;                                              // 0x0230(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q44N[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTrackBuilderUsable*                                 PipelineStartUsable;                                     // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPipelineBuildState                                        BuildState;                                              // 0x0240(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DK4R[0x7];                                   // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APipelineFinish*                                     PipelineFinish;                                          // 0x0248(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFSDRefinery*                                        Refinery;                                                // 0x0250(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class APipelineSegment>>             BrokenSegments;                                          // 0x0258(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1146[0x8];                                   // 0x0268(0x0008) MISSED OFFSET (PADDING)

	public:
		void ReceiveBuildStateChanged(EPipelineBuildState InBuildState);
		void PipelineStartStateDelegate__DelegateSignature(class APipelineStart* InPipelineStart, EPipelineBuildState InPipelineState);
		void PipelineCompleted(class APipelineFinish* InPipelineFinish);
		void OnRep_BuildState();
		void OnNextSegmentChanged(class UTrackBuilderUsable* InUsable, class ATrackBuilderSegment* InSegment);
		TArray<class APipelineSegment*> GetAllPipelineSegments();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlaceableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPlaceableInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlaceableItem
	 * Size -> 0x0028 (FullSize[0x03F8] - InheritedSize[0x03D0])
	 */
	class APlaceableItem : public AAnimatedItem
	{
	public:
		unsigned char                                              UnknownData_UWAL[0x10];                                  // 0x03D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCapacityHoldingItemAggregator*                      Capacity;                                                // 0x03E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemPlacerAggregator*                               ItemPlacer;                                              // 0x03E8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              PlacableClass;                                           // 0x03F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Server_SpawnItem(const struct FVector& Location);
		void ReceiveItemSpawned(class AActor* SpawnedActor);
		void OnCarriedAmountChanged(int32_t newAmount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlagueCleaning
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPlagueCleaning : public UInterface
	{
	public:
		class UInfectionPointCleaningComponent* GetCleaningPoints(const struct FVector& fromLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlagueCleanupItem
	 * Size -> 0x0090 (FullSize[0x0460] - InheritedSize[0x03D0])
	 */
	class APlagueCleanupItem : public AAnimatedItem
	{
	public:
		unsigned char                                              UnknownData_NGQV[0x8];                                   // 0x03D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent*                                       DroppedCollider;                                         // 0x03D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInstantUsable*                                      PickupUsable;                                            // 0x03E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    UseSphere;                                               // 0x03E8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCrosshairAggregator*                                CrosshairAggregator;                                     // 0x03F0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0WC9[0x10];                                  // 0x03F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        FP_FireAnimation;                                        // 0x0408(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_FireAnimation;                                        // 0x0410(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FP_Gunsling;                                             // 0x0418(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_Gunsling;                                             // 0x0420(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        Item_Gunsling;                                           // 0x0428(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           UsingSound;                                              // 0x0430(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UsingSoundFadeout;                                       // 0x0438(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8NQX[0x4];                                   // 0x043C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           UsingSoundTail;                                          // 0x0440(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UKeepInsideWorld*                                    KeepInsideWorld;                                         // 0x0448(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     UsingSoundInstance;                                      // 0x0450(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FireRate;                                                // 0x0458(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X7DM[0x4];                                   // 0x045C(0x0004) MISSED OFFSET (PADDING)

	public:
		void Server_Gunsling();
		void Server_EnablePhysics(const struct FVector_NetQuantize& Direction);
		void OnPickupUsed(class APlayerCharacter* User, EInputKeys Key);
		void OnObjectiveChanged(class UObjective* Objective);
		void OnInRangeChanged(bool InRange);
		void All_Gunsling();
		void All_EnablePhysics(const struct FVector_NetQuantize& Direction);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CleanupToolAnimInstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class UCleanupToolAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_1PDX[0x8];                                   // 0x02B8(0x0008) Fix Super Size
		class APlagueCleanupItem*                                  CleaningTool;                                            // 0x02C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2DKZ[0x8];                                   // 0x02C8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlagueControlActor
	 * Size -> 0x00C0 (FullSize[0x02E0] - InheritedSize[0x0220])
	 */
	class APlagueControlActor : public AActor
	{
	public:
		TArray<struct FPlacementObstruction>                       Obstructions;                                            // 0x0220(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   DebrisLightSystem;                                       // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlagueUsable*                                       CallWeaponPodUsable;                                     // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTerrainMaterial*                                    TargetPlagueMaterial;                                    // 0x0240(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              CleanupPodItem;                                          // 0x0248(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinTimeBetweenWeaponPods;                                // 0x0250(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDistBetweenPods;                                      // 0x0254(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDistFromCenter;                                       // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CanCallPodDistance;                                      // 0x025C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IgnoreDebrisLightSphere;                                 // 0x0260(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DebrisLightDistanceFromGround;                           // 0x0264(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RemoveDebrisLightUpdateRate;                             // 0x0268(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DebugDrawDebrisLight;                                    // 0x026C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LPO1[0x4B];                                  // 0x026D(0x004B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APlagueInfectionNode>                 TargetedPlagueNode;                                      // 0x02B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ORTQ[0x20];                                  // 0x02C0(0x0020) MISSED OFFSET (PADDING)

	public:
		void SpawnPodHack(class APlayerCharacter* Player);
		void SetCanUseWeaponPod(bool Value);
		void PushDebrisLights();
		void EquipPlaguePod(class APlayerCharacter* Player);
		bool CanDropWeaponPod(float* TimeLeft);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlagueInfectionNode
	 * Size -> 0x0130 (FullSize[0x0350] - InheritedSize[0x0220])
	 */
	class APlagueInfectionNode : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnFirstPlayerNearCenter;                                 // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlagueCenterKilled;                                    // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5GTF[0x10];                                  // 0x0240(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USimpleHealthComponent*                              HealthComponent;                                         // 0x0250(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JSKP[0x50];                                  // 0x0258(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             TriggerCleanupTutorial;                                  // 0x02A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected
		class UTerrainMaterial*                                    PlagueTerrainMaterial;                                   // 0x02B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NodeInfluenceRadius;                                     // 0x02C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NumberOfDeathEffectParticles;                            // 0x02C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HealthPercentageToKill;                                  // 0x02C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UW7I[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              WormPodClass;                                            // 0x02D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ImportantLocationRadius;                                 // 0x02D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WMXS[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      ActiveWorms;                                             // 0x02E0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      ActivePods;                                              // 0x02F0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MaxWormCount;                                            // 0x0300(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2NXG[0x4];                                   // 0x0304(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WormPodInterval;                                         // 0x0308(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MinWormPodWave;                                          // 0x030C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxWormPodWave;                                          // 0x0310(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TQF0[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDebrisPositioning*                                  WormPodPositioning;                                      // 0x0318(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         AvoidCost;                                               // 0x0320(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WormSpawnTimeDeviation;                                  // 0x0328(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PassiveWormSpawnTime;                                    // 0x032C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ActiveWormSpawnTime;                                     // 0x0330(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WormSpawnRange;                                          // 0x0334(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ActivationRange;                                         // 0x0338(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R4YS[0x1];                                   // 0x033C(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       HasCleanPodBeenSpawned;                                  // 0x033D(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C042[0x12];                                  // 0x033E(0x0012) MISSED OFFSET (PADDING)

	public:
		void OnWormSpawned(class AActor* worm);
		void OnWormDestroyed(class AActor* DestroyedActor);
		void OnPodDestroyed(class AActor* DestroyedActor);
		void OnDeath(class UHealthComponentBase* Health);
		void CountNodePlague();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ImpactIndicator
	 * Size -> 0x0138 (FullSize[0x0358] - InheritedSize[0x0220])
	 */
	class AImpactIndicator : public AActor
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     InnerScaler;                                             // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     OuterScaler;                                             // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  OuterGrowthCurve;                                        // 0x0238(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  InnerGrowthCurve;                                        // 0x02C0(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      Radius;                                                  // 0x0348(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MAL4[0xC];                                   // 0x034C(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetRadius(float Radius);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlagueMeteor
	 * Size -> 0x0160 (FullSize[0x0380] - InheritedSize[0x0220])
	 */
	class APlagueMeteor : public AActor
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                MeteorMesh;                                              // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainPlacementComponent*                          terrainPlacement;                                        // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    ImpactDamage;                                            // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ManuallyTargeted;                                        // 0x0240(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F95Z[0x7];                                   // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UStaticMesh*>                                 stages;                                                  // 0x0248(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    CrackStage;                                              // 0x0258(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDropInfo                                           DropInfo;                                                // 0x025C(0x001C) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UClass*                                              DropzoneIndicatorClass;                                  // 0x0278(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AImpactIndicator*                                    DropZoneIndicator;                                       // 0x0280(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDebrisPositioning*                                  Positioning;                                             // 0x0288(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             DropDirection;                                           // 0x0290(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IndicatorTime;                                           // 0x029C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VisualsTime;                                             // 0x02A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NearImpactTime;                                          // 0x02A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_89T7[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastAudioTime;                                           // 0x02B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LocationVariance;                                        // 0x02B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WCKH[0x10];                                  // 0x02B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  DropImpactCurve;                                         // 0x02C8(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		class UClass*                                              RockCrackerPod;                                          // 0x0350(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              RockCrackerIndicator;                                    // 0x0358(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDebrisPositioning*                                  RockCrackerPodPositioning;                               // 0x0360(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ARockCrackerPod*>                             SpawnedPods;                                             // 0x0368(0x0010) Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DOB4[0x8];                                   // 0x0378(0x0008) MISSED OFFSET (PADDING)

	public:
		void SignalEventStarted();
		void SignalEventEnded(bool wasSuccess);
		void SetStage(int32_t Stage);
		void SetDropTarget(const struct FVector& Location);
		void ResetStage();
		void RegressStage();
		void OnStageAdvanced(int32_t Stage);
		void OnRep_DropInfo();
		void OnRep_CrackStage();
		void NearImpact();
		void LastaudioSignal();
		void Impacted_Latejoin();
		void Impacted();
		bool HasLandedOnTopOfRefineryPipes(float minDistanceToPipes);
		TArray<class ARockCrackerPod*> GetPods();
		class ARockCrackerPod* GetPodAtIndex(int32_t Index);
		int32_t GetNumActivePods();
		void EnableVisuals();
		void DropStarted();
		void DropRockCrackerPods(int32_t Amount, float MinRadius, float maRadius, class AProceduralSetup* Setup);
		void DestroyAndSpawnHearts_FailSafe();
		void AdvanceStage();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlagueObjective
	 * Size -> 0x00C0 (FullSize[0x0240] - InheritedSize[0x0180])
	 */
	class UPlagueObjective : public UObjective
	{
	public:
		int32_t                                                    StartPlagueAmount;                                       // 0x0180(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurrentPlagueAmount;                                     // 0x0184(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TargetPlagueAmount;                                      // 0x0188(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PercentageRequiredForCompletion;                         // 0x018C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SpawningTowersCount;                                     // 0x0190(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KDOL[0x4];                                   // 0x0194(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDialogDataAsset*                                    NodeKilledShout;                                         // 0x0198(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    LastNodeKilledShout;                                     // 0x01A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    OverridePrimaryObjCompletedShout_SelfCompleted;          // 0x01A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    OverridePrimaryObjCompletedShout_SelfNotCompleted;       // 0x01B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AllPlagueCleaned;                                        // 0x01B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IIW8[0x7];                                   // 0x01B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlagueControlActor*                                 PlagueController;                                        // 0x01C0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              PlagueControllerClass[0x28];                             // 0x01C8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		TArray<class APlagueInfectionNode*>                        ActivePlagueCenters;                                     // 0x01F0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              ScriptedPlagueWave[0x28];                                // 0x0200(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		float                                                      ScriptedPlagueWaveWeight;                                // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CDFJ[0x14];                                  // 0x022C(0x0014) MISSED OFFSET (PADDING)

	public:
		void OnRep_CurrentPlagueAmount(int32_t OldAmount);
		TArray<class APlagueInfectionNode*> GetPlagueCenters();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlaguePuddle
	 * Size -> 0x0010 (FullSize[0x0260] - InheritedSize[0x0250])
	 */
	class APlaguePuddle : public AAdicPuddle
	{
	public:
		unsigned char                                              UnknownData_GDZR[0x8];                                   // 0x0250(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint16_t                                                   MaxPlaguePiles;                                          // 0x0258(0x0002) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P4VF[0x6];                                   // 0x025A(0x0006) MISSED OFFSET (PADDING)

	public:
		void Receive_OnVacuumed();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlagueUsable
	 * Size -> 0x0030 (FullSize[0x01A0] - InheritedSize[0x0170])
	 */
	class UPlagueUsable : public UInstantUsable
	{
	public:
		class FText                                                CanDropText;                                             // 0x0170(0x0018) Edit, NativeAccessSpecifierPublic
		class FText                                                CannotDropText;                                          // 0x0188(0x0018) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlagueWorm
	 * Size -> 0x0000 (FullSize[0x03B0] - InheritedSize[0x03B0])
	 */
	class APlagueWorm : public AEnemyDeepPathfinderCharacter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlanetZoneSetup
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UPlanetZoneSetup : public UDataAsset
	{
	public:
		TArray<class UPlanetZone*>                                 PlanetZones;                                             // 0x0030(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		class UPlanetZone* GetPlanetZoneForBiome(class UBiome* Biome, int32_t* zoneIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlanetZone
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UPlanetZone : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_NPC1[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UBiome*>                                      Biomes;                                                  // 0x0038(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FRequiredMissionItem>                        RequiredMissions;                                        // 0x0048(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       MustBeUnlocked;                                          // 0x0058(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BIYW[0x3];                                   // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               SavegameID;                                              // 0x005C(0x0010) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MUMJ[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		bool IsUnlocked(class UFSDSaveGame* SaveGame);
		struct FGuid GetSavegameID();
		TArray<class UBiome*> GetBiomes();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlasmaBoomerang
	 * Size -> 0x0050 (FullSize[0x0338] - InheritedSize[0x02E8])
	 */
	class APlasmaBoomerang : public AGrenade
	{
	public:
		class USceneComponent*                                     Root;                                                    // 0x02E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       Collision;                                               // 0x02F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    DamageComponent;                                         // 0x02F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                Mesh;                                                    // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     MeshPivot;                                               // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveVector*                                        ArcCurve;                                                // 0x0310(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartSmoothTime;                                         // 0x0318(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotationSpeed;                                           // 0x031C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ArcSpeed;                                                // 0x0320(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HomingAcceleration;                                      // 0x0324(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsHoming;                                                // 0x0328(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HH1Z[0xF];                                   // 0x0329(0x000F) MISSED OFFSET (PADDING)

	public:
		void BeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlasmaCarbine
	 * Size -> 0x0060 (FullSize[0x07B0] - InheritedSize[0x0750])
	 */
	class APlasmaCarbine : public AAmmoDrivenWeapon
	{
	public:
		float                                                      RateOfFireBoostOnFullShield;                             // 0x0750(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RemoveShieldOnOverheat;                                  // 0x0754(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RemoveShieldOnReload;                                    // 0x0755(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0PFS[0x2];                                   // 0x0756(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HeatEffectsThreshold;                                    // 0x0758(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H87P[0x4];                                   // 0x075C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        FP_CharacterOverheatEndMontage;                          // 0x0760(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_CharacterOverheatEndMontage;                          // 0x0768(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_ItemOverheatEndMontage;                              // 0x0770(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        FP_CharacterReloadEndMontage;                            // 0x0778(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TP_CharacterReloadEndMontage;                            // 0x0780(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        WPN_ItemReloadEndMontage;                                // 0x0788(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NAG5[0x20];                                  // 0x0790(0x0020) MISSED OFFSET (PADDING)

	public:
		void ApplyShieldDamage();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerAfflictionOverlay
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UPlayerAfflictionOverlay : public UDataAsset
	{
	public:
		class UTexture2D*                                          Texture;                                                 // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        TextureTint;                                             // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              WidgetOverride;                                          // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ZOrder;                                                  // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KRS6[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              Audio2D_OnBegin[0x28];                                   // 0x0058(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerAfflictionOverlayWidget
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class UPlayerAfflictionOverlayWidget : public UUserWidget
	{
	public:
		bool                                                       bOverlayActive;                                          // 0x0260(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SNI6[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPlayerAfflictionOverlay*                            Overlay;                                                 // 0x0268(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReceiveEndOverlay();
		void ReceiveBeginOverlay(class UTexture2D* InTexture, const struct FLinearColor& InTint);
		void EndOverlay();
		void BeginOverlay(class UPlayerAfflictionOverlay* InOverlay);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerAfflictionComponent
	 * Size -> 0x0078 (FullSize[0x02D8] - InheritedSize[0x0260])
	 */
	class UPlayerAfflictionComponent : public UPawnAfflictionComponent
	{
	public:
		class FScriptMulticastDelegate                             OnShowOverlay;                                           // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnHideOverlay;                                           // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		TMap<class UPlayerAfflictionOverlay*, int32_t>             ActiveOverlays;                                          // 0x0280(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APlayerCharacter>                     Character;                                               // 0x02D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ShowPlayerOverlay(class UPlayerAfflictionOverlay* Overlay);
		void OverlayDelegate__DelegateSignature(class UPlayerAfflictionOverlay* Overlay);
		void HidePlayerOverlay(class UPlayerAfflictionOverlay* Overlay);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyPawnAfflictionComponent
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class UEnemyPawnAfflictionComponent : public UPawnAfflictionComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DeepPatherFinderCharacterAfflictionComponent
	 * Size -> 0x0008 (FullSize[0x0268] - InheritedSize[0x0260])
	 */
	class UDeepPatherFinderCharacterAfflictionComponent : public UPawnAfflictionComponent
	{
	public:
		class ADeepPathfinderCharacter*                            Character;                                               // 0x0260(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StaticObjectAfflictionComponent
	 * Size -> 0x0008 (FullSize[0x0268] - InheritedSize[0x0260])
	 */
	class UStaticObjectAfflictionComponent : public UPawnAfflictionComponent
	{
	public:
		class UStaticMeshComponent*                                Mesh;                                                    // 0x0260(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AnimatedObjectAfflictionComponent
	 * Size -> 0x0008 (FullSize[0x0268] - InheritedSize[0x0260])
	 */
	class UAnimatedObjectAfflictionComponent : public UPawnAfflictionComponent
	{
	public:
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x0260(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerAnimInstance
	 * Size -> 0x0148 (FullSize[0x0400] - InheritedSize[0x02B8])
	 */
	class UPlayerAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_WECV[0x8];                                   // 0x02B8(0x0008) Fix Super Size
		bool                                                       IsFirstPerson;                                           // 0x02C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W6RK[0x3];                                   // 0x02C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WalkTreshhold;                                           // 0x02C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class APlayerCharacter*                                    Character;                                               // 0x02C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     DefaultFootstepParticle;                                 // 0x02D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           DefaultFootStepSound;                                    // 0x02D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemCharacterAnimationSet*                          AnimationSetA;                                           // 0x02E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemCharacterAnimationSet*                          AnimationSetB;                                           // 0x02E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AnimationSetAIsPrimary;                                  // 0x02F0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECharacterState                                            CharacterState;                                          // 0x02F1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZSI7[0x2];                                   // 0x02F2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Speed;                                                   // 0x02F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WalkAnimationSpeed;                                      // 0x02F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RunAnimationSpeed;                                       // 0x02FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WalkRate;                                                // 0x0300(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RunRate;                                                 // 0x0304(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Direction;                                               // 0x0308(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            AimRotation;                                             // 0x030C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       IsInitialized;                                           // 0x0318(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VQRI[0x3];                                   // 0x0319(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Pitch;                                                   // 0x031C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsStandingDown;                                          // 0x0320(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInAir;                                                 // 0x0321(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsMoving;                                                // 0x0322(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsWalking;                                               // 0x0323(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSprinting;                                             // 0x0324(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsAiming;                                                // 0x0325(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsAlive;                                                 // 0x0326(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsLyingDown;                                             // 0x0327(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       OnZipline;                                               // 0x0328(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsGrinding;                                              // 0x0329(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsParalyzed;                                             // 0x032A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsGrabbed;                                               // 0x032B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsAttached;                                              // 0x032C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       BeingRevived;                                            // 0x032D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsLookingAtMap;                                          // 0x032E(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsControllingEnemy;                                      // 0x032F(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsUsingJetBoots;                                         // 0x0330(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsUsingTraversalTool;                                    // 0x0331(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D2PK[0x2];                                   // 0x0332(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TraversalToolTargetHorizontalOffset;                     // 0x0334(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TraversalToolTargetVerticalOffset;                       // 0x0338(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TraversalToolSpeedRate;                                  // 0x033C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             ControllingEnemyRootOffset;                              // 0x0340(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             ControllingEnemyDirectionAlpha;                          // 0x034C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GliderAnimationLength;                                   // 0x0358(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGliderAnimSync                                     GliderAnimSync;                                          // 0x035C(0x0020) BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       IsAllowedToPlayMovementAnim;                             // 0x037C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_05NH[0x3];                                   // 0x037D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CropBeard;                                               // 0x0380(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IM25[0x4];                                   // 0x0384(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        ActiveUseMontage;                                        // 0x0388(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GZIL[0x8];                                   // 0x0390(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUseAnimationSetting*                                CurrentUseSetting;                                       // 0x0398(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H5BW[0x8];                                   // 0x03A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        EndUseMontageToPlay;                                     // 0x03A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AimDuration;                                             // 0x03B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReviveProgress;                                          // 0x03B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReviveExplicitTime;                                      // 0x03B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V5G4[0xC];                                   // 0x03BC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IdleTimeForInspect;                                      // 0x03C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RepeatDealayForInspect;                                  // 0x03CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECharacterMoveDirection                                    CharacterMoveDirection;                                  // 0x03D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2KZV[0x3];                                   // 0x03D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MoveAdjustmentAngle;                                     // 0x03D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemCharacterAnimationSet*                          CarryAnimationSet;                                       // 0x03D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemCharacterAnimationSet*                          DefaultAnimationSet;                                     // 0x03E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TAOD[0x18];                                  // 0x03E8(0x0018) MISSED OFFSET (PADDING)

	public:
		bool StopUseMontage(bool stopImmediately);
		void StopInspectWeapon();
		void StartInspectWeapon();
		void SetAiming();
		void PlayUseMontages(class UUseAnimationSetting* useSetting);
		bool IsPlayingMontageInGroup(const class FName& GroupName);
		class UItemCharacterAnimationSet* GetAnimationSet();
		float CalculateDirectionVertical(const struct FVector& TargetDirection, const struct FRotator& BaseRotation);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerFPAnimInstance
	 * Size -> 0x00C0 (FullSize[0x04C0] - InheritedSize[0x0400])
	 */
	class UPlayerFPAnimInstance : public UPlayerAnimInstance
	{
	public:
		struct FRotator                                            WeaponRecoil;                                            // 0x0400(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      HeadBobScale;                                            // 0x040C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WeaponSwayRecoverySpeed;                                 // 0x0410(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WeaponSwayAlphaRecoverySpeed;                            // 0x0414(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            WeaponSwayAngle;                                         // 0x0418(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      WeaponSwayMaxAngle;                                      // 0x0424(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            CameraAntiSwayAngle;                                     // 0x0428(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      WeaponSwayAlpha;                                         // 0x0434(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WeaponSwayToApply;                                       // 0x0438(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             CameraOffset;                                            // 0x043C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PEO3[0x10];                                  // 0x0448(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             NegativeCameraOffset;                                    // 0x0458(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HeadOnlyMode;                                            // 0x0464(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A9UV[0x3];                                   // 0x0465(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            HeadRotation;                                            // 0x0468(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L54S[0x4];                                   // 0x0474(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequence*                                       FP_Idle;                                                 // 0x0478(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       FP_Walk;                                                 // 0x0480(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       FP_Sprint;                                               // 0x0488(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       FP_JumpStart;                                            // 0x0490(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       FP_JumpLoop;                                             // 0x0498(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       FP_JumpLand;                                             // 0x04A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       FP_JumpLand_Aim;                                         // 0x04A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       FP_Downed;                                               // 0x04B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CYR0[0x8];                                   // 0x04B8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerTPAnimInstance
	 * Size -> 0x0260 (FullSize[0x0660] - InheritedSize[0x0400])
	 */
	class UPlayerTPAnimInstance : public UPlayerAnimInstance
	{
	public:
		float                                                      RigidBodyBlend;                                          // 0x0400(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RigidBodyOn;                                             // 0x0404(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CDMU[0x3];                                   // 0x0405(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UpperBodyBlend;                                          // 0x0408(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AimingValue;                                             // 0x040C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            CounerMoveadjustmentAngleRotator;                        // 0x0410(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       FullBodyAnimActive;                                      // 0x041C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2FY7[0x3];                                   // 0x041D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FullBodyBlendTime;                                       // 0x0420(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BodyTurnRecoverySpeed;                                   // 0x0424(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BodyTurnMaxAngle;                                        // 0x0428(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BodyTurnLerpEXP;                                         // 0x042C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnAnimationDuration;                                   // 0x0430(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HEKI[0xC];                                   // 0x0434(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCaveLeechBiting;                                        // 0x0440(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N2NQ[0x3];                                   // 0x0441(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CaveLeechBiteReactDelay;                                 // 0x0444(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_594P[0x4];                                   // 0x0448(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsResettingBodyTurn;                                     // 0x044C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ITPG[0x3];                                   // 0x044D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            BodyTurn;                                                // 0x0450(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            CounterBodyTurn;                                         // 0x045C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       TurningLeft;                                             // 0x0468(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TurningRight;                                            // 0x0469(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DTW9[0x2];                                   // 0x046A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TurnProgress;                                            // 0x046C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasPickedUpItem;                                         // 0x0470(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsLyingDownNoTransition;                                 // 0x0471(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E2QA[0x2];                                   // 0x0472(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DanceMove;                                               // 0x0474(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       DanceSequence;                                           // 0x0478(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDancing;                                               // 0x0480(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P1P9[0x3];                                   // 0x0481(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PickedUpItemBlend;                                       // 0x0484(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttachedBodyTurnFactor;                                  // 0x0488(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttachedHeadTurnFactor;                                  // 0x048C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            AttachedBodyRotation;                                    // 0x0490(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            AttachedHeadRotation;                                    // 0x049C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QQFN[0x8];                                   // 0x04A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBlendSpace1D*                                       TP_LookUpDown;                                           // 0x04B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBlendSpace1D*                                       TP_LookUpDown_Aim;                                       // 0x04B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBlendSpace1D*                                       A_TP_LookUpDown_Aim;                                     // 0x04C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBlendSpace1D*                                       B_TP_LookUpDown_Aim;                                     // 0x04C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       TP_JumpLoop;                                             // 0x04D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       TP_JumpLoop_Aim;                                         // 0x04D8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       TP_JumpStart;                                            // 0x04E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       TP_JumpStart_Aim;                                        // 0x04E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       TP_Sprint;                                               // 0x04F0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Idle;                                               // 0x04F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Idle;                                               // 0x0500(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Idle_Aim;                                           // 0x0508(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Idle_Aim;                                           // 0x0510(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       TP_LookForward;                                          // 0x0518(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_LookForward;                                        // 0x0520(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_LookForward;                                        // 0x0528(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_LookForward_Aim;                                    // 0x0530(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_LookForward_Aim;                                    // 0x0538(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Walk_Forward;                                       // 0x0540(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Walk_Forward;                                       // 0x0548(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Run_Forward;                                        // 0x0550(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Run_Forward;                                        // 0x0558(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Walk_Forward_Aim;                                   // 0x0560(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Walk_Forward_Aim;                                   // 0x0568(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Run_Forward_Aim;                                    // 0x0570(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Run_Forward_Aim;                                    // 0x0578(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Walk_Right;                                         // 0x0580(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Walk_Right;                                         // 0x0588(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Run_Right;                                          // 0x0590(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Run_Right;                                          // 0x0598(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Walk_Right_Aim;                                     // 0x05A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Walk_Right_Aim;                                     // 0x05A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Run_Right_Aim;                                      // 0x05B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Run_Right_Aim;                                      // 0x05B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Walk_Left;                                          // 0x05C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Walk_Left;                                          // 0x05C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Run_Left;                                           // 0x05D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Run_Left;                                           // 0x05D8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Walk_Left_Aim;                                      // 0x05E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Walk_Left_Aim;                                      // 0x05E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Run_Left_Aim;                                       // 0x05F0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Run_Left_Aim;                                       // 0x05F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Walk_Back;                                          // 0x0600(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Walk_Back;                                          // 0x0608(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Run_Back;                                           // 0x0610(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Run_Back;                                           // 0x0618(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Walk_Back_Aim;                                      // 0x0620(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Walk_Back_Aim;                                      // 0x0628(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       A_TP_Run_Back_Aim;                                       // 0x0630(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       B_TP_Run_Back_Aim;                                       // 0x0638(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       TP_Revived;                                              // 0x0640(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       TP_Downed;                                               // 0x0648(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence*                                       TP_Downed_Loop;                                          // 0x0650(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3794[0x8];                                   // 0x0658(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetOverrideFullBody(bool overrideEnabled);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerBufferComponent
	 * Size -> 0x0088 (FullSize[0x0138] - InheritedSize[0x00B0])
	 */
	class UPlayerBufferComponent : public UActorComponent
	{
	public:
		class UClass*                                              StatusEffect;                                            // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMeshComponent*                                      ManualMeshReference;                                     // 0x00B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                BufferParticleSocket;                                    // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     Particles;                                               // 0x00C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ParticleTangentSize;                                     // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ES4Q[0x4];                                   // 0x00D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBuffingChangedEvent;                                   // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		float                                                      BuffRadius;                                              // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxBuffedTargets;                                        // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PushAmount;                                              // 0x00F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_06YX[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class APlayerCharacter*>                            BuffTargets;                                             // 0x00F8(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UParticleSystemComponent*>                    ParticleInstances;                                       // 0x0108(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y4G4[0x20];                                  // 0x0118(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetBuffingEnabled(bool Enabled);
		void ReducePushAmount();
		void OnPawnDied(class UHealthComponentBase* Health);
		void OnOwnerDied(class UHealthComponentBase* Health);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerCameraDrone
	 * Size -> 0x01C8 (FullSize[0x0448] - InheritedSize[0x0280])
	 */
	class APlayerCameraDrone : public APawn
	{
	public:
		class UPawnMovementComponent*                              Movement;                                                // 0x0280(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MenuTab;                                                 // 0x0288(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SplineMeshIsVisible;                                     // 0x028C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q3MW[0x3];                                   // 0x028D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SplineSpeed;                                             // 0x0290(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MouseSensitivity;                                        // 0x0294(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CameraRoll;                                              // 0x0298(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CameraDoesShake;                                         // 0x029C(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFollowingPlayerRotation;                               // 0x029D(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BV9S[0x2];                                   // 0x029E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             FollowPositionOffset;                                    // 0x02A0(0x000C) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseFreeRotation;                                         // 0x02AC(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseDOF;                                                  // 0x02AD(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9UOV[0x2];                                   // 0x02AE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              VanitySpawnable;                                         // 0x02B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              VanityWeaponSpawnable;                                   // 0x02B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              VanityCharacterAnimations[0x10];                         // 0x02C0(0x0010) UNKNOWN PROPERTY: ArrayProperty
		int32_t                                                    SelectedVanityClassIndex;                                // 0x02D0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SelectedVanityAnimation;                                 // 0x02D4(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AVanityCharacter*>                            VanityCharacterInstances;                                // 0x02D8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class AVanityCharacter*>                            StaticVanityCharacterInstances;                          // 0x02E8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UClass*                                              DroneMarker;                                             // 0x02F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ALaserPointerMarker*                                 ActiveMarker;                                            // 0x0300(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              Flare;                                                   // 0x0308(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AActor*>                                      FlareInstances;                                          // 0x0310(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C0VV[0x10];                                  // 0x0320(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BounceFlare;                                             // 0x0330(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AActor*>                                      BounceFlareInstances;                                    // 0x0338(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VBHX[0x10];                                  // 0x0348(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              SplineInstance;                                          // 0x0358(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AActor*>                                      SplineMeshInstances;                                     // 0x0360(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C9G1[0x30];                                  // 0x0370(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              Spline;                                                  // 0x03A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              SplineMesh;                                              // 0x03A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NVSH[0x28];                                  // 0x03B0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              PlayerFollowed;                                          // 0x03D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BPXX[0x48];                                  // 0x03E0(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              WeaponTrackActor;                                        // 0x0428(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_222P[0x18];                                  // 0x0430(0x0018) MISSED OFFSET (PADDING)

	public:
		bool ToggleSplineMeshVisibility();
		void SetRotationalPivotToPlayer();
		void SetFlareLightSettings(float Intensity, float range, float Color);
		bool SetCameraShakeAmount(float Value);
		void SetBounceFlareLightSettings(float Intensity, float range, float Color);
		void SaveLightConfig();
		void ResetFollowVariables();
		void ResetAllLights();
		void OnFlareHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void LoadLightConfig();
		struct FVector GetFlareLightSettings();
		struct FVector GetBounceFlareLightSettings();
		void CreateHUD();
		void ClearFocusPoint();
		void All_BeginCountdown();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerCharacter
	 * Size -> 0x0974 (FullSize[0x0E30] - InheritedSize[0x04BC])
	 */
	class APlayerCharacter : public ACharacter
	{
	public:
		unsigned char                                              UnknownData_7PRD[0x4];                                   // 0x04BC(0x0004) Fix Super Size
		unsigned char                                              UnknownData_2ENS[0x18];                                  // 0x04C0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStartedUsingItem;                                      // 0x04D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStoppedUsingItem;                                      // 0x04E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFirePressed;                                           // 0x04F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFireReleased;                                          // 0x0508(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGrenadePressed;                                        // 0x0518(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPerkInitialized;                                       // 0x0528(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInstantRevivePossibleEvent;                            // 0x0538(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGenericAnimNotify;                                     // 0x0548(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class UHeightenedSenseComponent*                           HeightenedSenseComponent;                                // 0x0558(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCollectedEverything;                                   // 0x0560(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCollectedSchematic;                                    // 0x0570(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCollectedSkin;                                         // 0x0580(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCollectedDrink;                                        // 0x0590(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCollectedVictoryPose;                                  // 0x05A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCollectedPickaxePart;                                  // 0x05B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCollectedVanityItem;                                   // 0x05C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCameraModeChanged;                                     // 0x05D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDownCameraTargetChanged;                               // 0x05E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActionHoldProgress;                                    // 0x05F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnThrowCarriableProgress;                                // 0x0600(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJumpPressed;                                           // 0x0610(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJumpReleased;                                          // 0x0620(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSecondaryFirePressed;                                  // 0x0630(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSecondaryFireReleased;                                 // 0x0640(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnManualMiningBegin;                                     // 0x0650(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnManualMiningEnd;                                       // 0x0660(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLaserPointerPressed;                                   // 0x0670(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLaserPointerReleased;                                  // 0x0680(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTerrainScannerPressed;                                 // 0x0690(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTerrainScannerReleased;                                // 0x06A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFlareThrown;                                           // 0x06B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateMeshes;                                          // 0x06C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOpenChat;                                              // 0x06D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAcceptInvite;                                          // 0x06E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRejectInvite;                                          // 0x06F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIgnoreInvite;                                          // 0x0700(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleMapTool;                                         // 0x0710(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleScanTool;                                        // 0x0720(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDepthChanged;                                          // 0x0730(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterStateChanged;                                 // 0x0740(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterDeathChange;                                  // 0x0750(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDamagedEnemy;                                          // 0x0760(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLaserPointerEvent;                                     // 0x0770(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSecondaryLaserPointerEvent;                            // 0x0780(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaluteEvent;                                           // 0x0790(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerShout;                                           // 0x07A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBoscoSalute;                                           // 0x07B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N79V[0x10];                                  // 0x07C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnRevivedEvent;                                          // 0x07D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReviveCallEvent;                                       // 0x07E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRevivedOtherCharacter;                                 // 0x07F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHeadlightOnChanged;                                    // 0x0800(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCallDonkey;                                            // 0x0810(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x0820(0x0020) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class UClass*                                              JetBootsComponentSpawnable;                              // 0x0840(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UZipLineStateComponent*                              ZipLineStateComponent;                                   // 0x0848(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      EscapableGrabberEnemies;                                 // 0x0850(0x0010) ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnKilledGrabber;                                         // 0x0860(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPerkActivationTimerFinished;                           // 0x0870(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UPerkHUDActivationWidget*                            BoundPerkActivationW;                                    // 0x0880(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PerkActivationTimer;                                     // 0x0888(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YJQS[0x4];                                   // 0x088C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCanEscapeGrabberChanged;                               // 0x0890(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UClass*                                              GrabbedByClass;                                          // 0x08A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnCoolDownProgress;                                      // 0x08A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsBeingBittenByCaveLeech;                               // 0x08B8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EL9N[0x7];                                   // 0x08B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidgetInteractionComponent*                         WidgetInteraction;                                       // 0x08C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPlatformComponent>                          PlatformComponentClasses;                                // 0x08C8(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_033E[0x14];                                  // 0x08D8(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDownCameraSettings                                 DownCameraSettings;                                      // 0x08EC(0x0018) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_93H9[0x14];                                  // 0x0904(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AShieldGeneratorActor>>        ActiveShieldGenerators;                                  // 0x0918(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LKEY[0x4];                                   // 0x0928(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               SavegameID;                                              // 0x092C(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             EstimatedVelocity;                                       // 0x093C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PPRR[0x10];                                  // 0x0948(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FHoldButton                                         FlareHeadlightButton;                                    // 0x0958(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FHoldButton                                         CycleItemButton;                                         // 0x0980(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O4ZX[0x8];                                   // 0x09A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FHoldButton                                         ToggleHUDButton;                                         // 0x09B0(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      EquipLaserpointerHoldDuration;                           // 0x09D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsPressingMovementInputKey;                              // 0x09DC(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CLMV[0x1B];                                  // 0x09DD(0x001B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPlayerCharacterID*                                  characterID;                                             // 0x09F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TutorialManagerType[0x28];                               // 0x0A00(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              TutorialManagerSpacerig[0x28];                           // 0x0A28(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class USkeletalMeshComponent*                              FPMesh;                                                  // 0x0A50(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCameraComponent*                                    FirstPersonCamera;                                       // 0x0A58(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     FirstPersonRoot;                                         // 0x0A60(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UActorTrackingComponent*                             ActorTracking;                                           // 0x0A68(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCharacterIntoxicationComponent*                     IntoxicationComponent;                                   // 0x0A70(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionStatsCollector*                              MissionStatsCollector;                                   // 0x0A78(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USpringArmComponent*                                 ThirdPersonSpringArm;                                    // 0x0A80(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCameraComponent*                                    ThirdPersonCamera;                                       // 0x0A88(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPointLightComponent*                                ThirdPersonLight;                                        // 0x0A90(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USpringArmComponent*                                 FollowSpringArm;                                         // 0x0A98(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCameraComponent*                                    FollowCamera;                                            // 0x0AA0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCameraComponent*                                    DownCamera;                                              // 0x0AA8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCharacterCameraController*                          CameraController;                                        // 0x0AB0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerHealthComponent*                              HealthComponent;                                         // 0x0AB8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCharacterSightComponent*                            SightComponent;                                          // 0x0AC0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInventoryComponent*                                 InventoryComponent;                                      // 0x0AC8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCharacterUseComponent*                              UseComponentNew;                                         // 0x0AD0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USingleUsableComponent*                              UsableComponent;                                         // 0x0AD8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOutlineComponent*                                   OutlineComponent;                                        // 0x0AE0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCharacterRecoilComponent*                           RecoilComponent;                                         // 0x0AE8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStatusEffectsComponent*                             StatusEffectsComponent;                                  // 0x0AF0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPawnStatsComponent*                                 PawnStatsComponent;                                      // 0x0AF8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerAfflictionComponent*                          PawnAfflictionComponent;                                 // 0x0B00(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerInfoComponent*                                PlayerInfoComponent;                                     // 0x0B08(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerAttackPositionComponent*                      AttackerPositioningComponent;                            // 0x0B10(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCommunicationComponent*                             CommunicationComponent;                                  // 0x0B18(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerTemperatureComponent*                         TemperatureComponent;                                    // 0x0B20(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerInfectionComponent*                           InfectionComponent;                                      // 0x0B28(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerReactiveTerrainTrackerComponent*              ReactiveTerrainTracker;                                  // 0x0B30(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInstantUsable*                                      TrackGrindUsableComponent;                               // 0x0B38(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RunningSpeed;                                            // 0x0B40(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RunBoost;                                                // 0x0B44(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RunBoostChargeTime;                                      // 0x0B48(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HSYL[0x4];                                   // 0x0B4C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           RunBoostActivationSound;                                 // 0x0B50(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     RunBoostParticles;                                       // 0x0B58(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L817[0x8];                                   // 0x0B60(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPawnAffliction*                                     RunBoostAffliction;                                      // 0x0B68(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPhysicsAsset*                                       HangingPhysicsAsset;                                     // 0x0B70(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HangingSimulationBlend;                                  // 0x0B78(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J5NF[0x8];                                   // 0x0B7C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsPlayableCharacter;                                     // 0x0B84(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RZBD[0x3];                                   // 0x0B85(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     SprintSoundComponent;                                    // 0x0B88(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           SpringSound;                                             // 0x0B90(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAnalogAimSettings                                  AimSettings;                                             // 0x0B98(0x0048) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      DownedCameraMinPitch;                                    // 0x0BE0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DownedCameraMaxPitch;                                    // 0x0BE4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnToFaceScannerAngularSpeed;                           // 0x0BE8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Turn180Time;                                             // 0x0BEC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarryingMovementSpeedPenalty;                            // 0x0BF0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarryingMaxFallVelocity;                                 // 0x0BF4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxThrowProgress;                                        // 0x0BF8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxThrowHoldDuration;                                    // 0x0BFC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B866[0x4];                                   // 0x0C00(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CarryingThrowMinForce;                                   // 0x0C04(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarryingThrowMaxForce;                                   // 0x0C08(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlayerVelocityToThrowFactor;                             // 0x0C0C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BSNN[0x8];                                   // 0x0C10(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CarryingThrowingStatusEffect;                            // 0x0C18(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZW57[0x4];                                   // 0x0C20(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ThrowCarriableProgress;                                  // 0x0C24(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<unsigned char, class UCharacterStateComponent*>       CharacterStates;                                         // 0x0C28(0x0050) ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ATutorialManager>                     TutorialManager;                                         // 0x0C78(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCharacterStateComponent*                            ActiveCharacterState;                                    // 0x0C80(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YZCQ[0x3];                                   // 0x0C88(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsInDropPod;                                             // 0x0C8B(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInEscapePod;                                           // 0x0C8C(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N12T[0x3];                                   // 0x0C8D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ButtonMemoryDuration;                                    // 0x0C90(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsRunning;                                               // 0x0C94(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanDash;                                                 // 0x0C95(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TZD7[0x6];                                   // 0x0C96(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DashInputWindow;                                         // 0x0C9C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DashFowardMovementMinRequirement;                        // 0x0CA0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DashRightMovementMaxRequirement;                         // 0x0CA4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DashControllerMinValueRequired;                          // 0x0CA8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DashCooldown;                                            // 0x0CAC(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              DashStatusEffect;                                        // 0x0CB0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ForwardInput;                                            // 0x0CB8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RightInput;                                              // 0x0CBC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ControllerForwardInput;                                  // 0x0CC0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ControllerRightInput;                                    // 0x0CC4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J7HO[0xC];                                   // 0x0CC8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StoppedRunningTime;                                      // 0x0CD4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShoutPressedTime;                                        // 0x0CD8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsUsingItemPressed;                                     // 0x0CDC(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsUsingPressed;                                         // 0x0CDD(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4STK[0x2];                                   // 0x0CDE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UsingDelay;                                              // 0x0CE0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HeadLightOn;                                             // 0x0CE4(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsUsing;                                                 // 0x0CE5(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SMGY[0x2];                                   // 0x0CE6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      JumpPressedTime;                                         // 0x0CE8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanMove;                                                 // 0x0CEC(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanAim;                                                  // 0x0CED(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanUseItem;                                              // 0x0CEE(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanChangeItems;                                          // 0x0CEF(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanMine;                                                 // 0x0CF0(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanSalute;                                               // 0x0CF1(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsStandingDown;                                          // 0x0CF2(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2FLZ[0x1];                                   // 0x0CF3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       InDanceRange;                                            // 0x0CF4(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDancing;                                               // 0x0CF5(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BRCK[0x2];                                   // 0x0CF6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DanceStartTime;                                          // 0x0CF8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MNI0[0x4];                                   // 0x0CFC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFSDAchievement*                                     HappyFeetAchievement;                                    // 0x0D00(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DanceMove;                                               // 0x0D08(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECharacterCameraMode                                       CameraMode;                                              // 0x0D0C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInCharacterSelectionWorld;                             // 0x0D0D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShouldSpawnAnimEffects;                                 // 0x0D0E(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C73X[0x1];                                   // 0x0D0F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IdleTime;                                                // 0x0D10(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OJN4[0x4];                                   // 0x0D14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        FPDrinkSalute;                                           // 0x0D18(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        TPDrinkSalute;                                           // 0x0D20(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        CurrentSaluteMontage;                                    // 0x0D28(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PY20[0x8];                                   // 0x0D30(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInterface*>                          CachedMaterials;                                         // 0x0D38(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       BlockTrackGrindOnLanded;                                 // 0x0D48(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5ST9[0x17];                                  // 0x0D49(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SteamClassID;                                            // 0x0D60(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic*                            RadarMaterialInstance;                                   // 0x0D70(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RadarMaterialAngleParameterIndex;                        // 0x0D78(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LastUpdateVisibiltyPos;                                  // 0x0D7C(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             SpawnLocation;                                           // 0x0D88(0x000C) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_633M[0x4];                                   // 0x0D94(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFSDPhysicalMaterial*                                FallbackPhysicalMaterial;                                // 0x0D98(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JELI[0x1];                                   // 0x0DA0(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ClientReady;                                             // 0x0DA1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_72SE[0x6];                                   // 0x0DA2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCharacterStateComponent*                            NextCharacterState;                                      // 0x0DA8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2PIK[0x8];                                   // 0x0DB0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       PlayerIsLeavingInDroppod;                                // 0x0DB8(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CBX7[0xB];                                   // 0x0DB9(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       CanInstantRevive;                                        // 0x0DC4(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5PR2[0x1];                                   // 0x0DC5(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       HasInitializedPerks;                                     // 0x0DC6(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QX15[0x19];                                  // 0x0DC7(0x0019) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCharacterVanityComponent*                           CharacterVanity;                                         // 0x0DE0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ILP6[0xC];                                   // 0x0DE8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCameraSpringSettings                               CameraSpringSettings;                                    // 0x0DF4(0x003C) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		void UseZipLine(class AZipLineProjectile* ZipLine, const struct FVector& Start, const struct FVector& End);
		void Unparalyze();
		void ToggleScanTool(bool Visible);
		void ToggleHUDReleased();
		void ToggleHUDPressed();
		void ToggleHeadLight();
		void ThrowFlareReleased();
		void ThrowFlarePressed();
		void ThrowFlare();
		void StopUsingItem();
		void StartTutorials(bool ResetTutorials);
		void StartPerkActivation(class UPerkHUDActivationWidget* PerkActivationWidget, float HoldTime);
		class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, float PriorityOverride, const class FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool SendVibration);
		class UAudioComponent* SpawnSoundAtLocation(class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool SendVibration);
		class UAudioComponent* SpawnSound2D(class USoundBase* Sound, float PriorityOverride, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, bool SendVibration);
		void ShowSimpleHoldProgress(class APlayerController* PlayerController, const class FText& InDescription, float InProgress);
		void SetStandingDown(bool standingDown);
		void SetRadarMaterialInstance(class UMaterialInstanceDynamic* matInstance);
		void SetOutsideShieldGenerator(class AShieldGeneratorActor* Shield);
		void SetIsCharacterSelectionModel();
		void SetInstantUsables(bool Value);
		void SetInsideShieldGenerator(class AShieldGeneratorActor* Shield);
		void SetInCharacterSelectionWorld();
		void SetHeadLight(bool On);
		void SetFallbackPhysicalMaterial(class UFSDPhysicalMaterial* PhysMat);
		void SetCameraMode(ECharacterCameraMode NewCameraMode);
		void SetAttached(class USceneComponent* AttachTo, bool DelayUntilLanded);
		void Server_TriggerDash();
		void Server_StartSalute(class UAnimMontage* startSalute);
		void Server_SpawnEnemies(class UEnemyDescriptor* descriptor, int32_t Count);
		void Server_Shouted();
		void Server_SetUsing(bool characterIsUsing);
		void Server_SetRunning(bool characterIsRunning);
		void Server_SetRunBoostActive(bool IsActive);
		void Server_SetIsThrowingCarriable(bool isThrowing);
		void Server_SetIsPressingMovementInput(bool aIsPushingInput);
		void Server_SetIsJumpPressed(bool InJumpPressed);
		void Server_SetDispenserReward(class AEventRewardDispenser* Dispenser, class USchematic* Reward);
		void Server_SetClientReady();
		void Server_InstantRevive(class APlayerCharacter* ReviveTarget, EInputKeys Key);
		void Server_EscapeFromGrabber();
		void Server_CheatRevive();
		void Server_CheatKillAllFriendly();
		void Server_CheatKillAll();
		void Server_CheatJetBoots();
		void Server_CheatGodMode();
		void Server_CheatFlyMode(bool Active);
		void Server_CheatDebugFastMode(bool fast);
		void Server_CancelThrowingCarriable();
		void Server_CallDonkey();
		void Server_AddToTraceQueue(class ADamageEnhancer* Target, const struct FEnhancedTrace& Item);
		void Server_AddImpulseToActor(class AFSDPhysicsActor* Target, const struct FVector_NetQuantize& Impulse, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantize& AngularImpulse);
		void Server_AddImpulse(const struct FVector_NetQuantizeNormal& Direction, float force);
		void Server_ActivateTemporaryBuff(class UTemporaryBuff* buff);
		void SendLevelUpStatistics(int32_t currentRank);
		void ReviveProgress(float Progress);
		void RequestChangeInGravityScale(float newGravityScale);
		void RejectInvite();
		void ReceiveOnHeadlightOn();
		void ReceiveEscapedFromGrabber();
		void Receive_ShowFieldMedicInstantReviveEffects();
		void PrepareForEndScreen();
		void PilotVehicle(class AActor* Vehicle);
		void Paralyze(class AActor* ParalyzedBy);
		void OpenChat();
		void OnResourceFull(class UCappedResource* Resource);
		void OnRep_IsStandingDown();
		void OnRep_IsDancing();
		void OnRep_HeadLightOn();
		void OnRep_DanceMove();
		void OnRep_CharacterState(class UCharacterStateComponent* oldState);
		void OnPerkActivationFinished();
		void OnItemEquipped(class AItem* Item);
		void OnCharacterUsed(class APlayerCharacter* User, EInputKeys Key);
		void OnCharacterBeginUse(class APlayerCharacter* User, EInputKeys Key);
		void MouseWheelUp();
		void MouseWheelDown();
		bool LockIfState(ECharacterState LockIf, ECharacterState LockTo, bool canMoveAndAim);
		void KilledGrabber__DelegateSignature(class AActor* Grabber);
		void JumpRelease();
		void JumpPress();
		void ItemUseDelegate__DelegateSignature(class AItem* Item);
		bool IsWithinDistance(class AActor* Source, float Distance);
		bool IsWalking();
		bool IsUsingPressed();
		bool IsUsingItemPressed();
		bool IsStateActive(ECharacterState State);
		bool IsSaluting();
		bool IsParalyzed();
		bool IsMovementInputPressed();
		bool IsMining();
		bool IsLyingDown();
		bool IsJumpPressed();
		bool IsInState(ECharacterState aState);
		bool IsFrozen();
		bool IsFirstPerson();
		bool IsEquipepdActor(class AActor* Actor);
		bool IsDown();
		bool IsAlive();
		void InstantRevive(class APlayerCharacter* ReviveTarget, EInputKeys Key);
		void IgnoreInvite();
		bool HasBeenRevived();
		class UCharacterUseComponent* GetUseComponent();
		class UPlayerTPAnimInstance* GetTPAnimInstance();
		float GetTimeSinceLastRevival();
		ECharacterState GetPreviousState();
		class AFSDPlayerState* GetPlayerState();
		class FString GetPlayerName();
		class AFSDPlayerController* GetPlayerController();
		class UInventoryList* GetInventoryList();
		class FText GetHeroSwitchToMessage();
		class FText GetHeroName();
		struct FHeroInfo GetHeroInfo();
		class UTexture2D* GetHeroIcon();
		struct FLinearColor GetHeroColor();
		class UPlayerFPAnimInstance* GetFPAnimInstance();
		class AItem* GetEquippedItem();
		float GetDownTime();
		class APlayerCharacter* GetDownCameraTarget();
		class USceneComponent* GetDownCameraRotationPoint();
		class USceneComponent* GetDownCameraAttachPoint();
		class ULightComponent* GetDebugPointLightComponent();
		ECharacterState GetCurrentState();
		class UCommunicationComponent* GetCommunicationComponent();
		float GetClassXP();
		class UCharacterVanityComponent* GetCharacterVanity();
		class UCharacterStateComponent* GetCharacterStateComponent(ECharacterState State);
		float GetBeginRevivedProgress();
		class UUsableComponent* GetBeastMasterUsableComponent();
		class FString GetAnalyticsClass();
		struct FRotator GetAimRotation();
		struct FVector GetActorGroundLocation();
		TArray<class AShieldGeneratorActor*> GetActiveShieldGenerators();
		class UPlayerAnimInstance* GetActiveAnimInstance();
		void GenericAnimNotifyDelegate__DelegateSignature(class APlayerCharacter* Player);
		void ForceIsPressingMovementInputKey();
		void FirePressedDelegate__DelegateSignature();
		void ExitVehicle();
		void CycleItemUp();
		void CycleItemReleased();
		void CycleItemPressed();
		void CycleItemDown();
		void ConsumeCycleItemButton();
		void Client_TargetDamaged(class UObject* Health, float Damage, float DamageModifier, bool IsWeakPoint, bool IsRadial);
		void Client_OpenMinersManual();
		void Client_AddImpulse(const struct FVector_NetQuantizeNormal& Direction, float force);
		void Client_ActivateTemporaryBuff(class UTemporaryBuff* buff);
		void CheckWithoutAPaddleAchievement();
		void ChangeState(ECharacterState NewState);
		void ChangeIfDifferentState(ECharacterState NewState);
		void CanEscapeGrabberDelegate__DelegateSignature(bool bCanEscape);
		bool CanEscapeFromGrabber();
		void CallDonkeyReleased();
		void CallDonkeyPressed();
		void BP_OnUpdateMeshes();
		void BP_OnControllerReady();
		void AnnounceSchematicCollected(class USchematic* InSchematic);
		void All_StartSalute(class UAnimMontage* saluteMontage);
		void All_ShowImpactEffects(class UParticleSystem* Particles, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Orientation);
		void All_ShowFieldMedicInstantReviveEffects();
		void AddImpulseToActor(class AFSDPhysicsActor* Target, const struct FVector_NetQuantize& Impulse, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantize& AngularImpulse);
		void AddImpulseFromVector(const struct FVector& Vector);
		void AddImpulseFromDirectionAndForce(const struct FVector& Direction, float force);
		void AcknowledgeCharacterState(ECharacterState eState);
		void AcceptInvite();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerCharacterFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPlayerCharacterFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool SetPlayerVoiceMuted(class UObject* WorldContextObject, class AFSDPlayerState* PlayerState, bool Mute, bool TrySystemWide, int32_t localUserNum);
		bool IsPlayerVoiceMuted(class UObject* WorldContextObject, class AFSDPlayerState* PlayerState, int32_t localUserNum);
		class APlayerCharacter* GetRandomPlayer(class UObject* WorldContextObject, bool MustBeAlive, bool MustNotBeParalyzed);
		class APlayerCharacter* GetNearestVisiblePlayer(class AActor* From, float MaxDistance, bool MustBeAlive, bool MustNotBeParalyzed);
		class APlayerCharacter* GetNearestPlayerToPosition(class UObject* WorldContextObject, const struct FVector& Position, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly);
		class APlayerCharacter* GetNearestPlayerFrom(class UObject* WorldContext, const struct FVector& From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly);
		class APlayerCharacter* GetNearestPlayer(class AActor* From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerHealthComponent
	 * Size -> 0x0140 (FullSize[0x03A8] - InheritedSize[0x0268])
	 */
	class UPlayerHealthComponent : public UHealthComponent
	{
	public:
		unsigned char                                              UnknownData_A51Z[0x8];                                   // 0x0268(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFullHealthCannotHeal;                                  // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealedFromCrystalEvent;                                // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealthRegeneratingChanged;                             // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C86C[0x10];                                  // 0x02A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlayerHit;                                             // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      MaxHealth;                                               // 0x02C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxArmor;                                                // 0x02C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ArmorDamage;                                             // 0x02C8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9H4I[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReviveHealthReturnRatio;                                 // 0x02D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReviveArmorReturnRatio;                                  // 0x02D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HealthPerCrystalVolume;                                  // 0x02D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FHealthRegenerationParams                           HealthRegeneration;                                      // 0x02DC(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QSDS[0x4];                                   // 0x02EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         ArmorRegenCurve;                                         // 0x02F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShieldRegenDelay;                                        // 0x02F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BESC[0x4];                                   // 0x02FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerCharacter*                                    Character;                                               // 0x0300(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     GenericImpactParticles;                                  // 0x0308(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     ShieldLinkEffect;                                        // 0x0310(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAudioWithCooldown                                  AudioFriendlyFire;                                       // 0x0318(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            ShieldLinkInstance;                                      // 0x0328(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HM9V[0x4];                                   // 0x0330(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InvulnerabilityDuration;                                 // 0x0334(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReviveInvulnerabilityTime;                               // 0x0338(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J9VY[0x3C];                                  // 0x033C(0x003C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPlayerDamageTakenMutator*                           DamageTakenMutator;                                      // 0x0378(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8THH[0x8];                                   // 0x0380(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              IronWillStatusEffectClass;                               // 0x0388(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStatusEffect*                                       IronWillStatusEffect;                                    // 0x0390(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IronWillActive;                                          // 0x0398(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FMD2[0x3];                                   // 0x0399(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IronWillTimeToActivate;                                  // 0x039C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WHYJ[0x8];                                   // 0x03A0(0x0008) MISSED OFFSET (PADDING)

	public:
		class UStatusEffect* SetIronWillStatusEffect(class UClass* steClass);
		void Server_TryActivateIronWill();
		void OnRep_MaxHealth();
		void OnRep_MaxArmor();
		void OnRep_ArmorDamage(float oldDamage);
		bool IsLowHealth();
		float GetRemainingIronWillActivationTime();
		bool GetIsHealthRegenerating();
		bool GetIronWillActive();
		float GetHealthRegeneratingTargetRatio();
		void Client_SetHealthRegenerating(bool isRegenerating);
		void Client_OnFriendlyFire(class AController* EventInstigator, class AActor* DamageCauser);
		void Client_HealthFullCannotHeal();
		bool CanActivateIronWill();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerImpactCooldownComponent
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class UPlayerImpactCooldownComponent : public UActorComponent
	{
	public:
		float                                                      CoolDownTime;                                            // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TJ06[0x54];                                  // 0x00B4(0x0054) MISSED OFFSET (PADDING)

	public:
		bool CheckCanImpact(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerInfectionComponent
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UPlayerInfectionComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnInfectionLevelChangedEvent;                            // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBreakoutPercentageChanged;                             // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInfectionStateChangedEvent;                            // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		EInfectionState                                            InfectionState;                                          // 0x00E0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZSOQ[0x3];                                   // 0x00E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReductionCooldown;                                       // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InfectionImmunityAfterFullInfection;                     // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RS1L[0x8];                                   // 0x00EC(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InfectionLevel;                                          // 0x00F4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BreakoutPercentage;                                      // 0x00F8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InfectionDecreaseOverTimer;                              // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Server_ClearInfection();
		void OnRep_InfectionLevel(float oldLevel);
		void IncreaseInfection(float Amount, class AActor* Source);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerMovementComponent
	 * Size -> 0x0090 (FullSize[0x0B80] - InheritedSize[0x0AF0])
	 */
	class UPlayerMovementComponent : public UCharacterMovementComponent
	{
	public:
		bool                                                       DebugFastMove;                                           // 0x0AF0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DC1Q[0x7];                                   // 0x0AF1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          SlidingOnIceSound;                                       // 0x0AF8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M1TZ[0x10];                                  // 0x0B00(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LedgeClimbZVelocity;                                     // 0x0B10(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MovementPenalty;                                         // 0x0B14(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9OP5[0x8];                                   // 0x0B18(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerCharacter*                                    Character;                                               // 0x0B20(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UCharacterStateComponent>             CurrentPhysUpdateState;                                  // 0x0B28(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VA7J[0x50];                                  // 0x0B30(0x0050) MISSED OFFSET (PADDING)

	public:
		void RemoveGravityModifier(class AActor* SourceActor);
		void AddGravityModifier(class AActor* SourceActor, float Effect);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerProximityTracker
	 * Size -> 0x0048 (FullSize[0x00F8] - InheritedSize[0x00B0])
	 */
	class UPlayerProximityTracker : public UActorComponent
	{
	public:
		float                                                      MaxDistanceBetweenPlayers;                               // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlayerSpheresUpdateRatePerSecond;                        // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPlayerSphere>                               PlayerSpheres;                                           // 0x00B8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FProximityTriggerItem>                       LocalPlayerProximityTriggers;                            // 0x00C8(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FProximityTriggerItem>                       AnyPlayerProximityTriggers;                              // 0x00D8(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EVHR[0x10];                                  // 0x00E8(0x0010) MISSED OFFSET (PADDING)

	public:
		void Receive_RegisterForLocalPlayerProximity(class UObject* WorldContextObject, const struct FVector& Location, float Distance, const class FScriptDelegate& proximityCallback, bool triggerOnlyOnce);
		void Receive_RegisterForAnyPlayerProximity(class UObject* WorldContextObject, const struct FVector& Location, float Distance, const class FScriptDelegate& proximityCallback, bool triggerOnlyOnce);
		struct FPlayerSphere GetPrimarySphere();
		TArray<struct FPlayerSphere> GetPlayerSpheres();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerRejoinState
	 * Size -> 0x0078 (FullSize[0x0128] - InheritedSize[0x00B0])
	 */
	class UPlayerRejoinState : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_SJLT[0x78];                                  // 0x00B0(0x0078) MISSED OFFSET (PADDING)

	public:
		void Server_Reset();
		void Server_AddIntValue_Internal(const struct FGuid& ItemKey, const class FName& ValueKey, int32_t Value);
		void Server_AddFloatValue_Internal(const struct FGuid& ItemKey, const class FName& ValueKey, float Value);
		void Client_SetValues(TArray<struct FRejoinFloat> floatValues, TArray<struct FRejoinInt> intValues);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourcesComponent
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class UResourcesComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnResourceChanged;                                       // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnResourceIncreased;                                     // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnResourceFull;                                          // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnResourceAdded;                                         // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UCappedResource*>                             Resources;                                               // 0x00F0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		float                                                      ResourceCap;                                             // 0x0100(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UXJ8[0x4];                                   // 0x0104(0x0004) MISSED OFFSET (PADDING)

	public:
		void ResourceIncreased(class UCappedResource* Resource, float Delta);
		void ResourceFull(class UCappedResource* Resource);
		void ResourceChanged(class UCappedResource* Resource, float currentAmount);
		void OnRep_Resources();
		int32_t GetXPFromResourceMap(TMap<class UResourceData*, float> Resources);
		int32_t GetXpFromMining();
		TMap<class UResourceData*, float> GetSeparateResourcesFromMap(TMap<class UResourceData*, float> Resources);
		class UCappedResource* GetResource(class UResourceData* Data, bool createIfAmountIsZero);
		float GetCapacityPct();
		TArray<class UCappedResource*> GetAllResources();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerResourceComponent
	 * Size -> 0x0000 (FullSize[0x0108] - InheritedSize[0x0108])
	 */
	class UPlayerResourceComponent : public UResourcesComponent
	{
	public:
		class UPlayerResourceComponent* GetFromPlayer(class APlayerCharacter* PlayerCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerStatsComponent
	 * Size -> 0x00B0 (FullSize[0x0160] - InheritedSize[0x00B0])
	 */
	class UPlayerStatsComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnKillAdded;                                             // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    TotalKills;                                              // 0x00C0(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TotalRevived;                                            // 0x00C4(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TotalDeaths;                                             // 0x00C8(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TotalSupplypodsRequested;                                // 0x00CC(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TotalGoldMined;                                          // 0x00D0(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TotalMOMsMined;                                          // 0x00D4(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TotalMineralsMined;                                      // 0x00D8(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TotalXPGained;                                           // 0x00DC(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       EscapedInPod;                                            // 0x00E0(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y2IG[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              LastPlayedClass;                                         // 0x00E8(0x0008) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FEndMissionResult                                   EndMissionResult;                                        // 0x00F0(0x0060) BlueprintVisible, Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnEndMissionResultReady;                                 // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		void SendMissionAnalytics(bool trackMorkite);
		void SendEndMissionResult(const struct FEndMissionResult& Result);
		void OnResourceMined(class UCappedResource* Resource, float Amount);
		void OnRep_EndMissionResult();
		bool IsEndMissionResultReady();
		bool GetSurvivedInPod();
		void EndMissionResultDelegate__DelegateSignature(const struct FEndMissionResult& Result);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerTemperatureComponent
	 * Size -> 0x00B8 (FullSize[0x0180] - InheritedSize[0x00C8])
	 */
	class UPlayerTemperatureComponent : public UTemperatureComponent
	{
	public:
		class FScriptMulticastDelegate                             OnTemperatureChanged;                                    // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTemperatureStateChanged;                               // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTemperatureChangeRate;                                 // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDefrosting;                                            // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBarVisibilityChanged;                                  // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      MinimumTemperature;                                      // 0x0118(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaximumTemperature;                                      // 0x011C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DefrostTemperature;                                      // 0x0120(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurnTemperature;                                         // 0x0124(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DouseFireTemperature;                                    // 0x0128(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TemperaturRegainSpeed;                                   // 0x012C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DefrostingRequired;                                      // 0x0130(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RYDR[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              OnDefrostedStatusEffect;                                 // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NormalTemperature;                                       // 0x0140(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentTemperature;                                      // 0x0144(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetTemperature;                                       // 0x0148(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JL3W[0x9];                                   // 0x014C(0x0009) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int8_t                                                     TemperatureChangeSpeed;                                  // 0x0155(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ECKB[0x2];                                   // 0x0156(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DefrostProgress;                                         // 0x0158(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       barVisible;                                              // 0x015C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9PK0[0x13];                                  // 0x015D(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerCharacter*                                    Character;                                               // 0x0170(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPlayerTemperatureState                                    TemperatureState;                                        // 0x0178(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A101[0x7];                                   // 0x0179(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetNormalTemperature();
		void SetFrozenTemperature();
		void OnRep_TemperatureState(EPlayerTemperatureState oldState);
		void OnRep_TemperatureChangeSpeed(int8_t OldSpeed);
		void OnRep_DefrostProgress();
		void OnRep_CurrentTemperature(float OldTemperature);
		void OnDeath(class UHealthComponentBase* Health);
		int32_t GetTemperatureChangedSpeed();
		float GetDefrostProgress();
		float GetCurrentTemperatureNormalized();
		void Defrost(float Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PLSEncounterComponent
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UPLSEncounterComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PLSTester
	 * Size -> 0x00A8 (FullSize[0x02C8] - InheritedSize[0x0220])
	 */
	class APLSTester : public AActor
	{
	public:
		class FString                                              FullSeedString;                                          // 0x0220(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PLSSeed;                                                 // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MissionSeed;                                             // 0x0234(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    GlobalSeed;                                              // 0x0238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    GlobalMissionIndex;                                      // 0x023C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       OptOutOfSeasonContent;                                   // 0x0240(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JQV5[0x7];                                   // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMissionComplexity*                                  limitComplexity;                                         // 0x0248(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionDuration*                                    limitDuration;                                           // 0x0250(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionMutator*                                     Mutator;                                                 // 0x0258(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMissionWarning*>                             Warnings;                                                // 0x0260(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      SecondaryObjectives;                                     // 0x0270(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class USpecialEvent*                                       SpecialEvent;                                            // 0x0280(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBiome*                                              Biome;                                                   // 0x0288(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionTemplate*                                    MissionTemplate;                                         // 0x0290(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionTemplate*                                    CustomMissionTemplate;                                   // 0x0298(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDifficultySetting*                                  OverrideDifficulty;                                      // 0x02A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SimulatePlayerCount;                                     // 0x02A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H4LU[0x4];                                   // 0x02AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                CustomMissionName;                                       // 0x02B0(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DeepDiveTester
	 * Size -> 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
	 */
	class ADeepDiveTester : public AActor
	{
	public:
		class UBiome*                                              Biome;                                                   // 0x0220(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Seed;                                                    // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EMissionStructure                                          MissionStructure;                                        // 0x022C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2JXN[0x3];                                   // 0x022D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDeepDiveTesterItem>                         stages;                                                  // 0x0230(0x0010) Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PostProcessingManager
	 * Size -> 0x0030 (FullSize[0x0250] - InheritedSize[0x0220])
	 */
	class APostProcessingManager : public AActor
	{
	public:
		TArray<TWeakObjectPtr<class AFSDPostProcessingActor>>      RegisteredActors;                                        // 0x0220(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<struct FPostProcessingBlendable>                    CurrentBlendables;                                       // 0x0230(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UMaterialInstanceDynamic*>                    Materials;                                               // 0x0240(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PresenceSubSystem
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UPresenceSubSystem : public UGameInstanceSubsystem
	{
	public:
		class UDiscordWrapper*                                     DiscordWI;                                               // 0x0030(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCommunityGoalWrapper*                               CommunityWI;                                             // 0x0038(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZFFM[0x18];                                  // 0x0040(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProceduralController
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UProceduralController : public UActorComponent
	{
	public:
		void Server_RequestTunnelData();
		void SendTunnelData();
		void SendRoomData();
		void SendRequestedPLSData();
		void SendRequestedCarverData(EDebrisItemPass pass);
		void RequestPLSData();
		void RequestCarverData(EDebrisItemPass pass);
		void ReceivedTunnelData(TArray<struct FTunnelNode> tunnels);
		void ReceivedRoomData(int32_t Seed, TArray<struct FRoomNode> Rooms, TArray<struct FPathObstacle> Obstacles);
		void Client_SendTunnelData(TArray<struct FTunnelNode> tunnels);
		void Client_SendRoomData(int32_t Seed, TArray<struct FRoomNode> Rooms, TArray<struct FPathObstacle> Obstacles);
		void Client_RecieveCarverSizes(int32_t pass, int32_t carverCount);
		void Client_ReceivePLSLevelCarver(int32_t pass, const struct FLevelGenerationCarverLists& levelCarvers);
		void Client_ReceivePLSInfluencers(const struct FGeneratedInfluenceSets& influenceSet);
		void Client_ReceivePLSDebris(TArray<struct FGeneratedDebrisItem> levelDebris);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProceduralObjectColliders
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UProceduralObjectColliders : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_YS9V[0x50];                                  // 0x00B0(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProceduralResources
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UProceduralResources : public UActorComponent
	{
	public:
		void GenerateResources();
		void GenerateMissingCarvedResources_Async(class AProceduralSetup* Setup, const struct FLatentActionInfo& LatentInfo);
		void GenerateMissingCarvedResources();
		void GenerateCarvedResources_Async(class AProceduralSetup* Setup, const struct FLatentActionInfo& LatentInfo);
		void GenerateCarvedResources();
		void CreateResourcesFromObjectives();
		void CountGeneratedCarvedResources();
		void CountFinalGeneratedCarvedResources();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProceduralSettings
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class UProceduralSettings : public UDataAsset
	{
	public:
		class URoomDecorationObject*                               MiningpodCalldownLocationDecoration;                     // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UMissionTemplate*>                            TestMissions;                                            // 0x0038(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              TestBiome[0x28];                                         // 0x0048(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UBiome*                                              DefaultBiome;                                            // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FText>                                        GenericBiomeQuotes;                                      // 0x0078(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		class UMissionTemplate*                                    DefaultMission;                                          // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CaveGeneratorPLSClass;                                   // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProceduralSetup
	 * Size -> 0x0298 (FullSize[0x04B8] - InheritedSize[0x0220])
	 */
	class AProceduralSetup : public AActor
	{
	public:
		bool                                                       ShowItemNoisePattern;                                    // 0x0220(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OZ7Z[0x3];                                   // 0x0221(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Seed;                                                    // 0x0224(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseRandomSeed;                                           // 0x0228(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PNHY[0x7];                                   // 0x0229(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRandomStream                                       RandomStream;                                            // 0x0230(0x0008) BlueprintVisible, ZeroConstructor, Transient, NoDestructor, NativeAccessSpecifierPublic
		struct FRandomStream                                       RandomStreamServer;                                      // 0x0238(0x0008) BlueprintVisible, ZeroConstructor, Transient, NoDestructor, NativeAccessSpecifierPublic
		struct FRandomStream                                       RandomStreamAsync;                                       // 0x0240(0x0008) BlueprintVisible, ZeroConstructor, Transient, NoDestructor, NativeAccessSpecifierPublic
		struct FRandomStream                                       RandomStreamAsyncServer;                                 // 0x0248(0x0008) BlueprintVisible, ZeroConstructor, Transient, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEncounterSpawnedEvent;                                 // 0x0250(0x0010) ZeroConstructor, Transient, InstancedReference, NativeAccessSpecifierPublic
		TArray<struct FEncounterSpecialItem>                       SpecialEncountersToSpawn;                                // 0x0260(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0D8A[0x18];                                  // 0x0270(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USpecialEvent*                                       ForcedMachineEvent;                                      // 0x0288(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USpecialEvent*                                       ForcedTreasure;                                          // 0x0290(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USpecialEvent*                                       ForcedOtherEvent;                                        // 0x0298(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VHG4[0x10];                                  // 0x02A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UNoisyPathfinderComponent*                           NoisyPathfinder;                                         // 0x02B0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProceduralTunnelComponent*                          ProceduralTunnel;                                        // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPLSEncounterComponent*                              Encounters;                                              // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProceduralVeinsComponent*                           Veins;                                                   // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProceduralResources*                                Resources;                                               // 0x02D0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProceduralObjectColliders*                          ObjectColliders;                                         // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ADeepCSGWorld*                                       CSGWorld;                                                // 0x02E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFloodFillSettings*                                  PathfinderNoise;                                         // 0x02E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FCarvedResource>                             CarvedResources;                                         // 0x02F0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UClass*                                              MissionDNA;                                              // 0x0300(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FGemResourceAmount>                          GemResourcesToGenerate;                                  // 0x0308(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FCollectableSpawnableItem>                   CollectablesToGenerate;                                  // 0x0318(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		ESpawnSettings                                             SpawnSettings;                                           // 0x0328(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanSpawnSpecialEvents;                                   // 0x0329(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShouldCarveTunnels;                                      // 0x032A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XD7L[0x5];                                   // 0x032B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FRoomNode>                                   Rooms;                                                   // 0x0330(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FRoomNode>                                   RoomsInitialState;                                       // 0x0340(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FTunnelNode>                                 tunnels;                                                 // 0x0350(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		struct FGeneratedInfluenceSets                             GeneratedInfluenceSets;                                  // 0x0360(0x0018) Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OABX[0x8];                                   // 0x0378(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGeneratedInstantCarvers                            GeneratedInstantCarvers;                                 // 0x0380(0x0010) Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FGeneratedDebris                                    GeneratedDebris;                                         // 0x0390(0x0058) Transient, Protected, NativeAccessSpecifierProtected
		class UBiome*                                              Biome;                                                   // 0x03E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      missionLength;                                           // 0x03F0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HXG8[0x4];                                   // 0x03F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPathObstacle>                               PathObstacles;                                           // 0x03F8(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		struct FInfluenceMap                                       InfluenceMap;                                            // 0x0408(0x0050) BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UResourceData*>                               SpawnedResources;                                        // 0x0458(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		float                                                      CaveDepth;                                               // 0x0468(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XXWE[0x4];                                   // 0x046C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              PostProcessActor;                                        // 0x0470(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USpecialEvent*                                       SpecialEvent;                                            // 0x0478(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInitialized;                                           // 0x0480(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V2W8[0x3];                                   // 0x0481(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurrentRoomPass;                                         // 0x0484(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Pass1Completed;                                          // 0x0488(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UsePerLevelCritterSpawning;                              // 0x0489(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0RO9[0x6];                                   // 0x048A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LastCompletedPLSPass;                                    // 0x0490(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EY4P[0x18];                                  // 0x04A0(0x0018) MISSED OFFSET (PADDING)

	public:
		void StartMusicAndAmbient(int32_t Music);
		void StartGenerationOnClient(class AFSDPlayerController* client);
		void SpawnSpecialEvents();
		void SpawnObjectiveEncounter();
		void SpawnObjectiveCriticalItems(ECriticalItemPass pass);
		void SpawnItems_Async(class AProceduralSetup* Setup, const struct FLatentActionInfo& LatentInfo);
		void SpawnItems();
		void SpawnEncounters();
		void SpawnDebrisItems_Async(class AProceduralSetup* Setup, const struct FLatentActionInfo& LatentInfo, EDebrisItemPass pass, int32_t Depth);
		void SpawnDebrisItems(EDebrisItemPass pass);
		void SetSeed(int32_t Seed);
		void ResetData();
		void RemoveBLockedEntrances();
		void OnPLSDataRecieved();
		void OnObjectivesCompleted();
		void OnCarverDataRecieved(EDebrisItemPass pass);
		bool IsGeneratedDataReady();
		bool IsCarverDataReady(EDebrisItemPass pass);
		void InitializeObjectives();
		class UMissionDNA* GetMissionDNA();
		TMap<class FString, float> GetGemsResourceAmounts();
		class ADeepCSGWorld* GetCSGWorld();
		TMap<class FString, float> GetCollectablesResourceAmounts();
		void GenerateRoomsFromGraph_Async(class AProceduralSetup* Setup, const struct FLatentActionInfo& LatentInfo, int32_t CarvePass);
		void GenerateRoomsFromGraph(int32_t CarvePass);
		void GenerateLandscapeFromData(int32_t Seed, TArray<struct FRoomNode> Rooms, TArray<struct FPathObstacle> Obstacles);
		void GenerateLandscape();
		struct FVector FindLocationInDirection(const struct FVector& Origin, const struct FVector& Direction, float horizontalDeviation, float verticalDeviation, const struct FRandRange& Distance, float additionalDistance);
		void FindEntrancesForAllConnections();
		void FillTunnels_Async(class AProceduralSetup* Setup, const struct FLatentActionInfo& LatentInfo);
		void FillTunnels();
		void DoneCarving();
		bool DoAsyncThreadGeneration();
		void CreateTunnelPaths();
		int32_t CreateItemDepths();
		void CreateGeneratedInfluenceSet();
		int32_t ConnectRooms(struct FRoomNode* From, struct FRoomNode* To, bool hasDirt, class UTunnelParameters* tunnelParameterOverride);
		int32_t ConnectRoomIds(int32_t fromID, int32_t toID, bool hasDirt, class UTunnelParameters* tunnelParameterOverride);
		void CommitCarving(bool finalCommit, bool generateMesh);
		void CarveWithGeneratedInstantCarvers();
		void CarveTunnels();
		void BeginLiveGeneration();
		void BeginGenerating();
		void AddRoomToInitialState(const struct FRoomNode& RoomNode);
		int32_t AddRoom(const struct FVector& Location, bool CanHaveEnemies, class URoomGeneratorBase* RoomGenerator, bool canBeRotated, struct FVector* outCenter, struct FRoomNode* outRoom, float ResourceMultiplier);
		void AddInfluenceToTunnelEntrances(class UCaveInfluencer* Influencer, float range);
		void AddImportantLocation(const struct FVector& Location, float Radius);
		void AddEnemyDebris();
		int32_t AddDebrisCollider(const struct FDebrisCapsule& Capsule);
		void AddCaveInfluence(class UCaveInfluencer* Influencer, const struct FVector& Location, float range);
		int32_t AddAirParticlesCollider(const struct FDebrisCapsule& Capsule);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CaveInfluencer
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UCaveInfluencer : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProceduralTunnelComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UProceduralTunnelComponent : public UActorComponent
	{
	public:
		class UTunnelParameters*                                   TunnelParameters;                                        // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CreateDirt;                                              // 0x00B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OMUF[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCaveInfluencer*                                     DirtInfluencer;                                          // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DirtInfluencerRange;                                     // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K26B[0xC];                                   // 0x00CC(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProceduralVeinsComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UProceduralVeinsComponent : public UActorComponent
	{
	public:
		TArray<struct FVeinResource>                               VeinResources;                                           // 0x00B0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UHK6[0x18];                                  // 0x00C0(0x0018) MISSED OFFSET (PADDING)

	public:
		void GenerateResourceVeins_Async(class AProceduralSetup* Setup, const struct FLatentActionInfo& LatentInfo);
		void GenerateResourceVeins();
		void GenerateMissingResourceVeins_Async(class AProceduralSetup* Setup, const struct FLatentActionInfo& LatentInfo);
		void GenerateMissingResourceVeins();
		void GenerateDebrisVeins_Async(class AProceduralSetup* Setup, EDebrisCarvedType CarverType, const struct FLatentActionInfo& LatentInfo);
		void GenerateDebrisVeins(EDebrisCarvedType CarverType);
		void CountGeneratedResourcesInVeins();
		void CountFinalGeneratedResourcesInVeins();
		void CalculateResourceDistribution();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProfilingSubSystem
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UProfilingSubSystem : public UWorldSubsystem
	{
	public:
		TArray<struct FProfileEntry>                               Entries;                                                 // 0x0030(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		float GetTotalTime();
		TArray<struct FProfileEntry> GetEntries();
		TArray<struct FProfileCategoryTiming> GetCategoryTimings();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FakePhysicsProjectile
	 * Size -> 0x00B8 (FullSize[0x03A8] - InheritedSize[0x02F0])
	 */
	class AFakePhysicsProjectile : public AProjectileBase
	{
	public:
		struct FFakeMoverState                                     MoverState;                                              // 0x02F0(0x0060) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FFakeMoveState                                      PosVel;                                                  // 0x0350(0x0024) Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6RBW[0x4];                                   // 0x0374(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFakeMoverSettings*                                  MoveSettings;                                            // 0x0378(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InitialSpeed;                                            // 0x0380(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DampOmega;                                               // 0x0384(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SyncTime;                                                // 0x0388(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5IRX[0x1C];                                  // 0x038C(0x001C) MISSED OFFSET (PADDING)

	public:
		void SphereBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnRep_PosVel(const struct FFakeMoveState& PosVel);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileAttack
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UProjectileAttack : public UObject
	{
	public:
		struct FFloatInterval                                      Delay;                                                   // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TriggerOnEvent;                                          // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_46D2[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFloatInterval                                      HorizontalAngleOffset;                                   // 0x0034(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      VerticalAngleOffset;                                     // 0x003C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                OverrideSocketName;                                      // 0x0044(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DXRZ[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NormalProjectileAttack
	 * Size -> 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
	 */
	class UNormalProjectileAttack : public UProjectileAttack
	{
	public:
		class UClass*                                              Projectile;                                              // 0x0050(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RandomAngle;                                             // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I1CM[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BallisticProjectileAttack
	 * Size -> 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
	 */
	class UBallisticProjectileAttack : public UProjectileAttack
	{
	public:
		class UClass*                                              Projectile;                                              // 0x0050(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ProjectileArc;                                           // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Gravity;                                                 // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileAttackBaseComponent
	 * Size -> 0x00A8 (FullSize[0x0198] - InheritedSize[0x00F0])
	 */
	class UProjectileAttackBaseComponent : public UAttackBaseComponent
	{
	public:
		TArray<class UProjectileAttack*>                           Projectiles;                                             // 0x00F0(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UAnimMontage*>                                Montages;                                                // 0x0100(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FName                                                SocketName;                                              // 0x0110(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EProjectileAttackRotationType                              RotationHandling;                                        // 0x0118(0x0001) ELEMENT_SIZE_MISMATCH Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6X0Q[0x3];                                   // 0x0119(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		unsigned char                                              UnknownData_93EX[0x4];                                   // 0x011C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTargetValidator*                                    FinalValidationCheck;                                    // 0x0120(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ProjectilesIgnoreEachOther;                              // 0x0128(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S8YO[0x2F];                                  // 0x0129(0x002F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAttackStartedEvent;                                    // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnProjectileFiredEvent;                                  // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnAttackEndedEvent;                                      // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnProjectileSpawnedEvent;                                // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		bool TriggerMontage(class AActor* Target);
		class UAnimMontage* SelectMontage();
		void OnPerformAttack();
		void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);
		void MulticastProjectileFired();
		void CancelMontage();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileAttackComponent
	 * Size -> 0x0008 (FullSize[0x01A0] - InheritedSize[0x0198])
	 */
	class UProjectileAttackComponent : public UProjectileAttackBaseComponent
	{
	public:
		bool                                                       ManualyComplete;                                         // 0x0198(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C1A1[0x7];                                   // 0x0199(0x0007) MISSED OFFSET (PADDING)

	public:
		void AddAttackMontage(class UAnimMontage* attackMontage);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ExplosionBaseComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UExplosionBaseComponent : public UActorComponent
	{
	public:
		float                                                      CarveDiameterCM;                                         // 0x00B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarveNoiseCM;                                            // 0x00B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarveBurnThicknessCM;                                    // 0x00B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarveNormalOffsetCM;                                     // 0x00BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarveNormalSqueeze;                                      // 0x00C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YY1B[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (PADDING)

	public:
		void DamageOnlyFromHit(const struct FHitResult& HitResult, class UDamageComponent** DamageComponent);
		void DamageOnly(const struct FVector& Location, const class FName& BoneName, class UPrimitiveComponent* Target, class UPhysicalMaterial* PhysicalMaterial, class UDamageComponent** DamageComponent);
		void DamageArmorClients(const struct FHitResult& HitResult, class UDamageComponent** DamageComponent);
		void DamageAndCarveFromHit(const struct FHitResult& HitResult, class UDamageComponent** DamageComponent);
		void DamageAndCarve(const struct FVector& Location, const struct FVector& ImpactNormal, const class FName& BoneName, class UPrimitiveComponent* Target, class UPhysicalMaterial* PhysicalMaterial, class UDamageComponent** DamageComponent);
		void CarveOnly(const struct FVector& Location, const struct FVector& ImpactNormal);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ExplosionComponent
	 * Size -> 0x0000 (FullSize[0x00C8] - InheritedSize[0x00C8])
	 */
	class UExplosionComponent : public UExplosionBaseComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileExplosion
	 * Size -> 0x0028 (FullSize[0x00F0] - InheritedSize[0x00C8])
	 */
	class UProjectileExplosion : public UExplosionBaseComponent
	{
	public:
		struct FScaledEffect                                       ExplosionEffect;                                         // 0x00C8(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class USoundCue*                                           ExplosionSound;                                          // 0x00D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UForceFeedbackEffect*                                ForceFeedbackEffect;                                     // 0x00E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UForceFeedbackAttenuation*                           ForceFeedbackAttanuation;                                // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SpawnEffectsFromHit(const struct FHitResult& Hit);
		void SpawnEffects(const struct FVector& Location, const struct FVector& Normal);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileLauncherBaseComponent
	 * Size -> 0x0058 (FullSize[0x0168] - InheritedSize[0x0110])
	 */
	class UProjectileLauncherBaseComponent : public UWeaponFireComponent
	{
	public:
		bool                                                       IgnoreCollisionWithSelf;                                 // 0x0110(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseProjectileUpgrades;                                   // 0x0111(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseSpread;                                               // 0x0112(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KUZI[0x1];                                   // 0x0113(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VerticalSpread;                                          // 0x0114(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HorizontalSpread;                                        // 0x0118(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I25W[0x4];                                   // 0x011C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnProjectileSpawned;                                     // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UItemUpgrade*>                                ProjectileUpgrades;                                      // 0x0130(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		float                                                      ArcStartAngle;                                           // 0x0140(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TransferCharacterVelocityToProjectile;                   // 0x0144(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CameraToMuzzleFireCheck;                                 // 0x0145(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LSEW[0x22];                                  // 0x0146(0x0022) MISSED OFFSET (PADDING)

	public:
		void Server_StopFire();
		void Server_Fire(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& Direction, const struct FVector_NetQuantizeNormal& initialBonusVelocity, class AProjectileBase* DormentProjectile, bool notifyClients);
		void ProjectileSpawned__DelegateSignature(class AProjectileBase* Projectile);
		void All_ShowHit();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileLauncherComponent
	 * Size -> 0x0018 (FullSize[0x0180] - InheritedSize[0x0168])
	 */
	class UProjectileLauncherComponent : public UProjectileLauncherBaseComponent
	{
	public:
		class UClass*                                              ProjectileClass;                                         // 0x0168(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5QVS[0x10];                                  // 0x0170(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetProjectileClass(class UClass* NewProjectileClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ChargedProjectileLauncherComponent
	 * Size -> 0x0028 (FullSize[0x0190] - InheritedSize[0x0168])
	 */
	class UChargedProjectileLauncherComponent : public UProjectileLauncherBaseComponent
	{
	public:
		class UClass*                                              NormalProjectileClass;                                   // 0x0168(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ChargedProjectileClass;                                  // 0x0170(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ProjectileChangeChargeValue;                             // 0x0178(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YLRE[0x14];                                  // 0x017C(0x0014) MISSED OFFSET (PADDING)

	public:
		void SetProjectileClassCharged(class UClass* NewProjectileClass);
		void SetProjectileClass(class UClass* NewProjectileClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProjectileThrowerAttack
	 * Size -> 0x0050 (FullSize[0x01F0] - InheritedSize[0x01A0])
	 */
	class UProjectileThrowerAttack : public UProjectileAttackComponent
	{
	public:
		class USkeletalMesh*                                       ThrowerMesh;                                             // 0x01A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              ThrowerAnimInstance;                                     // 0x01A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UAnimMontage*>                                ThrowerMontages;                                         // 0x01B0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		class FName                                                ThrowerAttachPoint;                                      // 0x01C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       RotateToTarget;                                          // 0x01C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5G5L[0xB];                                   // 0x01C9(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            ThrowerRotation;                                         // 0x01D4(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		struct FVector                                             ThrowerOffset;                                           // 0x01E0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8URB[0x4];                                   // 0x01EC(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnThrowerMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
		void All_ShowThrowerAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PromotionRewardsSettings
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UPromotionRewardsSettings : public UDataAsset
	{
	public:
		TArray<struct FClaimableRewardEntry>                       FirstPromotionRewards;                                   // 0x0030(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<struct FClaimableRewardEntry>                       SubsequentPromotionRewards;                              // 0x0040(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PromotionRewardsLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPromotionRewardsLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool HasPendingPromotionRewards(class UObject* WorldContext);
		bool ClaimPromotionRewards(class UObject* WorldContext, class APlayerController* PlayerController, TArray<struct FClaimableRewardEntry>* OutRewards, bool* OutFirstPromotion);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProspectorObjective
	 * Size -> 0x0038 (FullSize[0x01B8] - InheritedSize[0x0180])
	 */
	class UProspectorObjective : public UObjective
	{
	public:
		unsigned char                                              ProspectorClass[0x28];                                   // 0x0180(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UDebrisPositioning*                                  DebrisPositioning;                                       // 0x01A8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AProspectorRobot>                     ActiveProspector;                                        // 0x01B0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_ActiveProspector();
		void OnProspectorDeath(class UHealthComponentBase* Health);
		bool IsProspectorDead();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProspectorRobot
	 * Size -> 0x0048 (FullSize[0x03F8] - InheritedSize[0x03B0])
	 */
	class AProspectorRobot : public AEnemyDeepPathfinderCharacter
	{
	public:
		float                                                      WorkingArmSpeed;                                         // 0x03B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EnginePowerMultiplier;                                   // 0x03B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6XSN[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              Target;                                                  // 0x03C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeadResponsiveness;                                      // 0x03C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeadSearchSpeed;                                         // 0x03CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeadSearchMaxAngle;                                      // 0x03D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W4SI[0x14];                                  // 0x03D4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic*                            EngineMaterial;                                          // 0x03E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EProspectorRobotState                                      ProspectorState;                                         // 0x03F0(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NAZX[0x7];                                   // 0x03F1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetTarget(class AActor* Target);
		void SetArmSpeed(float Speed);
		void OnStateEnd(EProspectorRobotState oldState);
		void OnStateBegin(EProspectorRobotState NewState);
		void OnRep_ProspectorState(EProspectorRobotState oldState);
		bool IsStateActive(EProspectorRobotState State);
		void ChangeState(EProspectorRobotState NewState);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProspectorAnimInstance
	 * Size -> 0x0038 (FullSize[0x0340] - InheritedSize[0x0308])
	 */
	class UProspectorAnimInstance : public UEnemyAnimInstance
	{
	public:
		unsigned char                                              UnknownData_FAS2[0x8];                                   // 0x0308(0x0008) Fix Super Size
		unsigned char                                              UnknownData_GBMS[0xC];                                   // 0x0310(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           TiltResult;                                              // 0x031C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           LookingResult;                                           // 0x0324(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HBOW[0x8];                                   // 0x032C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EProspectorRobotState                                      ProspectorState;                                         // 0x0334(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DVB6[0x3];                                   // 0x0335(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ArmBusyness;                                             // 0x0338(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K1RU[0x4];                                   // 0x033C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PushingState
	 * Size -> 0x0008 (FullSize[0x0108] - InheritedSize[0x0100])
	 */
	class UPushingState : public UCharacterStateComponent
	{
	public:
		class UUseAnimationSetting*                                PushingAnimation;                                        // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RadarPointComponent
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class URadarPointComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnRemove;                                                // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      PointPriority;                                           // 0x00C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JOAG[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              WidgetClass;                                             // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void MapToRadarPosition(const struct FVector& playerPos, const struct FVector& playerForward, const struct FVector& Pos, bool snap, struct FVector* radarPos, float* alpha);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NetworkedRadarPointComponent
	 * Size -> 0x0000 (FullSize[0x00D0] - InheritedSize[0x00D0])
	 */
	class UNetworkedRadarPointComponent : public URadarPointComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RagdollManager
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class URagdollManager : public UActorComponent
	{
	public:
		TArray<struct FRagdollItem>                                Items;                                                   // 0x00B0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		void StartRagdoll(class AActor* Actor, TArray<class UMaterialInstanceDynamic*> Materials, float desiredDuration);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandomSelectorItem
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ARandomSelectorItem : public AGenerationItem
	{
	public:
		int32_t                                                    Min;                                                     // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Max;                                                     // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandRangeFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class URandRangeFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool TryPickRandomText(TArray<class FText> TextArray, struct FRandomStream* RandomStream, class FText* OutResult);
		class FText PickRandomText(TArray<class FText> TextArray, struct FRandomStream* RandomStream);
		int32_t GetValueFromStream(const struct FIRandRange& RandRange, struct FRandomStream* RandomStream);
		float GetFloatValue(const struct FRandRange& RandRange);
		float GetFloatFromStream(const struct FRandRange& RandRange, struct FRandomStream* RandomStream);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandIntervalFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class URandIntervalFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		float GetFloatValue(const struct FRandInterval& RandInterval);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RDGComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class URDGComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnDetonated;                                             // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RDGLauncher
	 * Size -> 0x0010 (FullSize[0x0760] - InheritedSize[0x0750])
	 */
	class ARDGLauncher : public AAmmoDrivenWeapon
	{
	public:
		TArray<class URDGComponent*>                               ActiveGrenades;                                          // 0x0750(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void Server_DetonateAll();
		void RegisterGrenade(class URDGComponent* Grenade);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ReactiveTerrain
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UReactiveTerrain : public UObject
	{
	public:
		void Receive_OnActorLeft(class UStatusEffectsComponent* StatusEffects);
		void Receive_OnActorEntered(class UStatusEffectsComponent* StatusEffects);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusEffectReactiveTerrain
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UStatusEffectReactiveTerrain : public UReactiveTerrain
	{
	public:
		class UClass*                                              StatusEffect;                                            // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ReactiveTerrainTrackerComponent
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UReactiveTerrainTrackerComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerReactiveTerrainTrackerComponent
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UPlayerReactiveTerrainTrackerComponent : public UReactiveTerrainTrackerComponent
	{
	public:
		class UFSDPhysicalMaterial*                                CurrentPhysicalMaterial;                                 // 0x00B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PathfinderReactiveTerrainTrackerComponent
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UPathfinderReactiveTerrainTrackerComponent : public UReactiveTerrainTrackerComponent
	{
	public:
		struct FRandRange                                          CheckInterval;                                           // 0x00B0(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UFSDPhysicalMaterial*                                CurrentPhysicalMaterial;                                 // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStatusEffectsComponent*                             StatusEffectsComponent;                                  // 0x00C0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KISU[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RecallableActor
	 * Size -> 0x00A0 (FullSize[0x0430] - InheritedSize[0x0390])
	 */
	class ARecallableActor : public ADeepPathfinderCharacter
	{
	public:
		unsigned char                                              UnknownData_2VQ5[0x8];                                   // 0x0390(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStateChanged;                                          // 0x0398(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReturnFinish;                                          // 0x03A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRelocateFinished;                                      // 0x03B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      AcceptanceRadius;                                        // 0x03C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoRecallDistance;                                      // 0x03CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RelocateLandingHeight;                                   // 0x03D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TLYN[0x4];                                   // 0x03D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              RelocationMarkerType;                                    // 0x03D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               RecallTarget;                                            // 0x03E0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ERecallableActorState                                      State;                                                   // 0x03E8(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5RUJ[0x7];                                   // 0x03E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          RelocateTransform;                                       // 0x03F0(0x0030) Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       RelocateLanded;                                          // 0x0420(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PICA[0x3];                                   // 0x0421(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               RelocationMarker;                                        // 0x0424(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInitialized;                                            // 0x042C(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2OAZ[0x3];                                   // 0x042D(0x0003) MISSED OFFSET (PADDING)

	public:
		void SetRecallTarget(class AActor* NewTarget);
		void Relocate(const struct FVector& NewLocation, const struct FRotator& NewRotation);
		void ReceiveOnStateChanged();
		void RecallableActorStateChanged__DelegateSignature(class ARecallableActor* Sender, ERecallableActorState State);
		void Recall();
		void OnReturnSucceeded();
		void OnReturnFailed();
		void OnRep_State(ERecallableActorState oldState);
		void OnRep_RecallTarget();
		void OnRelocated();
		void OnRecallTargetChanged(class AActor* NewTarget);
		void OnPathFinished(bool success);
		void OnMoving();
		void OnMoveRequested();
		void OnMoveFinished(bool returnedHome);
		bool GetIsReturning();
		bool GetIsMovingOrMoveRequested();
		bool GetIsMoving();
		bool GetIsMoveRequested();
		void BeginMove();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RecallableItem
	 * Size -> 0x0020 (FullSize[0x03F0] - InheritedSize[0x03D0])
	 */
	class ARecallableItem : public AAnimatedItem
	{
	public:
		unsigned char                                              UnknownData_XZXZ[0x8];                                   // 0x03D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ItemType;                                                // 0x03D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class ARecallableActor>>             ActiveItems;                                             // 0x03E0(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		void ServerSpawnItem(const struct FVector& Location, const struct FRotator& Rotation);
		void ReceiveOnItemSpawned(class ARecallableActor* Item);
		void OnRep_ActiveItems();
		void ItemReturnFinished(class AActor* Item, bool success);
		bool CanSpawnItem(const struct FVector& Location, const struct FRotator& Rotation);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SentryGun
	 * Size -> 0x01E0 (FullSize[0x0400] - InheritedSize[0x0220])
	 */
	class ASentryGun : public AActor
	{
	public:
		unsigned char                                              UnknownData_JO0U[0x10];                                  // 0x0220(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnEnabledChanged;                                        // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAmmoCountChanged;                                      // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMaxAmmoCountChanged;                                   // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              SentryGunMesh;                                           // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSentryGunMuzzleSetup>                       SentryGunMuzzels;                                        // 0x0268(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NWCV[0x10];                                  // 0x0278(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ProjectileClass;                                         // 0x0288(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ShootingSound;                                           // 0x0290(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     MuzzleFlash;                                             // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTracerData                                         TracerData;                                              // 0x02A0(0x0030) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UParticleSystem*                                     Tracer;                                                  // 0x02D0(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinTracerDistance;                                       // 0x02D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AngleRestriction;                                        // 0x02DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Enabled;                                                 // 0x02E0(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XOUD[0x7];                                   // 0x02E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FOverlapResult>                              OverlapCache;                                            // 0x02E8(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            MinRotation;                                             // 0x02F8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            MaxRotation;                                             // 0x0304(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      AquisitionRange;                                         // 0x0310(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotationSpeed;                                           // 0x0314(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShotCoolDown;                                            // 0x0318(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetLeading;                                           // 0x031C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BurstCount;                                              // 0x0320(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurstShotCoolDown;                                       // 0x0324(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IdleScanAngle;                                           // 0x0328(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IdleScanSpeed;                                           // 0x032C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FinalShotFadeOut;                                        // 0x0330(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E2MX[0x4];                                   // 0x0334(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          AudioOnTurn;                                             // 0x0338(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               DissallowedTargetTags;                                   // 0x0340(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QL5D[0x18];                                  // 0x0360(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AmmoCount;                                               // 0x0378(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxAmmoCount;                                            // 0x037C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Damage;                                                  // 0x0380(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetYaw;                                               // 0x0384(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetPitch;                                             // 0x0388(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UHealthComponentBase>                 LastTarget;                                              // 0x038C(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UHealthComponentBase>                 PrioritizedTarget;                                       // 0x0394(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QE2G[0x1C];                                  // 0x039C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponFireComponent*                                WeaponFire;                                              // 0x03B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OMAP[0x30];                                  // 0x03C0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     ShootingAudioComponent;                                  // 0x03F0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_S9WX[0x8];                                   // 0x03F8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UseAmmo(int32_t Amount);
		void ReceiveAmmoChanged(int32_t Delta, int32_t currentAmount);
		void OnRep_MaxAmmoCount(int32_t OldCount);
		void OnRep_LastTarget();
		void OnRep_AmmoCount(int32_t OldCount);
		void OnProjectileFired(const struct FVector& Location);
		void OnNewTargetRequested(const struct FLaserPointerTarget& HitInfo);
		struct FTransform GetMuzzleTransform();
		class FName GetMuzzleName();
		int32_t GetMaxAmmoCount();
		float GetDeployProgress();
		float GetAmmoLeftPct();
		int32_t GetAmmoLeft();
		void Force_Fire(class AActor* Target);
		void EnabledChanged__DelegateSignature(bool IsEnabled);
		void AmmoSpent();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RedeployableSentryGun
	 * Size -> 0x00B0 (FullSize[0x04B0] - InheritedSize[0x0400])
	 */
	class ARedeployableSentryGun : public ASentryGun
	{
	public:
		class FScriptMulticastDelegate                             OnStateChanged;                                          // 0x0400(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDeployFinished;                                        // 0x0410(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDismantleFinished;                                     // 0x0420(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDeployProgressEvent;                                   // 0x0430(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class UActorTrackingComponent*                             ActorTrackingIcon;                                       // 0x0440(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOutlineComponent*                                   outline;                                                 // 0x0448(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APlayerCharacter>                     SentryGunOwner;                                          // 0x0450(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOutlineAndIconVisible;                                  // 0x0458(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ERedeployableSentryGunState                                State;                                                   // 0x0459(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TE9E[0x16];                                  // 0x045A(0x0016) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlasmaLineMaxRange;                                      // 0x0470(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GJX3[0x4];                                   // 0x0474(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASentryElectroBeam*>                          PlasmaLines;                                             // 0x0478(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UClass*                                              PlasmaBeamClass;                                         // 0x0488(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ElectrocutionActorClass;                                 // 0x0490(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              ElectrocutionActor;                                      // 0x0498(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              EMPDischargeActorClass;                                  // 0x04A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EMPDiscargeCooldown;                                     // 0x04A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8Y46[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (PADDING)

	public:
		void ToggleOutlineAndIcon(bool Visible);
		void SetSentryGunOwner(class APlayerCharacter* Character);
		void SetArcIndicatorActive(bool Active);
		void ReceiveOnStateChanged();
		void ReceiveOnSentryGunOwnerChanged();
		void ReceiveOnDismantled();
		void ReceiveOnDismantle();
		void ReceiveOnDeployed();
		void ReceiveOnDeploy();
		void OnStateChanged__DelegateSignature(class ARedeployableSentryGun* Sender, ERedeployableSentryGunState NewState);
		void OnRep_State(ERedeployableSentryGunState oldState);
		void OnRep_SentryGunOwner();
		void OnElectrocutionActorDestroyed(class AActor* Actor);
		void OnDismantleFinished__DelegateSignature();
		void OnDeployProgress__DelegateSignature(float Progress);
		void OnDeployFinished__DelegateSignature();
		bool GetIsDismantled();
		bool GetIsDeployed();
		float GetAnimDuration(class USkeletalMeshComponent* Mesh);
		void DismantleFinished();
		void Dismantle();
		void DeployFinished();
		void Deploy();
		void ActivateSpecialAttack();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TutorialComponent
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class UTutorialComponent : public UActorComponent
	{
	public:
		bool                                                       bTutorialEnabled;                                        // 0x00B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L8EU[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Priority;                                                // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDuration;                                             // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxViewCount;                                            // 0x00BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowInTutorialLevel;                                     // 0x00C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAutoRegisterWithManager;                                // 0x00C1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDebugAlwaysShow;                                        // 0x00C2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ManuallyMarkViews;                                       // 0x00C3(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APlayerCharacter>                     PlayerCharacter;                                         // 0x00C4(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AFSDPlayerState>                      PlayerState;                                             // 0x00CC(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AFSDPlayerController>                 PlayerController;                                        // 0x00D4(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UFSDSaveGame>                         SaveGame;                                                // 0x00DC(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ATutorialManager>                     TutorialManager;                                         // 0x00E4(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTutorialInitialized;                                    // 0x00EC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTutorialReady;                                          // 0x00ED(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTutorialVisible;                                        // 0x00EE(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTutorialActive;                                         // 0x00EF(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OOJC[0x10];                                  // 0x00F0(0x0010) MISSED OFFSET (PADDING)

	public:
		void RegisterTutorial();
		void ReceiveOnShown();
		void ReceiveOnInitialized();
		void ReceiveOnHidden();
		void OnTutorialsReset();
		void OnManagerReady(class ATutorialManager* manager);
		void MarkTutorialWatched();
		void MarkTutorialReadyNow();
		void MarkTutorialReadyInSeconds(float Delay);
		bool HasTutorialBeenShown();
		class FString GetTutorialName();
		void CancelTutorial(bool CountAsViewed);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TutorialHintComponent
	 * Size -> 0x0070 (FullSize[0x0170] - InheritedSize[0x0100])
	 */
	class UTutorialHintComponent : public UTutorialComponent
	{
	public:
		struct FTutorialHint                                       Hint;                                                    // 0x0100(0x0070) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void SetRemainingVisibleTime(float remainingTime);
		bool IsSingleplayer(class UObject* WorldContext);
		void ChangeHint(const struct FTutorialHint& NewHint);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RefineryHintComponent
	 * Size -> 0x0008 (FullSize[0x0178] - InheritedSize[0x0170])
	 */
	class URefineryHintComponent : public UTutorialHintComponent
	{
	public:
		TWeakObjectPtr<class AFSDRefinery>                         Refinery;                                                // 0x0170(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReceiveRefinerySpawned(class AFSDRefinery* InRefinery);
		void ReceivePipelineSegmentPlaced(class APipelineSegment* InSegment);
		void ReceiveExtractorPodSpawned(class APipelineExtractorPod* InExtractorPod);
		void OnRefinerySpawned(class AFSDRefinery* InRefinery);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RefineryObjective
	 * Size -> 0x0090 (FullSize[0x0210] - InheritedSize[0x0180])
	 */
	class URefineryObjective : public UObjective
	{
	public:
		class FScriptMulticastDelegate                             OnRefinerySpawned;                                       // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              refineryClass[0x28];                                     // 0x0190(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		TWeakObjectPtr<class AFSDRefinery>                         Refinery;                                                // 0x01B8(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ERefineryState                                             RefineryState;                                           // 0x01C0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7WH4[0x7];                                   // 0x01C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDebrisPositioning*                                  RefineryPlacement;                                       // 0x01C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              RawMaterialClass[0x28];                                  // 0x01D0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UDebrisPositioning*                                  RawMaterialPlacement;                                    // 0x01F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RawMaterialCount;                                        // 0x0200(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bMissionCompleted;                                       // 0x0204(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsFinalBattle;                                          // 0x0205(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4F0L[0x2];                                   // 0x0206(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OptionalTunnelRoomID;                                    // 0x0208(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6UBI[0x4];                                   // 0x020C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SpawnWells(class AProceduralSetup* Setup, const struct FVector& rigLocation, float minDistanceBetween, TArray<struct FVector2D> minMaxDistancesToRig);
		void RefineryDelegate__DelegateSignature(class AFSDRefinery* InRefinery);
		void ReceiveRefinerySpawned(class AFSDRefinery* InRefinery);
		void OnRep_Refinery();
		void OnRefineryStateChanged(ERefineryState InRefineryState);
		struct FVector GetRefinerySpawnLocation(class UClass* refineryClass);
		void AddMissionCriticalItems(class AProceduralSetup* Setup);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ReflectionHitscanComponent
	 * Size -> 0x0058 (FullSize[0x02A0] - InheritedSize[0x0248])
	 */
	class UReflectionHitscanComponent : public UHitscanBaseComponent
	{
	public:
		unsigned char                                              UnknownData_BXYD[0x8];                                   // 0x0248(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTerrainType*                                        PlatformTerrainType;                                     // 0x0250(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPlayImpactSound;                                        // 0x0258(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowImpactOnReflections;                                // 0x0259(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDamageOnReflections;                                    // 0x025A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9LR0[0x1];                                   // 0x025B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StraightenReflectionFactor;                              // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ReflectionCount;                                         // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_384H[0x3C];                                  // 0x0264(0x003C) MISSED OFFSET (PADDING)

	public:
		void Server_RegisterHit_Reflection(const struct FReflectiveHitscanHit& Hit);
		void Server_RegisterHit(const struct FReflectiveHitscanHit& Hit);
		void All_ShowHit(const struct FReflectiveHitscanHit& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RegisterInviteNotificationBlueprintCallProxy
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class URegisterInviteNotificationBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
	{
	public:
		class FScriptMulticastDelegate                             OnInviteReceived;                                        // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInviteAccepted;                                        // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInviteRejected;                                        // 0x0050(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UObject*                                             WorldContextObject;                                      // 0x0060(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M7FB[0x30];                                  // 0x0068(0x0030) MISSED OFFSET (PADDING)

	public:
		class URegisterInviteNotificationBlueprintCallProxy* RegisterInvitiNotification(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RegisterSessionInviteNotificationBlueprintCallProxy
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class URegisterSessionInviteNotificationBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
	{
	public:
		class FScriptMulticastDelegate                             OnSessionUserInviteAccepted;                             // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UObject*                                             WorldContextObject;                                      // 0x0040(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RL0J[0x10];                                  // 0x0048(0x0010) MISSED OFFSET (PADDING)

	public:
		class URegisterSessionInviteNotificationBlueprintCallProxy* RegisterSessionInviteNotification(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RejectInviteBlueprintCallProxy
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class URejectInviteBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
	{
	public:
		class FScriptMulticastDelegate                             OnSuccess;                                               // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailure;                                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UObject*                                             WorldContextObject;                                      // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0V6E[0x38];                                  // 0x0058(0x0038) MISSED OFFSET (PADDING)

	public:
		class URejectInviteBlueprintCallProxy* RejectInvite(class UObject* WorldContextObject, const class FString& ListName, const class FString& UserId);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RepairableComponent
	 * Size -> 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
	 */
	class URepairableComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnFullyRepairedEvent;                                    // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAllResourcesAquiredEvent;                              // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRepairedEvent;                                         // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UGemResourceData*                                    RequiresCarriedResource;                                 // 0x00E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ResourcesRequired;                                       // 0x00E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFullyRepaired;                                         // 0x00EC(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CJSB[0x3];                                   // 0x00ED(0x0003) MISSED OFFSET (PADDING)

	public:
		bool TryRepair(class APlayerCharacter* User);
		void OnRep_ResourcesRequired();
		int32_t GetResourcesRequired();
		void Cheat_Repair();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RepairObjective
	 * Size -> 0x0070 (FullSize[0x01F0] - InheritedSize[0x0180])
	 */
	class URepairObjective : public UObjective
	{
	public:
		int32_t                                                    RepairedObjectives;                                      // 0x0180(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ObjectivesToRepair;                                      // 0x0184(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              RepairObjectiveClass[0x28];                              // 0x0188(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UGemResourceData*                                    RepairObjectiveResource;                                 // 0x01B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDebrisPositioning*                                  Positioning;                                             // 0x01B8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RepairResourcesPerActor;                                 // 0x01C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RepairResourceDistanceFromActor;                         // 0x01C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinRepairObjectiveDistanceToLandingZone;                 // 0x01C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_519E[0x4];                                   // 0x01CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      RepairedObjectivesList;                                  // 0x01D0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9DKW[0x10];                                  // 0x01E0(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnRep_RepairedObjectives();
		void OnRep_ObjectivesToRepair();
		void OnObjectiveRepaired(class URepairableComponent* repairable);
		void AllObjectivesRepaired();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourceBank
	 * Size -> 0x0068 (FullSize[0x0160] - InheritedSize[0x00F8])
	 */
	class UResourceBank : public UUsableComponentBase
	{
	public:
		class FScriptMulticastDelegate                             OnBeginDeposite;                                         // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDepositing;                                            // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndDeposite;                                           // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       OpenForDeposit;                                          // 0x0128(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZV71[0x7];                                   // 0x0129(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFSDGameState*                                       GameState;                                               // 0x0130(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DepositesPerSecond;                                      // 0x0138(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DepositeAmount;                                          // 0x013C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3IN6[0x4];                                   // 0x0140(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       CanGetStrict;                                            // 0x0144(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AddToTeamInventory;                                      // 0x0145(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MFNE[0x2];                                   // 0x0146(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          AudioBeginDepositing;                                    // 0x0148(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          AudioDepositing;                                         // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          AudioEndDepositing;                                      // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ResourceBankEvent__DelegateSignature(class APlayerCharacter* User);
		void All_Depositing(class APlayerCharacter* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RestrictedResourceBank
	 * Size -> 0x0008 (FullSize[0x0168] - InheritedSize[0x0160])
	 */
	class URestrictedResourceBank : public UResourceBank
	{
	public:
		class UResourceData*                                       RequiredResource;                                        // 0x0160(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourceChunk
	 * Size -> 0x0058 (FullSize[0x0290] - InheritedSize[0x0238])
	 */
	class AResourceChunk : public AFSDPhysicsActor
	{
	public:
		float                                                      CollectDuration;                                         // 0x0238(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanBeCollectedNormally;                                  // 0x023C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanBeCollected;                                          // 0x023D(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ORQI[0x2];                                   // 0x023E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USimpleObjectInfoComponent*                          InfoComponent;                                           // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ResourceAmount;                                          // 0x0248(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VZ0T[0x4];                                   // 0x024C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           PickupSound;                                             // 0x0250(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UResourceData*                                       ResourceData;                                            // 0x0258(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class APlayerCharacter*>                            OverlappingPlayers;                                      // 0x0260(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APlayerCharacter>                     CollectedBy;                                             // 0x0270(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3P8G[0x18];                                  // 0x0278(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetCollectOpen();
		void OnRep_CollectedBy();
		class UResourceData* GetResourceData();
		float GetResourceAmount();
		void CalcMovement(float InProgress, const struct FVector& InVector, struct FVector* OutVelocity, struct FVector* OutAngularVelocity);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourceObjective
	 * Size -> 0x0048 (FullSize[0x01C8] - InheritedSize[0x0180])
	 */
	class UResourceObjective : public UResourceBasedObjective
	{
	public:
		class UResourceData*                                       Resource;                                                // 0x0180(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ResourcesRequired;                                       // 0x0188(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ResourcesCollected;                                      // 0x018C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ResourceBuffer;                                          // 0x0190(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RoundToNearest;                                          // 0x0194(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                ObjectivesText;                                          // 0x0198(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                CreditsRewardText;                                       // 0x01B0(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnResourceChanged(class UCappedResource* CappedResource, float Amount);
		void OnRep_ResourcesCollected(float prevAmount);
		float GetRequiredAmount(float missionScaling);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourcePouch
	 * Size -> 0x0028 (FullSize[0x0290] - InheritedSize[0x0268])
	 */
	class AResourcePouch : public ACarriableItem
	{
	public:
		class UCarriableInstantUsable*                             Usable;                                                  // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ImpactGroundSound;                                       // 0x0270(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AAFV[0x18];                                  // 0x0278(0x0018) MISSED OFFSET (PADDING)

	public:
		void ActorWasHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RessuplyPodSpawn
	 * Size -> 0x0000 (FullSize[0x02E0] - InheritedSize[0x02E0])
	 */
	class ARessuplyPodSpawn : public ARessuplyPod
	{
	public:
		void SetController(class AFSDPlayerController* Controller);
		void SetCharacter(class APlayerCharacter* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UnlockReward
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UUnlockReward : public UReward
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UnlockPlanetZoneReward
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UUnlockPlanetZoneReward : public UUnlockReward
	{
	public:
		class UPlanetZone*                                         ZoneToUnlock;                                            // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UnlockMissionTypeReward
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UUnlockMissionTypeReward : public UUnlockReward
	{
	public:
		class UMissionTemplate*                                    MissionToUnlock;                                         // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UnlockComplexityReward
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UUnlockComplexityReward : public UUnlockReward
	{
	public:
		class UMissionTemplate*                                    mission;                                                 // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionComplexity*                                  Complexity;                                              // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UnlockDurationReward
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UUnlockDurationReward : public UUnlockReward
	{
	public:
		class UMissionTemplate*                                    mission;                                                 // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMissionDuration*                                    Duration;                                                // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UnlockDifficultyReward
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UUnlockDifficultyReward : public UUnlockReward
	{
	public:
		class UDifficultySetting*                                  Difficulty;                                              // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourceReward
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UResourceReward : public UReward
	{
	public:
		class UResourceData*                                       Resource;                                                // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Amount;                                                  // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XEQQ[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeeklyResourceReward
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UWeeklyResourceReward : public UReward
	{
	public:
		int32_t                                                    ResourceCount;                                           // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FIRandRange                                         Amount;                                                  // 0x0034(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GK7X[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		TMap<class UResourceData*, float> GetRewards(class AFSDPlayerController* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RetirementReward
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class URetirementReward : public UUnlockReward
	{
	public:
		class UPlayerCharacterID*                                  characterID;                                             // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemBlueprintReward
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UItemBlueprintReward : public UUnlockReward
	{
	public:
		class UItemID*                                             ItemID;                                                  // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SchematicReward
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USchematicReward : public UUnlockReward
	{
	public:
		ESchematicType                                             SchematicType;                                           // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KTML[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USchematic*                                          RewardedSchematic;                                       // 0x0038(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SkinUnlock
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class USkinUnlock : public UUnlockReward
	{
	public:
		class UItemID*                                             OptionalItemID;                                          // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerCharacterID*                                  OptionalCharacterID;                                     // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemSkin*                                           Skin;                                                    // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PermanentItemUpgradeReward
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UPermanentItemUpgradeReward : public UUnlockReward
	{
	public:
		class UClass*                                              Item;                                                    // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemUpgrade*                                        Upgrade;                                                 // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PureTextReward
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UPureTextReward : public UUnlockReward
	{
	public:
		class FText                                                Text;                                                    // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanityReward
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UVanityReward : public UUnlockReward
	{
	public:
		class UVanityItem*                                         VanityItem;                                              // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerCharacterID*                                  OptionalCharacterID;                                     // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseContextAsTargetCharacter;                             // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PISV[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanityCollectionReward
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UVanityCollectionReward : public UUnlockReward
	{
	public:
		TArray<class UVanityItem*>                                 VanityItems;                                             // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UPlayerCharacterID*                                  OptionalCharacterID;                                     // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseContextAsTargetCharacter;                             // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_STDN[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VictoryPoseReward
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UVictoryPoseReward : public UUnlockReward
	{
	public:
		class UVictoryPose*                                        VictoryPose;                                             // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerCharacterID*                                  OptionalCharacterID;                                     // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxePartReward
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UPickaxePartReward : public UUnlockReward
	{
	public:
		class UPickaxePart*                                        PicaxePart;                                              // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxeSetReward
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UPickaxeSetReward : public UUnlockReward
	{
	public:
		class UPickaxePart*                                        BladeFront;                                              // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPickaxePart*                                        OptionalBladeBack;                                       // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPickaxePart*                                        Pommel;                                                  // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPickaxePart*                                        Handle;                                                  // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPickaxePart*                                        Shaft;                                                   // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPickaxePart*                                        Head;                                                    // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPickaxePart*                                        Material;                                                // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeasonTokenReward
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USeasonTokenReward : public UReward
	{
	public:
		int32_t                                                    Amount;                                                  // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0XA1[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeasonXPReward
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USeasonXPReward : public UReward
	{
	public:
		int32_t                                                    Amount;                                                  // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IEKW[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RewardsSubSystem
	 * Size -> 0x01A0 (FullSize[0x01D0] - InheritedSize[0x0030])
	 */
	class URewardsSubSystem : public UGameInstanceSubsystem
	{
	public:
		struct FPendingRewards                                     PendingMissionRewards;                                   // 0x0030(0x0190) Transient, NativeAccessSpecifierPublic
		TArray<struct FClaimableRewardEntry>                       PendingPromotionRewards;                                 // 0x01C0(0x0010) BlueprintVisible, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		bool ShouldPendingRewardsBeShown();
		bool ShouldPendingRewardsBeGiven();
		bool Receive_GetPendingRewards(class UObject* WorldContext, struct FPendingRewardsStats* OutStats, struct FPendingRewards* OutRewards);
		bool HasPendingRewards();
		bool GetPendingRewards(struct FPendingRewardsStats* OutStats, struct FPendingRewards* OutRewards);
		void ClearPendingRewards();
		void ApplyPendingRewards(class AFSDPlayerController* Controller);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RewardWidget
	 * Size -> 0x0008 (FullSize[0x0268] - InheritedSize[0x0260])
	 */
	class URewardWidget : public UUserWidget
	{
	public:
		class UReward*                                             Reward;                                                  // 0x0260(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void PlayReceiveAnim();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RichTextInputDecorator
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class URichTextInputDecorator : public UCustomRichTextDecorator
	{
	public:
		class UClass*                                              DecoratorWidgetClass;                                    // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RichTextInputWidget
	 * Size -> 0x02F0 (FullSize[0x0550] - InheritedSize[0x0260])
	 */
	class URichTextInputWidget : public UUserWidget
	{
	public:
		class FName                                                InputName;                                               // 0x0260(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, class FString>                           MetaData;                                                // 0x0268(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		class FText                                                Content;                                                 // 0x02B8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		struct FTextBlockStyle                                     TextStyle;                                               // 0x02D0(0x0270) Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		EFSDInputSource                                            InputSource;                                             // 0x0540(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F9MI[0x7];                                   // 0x0541(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class URichTextBlock*                                      RichTextBlock;                                           // 0x0548(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ScaleTextBlockToHeight(class UTextBlock* InTextBlock, float LineHeight);
		void ReceiveInputUnknown();
		void ReceiveInputDetails(const struct FInputDisplay& InDisplay);
		void OnInputSourceChanged(EFSDInputSource InSource);
		void OnCustomKeyBindsChanged();
		struct FVector2D MeasureTextSize(const class FText& Text, float Scale);
		float GetLineHeight();
		void ApplyTextStyle(class UTextBlock* InTextBlock, const struct FTextBlockStyle& InTextStyle);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RichTextStylable
	 * Size -> 0x00D0 (FullSize[0x0748] - InheritedSize[0x0678])
	 */
	class URichTextStylable : public URichTextBlock
	{
	public:
		struct FSlateFontInfo                                      Font;                                                    // 0x0678(0x0058) Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSlateColor                                         FontColor;                                               // 0x06D0(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		TMap<class FName, struct FTextStyleOverride>               Styles;                                                  // 0x06F8(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RichTextSizable
	 * Size -> 0x0038 (FullSize[0x06B0] - InheritedSize[0x0678])
	 */
	class URichTextSizable : public URichTextBlock
	{
	public:
		bool                                                       bOverrideDefaultSize;                                    // 0x0678(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6JB7[0x3];                                   // 0x0679(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OverrideDefaultFontSize;                                 // 0x067C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOverrideDefaultColor;                                   // 0x0680(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M7RM[0x7];                                   // 0x0681(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateColor                                         OverrideDefaultFontColor;                                // 0x0688(0x0028) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void SetDefaultFontSize(int32_t inFontSize);
		void SetDefaultFontColor(const struct FLinearColor& InColor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDRichTextFunctionlibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFSDRichTextFunctionlibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SplitRichText(const struct FRichTextParseResult& Parser, int32_t SplitIndex, bool bKeepLeftFormatting, bool bKeepRightFormatting, class FText* OutLeftText, class FText* OutRightText);
		struct FRichTextParseResult ParseRichText(const class FText& InText);
		class FText MidRichText(const struct FRichTextParseResult& Parser, int32_t StartIndex, int32_t Count, bool bKeepFormatting);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RivalBomb
	 * Size -> 0x0068 (FullSize[0x03D0] - InheritedSize[0x0368])
	 */
	class ARivalBomb : public AGameEvent
	{
	public:
		TArray<class ARivalBombNode*>                              ActiveNodeInstances;                                     // 0x0368(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      NodeHackTime;                                            // 0x0378(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NumNodesToHack;                                          // 0x037C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDataCellPickedUp;                                       // 0x0380(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QRSI[0x7];                                   // 0x0381(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DataCell;                                                // 0x0388(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3KKY[0x8];                                   // 0x0390(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              RivalBomb;                                               // 0x0398(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDebrisPositioning*                                  NodePositioning;                                         // 0x03A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         NodeCostCurve;                                           // 0x03A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JSUY[0x20];                                  // 0x03B0(0x0020) MISSED OFFSET (PADDING)

	public:
		void UpdateNodesOnStart();
		void SpawnDataCell();
		void ReceiveDataCellPickedUp();
		void OnRep_DataCellPickedUp();
		void OnMatchStarted();
		void OnDataCellPickedUp(bool Attached, const struct FVector& PrevScale);
		void DeactivateAllNodes(bool failed);
		void ActivateNewNode();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RivalBombNode
	 * Size -> 0x0058 (FullSize[0x0278] - InheritedSize[0x0220])
	 */
	class ARivalBombNode : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnStateChanged;                                          // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              RivalBombCable;                                          // 0x0230(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHackingUsableComponent*                             HackingUsable;                                           // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ERivalBombNodeState                                        State;                                                   // 0x0240(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_46S2[0x7];                                   // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASplineCableActor*                                   BombCable;                                               // 0x0248(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ARivalBomb*                                          RivalBomb;                                               // 0x0250(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RemainingHackTime;                                       // 0x0258(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HackStartTime;                                           // 0x025C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BombIndex;                                               // 0x0260(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DGHA[0x14];                                  // 0x0264(0x0014) MISSED OFFSET (PADDING)

	public:
		void StateChangedDelegate__DelegateSignature(class ARivalBombNode* InBombNode, ERivalBombNodeState InState);
		void ReceiveStateUpdated();
		void OnRep_State();
		void OnRep_RemainingHackTime();
		void OnNodeHackedByUser(class APlayerCharacter* Player);
		void OnHackTimerTick();
		float GetRemainingTimePct();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RivalBombNodeAniminstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class URivalBombNodeAniminstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_ZD8T[0x4];                                   // 0x02B8(0x0004) Fix Super Size
		struct FRotator                                            Rotation;                                                // 0x02BC(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      StartOffset;                                             // 0x02C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y018[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetRivalBombNodeState(ERivalBombNodeState NewState);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RockCrackerPod
	 * Size -> 0x0058 (FullSize[0x0338] - InheritedSize[0x02E0])
	 */
	class ARockCrackerPod : public ARessuplyPod
	{
	public:
		class UFriendlyHealthComponent*                            Health;                                                  // 0x02E0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UContinuousUsableComponent*                          RepairUsable;                                            // 0x02E8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRockCrackerStateChanged;                               // 0x02F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      DrainPerSecond;                                          // 0x0300(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ERockCrackerstate                                          PodState;                                                // 0x0304(0x0001) Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IC5S[0x3];                                   // 0x0305(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ARockCrackerPod*                                     EndPointDrill;                                           // 0x0308(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    InDangerDialogue;                                        // 0x0310(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       LightsAreGreen;                                          // 0x0318(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ETF2[0x3];                                   // 0x0319(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DrainImmunityTime;                                       // 0x031C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      YellowLightsThreshold;                                   // 0x0320(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      HealPerTick;                                             // 0x0324(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_F7LS[0x10];                                  // 0x0328(0x0010) MISSED OFFSET (PADDING)

	public:
		void SwitchYellowLights(bool isGreen);
		void SetPodState(ERockCrackerstate PodState);
		void OnRepairTick(class APlayerCharacter* User, EInputKeys Key);
		void OnRep_PodState(ERockCrackerstate oldState);
		void OnRep_LightsAreGreen();
		void OnPodDamaged(float damageInfliced, const struct FDamageData& DamageData, bool anyHealthLost);
		void OnExitState(ERockCrackerstate PodState);
		void OnEventStarted();
		void OnEventEnded(bool wasSuccess);
		void OnEnterState(ERockCrackerstate PodState);
		bool IsBroken();
		ERockCrackerstate GetPodState();
		void All_SwitchYellowLights(bool isGreen);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RockCrackerDrill
	 * Size -> 0x0010 (FullSize[0x0250] - InheritedSize[0x0240])
	 */
	class ARockCrackerDrill : public AFuelLineEndPoint
	{
	public:
		class USingleUsableComponent*                              ConstructUsable;                                         // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SGKZ[0x8];                                   // 0x0248(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetIsDrilling(bool isDrilling);
		bool GetIsDrilling();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RockCrackedAnimInstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class URockCrackedAnimInstance : public UAnimInstance
	{
	public:
		class ARockCrackerPod*                                     Pod;                                                     // 0x02B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ERockCrackerstate                                          PodState;                                                // 0x02C0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsActive;                                                // 0x02C1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsBroken;                                                // 0x02C2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QNX8[0xD];                                   // 0x02C3(0x000D) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DrillAnimInstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class UDrillAnimInstance : public UAnimInstance
	{
	public:
		class ARockCrackerDrill*                                   Drill;                                                   // 0x02B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BuildProgress;                                           // 0x02C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Drilling;                                                // 0x02C4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UXHS[0xB];                                   // 0x02C5(0x000B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RockEnemiesEvent
	 * Size -> 0x0080 (FullSize[0x03E8] - InheritedSize[0x0368])
	 */
	class ARockEnemiesEvent : public AGameEvent
	{
	public:
		class UClass*                                              PowerUpClass;                                            // 0x0368(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1PLY[0x8];                                   // 0x0370(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PowerUpGenerationTime;                                   // 0x0378(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4HB4[0x4];                                   // 0x037C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            KillAmountPerPlayer;                                     // 0x0380(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            MaxEnemyCountPerPlayer;                                  // 0x0390(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class APawn*>                                       SpawnedRockEnemies;                                      // 0x03A0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x03B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     MuzzleEffect;                                            // 0x03B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PowerUpsPerGeneration;                                   // 0x03C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    GruntPointsAward;                                        // 0x03C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TankPointsAward;                                         // 0x03C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DQKP[0x14];                                  // 0x03CC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnemyGroupDescriptor*                               RockEnemies;                                             // 0x03E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void StopPowerupGeneration();
		void StartPowerupGeneration();
		void SpawnRockEnemies(float Difficulty, TArray<struct FVector> Locations);
		void ShowFireEffects(int32_t selectedBone);
		void RockEnemySpawned(class APawn* spawnedEnemy);
		void RockEnemyDied(class UHealthComponentBase* Health);
		void OnShoot();
		void EnemySpawnedAfterComplete(class APawn* spawnedEnemy);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RoomCarverComponent
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class URoomCarverComponent : public USceneComponent
	{
	public:
		class URoomGenerator*                                      RoomGenerator;                                           // 0x01F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RoomDecorationObject
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class URoomDecorationObject : public UDataAsset
	{
	public:
		class UDebrisPositioning*                                  Positioning;                                             // 0x0030(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              Actor;                                                   // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RoomFeature
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class URoomFeature : public UObject
	{
	public:
		TArray<class URoomFeature*>                                RoomFeatures;                                            // 0x0028(0x0010) Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I9BI[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandomSelector
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class URandomSelector : public URoomFeature
	{
	public:
		int32_t                                                    Min;                                                     // 0x0040(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Max;                                                     // 0x0044(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FloodFillLine
	 * Size -> 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
	 */
	class UFloodFillLine : public URoomFeature
	{
	public:
		class UFloodFillSettings*                                  WallNoiseOverride;                                       // 0x0040(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFloodFillSettings*                                  CeilingNoiseOverride;                                    // 0x0048(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFloodFillSettings*                                  FloorNoiseOverride;                                      // 0x0050(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UseDetailNoise;                                          // 0x0058(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OO4R[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FRoomLinePoint>                              Points;                                                  // 0x0060(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FloodFillPillar
	 * Size -> 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
	 */
	class UFloodFillPillar : public URoomFeature
	{
	public:
		class UFloodFillSettings*                                  NoiseOverride;                                           // 0x0040(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FRandLinePoint>                              Points;                                                  // 0x0048(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		struct FRandRange                                          RangeScale;                                              // 0x0058(0x0008) Edit, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRandRange                                          NoiseRangeScale;                                         // 0x0060(0x0008) Edit, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRandRange                                          EndcapScale;                                             // 0x0068(0x0008) Edit, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FloodFillProceduralPillar
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class UFloodFillProceduralPillar : public URoomFeature
	{
	public:
		TArray<struct FVector>                                     Points;                                                  // 0x0040(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		class UPillarSettings*                                     PillarSettings;                                          // 0x0050(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FloodFillBox
	 * Size -> 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
	 */
	class UFloodFillBox : public URoomFeature
	{
	public:
		class UFloodFillSettings*                                  Noise;                                                   // 0x0040(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Position;                                                // 0x0048(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Extends;                                                 // 0x0054(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            Rotation;                                                // 0x0060(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       IsCarver;                                                // 0x006C(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UXV1[0x3];                                   // 0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NoiseRange;                                              // 0x0070(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AGDO[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EntranceFeature
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UEntranceFeature : public URoomFeature
	{
	public:
		struct FVector                                             Location;                                                // 0x0040(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            Direction;                                               // 0x004C(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		ECaveEntranceType                                          EntranceType;                                            // 0x0058(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECaveEntrancePriority                                      Priority;                                                // 0x0059(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EQI2[0x6];                                   // 0x005A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourceFeature
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UResourceFeature : public URoomFeature
	{
	public:
		struct FVector                                             Location;                                                // 0x0040(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QRDM[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UResourceData*                                       Resource;                                                // 0x0050(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BaseAmount;                                              // 0x0058(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3ODJ[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawnActorFeature
	 * Size -> 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
	 */
	class USpawnActorFeature : public URoomFeature
	{
	public:
		struct FVector                                             Location;                                                // 0x0040(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZE09[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ActorToSpawn;                                            // 0x0050(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             AdjustmentDirection;                                     // 0x0058(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EItemAdjustmentType                                        Adjustment;                                              // 0x0064(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A8DL[0x3];                                   // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ScaleMin;                                                // 0x0068(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             ScaleMax;                                                // 0x0074(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            RotationDelta;                                           // 0x0080(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8UPV[0x4];                                   // 0x008C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawnTriggerFeature
	 * Size -> 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
	 */
	class USpawnTriggerFeature : public URoomFeature
	{
	public:
		class UClass*                                              TriggerClass;                                            // 0x0040(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TG99[0x8];                                   // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          Transform;                                               // 0x0050(0x0030) Edit, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FName                                                Message;                                                 // 0x0080(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4URH[0x8];                                   // 0x0088(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawnTrigger
	 * Size -> 0x0008 (FullSize[0x0228] - InheritedSize[0x0220])
	 */
	class ASpawnTrigger : public AActor
	{
	public:
		class FName                                                Message;                                                 // 0x0220(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SubRoomFeature
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class USubRoomFeature : public URoomFeature
	{
	public:
		class URoomGenerator*                                      RoomGenerator;                                           // 0x0040(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Location;                                                // 0x0048(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            Rotation;                                                // 0x0054(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      Scale;                                                   // 0x0060(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_92K5[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandomSubRoomFeature
	 * Size -> 0x0070 (FullSize[0x00B0] - InheritedSize[0x0040])
	 */
	class URandomSubRoomFeature : public URoomFeature
	{
	public:
		class URoomGeneratorGroup*                                 RoomGroup;                                               // 0x0040(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   tagQuery;                                                // 0x0048(0x0048) Edit, EditConst, Protected, NativeAccessSpecifierProtected
		int32_t                                                    Layer;                                                   // 0x0090(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Location;                                                // 0x0094(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            Rotation;                                                // 0x00A0(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      Scale;                                                   // 0x00AC(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DropPodCalldownLocationFeature
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class UDropPodCalldownLocationFeature : public URoomFeature
	{
	public:
		struct FVector                                             Location;                                                // 0x0040(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5K6Y[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CalldownClass;                                           // 0x0050(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RoomGeneratorBase
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class URoomGeneratorBase : public UDataAsset
	{
	public:
		float                                                      Bounds;                                                  // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CanOnlyBeUsedOnce;                                       // 0x0034(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ERoomMirroringSupport                                      MirrorSupport;                                           // 0x0035(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O29T[0x2];                                   // 0x0036(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               RoomTags;                                                // 0x0038(0x0020) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RoomGenerator
	 * Size -> 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
	 */
	class URoomGenerator : public URoomGeneratorBase
	{
	public:
		TArray<class URoomFeature*>                                RoomFeatures;                                            // 0x0058(0x0010) Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		TArray<class URoomFeature*> GetAllRoomFeatures();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RoomGeneratorGroup
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class URoomGeneratorGroup : public UDataAsset
	{
	public:
		TArray<class URoomGenerator*>                              Rooms;                                                   // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		class URoomGenerator* GetRandomRoomWithTags(struct FRoomGeneratorGroupInstance* groupInstance, const struct FGameplayTagQuery& queury, struct FRandomStream* RandomStream);
		class URoomGenerator* GetRandomRoom(struct FRandomStream* RandomStream);
		struct FRoomGeneratorGroupInstance CreateGroupInstance();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RotateToFace
	 * Size -> 0x0028 (FullSize[0x0220] - InheritedSize[0x01F8])
	 */
	class URotateToFace : public USceneComponent
	{
	public:
		struct FVector                                             TargetOffset;                                            // 0x01F8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_43W9[0x4];                                   // 0x0204(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              Target;                                                  // 0x0208(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Face;                                                    // 0x0210(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DFEI[0xC];                                   // 0x0214(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetTarget(class AActor* Target);
		void SetShouldFaceAway(bool FaceAway);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RotatingSceneComponent
	 * Size -> 0x0028 (FullSize[0x0220] - InheritedSize[0x01F8])
	 */
	class URotatingSceneComponent : public USceneComponent
	{
	public:
		struct FRotator                                            DeltaRotaion;                                            // 0x01F8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      BobbingSpeed;                                            // 0x0204(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BobbingSize;                                             // 0x0208(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S689[0x4];                                   // 0x020C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       Sweep;                                                   // 0x0210(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ForceParentUp;                                           // 0x0211(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETeleportType                                              TeleportMode;                                            // 0x0212(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E1L8[0xD];                                   // 0x0213(0x000D) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SalvageObjective
	 * Size -> 0x00F0 (FullSize[0x0270] - InheritedSize[0x0180])
	 */
	class USalvageObjective : public UObjective
	{
	public:
		int32_t                                                    SalvageActorCount;                                       // 0x0180(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q8I0[0x4];                                   // 0x0184(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGemResourceData*                                    LegResource;                                             // 0x0188(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LegCountPerActor;                                        // 0x0190(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LegDistanceToActor;                                      // 0x0194(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnDisableLegSpheres;                                     // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected
		class UDebrisPositioning*                                  Positioning;                                             // 0x01A8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              Debris[0x10];                                            // 0x01B0(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              SalvageActor[0x28];                                      // 0x01C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              DamagedPodClass[0x28];                                   // 0x01E8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UDebrisPositioning*                                  DamagedPodPositioning;                                   // 0x0210(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamagedPodMinDistanceToDropZone;                         // 0x0218(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EYA3[0x4];                                   // 0x021C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ADropPod*                                            DamagedPod;                                              // 0x0220(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ActorsToSalvage;                                         // 0x0228(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ActorsSalvaged;                                          // 0x022C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RepairPoints;                                            // 0x0230(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PointsRepaired;                                          // 0x0234(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinSalvageActorDistanceToLandingZone;                    // 0x0238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasMuleReturnedToPod;                                    // 0x023C(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QVBI[0x3];                                   // 0x023D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AMiniMule*>                                   AllSalvageActors;                                        // 0x0240(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class AMiniMule*>                                   SalvagedActors;                                          // 0x0250(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BEI8[0x10];                                  // 0x0260(0x0010) MISSED OFFSET (PADDING)

	public:
		void PointRepaired();
		void OnRep_PointsRepaired();
		void OnRep_ActorsToSalvage(int32_t prevAmount);
		void OnRep_ActorsSalvaged(int32_t prevAmount);
		void OnActorRepaired(class URepairableComponent* repairable);
		struct FTransform FindRepairPointLocation(class AProceduralSetup* Setup, const struct FVector& podLocation, float Radius, float maxVerticalDistance, class UDebrisPositioning* DebrisPositioning, class UClass* terrainPlacement, TArray<struct FVector> locationsToAvoid, class UCurveFloat* AvoidCostCurve);
		void AllActorsSalvaged();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SalvageFuelPod
	 * Size -> 0x0000 (FullSize[0x02E0] - InheritedSize[0x02E0])
	 */
	class ASalvageFuelPod : public ARessuplyPod
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SavableObject
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USavableObject : public UObject
	{
	public:
		bool                                                       EnableDangerousSaveGameIDEditing;                        // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9KPP[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               SavegameID;                                              // 0x002C(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_26UL[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SavableActor
	 * Size -> 0x0018 (FullSize[0x0238] - InheritedSize[0x0220])
	 */
	class ASavableActor : public AActor
	{
	public:
		bool                                                       EnableDangerousSaveGameIDEditing;                        // 0x0220(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q1SX[0x3];                                   // 0x0221(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               SavegameID;                                              // 0x0224(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GKWY[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SaveGameIDInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USaveGameIDInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RefundableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class URefundableInterface : public USaveGameIDInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemIDInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UItemIDInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SaveGameLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USaveGameLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool TryGetSaveGameSnapShot(class UObject* WorldContext, const class FString& Filename, int32_t userIdx, struct FSaveGameSnapShot* OutSnapShot);
		TMap<class FString, struct FDateTime> GetUserSaveGameSlots(const class FString& UserId);
		TMap<class FString, struct FDateTime> GetAllSaveGameSlots();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SaveGameSettings
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class USaveGameSettings : public UDataAsset
	{
	public:
		TMap<struct FGuid, class UVanityItem*>                     CampaignVanityFixupList;                                 // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SaveGameStateComponent
	 * Size -> 0x0150 (FullSize[0x0200] - InheritedSize[0x00B0])
	 */
	class USaveGameStateComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnEquippedPerksChanged;                                  // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemUpgradeCrafted;                                    // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemUpgradeUnequipped;                                 // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerProgressChanged;                                 // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadoutChangedEvent;                                   // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterStatsChanged;                                 // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCreditsChanged;                                        // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    Credits;                                                 // 0x0120(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LE0G[0x4];                                   // 0x0124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSaveGameStatePerkItem>                      EquippedPerks;                                           // 0x0128(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UVictoryPose*                                        VictoryPose;                                             // 0x0138(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FItemLoadout                                        EquippedLoadout;                                         // 0x0140(0x0084) Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FActiveCampaingMission                              ActiveCampaignMission;                                   // 0x01C4(0x000C) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8TB0[0x8];                                   // 0x01D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FItemUpgradeSelection>                       ItemUpgradeSelections;                                   // 0x01D8(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FPlayerProgress                                     PlayerProgress;                                          // 0x01E8(0x0008) BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FCharacterProgress>                          CharacterStats;                                          // 0x01F0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected

	public:
		void SetCampaign();
		void Server_SetVictoryPose(class UVictoryPose* pose);
		void Server_SetPlayerProgress(const struct FPlayerProgress& Progress);
		void Server_SetLoadout(const struct FItemLoadout& Loadout, TArray<struct FItemUpgradeSelection> weaponLoadouts);
		void Server_SetEquippedPerks(TArray<struct FSaveGameStatePerkItem> perks);
		void Server_SetCredits(int32_t Amount);
		void Server_SetCharacterStats(TArray<struct FCharacterProgress> Stats);
		void Server_SetActiveCampaignMission(const struct FActiveCampaingMission& Data);
		void RefreshLoadoutFromSave(class UPlayerCharacterID* characterID);
		void OnRep_PlayerProgress();
		void OnRep_ItemUpgradeSelections();
		void OnRep_Credits();
		void OnRep_CharacterStats();
		void OnRep_ActiveCampaignMission();
		void ItemUpgradeEquipSignature__DelegateSignature(class UClass* itemClass, class UItemUpgrade* Upgrade);
		void ItemUpgradeCraftSignature__DelegateSignature(class UItemUpgrade* Upgrade);
		bool IsActiveCampaignMission(class UGeneratedMission* mission);
		struct FCharacterProgress GetCharacterStat(class UPlayerCharacterID* characterID);
		void CreditsChangedDelegate__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SchematicRarity
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USchematicRarity : public UDataAsset
	{
	public:
		float                                                      Rarity;                                                  // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JDQN[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Schematic
	 * Size -> 0x00B0 (FullSize[0x0108] - InheritedSize[0x0058])
	 */
	class USchematic : public USavableDataAsset
	{
	public:
		class FScriptMulticastDelegate                             OnSchematicAddedToInventory;                             // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSchematicReset;                                        // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSchematicBuilt;                                        // 0x0078(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USchematicCategory*                                  Category;                                                // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USchematicPricingTier*                               PricingTier;                                             // 0x0090(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USchematicRarity*                                    Rarity;                                                  // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerCharacterID*                                  UsedByCharacter;                                         // 0x00A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USchematicItem*                                      Item;                                                    // 0x00A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class UResourceData*, int32_t>                        CraftingCost;                                            // 0x00B0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected
		bool                                                       CostIsLocked;                                            // 0x0100(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3SGP[0x7];                                   // 0x0101(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetCraftingMaterialCost();
		void SetCostLocked(bool IsLocked);
		void SchematicDelegate__DelegateSignature(class USchematic* Schematic);
		void ResetGivenReward(class UFSDSaveGame* SaveGame);
		void RemoveSchematicFromPlayerInventory(class UObject* WorldContext);
		void GiveRewardForFree(class UFSDSaveGame* SaveGame);
		class FText GetTitle();
		ESchematicState GetSchematicState(class UObject* WorldContext);
		class USchematicItem* GetSchematicItem();
		TMap<class UResourceData*, int32_t> GetResourceCost();
		struct FColor GetIconTint();
		class UTexture* GetIcon(class UObject* WorldContextObject);
		class FText GetDescription();
		bool CanAffordSchematic(class UObject* WorldContext);
		void BuildSchematic(class UObject* WorldContext);
		void AddSchematicToPlayerInventory(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SchematicBankBase
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USchematicBankBase : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_8W3Z[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SchematicBank
	 * Size -> 0x0050 (FullSize[0x0088] - InheritedSize[0x0038])
	 */
	class USchematicBank : public USchematicBankBase
	{
	public:
		unsigned char                                              Schematics[0x50];                                        // 0x0038(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		void AddSchematic(class USchematic* Schematic);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SchematicBankInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USchematicBankInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SchematicCategory
	 * Size -> 0x00A0 (FullSize[0x00F8] - InheritedSize[0x0058])
	 */
	class USchematicCategory : public USavableDataAsset
	{
	public:
		class FText                                                CategoryName;                                            // 0x0058(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		unsigned char                                              FrameTexture[0x28];                                      // 0x0070(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FLinearColor                                        FrameTint;                                               // 0x0098(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        BackgroundTint;                                          // 0x00A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESchematicType                                             SchematicType;                                           // 0x00B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NR7T[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ShoutForging[0x28];                                      // 0x00C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UEventRewardType*                                    RewardType;                                              // 0x00E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SortOrder;                                               // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QRMX[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SchematicBlueprintLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USchematicBlueprintLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void PriceSchematics();
		void PriceAllSchematics(bool lockPrices);
		void LockSchematics();
		bool HasAnyUnlockableSchematics(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		class USchematicCategory* FindItemUpgradeSchematicCategory(class UItemUpgrade* Upgrade);
		void AddSkinSchematicCollectionToSettings(class UItemSkinSchematicCollection* Collection);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SchematicItem
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USchematicItem : public UObject
	{
	public:
		class FText GetTitle();
		struct FColor GetIconTint();
		class UTexture* GetIcon(class UObject* WorldContextObject);
		class FText GetDescription();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OverclockShematicItem
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UOverclockShematicItem : public USchematicItem
	{
	public:
		class UItemID*                                             OwningItem;                                              // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemUpgrade*                                        Overclock;                                               // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UUpgradableGearComponent* GetOwningGearComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanitySchematicItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UVanitySchematicItem : public USchematicItem
	{
	public:
		class UVanityItem*                                         Item;                                                    // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UVanityItem* GetVanityItem();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VictoryPoseSchematicItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UVictoryPoseSchematicItem : public USchematicItem
	{
	public:
		class UVictoryPose*                                        VictoryPose;                                             // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SkinSchematicItem
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USkinSchematicItem : public USchematicItem
	{
	public:
		class UItemID*                                             ItemID;                                                  // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemSkin*                                           Skin;                                                    // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ResourceSchematicItem
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UResourceSchematicItem : public USchematicItem
	{
	public:
		int32_t                                                    Credits;                                                 // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SKHH[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UResourceData*                                       Resource;                                                // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ResourceAmount;                                          // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F431[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BlankSchematicItem
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UBlankSchematicItem : public USchematicItem
	{
	public:
		class FText                                                Title;                                                   // 0x0028(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class FText                                                Description;                                             // 0x0040(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          Icon;                                                    // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SchematicSettings
	 * Size -> 0x0368 (FullSize[0x0398] - InheritedSize[0x0030])
	 */
	class USchematicSettings : public UDataAsset
	{
	public:
		class UDataTable*                                          PricingTable;                                            // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USchematic*                                          BlankSchematic;                                          // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              SchematicBanks[0x50];                                    // 0x0040(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              OverclockBanks[0x50];                                    // 0x0090(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              SkinSchematicCollections[0x50];                          // 0x00E0(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              VanitySchematicBanks[0x50];                              // 0x0130(0x0050) UNKNOWN PROPERTY: SetProperty
		TMap<ESchematicType, struct FSchematicType>                SchematicTypes;                                          // 0x0180(0x0050) Edit, NativeAccessSpecifierPublic
		class USchematicBank*                                      EndlessSchematics;                                       // 0x01D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              Categories[0x50];                                        // 0x01D8(0x0050) UNKNOWN PROPERTY: SetProperty
		TArray<class USchematicCategory*>                          OverclockCategories;                                     // 0x0228(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class USchematicCategory*>                          VanityCategories;                                        // 0x0238(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
		TArray<class USchematicCategory*>                          EndlessCategories;                                       // 0x0248(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		class USchematicPricingTier*                               OverclockPricingTier;                                    // 0x0258(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class USchematicPricingTier*>                       VanityPricingTiers;                                      // 0x0260(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class USchematicRarity*>                            VanityRarity;                                            // 0x0270(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class USchematicRarity*>                            OverclockRarity;                                         // 0x0280(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class USchematicRarity*>                            EndlessRarity;                                           // 0x0290(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class USchematicCategory*                                  VanityCatHeadWear;                                       // 0x02A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USchematicCategory*                                  VanityCatMoustache;                                      // 0x02A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USchematicCategory*                                  VanityCatBeard;                                          // 0x02B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USchematicCategory*                                  VanityCatArmor;                                          // 0x02B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USchematicCategory*                                  VanityCatEyebrow;                                        // 0x02C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USchematicCategory*                                  VanityCatHairColor;                                      // 0x02C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USchematicCategory*                                  VanityCatSideburn;                                       // 0x02D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USchematicCategory*                                  VanityCatSkinColor;                                      // 0x02D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USchematicCategory*                                  VanityCatVictoryPose;                                    // 0x02E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USchematicCategory*                                  WeaponPaintJob;                                          // 0x02E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          SchematicGATable;                                        // 0x02F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<struct FGuid, class USchematic*>                      AllSchematicsMap;                                        // 0x02F8(0x0050) Edit, Transient, EditConst, Protected, NativeAccessSpecifierProtected
		unsigned char                                              AllSchematics[0x50];                                     // 0x0348(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		bool ValidateVanitySchematics();
		struct FSchematicType GetSchematicTypeData(ESchematicType InType);
		void GetSchematics();
		class UOverclockBank* GetOverclocksForItem(class UItemID* Item);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ForginSettings
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UForginSettings : public UDataAsset
	{
	public:
		int32_t                                                    XPRequiredPerLevel;                                      // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XY0L[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<ESchematicType>                                     MasteryRewardCycle;                                      // 0x0038(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeamlessTravelEventActivator
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class USeamlessTravelEventActivator : public UActorComponent
	{
	public:
		class USeamlessTravelEventKey*                             EventKey;                                                // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeamlessTravelEventKey
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USeamlessTravelEventKey : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeamlessTravelStorage
	 * Size -> 0x01A0 (FullSize[0x01D0] - InheritedSize[0x0030])
	 */
	class USeamlessTravelStorage : public UGameInstanceSubsystem
	{
	public:
		class UDifficultySetting*                                  ChosenDifficulty;                                        // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UPlayer*, bool>                                 PlayerShouldStartInMedbay;                               // 0x0038(0x0050) Transient, NativeAccessSpecifierPublic
		TMap<class UResourceData*, float>                          Resources;                                               // 0x0088(0x0050) Transient, NativeAccessSpecifierPublic
		float                                                      MissionTime;                                             // 0x00D8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WFDT[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, float>                                   StoredFloatValues;                                       // 0x00E0(0x0050) Transient, NativeAccessSpecifierPublic
		TMap<class FName, int32_t>                                 StoredIntValues;                                         // 0x0130(0x0050) Transient, NativeAccessSpecifierPublic
		unsigned char                                              EventKeys[0x50];                                         // 0x0180(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		void ClearGameStateSeamlessTravelStorage();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Season
	 * Size -> 0x0200 (FullSize[0x0258] - InheritedSize[0x0058])
	 */
	class USeason : public USavableDataAsset
	{
	public:
		class FText                                                SeasonName;                                              // 0x0058(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		int32_t                                                    SeasonNumber;                                            // 0x0070(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MDI1[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              SeasonIcon[0x28];                                        // 0x0078(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		TArray<struct FSeasonLevel>                                Levels;                                                  // 0x00A0(0x0010) Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FSeasonLevel                                        RewardAfterAllLevels;                                    // 0x00B0(0x0010) Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<struct FUnassignedReward>                           UnassignedRewards;                                       // 0x00C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UTreeOfVanity*                                       TreeOfVanity;                                            // 0x00D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGameDLC*                                            SeasonDLC;                                               // 0x00D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  SpawnChanceByMissionLength;                              // 0x00E0(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  MinorSpawnChanceByMissionLenght;                         // 0x0168(0x0088) Edit, NativeAccessSpecifierPublic
		TArray<struct FSeasonalEventEntry>                         SeasonalEvents;                                          // 0x01F0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSeasonalEventEntry>                         MinorSeasonalEvents;                                     // 0x0200(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSeasonalEventEntryChance>                   SpawnChanceSeasonalEvents;                               // 0x0210(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    NumberOfScripChallenges;                                 // 0x0220(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LBD1[0x4];                                   // 0x0224(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMissionStat*>                                ScripChallenges;                                         // 0x0228(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FWaveEntry>                                  SeasonSpecificWaves;                                     // 0x0238(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      SeasonWaveInMissionChance;                               // 0x0248(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HAH5[0x4];                                   // 0x024C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMissionWarning*                                     SeasonWarning;                                           // 0x0250(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void AddUnassignedReward(int32_t Index, class UReward* Reward);
		void AddLevel(int32_t Index, class UReward* Reward, class UReward* specialReward);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeasonChallenge
	 * Size -> 0x00C0 (FullSize[0x0118] - InheritedSize[0x0058])
	 */
	class USeasonChallenge : public USavableDataAsset
	{
	public:
		class FText                                                ChallengeText;                                           // 0x0058(0x0018) Edit, NativeAccessSpecifierPublic
		unsigned char                                              Icon[0x28];                                              // 0x0070(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              IconOutlined[0x28];                                      // 0x0098(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FLinearColor                                        Color;                                                   // 0x00C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FTrackedStatInfo>                            TrackedStats;                                            // 0x00D0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FChallengeVariation>                         Variations;                                              // 0x00E0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    NumberOfChoices;                                         // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChallengeWeight;                                         // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsSpecialChallenge;                                     // 0x00F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1VL0[0x3];                                   // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxOccurences;                                           // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USeasonChallenge*                                    ChallengeAfterMaxOccurences;                             // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      RequiredCampaigns;                                       // 0x0108(0x0010) Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		class UTexture2D* GetIconOutlined();
		class UTexture2D* GetIcon();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeasonEditorRewardWidget
	 * Size -> 0x0008 (FullSize[0x0268] - InheritedSize[0x0260])
	 */
	class USeasonEditorRewardWidget : public UUserWidget
	{
	public:
		class UReward*                                             Reward;                                                  // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeasonLevelWidget
	 * Size -> 0x0030 (FullSize[0x0290] - InheritedSize[0x0260])
	 */
	class USeasonLevelWidget : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnRewardClaimed;                                         // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    Level;                                                   // 0x0270(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SeasonLevel;                                             // 0x0274(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsNormalClaimed;                                         // 0x0278(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSpecialClaimed;                                        // 0x0279(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsUnlocked;                                              // 0x027A(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsLastInRow;                                             // 0x027B(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S66B[0x4];                                   // 0x027C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSeasonLevel                                        LevelInfo;                                               // 0x0280(0x0010) BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		bool TryClaimReward(bool isNormalReward);
		void SetData(int32_t InLevel, bool inLastInRow);
		void RefreshState();
		void OnDataSet();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeasonInfinityLevelWidget
	 * Size -> 0x0008 (FullSize[0x0298] - InheritedSize[0x0290])
	 */
	class USeasonInfinityLevelWidget : public USeasonLevelWidget
	{
	public:
		int32_t                                                    InfinityStartLevel;                                      // 0x0290(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3JZ5[0x4];                                   // 0x0294(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeasonSettings
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class USeasonSettings : public UDataAsset
	{
	public:
		class USeason*                                             CurrentSeason;                                           // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxActiveChallenges;                                     // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JM39[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USeasonChallenge*>                            SeasonChallenges;                                        // 0x0040(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    XPPerLevel;                                              // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P0TU[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         XPToPerforcemancePointsCurve;                            // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    TreeOfVanitySnapSize;                                    // 0x0060(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpecialChallengeChange;                                  // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMissionStat*                                        HeartsColledtedStat;                                     // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FIntPoint                                           SporeTowerPlagueGainRange;                               // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    HeartsPerScrip;                                          // 0x0078(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    NumberOfScriptsFromPlague;                               // 0x007C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeasonReplicatorComponent
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class USeasonReplicatorComponent : public UActorComponent
	{
	public:
		void CompleteSeasonEvent(class USeasonEventData* inEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeasonsSubsystem
	 * Size -> 0x0118 (FullSize[0x0148] - InheritedSize[0x0030])
	 */
	class USeasonsSubsystem : public UGameInstanceSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnXPChanged;                                             // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTokensChanged;                                         // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVanityTreeReset;                                       // 0x0050(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnScripChallengeUpdated;                                 // 0x0060(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClaimStatusChanged;                                    // 0x0070(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              forcedSeasonEvent[0x28];                                 // 0x0080(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FTimespan                                           NewChallengeTimeSpan;                                    // 0x00A8(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PNE5[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSeasonMissionResult                                TempSeasonMissionResult;                                 // 0x00B8(0x0048) Transient, Protected, NativeAccessSpecifierProtected
		struct FSeasonMissionResult                                LatestMissionSeasonResult;                               // 0x0100(0x0048) Transient, Protected, NativeAccessSpecifierProtected

	public:
		struct FTimespan TimeToNewChallenge();
		void SetSeasonCompletedAnnounced(bool IsAnnounced);
		void SetHasOptedOutOfSeasonContent(bool hasOptedOut);
		void RerollChallenge(int32_t Index);
		void OnStatChanged(class UObject* WorldContext, class UMissionStat* Stat, float Value);
		void OnScripChallengeCompleted(class UObject* WorldContext, class UMissionStat* Stat, float Value);
		void IsRewardClaimed(int32_t Level, bool* IsNormalClaimed, bool* IsSpecialClaimed);
		bool IsNodeUnlocked(int32_t TreeOfVanityNodeID);
		bool IsNodeBought(int32_t TreeOfVanityNodeID);
		void InitializeStatsAndChallenges();
		bool HasUnclaimedRewards(int32_t* Level);
		bool HasOptedOutOfSeasonContent();
		bool HasClaimedLevelRewards(int32_t startLevel, int32_t numberOfLevels);
		bool HasClaimedAllRewards();
		int32_t GetUnusedHearts();
		int32_t GetSeasonXPFromMissionXP(class AFSDPlayerState* PlayerState);
		int32_t GetSeasonXP();
		int32_t GetSeasonNumber();
		class FText GetSeasonName();
		struct FSeasonMissionResult GetSeasonMissionResult();
		void GetSeasonLevelFromXP(int32_t XP, int32_t* Level, float* currentLevelPercent, int32_t* currentLevelXP, int32_t* LevelXPTotal);
		void GetSeasonLevel(int32_t* Level, float* currentLevelPercent, int32_t* currentLevelXP, int32_t* LevelXPTotal);
		bool GetSeasonExpiryDate(struct FDateTime* ExpiryDate);
		bool GetSeasonCompletedAnnounced();
		void GetSeasonBought(bool* isBought);
		void GetScriptChallengeInfo(int32_t* Completed, int32_t* claimed, int32_t* Total);
		int32_t GetNumberOfTokens(class UObject* WorldContextObject);
		int32_t GetNumberOfSeasonLevels();
		int32_t GetNumberOfClaimedPlagueHeartScrips();
		struct FSeasonLevel GetNextReward();
		int32_t GetLevelXP(int32_t Level);
		struct FSeasonLevel GetLevelReward(int32_t Level);
		void GetLevelProgress(int32_t Level, float* levelPercent);
		TArray<class UDataAsset*> GetAssetReferences(int32_t ChallengeIndex, class USeasonChallenge** outChallenge);
		TArray<struct FChallengeInfo> GetActiveChallenges(bool canGenerateNewChallenge);
		class UTextureRenderTarget2D* GenerateVanityRewardIcon(class UVanityItem* Item, class UPlayerCharacterID* Character, const struct FTransform& Offset, bool rebuildMesh, const struct FVector2D& Size);
		class UTextureRenderTarget2D* GenerateSkinRewardIcon(class UItemSkin* Skin, class UPlayerCharacterID* Character, bool bShowCloseUp, const struct FTransform& Offset, bool rebuildMesh, const struct FVector2D& Size);
		class UTextureRenderTarget2D* GeneratePickaxeRewardIcon(class UPickaxePart* part, EPickaxePartLocation PickaxePartLocation, class UPlayerCharacterID* Character, const struct FTransform& Offset, bool rebuildMesh, const struct FVector2D& Size);
		bool ConvertHeartsToScrip(int32_t* scripGained);
		void CompleteSeasonEvent_Server(class USeasonEventData* inEvent);
		bool ClaimScripChallenge();
		bool ClaimReward(class UObject* WorldContext, class AFSDPlayerController* Player, int32_t Level, bool isNormalReward);
		void CHEAT_SetSeasonMissionResult(int32_t XPFromMission, int32_t numberOfChallenges, class USeasonEventData* Event);
		void CHEAT_ResetTimeToNewChallenge();
		void CHEAT_ResetReroll();
		void CHEAT_AddChallenge();
		bool CanRerollChallenge();
		bool CanOptOutOfSeasonContent();
		bool BuyTreeNode(class UObject* WorldContextObject, class AFSDPlayerController* Player, int32_t TreeOfVanityNodeID);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SeasonEventData
	 * Size -> 0x0048 (FullSize[0x00A0] - InheritedSize[0x0058])
	 */
	class USeasonEventData : public USavableDataAsset
	{
	public:
		class FText                                                Name;                                                    // 0x0058(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		int32_t                                                    PerformancePoints;                                       // 0x0070(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PerformancePointsOnFail;                                 // 0x0074(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              Icon[0x28];                                              // 0x0078(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SendInviteBlueprintCallProxy
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class USendInviteBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
	{
	public:
		class FScriptMulticastDelegate                             OnSuccess;                                               // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailure;                                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UObject*                                             WorldContextObject;                                      // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2I13[0x30];                                  // 0x0058(0x0030) MISSED OFFSET (PADDING)

	public:
		class USendInviteBlueprintCallProxy* SendInvite(class UObject* WorldContextObject, const class FString& ListName, const class FString& UserId);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SendSessionInviteToFriendBlueprintCallProxy
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class USendSessionInviteToFriendBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
	{
	public:
		class FScriptMulticastDelegate                             OnSuccess;                                               // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailure;                                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UObject*                                             WorldContextObject;                                      // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MJZM[0x10];                                  // 0x0058(0x0010) MISSED OFFSET (PADDING)

	public:
		class USendSessionInviteToFriendBlueprintCallProxy* SendSessionInviteToFriend(class UObject* WorldContextObject, const class FString& FriendId);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SentryAttachment
	 * Size -> 0x0000 (FullSize[0x0220] - InheritedSize[0x0220])
	 */
	class ASentryAttachment : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SentryGunAnimInstance
	 * Size -> 0x0028 (FullSize[0x02E0] - InheritedSize[0x02B8])
	 */
	class USentryGunAnimInstance : public UAnimInstance
	{
	public:
		class ASentryGun*                                          SentryGun;                                               // 0x02B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ARedeployableSentryGun*                              RedeployableSentryGun;                                   // 0x02C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            TurretRotation;                                          // 0x02C8(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      YawOffset;                                               // 0x02D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BuildProgress;                                           // 0x02D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5CGJ[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RecallableSentryGun
	 * Size -> 0x0020 (FullSize[0x0450] - InheritedSize[0x0430])
	 */
	class ARecallableSentryGun : public ARecallableActor
	{
	public:
		class FScriptMulticastDelegate                             OnSentryIndexChanged;                                    // 0x0430(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    SentryIndex;                                             // 0x0440(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y7BG[0xC];                                   // 0x0444(0x000C) MISSED OFFSET (PADDING)

	public:
		void SentryIndexChanged__DelegateSignature(int32_t Index);
		void ReceiveOnSentryReady(class ASentryGun* SentryGun, class APlayerCharacter* PlayerCharacter);
		void OnRep_SentryIndex();
		void GetStateDescription(class FText* Description);
		class UClass* GetSentryGunClass();
		class ASentryGun* GetSentryGun();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ReloadSentryUsableComponent
	 * Size -> 0x0070 (FullSize[0x0190] - InheritedSize[0x0120])
	 */
	class UReloadSentryUsableComponent : public UUsableComponent
	{
	public:
		class FText                                                OutOfAmmoText;                                           // 0x0120(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class FText                                                AmmoFullText;                                            // 0x0138(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class USoundBase*                                          AudioOutOfAmmo;                                          // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          AudioReloading;                                          // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     ReloadingAudioComponent;                                 // 0x0160(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Usable;                                                  // 0x0168(0x0001) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bReloading;                                              // 0x0169(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CBIR[0x6];                                   // 0x016A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     ReloadAudioComponent;                                    // 0x0170(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AmmoPerSec;                                              // 0x0178(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_315A[0x4];                                   // 0x017C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APlayerCharacter>                     OwningPlayerCharacter;                                   // 0x0180(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASentryGun*                                          SentryGun;                                               // 0x0188(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetOwningPlayerCharacter(class APlayerCharacter* Player);
		void SetCanUse(bool isUsable);
		void OnRep_Reloading();
		void OnReloadAudioFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SentryGunItem
	 * Size -> 0x0010 (FullSize[0x0408] - InheritedSize[0x03F8])
	 */
	class ASentryGunItem : public APlaceableItem
	{
	public:
		TArray<class UItemUpgrade*>                                upgrades;                                                // 0x03F8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RecallableSentryGunItem
	 * Size -> 0x00A0 (FullSize[0x0490] - InheritedSize[0x03F0])
	 */
	class ARecallableSentryGunItem : public ARecallableItem
	{
	public:
		class FScriptMulticastDelegate                             OnActiveItemsChanged;                                    // 0x03F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSelectedItemChanged;                                   // 0x0400(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<TWeakObjectPtr<class ARedeployableSentryGun>>       SentriesWithActiveIndicators;                            // 0x0410(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		int32_t                                                    MaxSentryCount;                                          // 0x0420(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDistanceBetweenSentries;                              // 0x0424(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                RecallHoldDescription;                                   // 0x0428(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      RecallHoldDuration;                                      // 0x0440(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PNVU[0x4];                                   // 0x0444(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCapacityHoldingItemAggregator*                      AmmoCapacity;                                            // 0x0448(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemPlacerAggregator*                               ItemPlacer;                                              // 0x0450(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UItemUpgrade*>                                upgrades;                                                // 0x0458(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UClass*                                              LoadoutClass;                                            // 0x0468(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              SentryGunObjectClass;                                    // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SupplyStatusWeight;                                      // 0x0478(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SentryAngleRestriction;                                  // 0x047C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsUpgraded;                                             // 0x0480(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RDOJ[0xF];                                   // 0x0481(0x000F) MISSED OFFSET (PADDING)

	public:
		void SetArcIndicatorActive(bool Active);
		void ReceiveItemUpgraded();
		void RecallableSentryGunSignature__DelegateSignature(class ARecallableSentryGun* SentryGun);
		void RecallableSentryGunItemSignature__DelegateSignature(class ARecallableSentryGunItem* Item);
		bool HasAmmoLeft();
		class ARecallableSentryGun* GetSelectedSentryGun();
		TArray<class ARecallableSentryGun*> GetActiveSentryGuns();
		bool AreAllSentriesPlaced();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SessionHandling
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USessionHandling : public UBlueprintFunctionLibrary
	{
	public:
		void StopVoice(class UObject* WorldContextObject);
		void StartVoice(class UObject* WorldContextObject);
		bool StartSearchForFriends(int32_t localUserNum, class UFSDGameInstance* GameInstance);
		bool StartSearchForBlockedUsers(int32_t localUserNum);
		void StartCheckForInstalledDLC(class UObject* WorldContextObject);
		void SortServerList(class UObject* WorldContextObject, EServerSortOrder order, bool Reverse, bool sortByFriends, TArray<struct FBlueprintSessionResult>* servers);
		void ShowStoreUI(class UObject* WorldContextObject);
		void ShowInviteUI(class UObject* WorldContextObject);
		void JoinOfficialXboxClub(class UObject* WorldContextObject);
		bool IsVoiceChatting();
		bool IsInActiveSession();
		bool IsDisconnectReasonAKick(EDisconnectReason reason);
		class FString GetVoiceStatus();
		class FText GetSessionJoinError(class UObject* WorldContextObject);
		bool GetOnlinePlayerName(int32_t localUserNum, class FString* Name);
		EFSDNATType GetNATType(class UObject* WorldContextObject);
		EMissionStructure GetMissionStructure(const struct FBlueprintSessionResult& Result);
		class FString GetLoginStatus(int32_t localUserNum);
		class FString GetHostUsername(class UObject* WorldContextObject);
		class FString GetHostUniqueId(class UObject* WorldContextObject);
		bool GetFriendsList(int32_t localUserNum, TArray<struct FFriendInfo>* Players);
		class FString GetFriendlyServerNameSanitized(class UObject* WorldContextObject);
		class FString GetFriendlyServerName(class UObject* WorldContextObject);
		bool GetCurrentSessionState(class FString* sessionState, class FString* ID);
		bool FSDUpdateSessionInfo(class UObject* WorldContextObject);
		EFSDMissionStatus FSDMissionStatus(const struct FBlueprintSessionResult& Result);
		void FSDListen(class UObject* WorldContextObject);
		bool FSDIsSessionValid(const struct FBlueprintSessionResult& Result);
		bool FSDIsPrivateServer(const struct FBlueprintSessionResult& Result);
		bool FSDIsPasswordRequired(const struct FBlueprintSessionResult& Result);
		bool FSDIsModdedServer(const struct FBlueprintSessionResult& Result);
		bool FSDIsModdedSandboxServer(const struct FBlueprintSessionResult& Result);
		bool FSDIsFullServer(const struct FBlueprintSessionResult& Result);
		bool FSDIsEliteDeepDive(const struct FBlueprintSessionResult& Result);
		bool FSDIsClassLocked(const struct FBlueprintSessionResult& Result);
		bool FSDHasHiddenModsNotInstalledOnClient(const struct FBlueprintSessionResult& Result);
		bool FSDHasGameStarted(const struct FBlueprintSessionResult& Result);
		bool FSDGetServerStartTime(const struct FBlueprintSessionResult& Result, struct FDateTime* StartTime);
		class FString FSDGetServerNameSanitized(const struct FBlueprintSessionResult& Result);
		class FString FSDGetServerName(const struct FBlueprintSessionResult& Result);
		class FString FSDGetServerID(const struct FBlueprintSessionResult& Result);
		TArray<class FString> FSDGetRequiredModsToDownload(const struct FBlueprintSessionResult& Result);
		class FString FSDGetRegion(const struct FBlueprintSessionResult& Result);
		TArray<class UPlayerCharacterID*> FSDGetPlayerClassIDs(const struct FBlueprintSessionResult& Result);
		TArray<class UClass*> FSDGetPlayerClasses(const struct FBlueprintSessionResult& Result);
		TArray<class FString> FSDGetOptionalModsInstalled(const struct FBlueprintSessionResult& Result, bool ExcludeVerifiedMods);
		int32_t FSDGetNumPlayers(const struct FBlueprintSessionResult& Result);
		TArray<class FString> FSDGetModsInstalled(const struct FBlueprintSessionResult& Result, bool ExcludeVerifiedMods);
		int32_t FSDGetMissionSeed(const struct FBlueprintSessionResult& Result);
		class FString FSDGetMapName(const struct FBlueprintSessionResult& Result);
		class FString FSDGetHostUserID(const struct FBlueprintSessionResult& Result);
		int32_t FSDGetGlobalMissionSeed(const struct FBlueprintSessionResult& Result);
		float FSDGetDistanceFloat(const struct FBlueprintSessionResult& Result);
		EServerDistance FSDGetDistance(const struct FBlueprintSessionResult& Result);
		class UDifficultySetting* FSDGetDifficulty(const struct FBlueprintSessionResult& Result);
		class FString FSDGetBuildId(const struct FBlueprintSessionResult& Result);
		bool FSDCancelFindSessions(class UObject* WorldContextObject);
		bool FindBestQuickJoinServer(class UObject* WorldContextObject, TArray<struct FBlueprintSessionResult>* sessions, class UDifficultySetting* Difficulty, class UBiome* Biome, class UMissionTemplate* MissionTemplate, struct FBlueprintSessionResult* OutResult);
		bool AllowLinkToExternalFeedback(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SharkEnemy
	 * Size -> 0x0140 (FullSize[0x04F0] - InheritedSize[0x03B0])
	 */
	class ASharkEnemy : public AEnemyDeepPathfinderCharacter
	{
	public:
		class UPawnSensingComponent*                               PawnSensing;                                             // 0x03B0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    CollisionSphere;                                         // 0x03B8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    NearTargetSphere;                                        // 0x03C0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            TearingGroundParticles;                                  // 0x03C8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            AirTrailParticles;                                       // 0x03D0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInDangerComponent*                                  Danger;                                                  // 0x03D8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UEnemyComponent*                                     EnemyComponent;                                          // 0x03E0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    Damage;                                                  // 0x03E8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    BumpDamage;                                              // 0x03F0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFakePhysGrabberComponent*                           RestrictedGrabberComponent;                              // 0x03F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D3YP[0x8];                                   // 0x0400(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ImpactCue;                                               // 0x0408(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           JumpSound;                                               // 0x0410(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DNEF[0x4];                                   // 0x0418(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DiveForSeconds;                                          // 0x041C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VEZT[0x18];                                  // 0x0420(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LaunchPower;                                             // 0x0438(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D2YP[0xC];                                   // 0x043C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GrabTime;                                                // 0x0448(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WG7O[0x4];                                   // 0x044C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RagdollSpeedFactor;                                      // 0x0450(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1257[0xC];                                   // 0x0454(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UpsideDownTime;                                          // 0x0460(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TiltOutSpeed;                                            // 0x0464(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SafeTimeAfterVounerable;                                 // 0x0468(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RaiseHeight;                                             // 0x046C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttackDuration;                                          // 0x0470(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChanceToGrab;                                            // 0x0474(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinTimeBetweenBumps;                                     // 0x0478(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J0VA[0x4];                                   // 0x047C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChanceForJump;                                           // 0x0480(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinJumpCooldown;                                         // 0x0484(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxJumpCooldown;                                         // 0x0488(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      JumpForce;                                               // 0x048C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NormalHeight;                                            // 0x0490(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DiveHeight;                                              // 0x0494(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7N10[0x4];                                   // 0x0498(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinCirclingTime;                                         // 0x049C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxCirclingTime;                                         // 0x04A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VJ01[0x4];                                   // 0x04A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFakeMoverSettings*                                  CircleSetttings;                                         // 0x04A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFakeMoverSettings*                                  AttackSettings;                                          // 0x04B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFakeMoverSettings*                                  PostHitSettings;                                         // 0x04B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFakeMoverSettings*                                  JumpSettings;                                            // 0x04C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFakeMoverSettings*                                  VulnerableSettings;                                      // 0x04C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxInGroundTime;                                         // 0x04D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinInGroundTime;                                         // 0x04D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartParticleTime;                                       // 0x04D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EndParticleTime;                                         // 0x04DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     DiveParticles;                                           // 0x04E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8TKP[0x1];                                   // 0x04E8(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESharkEnemyState                                           State;                                                   // 0x04E9(0x0001) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HYIL[0x6];                                   // 0x04EA(0x0006) MISSED OFFSET (PADDING)

	public:
		void SetVulnerable();
		void ReleasePlayer(class AActor* playerchar, bool fullGrabElapsed);
		void PopRecentlyBumpedPlayer();
		void OnStateChangedEvent(ESharkEnemyState CurrentState);
		void OnSeePawn(class APawn* APawn);
		void OnRep_State(ESharkEnemyState oldState);
		void OnRep_DiveTime();
		void OnNearTarget(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnLandedEvent();
		void OnJumpEvent();
		void OnExitState(ESharkEnemyState State);
		void OnEnterState(ESharkEnemyState State);
		void OnDeathDetailed(class UHealthComponent* aHealthComponent, float damageAmount, const struct FDamageData& DamageData, TArray<class UDamageTag*> dTags);
		void OnDeath(class UHealthComponentBase* aHealthComponent);
		void OnDamaged(float aAmount);
		void OnCollided(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void Jumped();
		void ImpactSound();
		void DiveShow();
		void DiveHide();
		void All_DoRagdollImpact(const struct FVector_NetQuantize& Direction);
		void ActivateDanger();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SharkAnimInstance
	 * Size -> 0x0018 (FullSize[0x0470] - InheritedSize[0x0458])
	 */
	class USharkAnimInstance : public USpiderAnimInstance
	{
	public:
		unsigned char                                              UnknownData_2KC6[0x8];                                   // 0x0458(0x0008) Fix Super Size
		float                                                      BendValue;                                               // 0x0460(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsTurning;                                               // 0x0464(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JLLY[0x3];                                   // 0x0465(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TurnSpeed;                                               // 0x0468(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IdleSpeed;                                               // 0x046C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShieldGeneratorItem
	 * Size -> 0x0078 (FullSize[0x04D8] - InheritedSize[0x0460])
	 */
	class AShieldGeneratorItem : public AThrowableItem
	{
	public:
		unsigned char                                              UnknownData_KAXP[0x10];                                  // 0x0460(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCapacityHoldingItemAggregator*                      ChargeCapacity;                                          // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCapacityHoldingItemAggregator*                      CarryCapacity;                                           // 0x0478(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RechargeDuration;                                        // 0x0480(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    UnchargedCount;                                          // 0x0484(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RechargeProgress;                                        // 0x0488(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SupplyStatusWeight;                                      // 0x048C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    ShoutRecarged;                                           // 0x0490(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FCoolDownProgressStyle                              RechargeProgressUI;                                      // 0x0498(0x0040) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void ReceiveGeneratorReturned();
		void ReceiveGeneratorRechargeProgress(float Progress);
		void ReceiveGeneratorRecharged();
		void OnRep_UnchargedCount(int32_t OldCount);
		bool GetIsRecharging();
		void GeneratorReturned();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ThrowableActor
	 * Size -> 0x0010 (FullSize[0x0230] - InheritedSize[0x0220])
	 */
	class AThrowableActor : public AActor
	{
	public:
		class UProjectileMovementComponent*                        Movement;                                                // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsMoving;                                                // 0x0228(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IgnoreFellOutOfWorld;                                    // 0x0229(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IgnoreOwnersCollision;                                   // 0x022A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_54EU[0x5];                                   // 0x022B(0x0005) MISSED OFFSET (PADDING)

	public:
		void ReceiveIgnoreCharacter(class APlayerCharacter* Character);
		void ReceiveHitObject();
		void OnRep_IsMoving();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShieldGeneratorActor
	 * Size -> 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
	 */
	class AShieldGeneratorActor : public AThrowableActor
	{
	public:
		float                                                      GeneratorRadius;                                         // 0x0230(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeployDelay;                                             // 0x0234(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPushStatusEffectOnExit;                                 // 0x0238(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZRWR[0x3];                                   // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GeneratorLifetime;                                       // 0x023C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShootingPlantAnimInstance
	 * Size -> 0x0028 (FullSize[0x0330] - InheritedSize[0x0308])
	 */
	class UShootingPlantAnimInstance : public UEnemyAnimInstance
	{
	public:
		class AActor*                                              Target;                                                  // 0x0308(0x0008) Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Yaw;                                                     // 0x0310(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MappedYaw;                                               // 0x0314(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Pitch;                                                   // 0x0318(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      YawSpeed;                                                // 0x031C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PitchSpeed;                                              // 0x0320(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsVisible;                                               // 0x0324(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       LookingLeft;                                             // 0x0325(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       LookingRight;                                            // 0x0326(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C5LS[0x9];                                   // 0x0327(0x0009) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShowroomItem
	 * Size -> 0x0028 (FullSize[0x0248] - InheritedSize[0x0220])
	 */
	class AShowroomItem : public AActor
	{
	public:
		unsigned char                                              ShowroomStage[0x28];                                     // 0x0220(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyShowroomItem
	 * Size -> 0x0008 (FullSize[0x0250] - InheritedSize[0x0248])
	 */
	class AEnemyShowroomItem : public AShowroomItem
	{
	public:
		EShowroomScaling                                           Scaling;                                                 // 0x0248(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1REM[0x7];                                   // 0x0249(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShowroomController
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UShowroomController : public UActorComponent
	{
	public:
		class AShowroomStage*                                      Stage;                                                   // 0x00B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetLightChannels(class AActor* Actor);
		void RotateShowroom(float Pitch, float Yaw);
		void ResetShowroomRotation();
		struct FRotator GetShowroomRotation();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyShowroomController
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class UEnemyShowroomController : public UShowroomController
	{
	public:
		class AEnemyShowroomItem*                                  EnemyInstance;                                           // 0x00B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Receive_PlayAttack(class UAnimSequenceBase* attackAnimation);
		void PlayAttack(class UAnimSequenceBase* Animation);
		class UEnemyShowroomController* DisplayEnemy(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShowroomCameraKey
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UShowroomCameraKey : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShowroomSceneCaptureComponent
	 * Size -> 0x0008 (FullSize[0x08C0] - InheritedSize[0x08B8])
	 */
	class UShowroomSceneCaptureComponent : public USceneCaptureComponent2D
	{
	public:
		class UShowroomCameraKey*                                  CameraKey;                                               // 0x08B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CharacterShowroomController
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class UCharacterShowroomController : public UShowroomController
	{
	public:
		class APlayerCharacter*                                    CharacterInstance;                                       // 0x00B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Receive_CharacterShown();
		void EquipWeapon(EItemCategory Category);
		class UCharacterShowroomController* DisplayCharacter(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, class UShowroomCameraKey* Key);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShowroomManager
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UShowroomManager : public UActorComponent
	{
	public:
		struct FVector                                             ShowroomLocation;                                        // 0x00B0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_APUY[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CurrentStage;                                            // 0x00C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AShowroomStage*                                      StageInstance;                                           // 0x00C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextureRenderTarget2D*                              RenderTarget;                                            // 0x00D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UShowroomController* GetController();
		void ClearShowroom();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShowroomSettings
	 * Size -> 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
	 */
	class UShowroomSettings : public UDataAsset
	{
	public:
		unsigned char                                              EnemyShowroomController[0x28];                           // 0x0030(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              CharacterShowroomController[0x28];                       // 0x0058(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              CharacterStage[0x28];                                    // 0x0080(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShowroomStage
	 * Size -> 0x0048 (FullSize[0x0268] - InheritedSize[0x0220])
	 */
	class AShowroomStage : public AActor
	{
	public:
		class USceneCaptureComponent2D*                            SceneCapure;                                             // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneCaptureComponent2D*                            ActiveCaptureComponent;                                  // 0x0228(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              ControllerClass;                                         // 0x0230(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UShowroomController*                                 ControllerInstance;                                      // 0x0238(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneCaptureComponent2D*                            SceneCapture;                                            // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinPitch;                                                // 0x0248(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxPitch;                                                // 0x024C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     CameraFocusPoint;                                        // 0x0250(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7NJU[0x10];                                  // 0x0258(0x0010) MISSED OFFSET (PADDING)

	public:
		void ReceiveInitialize(class UTextureRenderTarget2D* RenderTarget);
		class USceneCaptureComponent2D* GetActiveCaptureComponent();
		class UTextureRenderTarget2D* CreateRenderTarget();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Shredder
	 * Size -> 0x0018 (FullSize[0x03C8] - InheritedSize[0x03B0])
	 */
	class AShredder : public AEnemyDeepPathfinderCharacter
	{
	public:
		float                                                      FoldoutRange;                                            // 0x03B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SpinRange;                                               // 0x03B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EDY1[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              CurrentTarget;                                           // 0x03C0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShredderAnimInstance
	 * Size -> 0x0008 (FullSize[0x0310] - InheritedSize[0x0308])
	 */
	class UShredderAnimInstance : public UEnemyAnimInstance
	{
	public:
		unsigned char                                              UnknownData_ZG2W[0x8];                                   // 0x0308(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SideburnsVanityItem
	 * Size -> 0x0058 (FullSize[0x0178] - InheritedSize[0x0120])
	 */
	class USideburnsVanityItem : public UVanityItem
	{
	public:
		unsigned char                                              Mesh[0x28];                                              // 0x0120(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AnimInstance[0x28];                                      // 0x0148(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		bool                                                       RequiresSlimArmor;                                       // 0x0170(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7FR1[0x7];                                   // 0x0171(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SimpleHealthComponent
	 * Size -> 0x0090 (FullSize[0x01F0] - InheritedSize[0x0160])
	 */
	class USimpleHealthComponent : public UHealthComponentBase
	{
	public:
		float                                                      Damage;                                                  // 0x0160(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxHealth;                                               // 0x0164(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       InvulnerableToNonDefinedResistances;                     // 0x0168(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NUPV[0x3];                                   // 0x0169(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EnvironmentalDamageResistance;                           // 0x016C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowHealthBar;                                          // 0x0170(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BM1K[0x3];                                   // 0x0171(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             HealthBarOffsetWorld;                                    // 0x0174(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UEnemyComponent>                      EnemyComponent;                                          // 0x0180(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class UPawnStat*, float>                              Resistances;                                             // 0x0188(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TArray<class UDamageTag*>                                  RequiredDamageTags;                                      // 0x01D8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       AutomaticFlushNetDormancy;                               // 0x01E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IC33[0x7];                                   // 0x01E9(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnRep_Damage(float oldDamage);
		float HealFromDeath(float Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MaggotAnimationSharingStateProcessor
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class UMaggotAnimationSharingStateProcessor : public UAnimationSharingStateProcessor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PipelineAnimationSharingProcessor
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class UPipelineAnimationSharingProcessor : public UAnimationSharingStateProcessor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SkinColorVanityItem
	 * Size -> 0x0008 (FullSize[0x0128] - InheritedSize[0x0120])
	 */
	class USkinColorVanityItem : public UVanityItem
	{
	public:
		class UMaterialInterface*                                  Material;                                                // 0x0120(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SkinEffect
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USkinEffect : public UObject
	{
	public:
		void Receive_AddToItem(class UMeshComponent* Mesh, class AActor* Skinnable, bool IsFirstPerson);
		EItemSkinType GetSkinType();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MaterialSkinEffect
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UMaterialSkinEffect : public USkinEffect
	{
	public:
		unsigned char                                              Materials[0x10];                                         // 0x0028(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SkeletalMeshSkinEffect
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USkeletalMeshSkinEffect : public USkinEffect
	{
	public:
		unsigned char                                              Mesh[0x28];                                              // 0x0028(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Skinnable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USkinnable : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SkinnableComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class USkinnableComponent : public UActorComponent
	{
	public:
		class UItemSkin*                                           EquippedSkinColor;                                       // 0x00B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemSkin*                                           EquippedSkinMesh;                                        // 0x00B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateSkin(class AFSDPlayerState* Player);
		void OnLoadoutChanged();
		TArray<class UItemSkin*> GetSkinsForItem(class UItemID* ItemID, EItemSkinType skinType);
		class UItemSkin* GetEquippedSkinMesh(class UItemID* ItemID, class AFSDPlayerState* Player);
		class UItemSkin* GetEquippedSkinColor(class UItemID* ItemID, class AFSDPlayerState* Player);
		class UItemSkin* GetEquippedSkin(class UItemID* ItemID, EItemSkinType skinType, class AFSDPlayerState* Player);
		TArray<class UItemSkin*> GetEquippableColorSkins(class UItemID* ItemID, class AFSDPlayerState* Player);
		class UItemSkin* GetDefaultItemSkin(class UItemID* ItemID, EItemSkinType itemSkinType);
		class UItemSkin* GetBaseColorSkinForMeshSkin(class UItemID* ItemID, class UItemSkin* meshSkin);
		void EquipSkin(class UItemSkin* Skin, class UItemID* ItemID, class AFSDPlayerState* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneSkinnableComponent
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class UDroneSkinnableComponent : public USkinnableComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlagueSoaperItem
	 * Size -> 0x0028 (FullSize[0x0488] - InheritedSize[0x0460])
	 */
	class APlagueSoaperItem : public APlagueCleanupItem
	{
	public:
		unsigned char                                              UnknownData_919I[0x8];                                   // 0x0460(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UProjectileLauncherComponent*                        projectileLauncher;                                      // 0x0468(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              ProjectileClass;                                         // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAmmoChanged;                                           // 0x0478(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void OnWeaponFired(const struct FVector& Location);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SoftReferenceProvider
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USoftReferenceProvider : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SoundClassManager
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USoundClassManager : public UGameInstanceSubsystem
	{
	public:
		unsigned char                                              UnknownData_WW48[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SoundMixManagerComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class USoundMixManagerComponent : public UActorComponent
	{
	public:
		TArray<struct FSoundMixManagerItem>                        SoundMixes;                                              // 0x00B0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpaceRigBar
	 * Size -> 0x00A0 (FullSize[0x02C0] - InheritedSize[0x0220])
	 */
	class ASpaceRigBar : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnNewDrinkableSpecial;                                   // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UInstantUsable*                                      BarUsable;                                               // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       BarUsableCollider;                                       // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BarMenuWidget;                                           // 0x0240(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     DrinkServingLocations;                                   // 0x0248(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FDrinkableBarSlot>                           DrinkableBarSlots;                                       // 0x0258(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UDrinkableDataAsset*                                 DrinkableSpecial;                                        // 0x0268(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<EHolidayType, struct FHolidayMeshItems>               HolidayComponentMap;                                     // 0x0270(0x0050) BlueprintVisible, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void SpawnDrinkables(class UDrinkableDataAsset* Drinkable, class APlayerCharacter* User);
		void SetVisibilityOfHolidayMeshes();
		void ReceiveFinishedSpawningDrinkables(class UDrinkableDataAsset* DrinkableData, class APlayerCharacter* Customer);
		void ReceiveDrinkableSpawned(class ADrinkableActor* Drinkable, class APlayerCharacter* Customer, int32_t LocationIndex);
		void ReceiveBeginSpawningDrinkables(class UDrinkableDataAsset* DrinkableData, class APlayerCharacter* Customer);
		void PlayBartenderTip(class APlayerCharacter* User);
		void PayTip(class APlayerCharacter* Character, int32_t Credits);
		void OnRep_DrinkableSpecial();
		bool HasUnclaimedDrinkables();
		bool HasSpaceForMoreDrinkables();
		int32_t GetAvailableDrinkableSlots();
		void DrinkableSignature__DelegateSignature(class UDrinkableDataAsset* Drinkable);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpaceRigBarMenuItem
	 * Size -> 0x0010 (FullSize[0x0290] - InheritedSize[0x0280])
	 */
	class USpaceRigBarMenuItem : public UFSDUserWidget
	{
	public:
		class UDrinkableDataAsset*                                 Drink;                                                   // 0x0280(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SpecialEditionSelected;                                  // 0x0288(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RU44[0x7];                                   // 0x0289(0x0007) MISSED OFFSET (PADDING)

	public:
		void Unselect();
		void Select();
		class UDrinkableDataAsset* GetSelectedDrinkableType();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawnActorWithDebrisPosComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class USpawnActorWithDebrisPosComponent : public UActorComponent
	{
	public:
		float                                                      MinDistanceBetweenSpwans;                                // 0x00B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AddTerrainPlacementBlockers;                             // 0x00B4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AvoidImportantLocations;                                 // 0x00B5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TRHB[0x2];                                   // 0x00B6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinDistanceToImportantLocations;                         // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BE65[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (PADDING)

	public:
		bool PlaceActorsWithCallback(int32_t NumToSpawn, int32_t NumToSpawnMin, int32_t NumAllowedChecks, class UClass* SpawnedActorClass, class AProceduralSetup* Setup, float Radius, class UDebrisPositioning* DebrisPositioning, TArray<struct FVector> locationsToAvoid, class UCurveFloat* AvoidCostCurve, const class FScriptDelegate& OnSpawned, const struct FVector& CustomLocation);
		bool PlaceActors(int32_t NumToSpawn, int32_t NumToSpawnMin, int32_t NumAllowedChecks, class UClass* SpawnedActorClass, class AProceduralSetup* Setup, float Radius, class UDebrisPositioning* DebrisPositioning, TArray<struct FVector> locationsToAvoid, class UCurveFloat* AvoidCostCurve, TArray<class AActor*>* OutSpawnedActors, const struct FVector& CustomLocation);
		void AddTerrainPlacement(class AActor* Actor, class AProceduralSetup* Setup);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawningBlueprintLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USpawningBlueprintLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SpawnEnemyGroupDescriptorSpreadOut(class UObject* WorldContextObject, class UEnemyGroupDescriptor* descriptor, float Difficulty, TArray<struct FVector> Locations, bool Alert, EDeepPathFinderSize pfSize);
		void SpawnEnemyGroupDescriptor(class UObject* WorldContextObject, class UEnemyGroupDescriptor* descriptor, float Difficulty, const struct FVector& Location, bool Alert, EDeepPathFinderSize pfSize);
		void SpawnEnemiesFromPool(class UObject* WorldContextObject, float Difficulty, TArray<struct FVector> Locations, bool Alert, bool isConstantPreassure);
		void SpawnEnemiesAtLocationWithCallback(class UObject* WorldContextObject, class UEnemyDescriptor* EnemyDescriptor, int32_t Count, const struct FVector& Location, const class FScriptDelegate& Callback, bool Alert, bool scaleToDifficulty, EDeepPathFinderSize pfSize);
		void SpawnEnemiesAtLocation(class UObject* WorldContextObject, class UEnemyDescriptor* EnemyDescriptor, int32_t Count, const struct FVector& Location, bool Alert, bool scaleToDifficulty, EDeepPathFinderSize pfSize);
		void SpawnEnemiesAtEachLocation(class UObject* WorldContextObject, class UEnemyDescriptor* EnemyDescriptor, TArray<struct FVector> Locations, EDeepPathFinderSize pfSize);
		TArray<struct FVector> GetSpawnPointsInRange(class UObject* WorldContextObject, float distanceToPlayers, int32_t spawnPointCount, EDeepPathFinderSize pfSize);
		TArray<struct FVector> GetSpawnPointsInCircle(class UObject* WorldContextObject, const struct FVector& Location, float Radius, int32_t Count, bool scaleToDificulty, float maxSpawnAngle, EDeepPathFinderSize pfSize);
		TArray<struct FVector> GetSpawnPointsFromLocation(class UObject* WorldContextObject, const struct FVector& Location, float Distance, int32_t spawnPointCount, EDeepPathFinderSize pfSize);
		TArray<struct FVector> GetSpawnPointsAroundLocation(class UObject* WorldContextObject, const struct FVector& Location, float Distance, int32_t spawnPointCount, EDeepPathFinderSize pfSize);
		struct FVector GetSpawnPointInRange(class UObject* WorldContextObject, float distanceToPlayers, EDeepPathFinderSize pfSize);
		struct FVector GetSpawnPointFromLocation(class UObject* WorldContextObject, const struct FVector& Location, float Distance, EDeepPathFinderSize pfSize);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpawnSettings
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class USpawnSettings : public UDataAsset
	{
	public:
		TArray<class UNiagaraSystem*>                              SpawnEffects;                                            // 0x0030(0x0010) Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class USoundCue*>                                   SpawnSounds;                                             // 0x0040(0x0010) Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FRandRange                                          SpawnDuration;                                           // 0x0050(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpecialEvent
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class USpecialEvent : public UDataAsset
	{
	public:
		float                                                      Weight;                                                  // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FEIX[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMissionTemplate*>                            BannedMissions;                                          // 0x0038(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class USpecialEventSpawner*                                EventSpawner;                                            // 0x0048(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsPartOfCurrentSeason;                                   // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WMDW[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpecialDamageAttackComponent
	 * Size -> 0x0008 (FullSize[0x0128] - InheritedSize[0x0120])
	 */
	class USpecialDamageAttackComponent : public USpecialAttackComponent
	{
	public:
		class UDamageComponent*                                    Damage;                                                  // 0x0120(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpecialEventBlueprintLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USpecialEventBlueprintLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class USchematic* TryGivePendingReward(class UObject* WorldContextObject);
		void StorePendingReward(class UObject* WorldContextObject, TArray<class USchematic*> schematicsToChooseFrom);
		void SpawnEventRewardFrame(class UObject* WorldContextObject, const struct FVector& Location);
		bool HasPendingReward(class UObject* WorldContextObject);
		TArray<class USchematic*> GetSpecialEventsRewardSchematics(class UObject* WorldContextObject);
		class USchematic* FindRandomSchematicForCharacter(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, ESchematicType SchematicType);
		void ClearPendingReward(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpecialEventSettings
	 * Size -> 0x0170 (FullSize[0x01A0] - InheritedSize[0x0030])
	 */
	class USpecialEventSettings : public UDataAsset
	{
	public:
		TArray<class USpecialEvent*>                               MachineEvents;                                           // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  ME_SpawnChanceMissionLengthCurve;                        // 0x0040(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		TArray<class USpecialEvent*>                               OtherSpecialEvents;                                      // 0x00C8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  Other_SpawnChanceMissionLengthCurve;                     // 0x00D8(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              EventRewardFrameClass[0x28];                             // 0x0160(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UDebrisPositioning*                                  EventRewardFramePositioning;                             // 0x0188(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EventRewardRadius;                                       // 0x0190(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CreditsReward;                                           // 0x0194(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      XPReward;                                                // 0x0198(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YNA5[0x4];                                   // 0x019C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpecialEventSpawner
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USpecialEventSpawner : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SimpleSpecialEventSpawner
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USimpleSpecialEventSpawner : public USpecialEventSpawner
	{
	public:
		class UDebrisPositioning*                                  Positioning;                                             // 0x0028(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              EventActor[0x28];                                        // 0x0030(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		float                                                      EventAvoidanceRadius;                                    // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U2TM[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EncounterSpecialEventSpawner
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UEncounterSpecialEventSpawner : public USpecialEventSpawner
	{
	public:
		struct FEncounterSpecialItem                               Encounter;                                               // 0x0028(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TimedSpecialEventSpawner
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UTimedSpecialEventSpawner : public USpecialEventSpawner
	{
	public:
		TArray<class UObject*>                                     BlockStack;                                              // 0x0028(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              EventActor[0x28];                                        // 0x0038(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		float                                                      MinTime;                                                 // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxTime;                                                 // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UnblockEventSpawn(class UObject* blocker);
		void SpawnEvent();
		void BlockEventSpawn(class UObject* blocker);
		bool AreEventSpawnsBlocked();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShootingSpiderAnimInstance
	 * Size -> 0x0020 (FullSize[0x0478] - InheritedSize[0x0458])
	 */
	class UShootingSpiderAnimInstance : public USpiderAnimInstance
	{
	public:
		unsigned char                                              UnknownData_DQW7[0x8];                                   // 0x0458(0x0008) Fix Super Size
		TWeakObjectPtr<class AActor>                               TargetActor;                                             // 0x0460(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LookAtLocation;                                          // 0x0468(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LG5C[0x4];                                   // 0x0474(0x0004) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpiderLobberAnimInstance
	 * Size -> 0x0038 (FullSize[0x04B0] - InheritedSize[0x0478])
	 */
	class USpiderLobberAnimInstance : public UShootingSpiderAnimInstance
	{
	public:
		struct FVector                                             EffectiveLiquidInBum;                                    // 0x0478(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      LiquidInBumRange;                                        // 0x0484(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LiquidInBumEaseInExp;                                    // 0x048C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LiquidInBumTimeToMax;                                    // 0x0490(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LiquidInBumTimeToMaxShort;                               // 0x0494(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7S4O[0x18];                                  // 0x0498(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetAttackIndex(int32_t Index);
		void ResetLiquidInBum();
		void OnDeath(class UHealthComponentBase* InHealthComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpiderEnemy
	 * Size -> 0x0038 (FullSize[0x03E8] - InheritedSize[0x03B0])
	 */
	class ASpiderEnemy : public AEnemyDeepPathfinderCharacter
	{
	public:
		unsigned char                                              UnknownData_SU6D[0x8];                                   // 0x03B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPawnStatsComponent*                                 PawnStats;                                               // 0x03B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHitReactionComponent*                               HitReactions;                                            // 0x03C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         GoreMesh;                                                // 0x03C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ApplyDifficultySpeedModifier;                            // 0x03D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NE1P[0x3];                                   // 0x03D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AttackDamageModifier;                                    // 0x03D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       LimitRagdollSpeed;                                       // 0x03D8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5VTN[0x3];                                   // 0x03D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxRagdollSpeed;                                         // 0x03DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              LookAtTarget;                                            // 0x03E0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetLookAtTarget(class AActor* Target);
		void OnRep_LookAtTarget();
		class UStaticMeshComponent* CreateHeadGore();
		void AlertNearbyEnemies();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SplineCableActor
	 * Size -> 0x0140 (FullSize[0x0360] - InheritedSize[0x0220])
	 */
	class ASplineCableActor : public AActor
	{
	public:
		class USplineComponent*                                    PathSplineComponent;                                     // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FCablePathSettings                                  PathSettings;                                            // 0x0228(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              CableMesh[0x28];                                         // 0x0238(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      CableThickness;                                          // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CarveRadius;                                             // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              MaterialConnected[0x28];                                 // 0x0268(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              MaterialUnconnected[0x28];                               // 0x0290(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		int32_t                                                    MaterialIndex;                                           // 0x02B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_20GC[0x4];                                   // 0x02BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         CableMeshInstance;                                       // 0x02C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SLBR[0x8];                                   // 0x02C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          StartTransform;                                          // 0x02D0(0x0030) Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTransform                                          EndTransform;                                            // 0x0300(0x0030) Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     ReplicatedPath;                                          // 0x0330(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		bool                                                       bConnected;                                              // 0x0340(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M106[0x7];                                   // 0x0341(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USplineMeshComponent*>                        MeshComponents;                                          // 0x0348(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QAIR[0x8];                                   // 0x0358(0x0008) MISSED OFFSET (PADDING)

	public:
		void SpawnBetweenTransforms(const struct FTransform& InStart, const struct FTransform& InEnd);
		void SetConnected(bool InConnected);
		void ReceiveSegmentCreated(class USplineMeshComponent* InSegment, int32_t InIndex, int32_t InTotal);
		void ReceiveAllSegmentsCreated();
		void OnUpdateMaterials();
		void OnRep_Path();
		void OnRep_Connected();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SplineDecoratorComponent
	 * Size -> 0x0058 (FullSize[0x05E0] - InheritedSize[0x0588])
	 */
	class USplineDecoratorComponent : public UInstancedStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_NMCZ[0x4];                                   // 0x0588(0x0004) Fix Super Size
		int32_t                                                    StartIndex;                                              // 0x058C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    EndIndex;                                                // 0x0590(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUpdateContinuously;                                     // 0x0594(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_81X8[0x3];                                   // 0x0595(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             VerticalOffset;                                          // 0x0598(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Scale;                                                   // 0x05A4(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceProgress;                                        // 0x05B0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R4DT[0x4];                                   // 0x05B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USplineComponent*                                    SplineComponent;                                         // 0x05B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FTransform>                                  NewInstancesTransforms;                                  // 0x05C0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		float                                                      Phase;                                                   // 0x05D0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LNAQ[0xC];                                   // 0x05D4(0x000C) MISSED OFFSET (PADDING)

	public:
		void Update(float DeltaTime);
		void SetUpdateContinuously(bool InContinuously);
		void SetSplineComponentAndMaterial(class USplineComponent* InSplineComponent, int32_t ElementIndex, class UMaterialInterface* Material);
		void SetSplineComponent(class USplineComponent* InSplineComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SplineHookAttack
	 * Size -> 0x0178 (FullSize[0x0298] - InheritedSize[0x0120])
	 */
	class USplineHookAttack : public USpecialAttackComponent
	{
	public:
		class USplineMeshComponent*                                Spline;                                                  // 0x0120(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              HeadMesh;                                                // 0x0128(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              TailMesh;                                                // 0x0130(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHitReactionComponent*                               HitReacts;                                               // 0x0138(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_366J[0x30];                                  // 0x0140(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  MovementCurve;                                           // 0x0170(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LWLY[0x28];                                  // 0x01F8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               SyncedTarget;                                            // 0x0220(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                TailSocket;                                              // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                HeadSocket;                                              // 0x0230(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPointLightComponent*                                GrabLight;                                               // 0x0238(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           GrabbedIndicationSound;                                  // 0x0240(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        HeadAnimation;                                           // 0x0248(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    Damage;                                                  // 0x0250(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ForwardPlacement;                                        // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DesiredLaunchAngle;                                      // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxAngledForce;                                          // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AdjustmentStartDistance;                                 // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttackDuration;                                          // 0x0268(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxAngle;                                                // 0x026C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttackOnProgress;                                        // 0x0270(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttackDelay;                                             // 0x0274(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LeadMultiplier;                                          // 0x0278(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AquireLocationTime;                                      // 0x027C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MVZH[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OnSuccessCooldown;                                       // 0x0288(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowGrabArea;                                            // 0x028C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Lead;                                                    // 0x028D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Using;                                                   // 0x028E(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_777Z[0x9];                                   // 0x028F(0x0009) MISSED OFFSET (PADDING)

	public:
		void SetTailLight(class UPointLightComponent* Light);
		void OnRep_Using();
		struct FVector GetTargetLocation();
		struct FVector GetTargetDirection();
		bool GetHasAquiredTarget();
		void ClearSuccessCooldown();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SplinePlant
	 * Size -> 0x0228 (FullSize[0x0448] - InheritedSize[0x0220])
	 */
	class ASplinePlant : public AActor
	{
	public:
		class USplineComponent*                                    PlantSpline;                                             // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     PlantEndPoint;                                           // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     AudioComponent;                                          // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              CueExtending[0x28];                                      // 0x0238(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              CueRetracting[0x28];                                     // 0x0260(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class USoundCue*                                           AudioExtending;                                          // 0x0288(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           AudioRetracting;                                         // 0x0290(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnabledSegmentCollision;                                // 0x0298(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LDY7[0x3];                                   // 0x0299(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CarveRadius;                                             // 0x029C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              SegmentMeshPtr[0x28];                                    // 0x02A0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		ESplineMeshAxis                                            SegmentForwardAxis;                                      // 0x02C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XUSN[0x3];                                   // 0x02C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SegmentLength;                                           // 0x02CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  SegmentWidthCurve;                                       // 0x02D0(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      SegmentWidthScale;                                       // 0x0358(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y926[0x4];                                   // 0x035C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  SegmentHeightCurve;                                      // 0x0360(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      SegmentHeightScale;                                      // 0x03E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PreviewLengthPercent;                                    // 0x03EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PreviewSeed;                                             // 0x03F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XTAT[0x4];                                   // 0x03F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USplineMeshComponent*>                        SegmentMeshCache;                                        // 0x03F8(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USplineMeshComponent*>                        CollisionMeshCache;                                      // 0x0408(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class USplineComponent*                                    SplineInstance;                                          // 0x0418(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         SegmentMesh;                                             // 0x0420(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Seed;                                                    // 0x0428(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DVLU[0x1C];                                  // 0x042C(0x001C) MISSED OFFSET (PADDING)

	public:
		void SetTargetPlantLengthPercent(float InTargetPercent, float InPercentPerSecond, float InEaseExp);
		void SetTargetPlantLength(float InTargetLength, float InDistancePerSecond, float InEaseExp);
		void SetPlantLengthPercent(float InPercent);
		void ResetSpline();
		void ResetScale();
		void ReceivePrepareSpline(class USplineComponent* InSplineComponent, int32_t InSeed);
		void ReceiveMovementUpdated(float InDistanceProgress);
		void ReceiveMovementStarted(float InTargetDistance);
		void ReceiveMovementFinished(float InDistanceProgress);
		float GetPlantTargetLengthPercent();
		float GetPlantLengthPercent();
		struct FTransform GetNearestLocationToLocalPlayer();
		float GetFullPlantLength();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SplineTrailComponent
	 * Size -> 0x0158 (FullSize[0x0350] - InheritedSize[0x01F8])
	 */
	class USplineTrailComponent : public USceneComponent
	{
	public:
		unsigned char                                              StaticMesh[0x28];                                        // 0x01F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		TArray<struct FSplineTrailMaterial>                        MaterialSettings;                                        // 0x0220(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		ESplineMeshAxis                                            ForwardAxis;                                             // 0x0230(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PSEV[0x7];                                   // 0x0231(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              CollisionMaterial[0x28];                                 // 0x0238(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      CollisionCapsuleRadius;                                  // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TrailLength;                                             // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TrailSubSegments;                                        // 0x0268(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TrailSegmentOverlap;                                     // 0x026C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HOPO[0x4];                                   // 0x0270(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           Scale;                                                   // 0x0274(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VerticalOffset;                                          // 0x027C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeadBobbingLength;                                       // 0x0280(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeadBobbingSpeed;                                        // 0x0284(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  ScaleCurve;                                              // 0x0288(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		TArray<class UCapsuleComponent*>                           CapsuleColliders;                                        // 0x0310(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class USplineComponent*                                    Spline;                                                  // 0x0320(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USplineMeshComponent*>                        MeshComponents;                                          // 0x0328(0x0010) ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     LocationHistory;                                         // 0x0338(0x0010) ZeroConstructor, Transient, DuplicateTransient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    Seed;                                                    // 0x0348(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NOFE[0x4];                                   // 0x034C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StabberVineRoot
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class AStabberVineRoot : public AEnemyPawn
	{
	public:
		void RemoveVine(class AStabberVine* vine);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StabberVine
	 * Size -> 0x0028 (FullSize[0x04C0] - InheritedSize[0x0498])
	 */
	class AStabberVine : public ATentacleBase
	{
	public:
		struct FTentacleTarget                                     DesiredTarget;                                           // 0x0498(0x0020) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3YSV[0x8];                                   // 0x04B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_DesiredTarget();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatHat
	 * Size -> 0x0088 (FullSize[0x00B8] - InheritedSize[0x0030])
	 */
	class UStatHat : public UGameInstanceSubsystem
	{
	public:
		unsigned char                                              UnknownData_2DGS[0x88];                                  // 0x0030(0x0088) MISSED OFFSET (PADDING)

	public:
		void AddStatValue(const class FString& Key, float Value);
		void AddStatCount(const class FString& Key, int32_t Count);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusAddedComponent
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UStatusAddedComponent : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusEffectEnemies
	 * Size -> 0x00D0 (FullSize[0x00F8] - InheritedSize[0x0028])
	 */
	class UStatusEffectEnemies : public URunningMissionBP
	{
	public:
		TArray<class UClass*>                                      StatusEffects;                                           // 0x0028(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               AllowedFilter;                                           // 0x0038(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   AllowedQuery;                                            // 0x0058(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      ChanceToApply;                                           // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       OverrideReplacesDefault;                                 // 0x00A4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GUEJ[0x3];                                   // 0x00A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UEnemyDescriptor*, class UClass*>               Overrides;                                               // 0x00A8(0x0050) Edit, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		void OnEnemySpawned(class APawn* enemy, class UEnemyDescriptor* descriptor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusEffectExclusiveKey
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UStatusEffectExclusiveKey : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusEffect
	 * Size -> 0x00D8 (FullSize[0x0100] - InheritedSize[0x0028])
	 */
	class UStatusEffect : public UObject
	{
	public:
		class UPawnAffliction*                                     PawnAffliction;                                          // 0x0028(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStatusEffectItem*>                           StatusEffects;                                           // 0x0030(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      MaxResistance;                                           // 0x0040(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F7WE[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageClass*                                        DamageClass;                                             // 0x0048(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStatusEffectExclusiveKey*                           ExclusiveKey;                                            // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TriggerTwiceOnPush;                                      // 0x0058(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PLDD[0x3];                                   // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRandRange                                          ApplyEffectsInterval;                                    // 0x005C(0x0008) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       CanStack;                                                // 0x0064(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XZ8X[0x3];                                   // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxStack;                                                // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Duration;                                                // 0x006C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ApplyDurationAfterPop;                                   // 0x0070(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RemoveOnDeath;                                           // 0x0071(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RemoveOnTemperatureStateChange;                          // 0x0072(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AllowExternalSread;                                      // 0x0073(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_22RF[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagQuery                                   GameplayTagQuery;                                        // 0x0078(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               ExcludeTargetsWithTags;                                  // 0x00C0(0x0020) Edit, EditConst, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               TargetRequiredTags;                                      // 0x00E0(0x0020) Edit, EditConst, Protected, NativeAccessSpecifierProtected

	public:
		bool ShouldInstantiate();
		float GetStatusEffectDuration(class UClass* StatusEffect);
		bool CanTrigger(class AActor* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusEffectItem
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UStatusEffectItem : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DotStatusEffectItem
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UDotStatusEffectItem : public UStatusEffectItem
	{
	public:
		struct FRandRange                                          damageAmount;                                            // 0x0028(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       OverrideDamageImpulse;                                   // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K717[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageImpulse*                                      DamageImpulseOverride;                                   // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DotEnemyArmorStatusEffectItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UDotEnemyArmorStatusEffectItem : public UStatusEffectItem
	{
	public:
		struct FRandRange                                          damageAmount;                                            // 0x0028(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PlayerArmorStatusEffectItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UPlayerArmorStatusEffectItem : public UStatusEffectItem
	{
	public:
		struct FRandRange                                          ChangeAmount;                                            // 0x0028(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HealingStatusEffectItem
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UHealingStatusEffectItem : public UStatusEffectItem
	{
	public:
		bool                                                       HealPercentage;                                          // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DJLJ[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NoDamageTimeRequired;                                    // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPawnAffliction*                                     PawnAffliction;                                          // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRandRange                                          Amount;                                                  // 0x0038(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       IgnoreCanTakeDamage;                                     // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JHIO[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatChangeStatusEffectItem
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UStatChangeStatusEffectItem : public UStatusEffectItem
	{
	public:
		class UPawnStat*                                           Stat;                                                    // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StatChange;                                              // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AffectedByResistances;                                   // 0x0034(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y934[0x3];                                   // 0x0035(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TemperatureStatusEffectItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UTemperatureStatusEffectItem : public UStatusEffectItem
	{
	public:
		struct FRandRange                                          TemperatureChangeAmount;                                 // 0x0028(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InfectionStatusEffectItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UInfectionStatusEffectItem : public UStatusEffectItem
	{
	public:
		struct FRandRange                                          InfectionChangeAmount;                                   // 0x0028(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HeatSourceStatusEffectItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UHeatSourceStatusEffectItem : public UStatusEffectItem
	{
	public:
		float                                                      Temperature;                                             // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETemperatureIntensity                                      Intensity;                                               // 0x002C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IY8Z[0x3];                                   // 0x002D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PheromoneStatusEffectItem
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPheromoneStatusEffectItem : public UStatusEffectItem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MakeAttackableStatusEffectItem
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UMakeAttackableStatusEffectItem : public UStatusEffectItem
	{
	public:
		float                                                      AttackCostModifier;                                      // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H4SR[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ComponentClass;                                          // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FSDPawnStatusEffectItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFSDPawnStatusEffectItem : public UStatusEffectItem
	{
	public:
		float                                                      StaggerDurationMultiplier;                               // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttackSpeedModifier;                                     // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ReplenishOxygenStatusEffectItem
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UReplenishOxygenStatusEffectItem : public UStatusEffectItem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyTemperatureStatusEffectItem
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UEnemyTemperatureStatusEffectItem : public UStatusEffectItem
	{
	public:
		float                                                      WarmingRate;                                             // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UnFreezeTemperature;                                     // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TemperatureChangeScaleModifier;                          // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0TSY[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EnemyDetonationStatusEffectItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UEnemyDetonationStatusEffectItem : public UStatusEffectItem
	{
	public:
		bool                                                       FireDetonation;                                          // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IceDetonation;                                           // 0x0029(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_014L[0x6];                                   // 0x002A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShoutStatusEffectItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UShoutStatusEffectItem : public UStatusEffectItem
	{
	public:
		class UDialogDataAsset*                                    BeginShout;                                              // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AddComponentStatusEffectItem
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UAddComponentStatusEffectItem : public UStatusEffectItem
	{
	public:
		class UClass*                                              ComponentClass;                                          // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UActorComponent>                      AddedComponent;                                          // 0x0030(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusEffectMissionBP
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UStatusEffectMissionBP : public URunningMissionBP
	{
	public:
		struct FGameplayTagQuery                                   EnemyQuery;                                              // 0x0028(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		class UClass*                                              StatusEffect;                                            // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnEnemySpawned(class APawn* Pawn, class UEnemyDescriptor* descriptor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusEffectsComponent
	 * Size -> 0x0070 (FullSize[0x0120] - InheritedSize[0x00B0])
	 */
	class UStatusEffectsComponent : public UActorComponent
	{
	public:
		TArray<struct FActiveStatusEffectBank>                     ActiveStatusEffects;                                     // 0x00B0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UHealthComponentBase*                                OwnerHealth;                                             // 0x00C0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              ActiveExclusiveKeys[0x50];                               // 0x00C8(0x0050) UNKNOWN PROPERTY: SetProperty
		bool                                                       IgnoreAll;                                               // 0x0118(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CGWQ[0x7];                                   // 0x0119(0x0007) MISSED OFFSET (PADDING)

	public:
		bool TryPushActiveStatusEffect(class UClass* StatusEffect, class AActor* Target, class AActor* Owner);
		bool TryPopActiveStatusEffect(class UClass* StatusEffect, class AActor* Target, class AActor* Owner);
		bool PushActiveStatusEffectInstance(class UStatusEffect* StatusEffect, class AActor* Owner);
		bool PushActiveStatusEffect(class UClass* StatusEffect, class AActor* Owner);
		void PopAllActiveStatusEffectsOfType(class UClass* StatusEffect, class AActor* Owner);
		void PopAllActiveStatusEffects(class AActor* Owner);
		bool PopActiveStatusEffectInstance(class UStatusEffect* StatusEffect, class AActor* Owner);
		bool PopActiveStatusEffect(class UClass* StatusEffect, class AActor* Owner);
		void OnDeath(class UHealthComponentBase* HealthComponent);
		bool HasActiveEffect(class UClass* StatusEffect);
		int32_t GetStackAmount(class UClass* StatusEffect, class AActor* Owner);
		int32_t GetFullStackAmount(class UClass* StatusEffect);
		class UStatusEffect* CreateStatusEffectInstance(class UClass* StatusEffect, class UObject* Owner);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusEffectSettings
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UStatusEffectSettings : public UDataAsset
	{
	public:
		class UClass*                                              EnemyOnFire;                                             // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              frozen;                                                  // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusEffectsFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UStatusEffectsFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		float GetMaxResistance(class UClass* StatusEffect);
		class UDamageClass* GetDamageClass(class UClass* StatusEffect);
		bool CanTrigger(class UClass* StatusEffect, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusEffectTriggerComponent
	 * Size -> 0x0060 (FullSize[0x0110] - InheritedSize[0x00B0])
	 */
	class UStatusEffectTriggerComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnEffectTriggered;                                       // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActorEnterLeave;                                       // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintAuthorityOnly, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2FIJ[0x10];                                  // 0x00D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      StatusEffects;                                           // 0x00E0(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      LeaveTriggerEffects;                                     // 0x00F0(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UPrimitiveComponent*                                 collider;                                                // 0x0100(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RemoveStatusEffectOnEndOverlap;                          // 0x0108(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P60A[0x7];                                   // 0x0109(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnOverlapEnd(class AActor* MyActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* MyActor, class AActor* OtherActor);
		void OnComponentOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnComponentOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void AddActorToIgnoreList(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StayAwayFromWallsComponent
	 * Size -> 0x0058 (FullSize[0x0250] - InheritedSize[0x01F8])
	 */
	class UStayAwayFromWallsComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_81SM[0x8];                                   // 0x01F8(0x0008) Fix Super Size
		class AFSDGameState*                                       GameState;                                               // 0x0200(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_709Q[0x28];                                  // 0x0208(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxSpeed;                                                // 0x0230(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Acceleration;                                            // 0x0234(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BackAcceleration;                                        // 0x0238(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PointOffset;                                             // 0x023C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvoidSpeed;                                              // 0x0240(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GoBackSpeed;                                             // 0x0244(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Active;                                                  // 0x0248(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PGVJ[0x7];                                   // 0x0249(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetIsActive(bool IsActive);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Steerable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USteerable : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StickyFlame
	 * Size -> 0x0058 (FullSize[0x0278] - InheritedSize[0x0220])
	 */
	class AStickyFlame : public AActor
	{
	public:
		class UParticleSystemComponent*                            FlameParticles;                                          // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     audio;                                                   // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStatusEffectTriggerComponent*                       StatusTriggerComponent;                                  // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDecalData                                          Decal;                                                   // 0x0238(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      FlameLifetime;                                           // 0x0258(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlameExtinguishTime;                                     // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           RandomTimeRangeFactor;                                   // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AudioFadeOutTime;                                        // 0x0268(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsActive;                                                // 0x026C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D9QD[0xB];                                   // 0x026D(0x000B) MISSED OFFSET (PADDING)

	public:
		void OnRep_IsActive();
		void OnExtinguisFlame();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StickyFlameSpawner
	 * Size -> 0x0038 (FullSize[0x00E8] - InheritedSize[0x00B0])
	 */
	class UStickyFlameSpawner : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnStickyFlameSpawned;                                    // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              StickyFlameActor;                                        // 0x00C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlameLifetime;                                           // 0x00C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StickyFlameIntervals;                                    // 0x00CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StickyMaxSpawnPerSecond;                                 // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StickyFlameMinDistance;                                  // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StickyFlameLastTime;                                     // 0x00D8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             StickyFlameLastLocation;                                 // 0x00DC(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool TrySpawnStickyFlameHit(const struct FHitResult& Hit);
		bool TrySpawnStickyFlame(const struct FVector& Location, const struct FVector& Normal);
		void StickyFlameSignature__DelegateSignature(class AStickyFlame* StickyFlame);
		void ServerSpawnStickyFlame(const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StingerIdleAudioComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UStingerIdleAudioComponent : public UActorComponent
	{
	public:
		TWeakObjectPtr<class UAudioComponent>                      AudioComponent;                                          // 0x00B0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UHealthComponentBase>                 HealthComponent;                                         // 0x00B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FadeInTime;                                              // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FadeOutTime;                                             // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.STLMeshCarver
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class USTLMeshCarver : public UObject
	{
	public:
		struct FCoreUObject_FBox                                   AABB;                                                    // 0x0028(0x001C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0O5S[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDeepCSGFloatTree                                   BSPTree;                                                 // 0x0048(0x0018) Edit, EditConst, NativeAccessSpecifierPublic
		TArray<struct FVector>                                     Vertices;                                                // 0x0060(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SubHealthComponent
	 * Size -> 0x0040 (FullSize[0x00F0] - InheritedSize[0x00B0])
	 */
	class USubHealthComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_53L3[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDamageTaken;                                           // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealthChanged;                                         // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCanTakeDamageChanged;                                  // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		EHealthbarType                                             HealthbarType;                                           // 0x00E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PassthroughDamageWhenDisabled;                           // 0x00E9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3KBB[0x1];                                   // 0x00EA(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EEnemyHealthScaling                                        EnemyHealthScaling;                                      // 0x00EB(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E2C3[0x4];                                   // 0x00EC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetCanTakeDamage(bool canTakeDamage);
		bool IsDead();
		bool IsAlive();
		float GetHealthPct();
		float GetHealth();
		bool GetCanTakeDamage();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DestructibleSubHealthComponent
	 * Size -> 0x0028 (FullSize[0x0118] - InheritedSize[0x00F0])
	 */
	class UDestructibleSubHealthComponent : public USubHealthComponent
	{
	public:
		float                                                      MaxHealth;                                               // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RadialDamageResistance;                                  // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AllowInderectDamage;                                     // 0x00F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WL6J[0x3];                                   // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Damage;                                                  // 0x00FC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     ArmorComponent;                                          // 0x0100(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnDestroyed;                                             // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		void SubHealthDestroyed__DelegateSignature(class UDestructibleSubHealthComponent* subHealth);
		void ResetHealth();
		void OnRep_Damage(float oldDamage);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PassthroughSubHealthComponent
	 * Size -> 0x0008 (FullSize[0x00F8] - InheritedSize[0x00F0])
	 */
	class UPassthroughSubHealthComponent : public USubHealthComponent
	{
	public:
		class USceneComponent*                                     ArmorComponent;                                          // 0x00F0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SubsystemLoader
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USubsystemLoader : public UObject
	{
	public:
		TArray<class UClass*>                                      BlueprintSubSystems;                                     // 0x0028(0x0010) Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TaggedActor
	 * Size -> 0x0028 (FullSize[0x0248] - InheritedSize[0x0220])
	 */
	class ATaggedActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_DT8G[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x0228(0x0020) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TargetDummyPawn
	 * Size -> 0x0030 (FullSize[0x0250] - InheritedSize[0x0220])
	 */
	class ATargetDummyPawn : public AActor
	{
	public:
		unsigned char                                              UnknownData_CE15[0x10];                                  // 0x0220(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x0230(0x0020) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TargetValidator
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTargetValidator : public UObject
	{
	public:
		bool ReceiveIsTargetValid(class AActor* Owner, class AActor* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.CompositeTargetValidator
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UCompositeTargetValidator : public UTargetValidator
	{
	public:
		TArray<class UTargetValidator*>                            TargetValidators;                                        // 0x0028(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.GrabTargetValidator
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGrabTargetValidator : public UTargetValidator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LineOfSightValidator
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULineOfSightValidator : public UTargetValidator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WithinAngleValidator
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UWithinAngleValidator : public UTargetValidator
	{
	public:
		float                                                      MaxAngle;                                                // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LVB5[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TeamResourcesComponent
	 * Size -> 0x0000 (FullSize[0x0108] - InheritedSize[0x0108])
	 */
	class UTeamResourcesComponent : public UResourcesComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MiningPodCalldownLocation
	 * Size -> 0x0000 (FullSize[0x0220] - InheritedSize[0x0220])
	 */
	class AMiningPodCalldownLocation : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MiningPodAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UMiningPodAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_K8CS[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TemporaryBuff
	 * Size -> 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
	 */
	class UTemporaryBuff : public UDataAsset
	{
	public:
		class FText                                                Description;                                             // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		unsigned char                                              Icon[0x28];                                              // 0x0048(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		bool                                                       ActivatesOnlyOnceWhenDrinking;                           // 0x0070(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsTodaysSpecialBuff;                                     // 0x0071(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O1UR[0x6];                                   // 0x0072(0x0006) MISSED OFFSET (PADDING)

	public:
		bool GetActivateOnlyWhenDrinking();
		void DeActivateBuff(class APlayerCharacter* Player);
		void ActivateBuff(class APlayerCharacter* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatTemporaryBuff
	 * Size -> 0x0050 (FullSize[0x00C8] - InheritedSize[0x0078])
	 */
	class UStatTemporaryBuff : public UTemporaryBuff
	{
	public:
		TMap<class UPawnStat*, float>                              ModifiedStats;                                           // 0x0078(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RandomLoadoutBuff
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class URandomLoadoutBuff : public UTemporaryBuff
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TentacleAnimInstance
	 * Size -> 0x0888 (FullSize[0x0B40] - InheritedSize[0x02B8])
	 */
	class UTentacleAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_7GEW[0x8];                                   // 0x02B8(0x0008) Fix Super Size
		struct FTentacleAnimInstanceProxy                          AnimInstanceProxy;                                       // 0x02C0(0x0870) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       UseActorRotationDuringExtension;                         // 0x0B30(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J4R9[0xF];                                   // 0x0B31(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TentacleGrabAttack
	 * Size -> 0x0020 (FullSize[0x0110] - InheritedSize[0x00F0])
	 */
	class UTentacleGrabAttack : public UAttackBaseComponent
	{
	public:
		class UMeshComponent*                                      HeadMesh;                                                // 0x00F0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                TerrainCheckSocket;                                      // 0x00F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             TerrainCheckBox;                                         // 0x0100(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DLQ0[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (PADDING)

	public:
		bool IsHeadNearTerrain();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerminatorShoutComponent
	 * Size -> 0x0080 (FullSize[0x0130] - InheritedSize[0x00B0])
	 */
	class UTerminatorShoutComponent : public UActorComponent
	{
	public:
		TArray<struct FTerminatorShoutState>                       States;                                                  // 0x00B0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShoutStarted;                                          // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShoutEnded;                                            // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FTerminatorTalkMaterial>                     TalkMaterials;                                           // 0x00E0(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UPointLightComponent*                                TalkLight;                                               // 0x00F0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxRadius;                                               // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxIntensity;                                            // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                SoundOriginSocket;                                       // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1HML[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMeshComponent*                                      OwnerMesh;                                               // 0x0118(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N5HN[0x8];                                   // 0x0120(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     ShoutInstance;                                           // 0x0128(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetShoutState(ETerminatorShoutState State, float delayShout);
		void OnShoutStart();
		void OnShoutInstancePlayStateChanged(EAudioComponentPlayState PlayState);
		void OnShoutEnd();
		void All_PlayShout(class USoundCue* Shout);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerminatorEnemy
	 * Size -> 0x0078 (FullSize[0x0428] - InheritedSize[0x03B0])
	 */
	class ATerminatorEnemy : public AEnemyDeepPathfinderCharacter
	{
	public:
		unsigned char                                              UnknownData_KWY7[0x10];                                  // 0x03B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        FlairAnimation;                                          // 0x03C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinFlairAnimCooldown;                                    // 0x03C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxFlairAnimationCooldown;                               // 0x03CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHitReactionComponent*                               HitReactions;                                            // 0x03D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              CurrentTargets[0x50];                                    // 0x03D8(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		void All_PlayFlairAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerminatorTentacle
	 * Size -> 0x00F8 (FullSize[0x0590] - InheritedSize[0x0498])
	 */
	class ATerminatorTentacle : public ATentacleBase
	{
	public:
		unsigned char                                              UnknownData_CHP6[0x8];                                   // 0x0498(0x0008) Fix Super Size
		unsigned char                                              UnknownData_MRKV[0x8];                                   // 0x04A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTentacleStateChangedEvent;                             // 0x04A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3HFW[0x8];                                   // 0x04B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequenceBase*                                   FlairAnimation;                                          // 0x04C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinFlairAnimCooldown;                                    // 0x04C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxFlairAnimationCooldown;                               // 0x04CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V7BK[0x4];                                   // 0x04D0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SwaySpeed;                                               // 0x04D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Extended;                                                // 0x04D8(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NPQO[0x47];                                  // 0x04D9(0x0047) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAnimMontage*>                                HitReactions;                                            // 0x0520(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		ETerminatorTentacleState                                   TentacleState;                                           // 0x0530(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_339T[0x7];                                   // 0x0531(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              HeadMesh;                                                // 0x0538(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGrabberComponent*                                   GrabberComponent;                                        // 0x0540(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTerminatorTarget                                   DesiredTarget;                                           // 0x0548(0x0028) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SE6L[0x20];                                  // 0x0570(0x0020) MISSED OFFSET (PADDING)

	public:
		void PlayHitReaction(float Amount);
		void OnStateChanged(ETerminatorTentacleState NewState);
		void OnRep_TentacleState();
		void OnRep_DesiredTarget();
		void OnHeadExitedTerrain();
		void OnHeadEnteredTerrain();
		void OnGrabbedActorReleased(class AActor* Actor, bool fullGrabElapsed);
		void OnDeathEvent(class UHealthComponentBase* EnemyHealth);
		void MoveToGrabTarget(class AActor* Target, float grabDuration);
		void ChangeTentacleState(ETerminatorTentacleState NewState);
		void All_PlayFlairAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TentacleBusyComponent
	 * Size -> 0x0008 (FullSize[0x0110] - InheritedSize[0x0108])
	 */
	class UTentacleBusyComponent : public UEnemyLineOfSightComponent
	{
	public:
		unsigned char                                              UnknownData_FO8U[0x8];                                   // 0x0108(0x0008) MISSED OFFSET (PADDING)

	public:
		void ReleasedActor(class AActor* Escape, bool fullGrab);
		void GrabbedActor(class AActor* victim);
		bool GetIsBusy();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerminatorAnimInstance
	 * Size -> 0x0028 (FullSize[0x0330] - InheritedSize[0x0308])
	 */
	class UTerminatorAnimInstance : public UEnemyAnimInstance
	{
	public:
		struct FRotator                                            Lean;                                                    // 0x0308(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N0GP[0xC];                                   // 0x0314(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForwardLean;                                             // 0x0320(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2U7M[0xC];                                   // 0x0324(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerminatorTentacleHeadAnimInstance
	 * Size -> 0x0008 (FullSize[0x0310] - InheritedSize[0x0308])
	 */
	class UTerminatorTentacleHeadAnimInstance : public UEnemyAnimInstance
	{
	public:
		unsigned char                                              UnknownData_T12Q[0x8];                                   // 0x0308(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainDetectComponent
	 * Size -> 0x0038 (FullSize[0x0230] - InheritedSize[0x01F8])
	 */
	class UTerrainDetectComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_MXV1[0x8];                                   // 0x01F8(0x0008) Fix Super Size
		class FScriptMulticastDelegate                             OnPointRemoved;                                          // 0x0200(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		bool                                                       StartDetectOnBeginPlay;                                  // 0x0210(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OnlyDetectOnServer;                                      // 0x0211(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       KillActorOnPointRemoved;                                 // 0x0212(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DGXB[0x1];                                   // 0x0213(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ActiveDetectPos;                                         // 0x0214(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DetectorId;                                              // 0x0220(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AYNR[0xC];                                   // 0x0224(0x000C) MISSED OFFSET (PADDING)

	public:
		void UpdateDetectLocation();
		void StopDetect();
		void StartDetect();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainDetectBoxComponent
	 * Size -> 0x0020 (FullSize[0x04A0] - InheritedSize[0x0480])
	 */
	class UTerrainDetectBoxComponent : public UBoxComponent
	{
	public:
		class FScriptMulticastDelegate                             OnBoxExcavated;                                          // 0x0480(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		bool                                                       StartDetectOnBeginPlay;                                  // 0x0490(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OnlyDetectOnServer;                                      // 0x0491(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_316A[0x2];                                   // 0x0492(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumCornersToExcavate;                                    // 0x0494(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    NumCornersExcavated;                                     // 0x0498(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       KillActorOnPointRemoved;                                 // 0x049C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4NYR[0x3];                                   // 0x049D(0x0003) MISSED OFFSET (PADDING)

	public:
		void StartDetect();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainDetectInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTerrainDetectInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTerrainFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool GetDebrisTransformsInSphere(class UObject* WorldContextObject, TArray<struct FMatrix>* outPositions, const struct FVector& Location, float Radius, ESpecialDebrisType debrisType, float minDistToOther, bool calcPriority);
		TArray<struct FVector> GetAllNavPointsInSphere(class UObject* WorldContextObject, const struct FVector& Origin, float Radius, EDeepPathFinderSize pfSize, const struct FVector& searchNormal, float maxDegreesToSearchNormal);
		TArray<struct FVector> FindPath(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Destination, EDeepPathFinderSize pfSize);
		void CreateExplosionCrater2(class UObject* WorldContextObject, const struct FVector& Location, float CarveDiameter, float carveNoiseSize, float carveBurnThickness, const struct FVector& Normal, float NormalOffset, float NormalSqueeze, bool allowCustomBurntMaterial, bool DissolvePlatforms, class UTerrainMaterial* overrideBurnedMaterial);
		void CreateExplosionCrater(class UObject* WorldContextObject, const struct FVector& Location, float CarveDiameter, float carveNoiseSize, float carveBurnThickness, bool allowCustomBurntMaterial, class UTerrainMaterial* overrideBurnedMaterial);
		int32_t CountDebrisOfType(class UObject* WorldContextObject, ESpecialDebrisType debrisType);
		int32_t CountDebrisInSphere(class UObject* WorldContextObject, const struct FVector& Location, float Radius, ESpecialDebrisType debrisType);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ProceduralFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UProceduralFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SpawnTerrainImpact(class UObject* WorldContextObject, class UFXSystemAsset* particle, const struct FVector& Location, const struct FRotator& Rotation);
		class AProceduralSetup* GetProceduralSetup(class UObject* WorldContextObject);
		int32_t GetObjectiveXP(class UClass* objectiveClass, float missionLength);
		int32_t GetObjectiveCredits(class UClass* objectiveClass, float missionLength);
		class UBiome* GetBiome(class UClass* levelSetup);
		void CreateEntrances(class AProceduralSetup* pls, struct FRoomNode* Room, int32_t exitCount, int32_t entranceCount, class UDebrisPositioning* exitPositioning, class UDebrisPositioning* entrancePositioning);
		bool AllControllersFinishedTransitionToPlay(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainLatejoinComponent
	 * Size -> 0x0100 (FullSize[0x01B0] - InheritedSize[0x00B0])
	 */
	class UTerrainLatejoinComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_KV4Y[0x100];                                 // 0x00B0(0x0100) MISSED OFFSET (PADDING)

	public:
		void Server_TerrainLateJoinPartReceived();
		void Client_TerrainLateJoinVisibleChunks(TArray<uint32_t> VisibleChunks);
		void Client_TerrainLateJoinPart(TArray<struct FGrenadeExplodeOperationData> Explosions, TArray<struct FCarveWithColliderOperationData> ColliderCarves, TArray<struct FCarveWithSTLMeshOperationData> MeshCarves, TArray<struct FPickaxeDigOperationData> PickAxe, TArray<struct FRemoveFloatingIslandOperationData> floating, TArray<struct FDrillOperationData> Drills, TArray<struct FMeltOperationData> Melts, TArray<struct FSplineSegmentCarveOperationData> Splines, TArray<struct FCSGBuildOperationData> CSGBuilds, TArray<struct FTerrainSpawnDebrisOperationData> SpawnDebris);
		void Client_TerrainLateJoinDone();
		void Client_TerrainLateJoinDebris(TArray<int32_t> instanceComponentPairs);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SmartRockTerrainMaterial
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USmartRockTerrainMaterial : public UTerrainMaterialBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainMaterial
	 * Size -> 0x0140 (FullSize[0x01B8] - InheritedSize[0x0078])
	 */
	class UTerrainMaterial : public UTerrainMaterialCore
	{
	public:
		bool                                                       Collide : 1;                                             // 0x0078(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Diggable : 1;                                            // 0x0078(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CanBeDrilled : 1;                                        // 0x0078(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ExplosionProof : 1;                                      // 0x0078(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       MeltsInFire : 1;                                         // 0x0078(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PlatformDissolvable : 1;                                 // 0x0078(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6WHW[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UResourceData*                                       ResourceData;                                            // 0x0080(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    HitsNeededToMine;                                        // 0x0088(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PickAxeDigSize;                                          // 0x008C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       RemoveDebrisOnFirstHit;                                  // 0x0090(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3UN4[0x7];                                   // 0x0091(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDialogDataAsset*                                    ShoutLookAt;                                             // 0x0098(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDialogDataAsset*                                    ShoutOnDig;                                              // 0x00A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainType*                                        TerrainType;                                             // 0x00A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GJRP[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                InGameName;                                              // 0x00B8(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class FText                                                InGameDescription;                                       // 0x00D0(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       Precious : 1;                                            // 0x00E8(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F96K[0x7];                                   // 0x00E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              DigParticles[0x28];                                      // 0x00F0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              DigParticlesMaterialOverride[0x28];                      // 0x0118(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              PartialDigParticles[0x28];                               // 0x0140(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              CrumbleSound[0x28];                                      // 0x0168(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              PartialMineSound[0x28];                                  // 0x0190(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		void TestMaterialEffects(class UTerrainMaterial* Material, TArray<struct FTestTerrainMaterialItem>* Items);
		void TestDecals(class UTerrainMaterial* Material, TArray<struct FTestTerrainMaterialDecalItem>* Items);
		class UFXSystemComponent* SpawnPartialDigParticles(class UObject* WorldContextObject, const struct FVector& Location, const struct FRotator& Rotation);
		class UFXSystemComponent* SpawnDigParticles(class UObject* WorldContextObject, const struct FVector& Location, const struct FRotator& Rotation, float Density);
		bool IsPrecious();
		class FText GetInGameName();
		class UMaterialInstance* GetDigParticlesMaterialOverride();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainType
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UTerrainType : public UDataAsset
	{
	public:
		bool                                                       Collide : 1;                                             // 0x0030(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Diggable : 1;                                            // 0x0030(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Precious : 1;                                            // 0x0030(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DG7C[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           DebrisStandardSoundCue;                                  // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3WEF[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              DebrisStandardParticles[0x28];                           // 0x0048(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainMaterialsCollection
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UTerrainMaterialsCollection : public UDataAsset
	{
	public:
		TArray<class UTerrainMaterial*>                            Materials;                                               // 0x0030(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class UTerrainType*>                                TerrainTypes;                                            // 0x0040(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PQFD[0x10];                                  // 0x0050(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainMaterialSettings
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UTerrainMaterialSettings : public UDataAsset
	{
	public:
		TArray<struct FDecalData>                                  TwoHits;                                                 // 0x0030(0x0010) Edit, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FDecalData>                                  ThreeHits;                                               // 0x0040(0x0010) Edit, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FDecalData>                                  FourHits;                                                // 0x0050(0x0010) Edit, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FDecalData>                                  FiveHits;                                                // 0x0060(0x0010) Edit, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UTerrainMaterial*>                            PlagueMaterials;                                         // 0x0070(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      InfectionIncreasePerPlagueHit;                           // 0x0080(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9DXN[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainModifyingProjectile
	 * Size -> 0x0058 (FullSize[0x0398] - InheritedSize[0x0340])
	 */
	class ATerrainModifyingProjectile : public AProjectile
	{
	public:
		class FScriptMulticastDelegate                             OnRevertToNormal;                                        // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UTerrainMaterial*                                    Terrain;                                                 // 0x0350(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTerrainMaterial*                                    OriginalGroundMaterial;                                  // 0x0358(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         CarveMesh;                                               // 0x0360(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             CarveMeshScale;                                          // 0x0368(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LastHitLocation;                                         // 0x0374(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Radius;                                                  // 0x0380(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Revert;                                                  // 0x0384(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7T54[0x3];                                   // 0x0385(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeOnGround;                                            // 0x0388(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExpensiveCarveNoise;                                     // 0x038C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IXI5[0x8];                                   // 0x0390(0x0008) MISSED OFFSET (PADDING)

	public:
		void Tick(float DeltaSeconds);
		float GetRadius();
		void BeginPlay();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AllPiercingHitscanComponent
	 * Size -> 0x00B0 (FullSize[0x03B0] - InheritedSize[0x0300])
	 */
	class UAllPiercingHitscanComponent : public UHitscanComponent
	{
	public:
		unsigned char                                              UnknownData_OBE1[0x9C];                                  // 0x0300(0x009C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PiercingDepth;                                           // 0x039C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OTG4[0x4];                                   // 0x03A0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TracePartitions;                                         // 0x03A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GYH5[0x8];                                   // 0x03A8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainPlacementComponent
	 * Size -> 0x0038 (FullSize[0x0230] - InheritedSize[0x01F8])
	 */
	class UTerrainPlacementComponent : public USceneComponent
	{
	public:
		TArray<struct FTerrainPlacementBox>                        TerrainCheckers;                                         // 0x01F8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		EDebrisColliderType                                        CapsuleType;                                             // 0x0208(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S2QD[0x3];                                   // 0x0209(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDebrisCapsule                                      Capsule;                                                 // 0x020C(0x0020) Edit, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    BlockerIDHack;                                           // 0x022C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void RemoveBlockers();
		void AddBlockers(class AProceduralSetup* ProceduralSetup, const struct FTransform& Transform);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainScannerItem
	 * Size -> 0x0070 (FullSize[0x0440] - InheritedSize[0x03D0])
	 */
	class ATerrainScannerItem : public AAnimatedItem
	{
	public:
		int32_t                                                    TerrainScannerZoomDirection;                             // 0x03D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ScannerAttachSocketName;                                 // 0x03D4(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P0TU[0x4];                                   // 0x03DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TerrainScannerStartAngle;                                // 0x03E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TerrainScannerScale;                                     // 0x03E4(0x0004) Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayedTerrainScannerScale;                              // 0x03E8(0x0004) Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayedTerrainScannerZoom;                               // 0x03EC(0x0004) Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T43N[0x1];                                   // 0x03F0(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsLookingAtMap;                                          // 0x03F1(0x0001) Edit, Net, ZeroConstructor, Transient, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UpdateMapToolActors;                                     // 0x03F2(0x0001) Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SVIT[0x5];                                   // 0x03F3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAnimMontage*>                                UseLoopsFP;                                              // 0x03F8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UAnimMontage*                                        EndFP;                                                   // 0x0408(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UAnimMontage*>                                UseLoopsTP;                                              // 0x0410(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UAnimMontage*                                        EndTP;                                                   // 0x0420(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GE1Y[0x8];                                   // 0x0428(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     TerrainScannerRoot;                                      // 0x0430(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneCaptureComponent2D*                            TerrainScannerCapture;                                   // 0x0438(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Server_SetIslookingAtMap(bool lookingAtMap);
		void OnRep_IsLookingAtMap();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainScannerStaticMesh
	 * Size -> 0x0010 (FullSize[0x04F0] - InheritedSize[0x04E0])
	 */
	class UTerrainScannerStaticMesh : public UStaticMeshComponent
	{
	public:
		bool                                                       bVisibleAtBeginPlay;                                     // 0x04E0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHideOnDeath;                                            // 0x04E1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseFogOfWar;                                            // 0x04E2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bVisibleOnScanner;                                       // 0x04E3(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FOPW[0xC];                                   // 0x04E4(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetVisibleOnScanner(bool InShowOnScanner);
		void OnOwnerDeath(class UHealthComponentBase* InHealthComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TerrainScannerSplineMesh
	 * Size -> 0x0000 (FullSize[0x0580] - InheritedSize[0x0580])
	 */
	class UTerrainScannerSplineMesh : public USplineMeshComponent
	{
	public:
		void SetVisibleOnScanner(bool InShowOnScanner);
		void OnOwnerDeath(class UHealthComponentBase* InHealthComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TetherComponent
	 * Size -> 0x00A8 (FullSize[0x0158] - InheritedSize[0x00B0])
	 */
	class UTetherComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnPowerChanged;                                          // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnConnectionChanged;                                     // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTetherMessage;                                         // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnConnectionRangeUpdated;                                // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EGM6[0x8];                                   // 0x00F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMeshComponent*                                      TetherMesh;                                              // 0x00F8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AutoSetup;                                               // 0x0100(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JEXU[0x7];                                   // 0x0101(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UTetherComponent*>                            ConnectionHistory;                                       // 0x0108(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NPIY[0x10];                                  // 0x0118(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ConnectionPointName;                                     // 0x0128(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTetherComponent*                                    ForwardConnection;                                       // 0x0130(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTetherComponent*                                    backConnection;                                          // 0x0138(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConnectionDistance;                                      // 0x0140(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETetherConnectionMode                                      ConnectionMode;                                          // 0x0144(0x0001) ELEMENT_SIZE_MISMATCH Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7VF3[0x3];                                   // 0x0145(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		int32_t                                                    ConnectionPriority;                                      // 0x0148(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ConnectionHistorySize;                                   // 0x014C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       GeneratesPower;                                          // 0x0150(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       PeriodicConnectionValidation;                            // 0x0151(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       hasPower;                                                // 0x0152(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_26C9[0x5];                                   // 0x0153(0x0005) MISSED OFFSET (PADDING)

	public:
		void ToggleConnectionValidation(bool Enabled, bool reactivate);
		void StopLoSTimer();
		void StartLoSTimer();
		void SetupConnectionpoint(class UMeshComponent* Mesh, const class FName& SocketName);
		void SetConnectionRange(float range);
		void ResetConnectionHistory();
		void OnRep_HasPower();
		void OnRep_ForwardConnection();
		void OnRep_BackConnection();
		void MessageTetherLine(const class FName& Message, float Delay, ETetherMessageDirection messageDirection);
		void MessageBody(const struct FTetherMessageSettings& Message);
		bool IsStartOfLine();
		bool IsFullyConnected();
		bool IsEndOfLine();
		bool IsConnected();
		class UTetherComponent* GetTetherlineEnd(bool front);
		bool GetHasPower();
		class UTetherComponent* GetForwardConnection();
		float GetConnectionRange();
		struct FVector GetConnectionPoint();
		TArray<class UTetherComponent*> GetConnectionHistory();
		class UTetherComponent* GetBackConnection();
		void DisconnectFromTetherLine(bool Deactivate);
		bool ConnectToTetherLine();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Tether
	 * Size -> 0x0050 (FullSize[0x02B8] - InheritedSize[0x0268])
	 */
	class ATether : public ACarriableItem
	{
	public:
		class USkeletalMeshComponent*                              BaseMesh;                                                // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInstantUsable*                                      UsableComponent;                                         // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCarriableComponent*                                 Carry;                                                   // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    UseTrigger;                                              // 0x0280(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   TetherBeam;                                              // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    PysicalCollision;                                        // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageComponent*                                    ExplosionDamage;                                         // 0x0298(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     ExplosionParticle;                                       // 0x02A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ExplosionSound;                                          // 0x02A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsOnGround;                                              // 0x02B0(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_51AF[0x3];                                   // 0x02B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      KnockBackForce;                                          // 0x02B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetIsOnGround(bool IsOnGround);
		void OnDronePickup();
		void OnDroneDrop();
		void OnClosed();
		void Explode();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TetherStation
	 * Size -> 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
	 */
	class ATetherStation : public AActor
	{
	public:
		class USceneComponent*                                     SceneRoot;                                               // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              BaseMesh;                                                // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              FacilityGeneratorLineType;                               // 0x0230(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AreGeneratorsReady;                                      // 0x0238(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       FacilityActive;                                          // 0x0239(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O6LB[0x6];                                   // 0x023A(0x0006) MISSED OFFSET (PADDING)

	public:
		void SpawnGeneratorLines(const struct FTransform& startL, const struct FTransform& startR, TArray<struct FTransform> endL, TArray<struct FTransform> endR, class AFacilityGeneratorLine** outLineL, class AFacilityGeneratorLine** outLineR);
		void SetGeneratorsReady(bool ready);
		void Onrep_FacilityActive();
		void OnRep_AreGeneratorsReady();
		void OnGeneratorsReady();
		void OnActivated();
		void DisableShields();
		void ActivateFacility();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TetherAnimInstance
	 * Size -> 0x0008 (FullSize[0x02C0] - InheritedSize[0x02B8])
	 */
	class UTetherAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_Q538[0x8];                                   // 0x02B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Throwable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UThrowable : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ThrownGrenadeItem
	 * Size -> 0x00A0 (FullSize[0x0410] - InheritedSize[0x0370])
	 */
	class AThrownGrenadeItem : public AItem
	{
	public:
		unsigned char                                              UnknownData_974M[0x8];                                   // 0x0370(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnGrenadeThrown;                                         // 0x0378(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MJLJ[0x8];                                   // 0x0388(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPlayerAnimInstance*                                 FPAnimInstance;                                          // 0x0390(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPlayerAnimInstance*                                 TPAnimInstance;                                          // 0x0398(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemCharacterAnimationSet*                          CharacterAnimationSet;                                   // 0x03A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             ThrowOffset;                                             // 0x03A8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThrowAngle;                                              // 0x03B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxGrenades;                                             // 0x03B8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Grenades;                                                // 0x03BC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GrenadeCooldownRemaining;                                // 0x03C0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EThrownGrenadeItemState                                    State;                                                   // 0x03C4(0x0001) ELEMENT_SIZE_MISMATCH Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R0KM[0x3];                                   // 0x03C5(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UClass*                                              GrenadeClass;                                            // 0x03C8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGrenadeAnimationSet*                                DefaultGrenadeAnimationSet;                              // 0x03D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MVZD[0x8];                                   // 0x03D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                GrenadeMeshInstance;                                     // 0x03E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFSDAudioComponent*                                  CookSound;                                               // 0x03E8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CTW1[0x18];                                  // 0x03F0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       CooldownIsDone;                                          // 0x0408(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       HasRejoinedInitialized;                                  // 0x0409(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1WVJ[0x6];                                   // 0x040A(0x0006) MISSED OFFSET (PADDING)

	public:
		void UpdateCookTime(float Time);
		void SetRemainingCooldown(float CoolDown);
		void Server_ThrowGrenade(const struct FVector& StartLocation, float cookTime);
		void Server_SetState(EThrownGrenadeItemState itemState);
		void Server_Resupply(float percentage);
		void ResupplyGrenadesAmount(int32_t Amount);
		void ResupplyGrenades(float percentage);
		TArray<struct FVector> PredictGrenadePath();
		void OnRep_State();
		void OnRep_GrenadeCount();
		void OnRep_GrenadeClass();
		void OnGrenadeThrown__DelegateSignature();
		void GrenadeThrowFinished();
		void GetPredictedLastPosAndVelocity(struct FVector* Pos, struct FVector* Velocity);
		float GetGrenadeThrowVelocity();
		struct FRotator GetGrenadeThrowRotation();
		float GetGrenadeGravity();
		float GetGrenadeDuration();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TickableActionBase
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UTickableActionBase : public UBlueprintAsyncActionBase
	{
	public:
		unsigned char                                              UnknownData_QLYU[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MiniTimerAction
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class UMiniTimerAction : public UTickableActionBase
	{
	public:
		class FScriptMulticastDelegate                             Completed;                                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnTick;                                                  // 0x0050(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z0JH[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (PADDING)

	public:
		void TickDelegate__DelegateSignature(float DeltaTime, float NormalizedTime);
		class UMiniTimerAction* MiniTimer(class UObject* WorldContext, float InDuration);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MultiTextCounterAction
	 * Size -> 0x0078 (FullSize[0x00B8] - InheritedSize[0x0040])
	 */
	class UMultiTextCounterAction : public UTickableActionBase
	{
	public:
		class FScriptMulticastDelegate                             Completed;                                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTick;                                                  // 0x0050(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UTextBlock*                                          TotalBlock;                                              // 0x0060(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                TotalFormat;                                             // 0x0068(0x0018) Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FTextCounterEntry>                           Entries;                                                 // 0x0080(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      CountSpeed;                                              // 0x0090(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E4OG[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           CountingSound;                                           // 0x0098(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     AudioComponent;                                          // 0x00A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObject*                                             WorldContext;                                            // 0x00A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I34J[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (PADDING)

	public:
		void TickDelegate__DelegateSignature();
		class UMultiTextCounterAction* StartMultiTextCounter(class UObject* InWorldContext, class UTextBlock* InTotalBlock, const class FText& InTotalFormat, float InCountSpeed, class USoundCue* InCountingSound, TArray<struct FTextCounterEntry> InEntries);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PendingLatentActionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPendingLatentActionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void WaitOneFrame(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.MoveComponentToAction
	 * Size -> 0x0090 (FullSize[0x00D0] - InheritedSize[0x0040])
	 */
	class UMoveComponentToAction : public UTickableActionBase
	{
	public:
		TWeakObjectPtr<class USceneComponent>                      Component;                                               // 0x0040(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EGWI[0x78];                                  // 0x0048(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             Completed;                                               // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		class UMoveComponentToAction* EaseComponentTo(class UObject* WorldContext, class USceneComponent* InComponent, const struct FTransform& InEndTransform, EEasingFunc InEasingMode, bool InWorldSpace, float InDuration);
		void CompletedDelegate__DelegateSignature(class USceneComponent* Component);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TowerEventModule
	 * Size -> 0x0098 (FullSize[0x0390] - InheritedSize[0x02F8])
	 */
	class ATowerEventModule : public AFSDPawn
	{
	public:
		unsigned char                                              UnknownData_QMF3[0x8];                                   // 0x02F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     Root;                                                    // 0x0300(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x0308(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UEnemyHealthComponent*                               Health;                                                  // 0x0310(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UArmorHealthDamageComponent*                         ArmorDamage;                                             // 0x0318(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeakpointGlowComponent*                             WeakpointGlow;                                           // 0x0320(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            SmokeParticles;                                          // 0x0328(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            MainBodyRotation;                                        // 0x0330(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H6BL[0x4];                                   // 0x033C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMesh*                                       DestroyedMesh;                                           // 0x0340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           ExplosionSound;                                          // 0x0348(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     ExplosionEffect;                                         // 0x0350(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATowerEventModule*                                   PreviousModule;                                          // 0x0358(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATowerEventModule*                                   NextModule;                                              // 0x0360(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         ArmorMesh;                                               // 0x0368(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    ArmorPieces;                                             // 0x0370(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ArmorLifetime;                                           // 0x0374(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ArmorPopForce;                                           // 0x0378(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ArmorShedDelay;                                          // 0x037C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UStaticMeshComponent*>                        ArmorMeshes;                                             // 0x0380(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		void OnAttack();
		void HideArmorPlates();
		void DestroyArmor();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AimingTowerEventModule
	 * Size -> 0x0018 (FullSize[0x03A8] - InheritedSize[0x0390])
	 */
	class AAimingTowerEventModule : public ATowerEventModule
	{
	public:
		struct FRotator                                            AimRotation;                                             // 0x0390(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3SE5[0x4];                                   // 0x039C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              CurrentTarget;                                           // 0x03A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TracerManager
	 * Size -> 0x0098 (FullSize[0x00C8] - InheritedSize[0x0030])
	 */
	class UTracerManager : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_EIZZ[0x20];                                  // 0x0030(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StartScale;                                              // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WhizByStartDistance;                                     // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WhizByMaxDistanceFromTrajectory;                         // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WhizBySpeed;                                             // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7TS1[0x68];                                  // 0x0060(0x0068) MISSED OFFSET (PADDING)

	public:
		void AddTracer(const struct FVector& Origin, const struct FVector& Destination, float Speed, class UParticleSystem* particle, float MinDistance, float Offset, class UParticleSystem* Trail);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TrackBuilderMovement
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UTrackBuilderMovement : public UActorComponent
	{
	public:
		float                                                      MovementSpeed;                                           // 0x00B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3BZ8[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TrackMovementStateComponent
	 * Size -> 0x0150 (FullSize[0x0250] - InheritedSize[0x0100])
	 */
	class UTrackMovementStateComponent : public UCharacterStateComponent
	{
	public:
		class UAudioComponent*                                     AudioStartComponent;                                     // 0x0100(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     AudioDuringComponent;                                    // 0x0108(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     AudioStopComponent;                                      // 0x0110(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          AudioOnStart;                                            // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          AudioOnDuring;                                           // 0x0120(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          AudioOnStop;                                             // 0x0128(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AudioOnFadeOut;                                          // 0x0130(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KR81[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDialogDataAsset*                                    StateUpdateShout;                                        // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StateUpdateShoutFrequencySecsMin;                        // 0x0140(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StateUpdateShoutFrequencySecsMax;                        // 0x0144(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AudioDuringSlidingSpeedParam;                            // 0x0148(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpeedTarget;                                             // 0x014C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpeedMin;                                                // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpeedMax;                                                // 0x0154(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AccelerationBase;                                        // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AccelerationMultiplier;                                  // 0x015C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DecelerationMultiplier;                                  // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AccelerationOnSlopeMultiplier;                           // 0x0164(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DecelerationOnSlopeMultiplier;                           // 0x0168(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StoppingDeceleration;                                    // 0x016C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StoppingDistance;                                        // 0x0170(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PRC2[0x4];                                   // 0x0174(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ConnectorClass[0x28];                                    // 0x0178(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class AZipLineConnector*                                   Connector;                                               // 0x01A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EExitTrackMode                                             ExitMode;                                                // 0x01A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_880K[0x3];                                   // 0x01A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPipelineMovementData                               TrackMovementData;                                       // 0x01AC(0x001C) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V1X1[0x88];                                  // 0x01C8(0x0088) MISSED OFFSET (PADDING)

	public:
		void ServerExitMode(EExitTrackMode eMode);
		void ServerAddTemporaryAcceration(float Acceleration, float Duration);
		void OnRep_TrackMovementdata(struct FPipelineMovementData* oldState);
		void JumpPressed();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TreasureBox
	 * Size -> 0x0078 (FullSize[0x0308] - InheritedSize[0x0290])
	 */
	class ATreasureBox : public ATreasureContainer
	{
	public:
		class URepairableComponent*                                repairable;                                              // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class URepairableUsable*                                   RepairUsable;                                            // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USingleUsableComponent*                              HammeringUsable;                                         // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTerrainPlacementComponent*                          terrainPlacement;                                        // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                MiddlePlane;                                             // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              BoxMesh;                                                 // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AActor*>                                      Batteries;                                               // 0x02C0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		float                                                      CollectActivationDelay;                                  // 0x02D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OB0M[0x4];                                   // 0x02D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequenceBase*                                   OpenBoxAnim;                                             // 0x02D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayToOpenAfterRepair;                                  // 0x02E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B4LJ[0x4];                                   // 0x02E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ResourceClass;                                           // 0x02E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTreasureRewarder*                                   boxRewarder;                                             // 0x02F0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HologramRotationSpeed;                                   // 0x02F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O4QX[0x4];                                   // 0x02FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ItemsInserted;                                           // 0x0300(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3YYP[0x1];                                   // 0x0304(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsTreasureAvailable;                                     // 0x0305(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MZTV[0x2];                                   // 0x0306(0x0002) MISSED OFFSET (PADDING)

	public:
		void PlaceResources(class AProceduralSetup* Setup, float Radius, class UDebrisPositioning* DebrisPositioning, TArray<struct FVector> locationsToAvoid, class UCurveFloat* AvoidCostCurve);
		void OnUsedEvent(class APlayerCharacter* User, EInputKeys Key);
		void OnRepairedEvent(class URepairableComponent* repaired);
		void OnHammerProgress(float Progress);
		void OnHammered(class APlayerCharacter* User, EInputKeys Key);
		void OnFullyRepairedEvent(class URepairableComponent* repaired);
		void OnAllResourcesCollectedEvent(class URepairableComponent* repaired);
		void BP_OnCollectedTreasure(class APlayerCharacter* collector);
		void AfterRepairDelay();
		void ActivateCollection();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TreasureBoxAnimInstance
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class UTreasureBoxAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_2EAJ[0x4];                                   // 0x02B8(0x0004) Fix Super Size
		float                                                      PhysicsAlpha;                                            // 0x02BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsTreasureAvailable;                                     // 0x02C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsLeftInserted;                                          // 0x02C1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsRightInserted;                                         // 0x02C2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5KJG[0xD];                                   // 0x02C3(0x000D) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TreasureFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTreasureFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TreasureRewarder
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UTreasureRewarder : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SkinTreasureRewarder
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class USkinTreasureRewarder : public UTreasureRewarder
	{
	public:
		class UItemSkin*                                           GivenSkin;                                               // 0x00B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UItemID*                                             GivenSkinID;                                             // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VictoryPoseRewarder
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UVictoryPoseRewarder : public UTreasureRewarder
	{
	public:
		class UVictoryPose*                                        GivenPose;                                               // 0x00B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPlayerCharacterID*                                  GivenCharacterID;                                        // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxePartRewarder
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UPickaxePartRewarder : public UTreasureRewarder
	{
	public:
		class UPickaxePart*                                        PickaxePart;                                             // 0x00B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanityItemRewarder
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UVanityItemRewarder : public UTreasureRewarder
	{
	public:
		class UVanityItem*                                         GivenVanityItem;                                         // 0x00B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPlayerCharacterID*                                  GivenCharacterID;                                        // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TreasureSettings
	 * Size -> 0x0138 (FullSize[0x0168] - InheritedSize[0x0030])
	 */
	class UTreasureSettings : public UDataAsset
	{
	public:
		TArray<ETreasureType>                                      CrateTreasureTypes;                                      // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class FText                                                CrateTreasureEmptyMsg;                                   // 0x0040(0x0018) Edit, NativeAccessSpecifierPublic
		TArray<ETreasureType>                                      LostPackTreasureTypes;                                   // 0x0058(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class FText                                                LostPackEmptyMsg;                                        // 0x0068(0x0018) Edit, NativeAccessSpecifierPublic
		class UItemAquisitionSource*                               CrateAquisitionSource;                                   // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UItemAquisitionSource*                               LostPackAquisitionSource;                                // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  TreasureChanceMissionLengthCurve;                        // 0x0090(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		TArray<class USpecialEvent*>                               TreasureEvents;                                          // 0x0118(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSpecialChanceEventItem>                     SpecialChancedEvent;                                     // 0x0128(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UVictoryPose*>                                VictoryPoses;                                            // 0x0138(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		TArray<class UItemSkinSet*>                                SkinSets;                                                // 0x0148(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UDrinkableDataAsset*>                         Drinks;                                                  // 0x0158(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TreeOfVanity
	 * Size -> 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
	 */
	class UTreeOfVanity : public USavableDataAsset
	{
	public:
		TArray<struct FVanityNode>                                 Nodes;                                                   // 0x0058(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		void ClearNodes();
		void AddNode(class UReward* Reward, int32_t NodeID, TArray<int32_t> ConnectedNodes, bool isStartingNode, bool isBig, const struct FVector2D& Position);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TreeOfVanityItemWidget
	 * Size -> 0x0048 (FullSize[0x02A8] - InheritedSize[0x0260])
	 */
	class UTreeOfVanityItemWidget : public UUserWidget
	{
	public:
		class UReward*                                             Reward;                                                  // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsPrimaryReward;                                        // 0x0268(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsStartingNode;                                         // 0x0269(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_08JE[0x6];                                   // 0x026A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UTreeOfVanityItemWidget*>                     ConnectedNodes;                                          // 0x0270(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		int32_t                                                    NodeID;                                                  // 0x0280(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsClickable;                                            // 0x0284(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F68R[0x3];                                   // 0x0285(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UReward*                                             DefaultReward;                                           // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UUserWidget*>                                 NodeConnections;                                         // 0x0290(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsBought;                                               // 0x02A0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NB5S[0x7];                                   // 0x02A1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetIsBought(bool inIsBought);
		void SetData(class UReward* InReward, bool inIsPrimaryReward, bool inIsStartingNode, TArray<class UTreeOfVanityItemWidget*> inConnectedNodes, int32_t inNodeID);
		void OnDataUpdated();
		bool GetIsBought();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TremorAttackComponent
	 * Size -> 0x0050 (FullSize[0x0178] - InheritedSize[0x0128])
	 */
	class UTremorAttackComponent : public USpecialDamageAttackComponent
	{
	public:
		unsigned char                                              UnknownData_5EIA[0x18];                                  // 0x0128(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsAttackActive;                                          // 0x0140(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5L9P[0x7];                                   // 0x0141(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent*                                       CollisionComponent;                                      // 0x0148(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            ParticlesComponent;                                      // 0x0150(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialParticlesDelay;                                   // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PostParticleDelay;                                       // 0x015C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetMaxDistanceFromGround;                             // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenDamageTicks;                                  // 0x0164(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LaunchForce;                                             // 0x0168(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Duration;                                                // 0x016C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SUUO[0x8];                                   // 0x0170(0x0008) MISSED OFFSET (PADDING)

	public:
		void StopParticles();
		void StartParticles();
		void OnTargetExitedTrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnTargetEnteredTrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnRep_IsAttackActive();
		bool IsInited();
		void InitTremorAttack(class UBoxComponent* Box, class UParticleSystemComponent* Particles);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TunnelParameters
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UTunnelParameters : public UDataAsset
	{
	public:
		class UFloodFillSettings*                                  PathfinderNoise;                                         // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PathZPenalty;                                            // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PathDirectionPenalty;                                    // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PathEntranceAnglePenalty;                                // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ObstacleCostScale;                                       // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AllowBlockedEntrances;                                   // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PickBestMatchingEntrance;                                // 0x0049(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0SR4[0x6];                                   // 0x004A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TunnelSegmentSetting
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UTunnelSegmentSetting : public UDataAsset
	{
	public:
		class UTerrainMaterial*                                    Material;                                                // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  PathfinderNoise;                                         // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  CielingNoise;                                            // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  WallNoise;                                               // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  FloorNoise;                                              // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           VRange;                                                  // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           HRange;                                                  // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           Cielingheight;                                           // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           FloorHeight;                                             // 0x0070(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           CielingNoiseRange;                                       // 0x0078(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           WallNoiseRange;                                          // 0x0080(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           FloorNoiseRange;                                         // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TunnelSettings
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UTunnelSettings : public UDataAsset
	{
	public:
		class UTerrainMaterial*                                    Material;                                                // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  PathfinderNoise;                                         // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  CielingNoise;                                            // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  WallNoise;                                               // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  FloorNoise;                                              // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           VRange;                                                  // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           HRange;                                                  // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           Cielingheight;                                           // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           FloorHeight;                                             // 0x0070(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           CielingNoiseRange;                                       // 0x0078(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           WallNoiseRange;                                          // 0x0080(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           FloorNoiseRange;                                         // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TunnelSetting
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UTunnelSetting : public UDataAsset
	{
	public:
		class UFloodFillSettings*                                  PathfinderNoise;                                         // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTunnelSegmentSetting*                               BaseSegmentSetting;                                      // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTunnelSegmentSetting*                               TightBendSegmentSetting;                                 // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTunnelSegmentSetting*                               DirtSegmentSetting;                                      // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTunnelSegmentSetting*                               DirtOffsetSetting;                                       // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FTunnelSettingItem>                          VariationSegments;                                       // 0x0058(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      Weight;                                                  // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZRJ8[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TutorialContentWidget
	 * Size -> 0x0010 (FullSize[0x0290] - InheritedSize[0x0280])
	 */
	class UTutorialContentWidget : public UFSDUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnTutorialFinished;                                      // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic

	public:
		void OnTutorialFinished__DelegateSignature(class UTutorialContentWidget* TutorialWidget);
		void OnShown();
		void OnRemoveWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TutorialLevelWidget
	 * Size -> 0x0028 (FullSize[0x02A8] - InheritedSize[0x0280])
	 */
	class UTutorialLevelWidget : public UFSDUserWidget
	{
	public:
		unsigned char                                              UnknownData_HDUB[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DelayBetweenTutorials;                                   // 0x0288(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_04RF[0x1C];                                  // 0x028C(0x001C) MISSED OFFSET (PADDING)

	public:
		void ShowTutorialWidget(class UClass* TutorialWidget, bool ignoreQueue);
		void RemoveTutorialWidget(class UTutorialContentWidget* TutorialWidget);
		void RemoveAllTutorials();
		void OnTutorialFinished(class UTutorialContentWidget* TutorialWidget);
		void OnNewActiveTutorial(class UTutorialContentWidget* Widget);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TutorialManager
	 * Size -> 0x0040 (FullSize[0x0260] - InheritedSize[0x0220])
	 */
	class ATutorialManager : public AActor
	{
	public:
		float                                                      MinimumTimeBetweenTutorials;                             // 0x0220(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ResetTutorialsOnStart;                                   // 0x0224(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowTutorialsDebug;                                      // 0x0225(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TCBX[0x2];                                   // 0x0226(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AFSDPlayerController>                 PlayerController;                                        // 0x0228(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APlayerCharacter>                     PlayerCharacter;                                         // 0x0230(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UFSDSaveGame>                         SaveGame;                                                // 0x0238(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class UTutorialComponent>>           Tutorials;                                               // 0x0240(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UTutorialComponent>                   ActiveTutorial;                                          // 0x0250(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RVQO[0x8];                                   // 0x0258(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.TutorialWidget
	 * Size -> 0x0008 (FullSize[0x0288] - InheritedSize[0x0280])
	 */
	class UTutorialWidget : public UFSDUserWidget
	{
	public:
		float                                                      RemainingVisibleTime;                                    // 0x0280(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JYP6[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (PADDING)

	public:
		void Show(const class FText& Text, const class FText& Title, const class FText& TaskText, class UTexture2D* Image, float Duration);
		void OnShow(const class FText& Text, const class FText& Title, const class FText& TaskText, class UTexture2D* Image);
		void OnHide(bool watched);
		void Hide(bool watched);
		void ChangeHintDuration(float NewDuration);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BTTask_TunnelToTarget
	 * Size -> 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
	 */
	class UBTTask_TunnelToTarget : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0070(0x0028) Edit, NativeAccessSpecifierPrivate
		float                                                      BurrowSpeed;                                             // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      BurrowDuration;                                          // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FFloatInterval                                      DurationClamp;                                           // 0x00A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DroneMiningState
	 * Size -> 0x00C8 (FullSize[0x0180] - InheritedSize[0x00B8])
	 */
	class UDroneMiningState : public UDroneStateComponentBase
	{
	public:
		unsigned char                                              UnknownData_JBR0[0x88];                                  // 0x00B8(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDroneMiningToolBase*                                DroneMiningTool;                                         // 0x0140(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTerrainMaterial*                                    HeartStoneMateiral;                                      // 0x0148(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartMiningRange;                                        // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MiningRange;                                             // 0x0154(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SameHitRadius;                                           // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MineRadius;                                              // 0x015C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MiningStrength;                                          // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MD2U[0x4];                                   // 0x0164(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EmbeddedSearchRadius;                                    // 0x0168(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FVF4[0x14];                                  // 0x016C(0x0014) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.HeightenedSenseComponent
	 * Size -> 0x0028 (FullSize[0x00E8] - InheritedSize[0x00C0])
	 */
	class UHeightenedSenseComponent : public UFloatPerkComponent
	{
	public:
		class UPawnAffliction*                                     HeightenSenseAffliction;                                 // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AlertDistance;                                           // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OW4Z[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FHeightenedSenseTracker>                     ActiveTrackers;                                          // 0x00D0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       bAfflictionActivated;                                    // 0x00E0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1E16[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (PADDING)

	public:
		void RemoveTracker(class AActor* TrackerActor);
		void AddTracker(class AActor* TrackerActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UIFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UUIFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetLoadoutIcon(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, int32_t loadoutIndex, int32_t iconIndex);
		void RemoveItemUINotification(class UObject* WorldContextObject, TArray<class UObject*> Item, bool MatchChildNotifications);
		bool IsInItemUINotificationSet(class UObject* WorldContextObject, class UObject* Item);
		int64_t GetUnixTimeStamp();
		int32_t GetLoadoutIcon(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, int32_t loadoutIndex);
		TArray<class FText> FormatNewsTexts(TArray<class FText> texts, int32_t RandomSeed, class UNewsTextLists* wordList, class UMissionNameBank* MissionNameBank);
		void ClearAllItemUINotifications(class UObject* WorldContextObject);
		void CheckItemUINotification(class UObject* WorldContextObject, TArray<class UObject*> Item, bool* HasNotification, bool MatchChildNotifications);
		void AddItemUINotification(class UObject* WorldContextObject, TArray<class UObject*> Item);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.InfectionPointCleaningComponent
	 * Size -> 0x00B8 (FullSize[0x0168] - InheritedSize[0x00B0])
	 */
	class UInfectionPointCleaningComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnPointVacuumed;                                         // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPointFoamed;                                           // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bIsInitialized;                                          // 0x00D0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasBeenReplicated;                                      // 0x00D1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AZZ9[0x6];                                   // 0x00D2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UDifficultySetting*, int32_t>                   DifficultyModifiers;                                     // 0x00D8(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      CleanedParticles;                                        // 0x0128(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      particleScale;                                           // 0x0130(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       outerLayerCleaned;                                       // 0x0134(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JPMQ[0x3];                                   // 0x0135(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<ECleanedStatus>                                     InfectionPoints;                                         // 0x0138(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		TArray<class UMeshComponent*>                              OuterLayerMeshes;                                        // 0x0148(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UMeshComponent*>                              InnerLayerMeshes;                                        // 0x0158(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void Reset();
		void OnRep_InfectionPoints(TArray<ECleanedStatus> oldInfectionPoints);
		void InitInfectionPoints(TArray<class UMeshComponent*> outerMeshes, TArray<class UMeshComponent*> innerMeshes);
		int32_t GetRequiredCleanCount();
		int32_t GetRemainingInfectedPoints();
		int32_t GetNumberOfInfectedPoints();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UpgradableGearComponent
	 * Size -> 0x0150 (FullSize[0x0200] - InheritedSize[0x00B0])
	 */
	class UUpgradableGearComponent : public UActorComponent
	{
	public:
		class UItemData*                                           ItemData;                                                // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FUpgradeTier>                                UpgradeTiers;                                            // 0x00B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UOverclockBank*                                      OverclockBank;                                           // 0x00C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UItemUpgrade*>                                AllOverclocks;                                           // 0x00D0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          IconLine;                                                // 0x00E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          IconBG;                                                  // 0x00E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          IconDetailed;                                            // 0x00F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              PreviewImage[0x28];                                      // 0x00F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              PreviewActor[0x28];                                      // 0x0120(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class FText                                                Name;                                                    // 0x0148(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                Category;                                                // 0x0160(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                Description;                                             // 0x0178(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		int32_t                                                    CreditCost;                                              // 0x0190(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OUCX[0x4];                                   // 0x0194(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UResourceData*, float>                          ResourceCost;                                            // 0x0198(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		int32_t                                                    RequiredCharacterLevel;                                  // 0x01E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KR9J[0x4];                                   // 0x01EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FMasteryItem>                                masteryLevels;                                           // 0x01F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void SetGearStatText(struct FGearStatEntry* Entry, const class FText& Text);
		bool PurchaseUpgrade(class UItemID* ItemID, class UItemUpgrade* Upgrade, class AFSDPlayerController* PlayerController, class UClass* previewedCharacter);
		bool PurchaseItem(class UObject* WorldContextObject, class UItemID* ItemID);
		bool PlayerOwnesUpgradeInAllTiers(class UClass* itemClass, class UObject* WorldContextObject);
		void MirrorUpgradePreviewStatus(struct FGearStatEntry* From, struct FGearStatEntry* To);
		bool IsUpgradeEquipped(class UClass* itemClass, class UItemUpgrade* Upgrade, class AFSDPlayerState* Player);
		bool IsTierUnLocked(class UObject* WorldContextObject, class UClass* itemClass, int32_t tierIndex, class UPlayerCharacterID* characterID);
		bool IsOverclockingEnabled(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, class UClass* itemClass);
		bool IsItemUnlocked(class UObject* WorldContextObject, class UItemID* Item);
		bool IsItemOwned(class UObject* WorldContextObject, class UItemID* Item);
		bool IsItemEquipped(class UObject* WorldContextObject, class UItemID* ItemID);
		int32_t GetUpgradeTier(class UClass* itemClass, class UItemUpgrade* ItemUpgrade);
		class FString GetSourceGearName();
		TMap<class UResourceData*, float> GetResourceCost();
		int32_t GetRequiredCharacterLevel();
		class UTexture2D* GetPreviewImage();
		class UClass* GetPreviewActorClass();
		TArray<class UItemUpgrade*> GetOverClocks();
		int32_t GetMasteryProgress(class UObject* WorldContextObject, class UItemID* ItemID, int32_t* maxMastery);
		TArray<struct FMasteryItem> GetMasteryLevels(class UItemID* ItemID);
		bool GetMasteryForLevel(TArray<struct FMasteryItem> masteryLevels, int32_t Level, struct FMasteryItem* outLevel);
		TArray<struct FUpgradeTier> GetItemUpgradeTiers(class UClass* itemClass);
		EItemUpgradeStatus GetItemUpgradeStatus(class UObject* WorldContextObject, class UClass* itemClass, class UItemUpgrade* ItemUpgrade, class UPlayerCharacterID* characterID);
		TArray<class UItemUpgrade*> GetItemUpgradesFromSave(class UClass* itemClass, class UClass* upgradeClass, class AFSDPlayerState* Player, unsigned char upgradeIndex);
		class UClass* GetItemPreviewClassFromActor(class UClass* Actor);
		class UClass* GetItemPreviewClass(class UItemID* ItemID);
		bool GetItemMasteryForLevel(class UItemID* ItemID, int32_t Level, struct FMasteryItem* outLevel);
		class UTexture2D* GetIconLine();
		class UTexture2D* GetIconDetailed();
		class UTexture2D* GetIconBG();
		class FText GetGearStatValue(struct FGearStatEntry* Entry);
		TArray<struct FGearStatEntry> GetGearStats(class AFSDPlayerState* PlayerState, class UClass* ActorClass);
		class FString GetGearSourceName(class UItemID* ItemID);
		class FText GetGearName();
		class FText GetGearDescription();
		class FText GetGearCategory();
		TArray<class UItemUpgrade*> GetEquippedUpgrades(class UClass* itemClass, class AFSDPlayerState* Player);
		class UItemUpgrade* GetEquippedUpgradeAtTier(class UClass* itemClass, int32_t tierIndex, class UPlayerCharacterID* characterID, class AFSDPlayerState* Player);
		class UItemUpgrade* GetEquippedOverclock(class UObject* WorldContextObject, class UClass* itemClass);
		TArray<class UItemUpgrade*> GetEquippableOverclocks(class UObject* WorldContextObject, class UClass* itemClass, class UPlayerCharacterID* characterID);
		int32_t GetCreditCost();
		TArray<struct FCraftingCost> GetCraftingCost();
		int32_t GetCharacterLevelRequiredForItem(class UItemID* ItemID);
		TArray<class UItemUpgrade*> GetAllUpgrades();
		void ClearEquippedUpgrade(class UClass* itemClass, int32_t tierIndex, class AFSDPlayerState* Player);
		void CheckMasteryUnlocks(class UItemID* ItemID, class AFSDPlayerController* Player);
		bool CanItemOverclock(class UObject* WorldContextObject, class UClass* itemClass);
		bool CanAffordUpgrade(class UObject* WorldContextObject, class UItemUpgrade* Upgrade);
		bool CanAffordItem(class UObject* WorldContextObject, class UItemID* ItemID);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UpgradableItemComponent
	 * Size -> 0x0000 (FullSize[0x0200] - InheritedSize[0x0200])
	 */
	class UUpgradableItemComponent : public UUpgradableGearComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UpgradableBoscoComponent
	 * Size -> 0x0000 (FullSize[0x0200] - InheritedSize[0x0200])
	 */
	class UUpgradableBoscoComponent : public UUpgradableGearComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UpgradeSettings
	 * Size -> 0x00E0 (FullSize[0x0110] - InheritedSize[0x0030])
	 */
	class UUpgradeSettings : public UDataAsset
	{
	public:
		TArray<int32_t>                                            ClassAUpgradeCosts;                                      // 0x0030(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            ClassBUpgradeCosts;                                      // 0x0040(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            GearAUpgradeCosts;                                       // 0x0050(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            GearBUpgradeCosts;                                       // 0x0060(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            ArmorUpgradeCosts;                                       // 0x0070(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            PickaxeUpgradeCosts;                                     // 0x0080(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            ClassBoscoUpgradeCosts;                                  // 0x0090(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FUpgradeCostItem>                            ClassAResourceCosts;                                     // 0x00A0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FUpgradeCostItem>                            ClassBResourceCosts;                                     // 0x00B0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FUpgradeCostItem>                            GearAResourceCosts;                                      // 0x00C0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FUpgradeCostItem>                            GearBResourceCosts;                                      // 0x00D0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FUpgradeCostItem>                            ArmorResourceCosts;                                      // 0x00E0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FUpgradeCostItem>                            PickaxeResourceCosts;                                    // 0x00F0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FUpgradeCostItem>                            ClassBoscoResourceCosts;                                 // 0x0100(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RackableItemComponent
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class URackableItemComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnRacked;                                                // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTakenFromRack;                                         // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FText                                                ItemRackedText;                                          // 0x00D0(0x0018) Edit, NativeAccessSpecifierPublic
		class FText                                                ItemUnRackedText;                                        // 0x00E8(0x0018) Edit, NativeAccessSpecifierPublic
		bool                                                       AddToCharacterInventory;                                 // 0x0100(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0OKS[0x3];                                   // 0x0101(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RackKey;                                                 // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ItemRackComponent
	 * Size -> 0x0070 (FullSize[0x0280] - InheritedSize[0x0210])
	 */
	class UItemRackComponent : public USingleUsableComponent
	{
	public:
		class FScriptMulticastDelegate                             OnHasItemChanged;                                        // 0x0210(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X3IC[0x30];                                  // 0x0220(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUsableComponent*                                    UsableComponent;                                         // 0x0250(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     AttachToComponent;                                       // 0x0258(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                AttachPointSocket;                                       // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AttachToSocket;                                          // 0x0268(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_12U3[0x3];                                   // 0x0269(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RackKey;                                                 // 0x026C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URackableItemComponent*                              Item;                                                    // 0x0270(0x0008) ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BS4B[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		void RackItem(class AActor* Item, class APlayerCharacter* Character);
		void OnRep_Item(class URackableItemComponent* oldItem);
		void InitializeRackedItem(class URackableItemComponent* rackable);
		bool HasRackedItem();
		bool CanRackItem(class AActor* Item);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseAnimationSetting
	 * Size -> 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
	 */
	class UUseAnimationSetting : public UDataAsset
	{
	public:
		class UAnimMontage*                                        BeginFP;                                                 // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UAnimMontage*>                                LoopsFP;                                                 // 0x0038(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UAnimMontage*                                        EndFP;                                                   // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        BeginTP;                                                 // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UAnimMontage*>                                LoopsTP;                                                 // 0x0058(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UAnimMontage*                                        EndTP;                                                   // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsManuallyControlled;                                    // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       BlockUseWhileActive;                                     // 0x0071(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5JXX[0x2];                                   // 0x0072(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlockUseWhileActiveDuration;                             // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BPInstantUsable
	 * Size -> 0x0000 (FullSize[0x0170] - InheritedSize[0x0170])
	 */
	class UBPInstantUsable : public UInstantUsable
	{
	public:
		bool BPCanUse(class APlayerCharacter* User, class USceneComponent* useCollider);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ShieldBoostUsable
	 * Size -> 0x0000 (FullSize[0x0170] - InheritedSize[0x0170])
	 */
	class UShieldBoostUsable : public UInstantUsable
	{
	public:
		void OnCharacterBoosted(class APlayerCharacter* User, EInputKeys Key);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RepairableUsable
	 * Size -> 0x0000 (FullSize[0x0170] - InheritedSize[0x0170])
	 */
	class URepairableUsable : public UInstantUsable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ContinuousUsableComponent
	 * Size -> 0x0020 (FullSize[0x0140] - InheritedSize[0x0120])
	 */
	class UContinuousUsableComponent : public UUsableComponent
	{
	public:
		class FScriptMulticastDelegate                             UseTick;                                                 // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      TimeBetweenTicks;                                        // 0x0130(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0K9U[0x8];                                   // 0x0134(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       Usable;                                                  // 0x013C(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_08S8[0x3];                                   // 0x013D(0x0003) MISSED OFFSET (PADDING)

	public:
		void SetCanUse(bool CanUse);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.OncePerPlayerUsableComponent
	 * Size -> 0x0028 (FullSize[0x0198] - InheritedSize[0x0170])
	 */
	class UOncePerPlayerUsableComponent : public UInstantUsable
	{
	public:
		class FScriptMulticastDelegate                             OnUsersChangedEvent;                                     // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FUniqueNetIdRepl>                            Users;                                                   // 0x0180(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FMWI[0x8];                                   // 0x0190(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnUsersChanged(TArray<struct FUniqueNetIdRepl> userList);
		void OnRep_Users();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.EventRewarderUsableComponent
	 * Size -> 0x0020 (FullSize[0x0230] - InheritedSize[0x0210])
	 */
	class UEventRewarderUsableComponent : public USingleUsableComponent
	{
	public:
		class FText                                                RewardUseText;                                           // 0x0210(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4RJP[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (PADDING)

	public:
		class FText CreateUseText(int32_t blankSchematicCount);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SpecialEventUsableComponent
	 * Size -> 0x0000 (FullSize[0x0210] - InheritedSize[0x0210])
	 */
	class USpecialEventUsableComponent : public USingleUsableComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ControlEnemyUsable
	 * Size -> 0x0010 (FullSize[0x0180] - InheritedSize[0x0170])
	 */
	class UControlEnemyUsable : public UInstantUsable
	{
	public:
		unsigned char                                              UnknownData_M6G1[0x10];                                  // 0x0170(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UsableAggregator
	 * Size -> 0x0028 (FullSize[0x00F0] - InheritedSize[0x00C8])
	 */
	class UUsableAggregator : public UItemAggregator
	{
	public:
		class FScriptMulticastDelegate                             OnVisibilityChanged;                                     // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FText                                                UsingText;                                               // 0x00D8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		float GetProgress();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionSet
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UUseConditionSet : public UDataAsset
	{
	public:
		TArray<class UUseConditionBase*>                           Conditions;                                              // 0x0030(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionCollection
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UUseConditionCollection : public UDataAsset
	{
	public:
		TArray<class UUseConditionBase*>                           Conditions;                                              // 0x0030(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UUseConditionBase : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionGroup
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UUseConditionGroup : public UUseConditionBase
	{
	public:
		bool                                                       Invert;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7020[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUseConditionCollection*                             Collection;                                              // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionGrounded
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UUseConditionGrounded : public UUseConditionBase
	{
	public:
		bool                                                       Invert;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z3GV[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionIsOwner
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UUseConditionIsOwner : public UUseConditionBase
	{
	public:
		bool                                                       Invert;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N8RW[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionSaluting
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UUseConditionSaluting : public UUseConditionBase
	{
	public:
		bool                                                       Invert;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I219[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionCharacterState
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UUseConditionCharacterState : public UUseConditionBase
	{
	public:
		bool                                                       Invert;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GOJK[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              CharacterStates[0x10];                                   // 0x0030(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionCarriedActor
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UUseConditionCarriedActor : public UUseConditionBase
	{
	public:
		bool                                                       Invert;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4JSF[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              Actors[0x10];                                            // 0x0030(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionIsCarrying
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UUseConditionIsCarrying : public UUseConditionBase
	{
	public:
		bool                                                       Invert;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PRQ2[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionEquippedItem
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UUseConditionEquippedItem : public UUseConditionBase
	{
	public:
		bool                                                       Invert;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HCAY[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              Items[0x10];                                             // 0x0030(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionItemBlockAction
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UUseConditionItemBlockAction : public UUseConditionBase
	{
	public:
		bool                                                       Invert;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XIRP[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionOwnerIsAlive
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UUseConditionOwnerIsAlive : public UUseConditionBase
	{
	public:
		bool                                                       Invert;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8XX8[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UseConditionMovementMode
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UUseConditionMovementMode : public UUseConditionBase
	{
	public:
		bool                                                       Invert;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8YLL[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FMovementModeCombo>                          MovementModes;                                           // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.UsingStateComponent
	 * Size -> 0x0000 (FullSize[0x0100] - InheritedSize[0x0100])
	 */
	class UUsingStateComponent : public UCharacterStateComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SoapVacuumItem
	 * Size -> 0x0068 (FullSize[0x04C8] - InheritedSize[0x0460])
	 */
	class ASoapVacuumItem : public APlagueCleanupItem
	{
	public:
		class UCapsuleComponent*                                   VacuumCapsule;                                           // 0x0460(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   NS_Vacuum_FP;                                            // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   NS_Vacuum_TP;                                            // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCurrentVolumeChanged;                                  // 0x0478(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W7FA[0x20];                                  // 0x0488(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VacuumCooldown;                                          // 0x04A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OYSL[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VacuumRadius;                                            // 0x04B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VacuumRange;                                             // 0x04B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentVacuumEffectStrenght;                             // 0x04B8(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxVacuumEffectStrength;                                 // 0x04BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VacuumEffectFoamSuckTime;                                // 0x04C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastPuddleSuckTime;                                      // 0x04C4(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Server_StartVacuumingPuddle(class AActor* Target);
		void OnFoamPuddleCollected_Unreliable();
		void ItemEnterVacuum(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		class USceneComponent* GetVacuumSource();
		void All_Visual_PuddleStartCollect();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VacuumAnimInstance
	 * Size -> 0x0000 (FullSize[0x02D0] - InheritedSize[0x02D0])
	 */
	class UVacuumAnimInstance : public UCleanupToolAnimInstance
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ValidationFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UValidationFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetSelectedAssets(TArray<class FString> Paths);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ValidatorStrategy
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UValidatorStrategy : public UObject
	{
	public:
		unsigned char                                              UnknownData_8191[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SimpleNameStrategy
	 * Size -> 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
	 */
	class USimpleNameStrategy : public UValidatorStrategy
	{
	public:
		unsigned char                                              UnknownData_PXCE[0x30];                                  // 0x0040(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PrefixNameStrategy
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UPrefixNameStrategy : public USimpleNameStrategy
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PostfixNameStrategy
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UPostfixNameStrategy : public USimpleNameStrategy
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PreOrPostfixNameStrategy
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UPreOrPostfixNameStrategy : public USimpleNameStrategy
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ContainsNameStrategy
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UContainsNameStrategy : public USimpleNameStrategy
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.NotContainsNameStrategy
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UNotContainsNameStrategy : public USimpleNameStrategy
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ValidDependenciesStrategy
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UValidDependenciesStrategy : public UValidatorStrategy
	{
	public:
		unsigned char                                              UnknownData_JSOU[0x20];                                  // 0x0040(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanityAnimInstance
	 * Size -> 0x0068 (FullSize[0x0320] - InheritedSize[0x02B8])
	 */
	class UVanityAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_8K0M[0x4];                                   // 0x02B8(0x0004) Fix Super Size
		struct FVector                                             ArmorChestThickness;                                     // 0x02BC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            ArmorChestRotation;                                      // 0x02C8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             ExternalForce;                                           // 0x02D4(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExternalForceMultiplier;                                 // 0x02E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxForce;                                                // 0x02E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AlwaysShowAnimEffects;                                   // 0x02E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZLS4[0x7];                                   // 0x02E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVanityAnimEffect>                           VanityAnimEffects;                                       // 0x02F0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YG9U[0x20];                                  // 0x0300(0x0020) MISSED OFFSET (PADDING)

	public:
		void UpdateMeshes();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanityTestCharacter
	 * Size -> 0x0064 (FullSize[0x0520] - InheritedSize[0x04BC])
	 */
	class AVanityTestCharacter : public ACharacter
	{
	public:
		float                                                      BeardThickness;                                          // 0x04BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ArmorCoversBeard;                                        // 0x04C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_29AK[0x7];                                   // 0x04C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EVanitySlot, struct FVanityTestCharacterItem>         VanityItems;                                             // 0x04C8(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		class USkeletalMesh*                                       WeaponMesh;                                              // 0x0518(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetupVanity();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanityCharacter
	 * Size -> 0x0098 (FullSize[0x02B8] - InheritedSize[0x0220])
	 */
	class AVanityCharacter : public AActor
	{
	public:
		class UChildActorComponent*                                ChildActorComponent;                                     // 0x0220(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequenceBase*                                   Animation;                                               // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkinColorVanityItem*                                skinColor;                                               // 0x0230(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBeardColorVanityItem*                               BeardColor;                                              // 0x0238(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBeardColorVanityItem*                               DynamicBeardColor;                                       // 0x0240(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHeadVanityItem*                                     Head;                                                    // 0x0248(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UEyeBrowsVanityItem*                                 EyeBrows;                                                // 0x0250(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USideburnsVanityItem*                                Sideburns;                                               // 0x0258(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMoustacheVanityItem*                                Moustache;                                               // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBeardVanityItem*                                    Beard;                                                   // 0x0268(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UArmorVanityItem*                                    Armor;                                                   // 0x0270(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UArmorMaterialVanityItem*                            ArmorColor;                                              // 0x0278(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              BodyMesh;                                                // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBeardColorVanityItem*                               DefaultHairColor;                                        // 0x0290(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  DefaultArmorMaterial;                                    // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              itemClass;                                               // 0x02A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemSkin*                                           Framework;                                               // 0x02A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UItemSkin*                                           Paintjob;                                                // 0x02B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void DisplayVanity();
		void Clean();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanityFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UVanityFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void RandomizeVanityLoadout(class UObject* WorldContextObject, class APlayerCharacter* Character);
		void RandomizeAllRandomVanityLoadout(class APlayerCharacter* currentCharacter);
		void CopyPasteVanityLoadout(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId, int32_t fromIndex, int32_t toIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.IconGenerationBase
	 * Size -> 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
	 */
	class AIconGenerationBase : public AActor
	{
	public:
		class USceneCaptureComponent2D*                            ActiveCaptureComponent;                                  // 0x0220(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  DownScaleMaterial;                                       // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S1F4[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.IconGenerationCameraKey
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UIconGenerationCameraKey : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.IconSceneCaptureComponent
	 * Size -> 0x0008 (FullSize[0x08C0] - InheritedSize[0x08B8])
	 */
	class UIconSceneCaptureComponent : public USceneCaptureComponent2D
	{
	public:
		class UIconGenerationCameraKey*                            CameraKey;                                               // 0x08B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.IconGenerationCharacter
	 * Size -> 0x0038 (FullSize[0x0278] - InheritedSize[0x0240])
	 */
	class AIconGenerationCharacter : public AIconGenerationBase
	{
	public:
		class UMaterialInterface*                                  OrigBaseMaterial;                                        // 0x0240(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x0248(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              BodyMesh;                                                // 0x0250(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBeardColorVanityItem*                               HairColor;                                               // 0x0258(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  ArmorMaterial;                                           // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UIconSceneCaptureComponent*>                  CaptureComponents;                                       // 0x0268(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.PickaxeIconSceneCaptureComponent
	 * Size -> 0x0008 (FullSize[0x08C0] - InheritedSize[0x08B8])
	 */
	class UPickaxeIconSceneCaptureComponent : public USceneCaptureComponent2D
	{
	public:
		unsigned char                                              UnknownData_EBS6[0x8];                                   // 0x08B8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.IconGenerationPickaxe
	 * Size -> 0x0010 (FullSize[0x0250] - InheritedSize[0x0240])
	 */
	class AIconGenerationPickaxe : public AIconGenerationBase
	{
	public:
		TArray<class UPickaxeIconSceneCaptureComponent*>           CaptureComponents;                                       // 0x0240(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponIconSceneCaptureComponent
	 * Size -> 0x0008 (FullSize[0x08C0] - InheritedSize[0x08B8])
	 */
	class UWeaponIconSceneCaptureComponent : public USceneCaptureComponent2D
	{
	public:
		class UIconGenerationCameraKey*                            CameraKey;                                               // 0x08B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.IconGenerationWeapon
	 * Size -> 0x0010 (FullSize[0x0250] - InheritedSize[0x0240])
	 */
	class AIconGenerationWeapon : public AIconGenerationBase
	{
	public:
		TArray<class UWeaponIconSceneCaptureComponent*>            CaptureComponents;                                       // 0x0240(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanityEventSourceDataAsset
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UVanityEventSourceDataAsset : public UDataAsset
	{
	public:
		struct FVanityEventSource                                  EventSource;                                             // 0x0030(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanityMasteryLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UVanityMasteryLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void ResetVanityMasteryXP(class UObject* WorldContext);
		void MarkFashionitesAwardedForOldPurchasesSeen(class UObject* WorldContext);
		struct FVanityMasterySettings GetVanityMasterySettings();
		struct FVanityMasterySave GetVanityMasterySave(class UObject* WorldContext);
		int32_t GetVanityMasteryFashioniteForLevel(int32_t InCurrentLevel);
		int32_t GetFashionitesAwaredForOldPurchases(class UObject* WorldContext);
		float CalculateVanityMasteryLevelProgress(int32_t Level, int32_t XP);
		struct FVanityMasteryResult AddVanityMasteryXPFromCost(class UObject* WorldContext, TArray<struct FCraftingCost> Cost, class UPlayerCharacterID* characterID);
		struct FVanityMasteryResult AddVanityMasteryXP(class UObject* WorldContext, int32_t XP, class UPlayerCharacterID* PlayerId);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanitySchematicBank
	 * Size -> 0x0058 (FullSize[0x0090] - InheritedSize[0x0038])
	 */
	class UVanitySchematicBank : public USchematicBankBase
	{
	public:
		class USchematicCategory*                                  SchematicCategory;                                       // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UVanityItem*, struct FSchematicBankItem>        VanityItems;                                             // 0x0040(0x0050) Edit, NativeAccessSpecifierPublic

	public:
		void AppendItems(TArray<class UVanityItem*>* toArray);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanitySettings
	 * Size -> 0x01F0 (FullSize[0x0220] - InheritedSize[0x0030])
	 */
	class UVanitySettings : public UDataAsset
	{
	public:
		class UVanityItem*                                         MedbayArmorItem;                                         // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UVanityItem*>                                 MedbayArmorMaterials;                                    // 0x0038(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UDLCBase*                                            AlwaysLockedDLC;                                         // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVanityMasterySettings                              MasterySettings;                                         // 0x0050(0x0014) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_08WN[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FResourceSpawner                                    FashioniteSpawn;                                         // 0x0068(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		TArray<class UTexture2D*>                                  VanityCategoryIcons;                                     // 0x0080(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              ValidIDs[0x50];                                          // 0x0090(0x0050) UNKNOWN PROPERTY: SetProperty
		TMap<struct FGuid, class UVanityItem*>                     ItemMap;                                                 // 0x00E0(0x0050) Edit, Transient, EditConst, Protected, NativeAccessSpecifierProtected
		TMap<EVanitySlot, struct FVanitySlotCharacter>             GlobalItems;                                             // 0x0130(0x0050) Edit, Transient, EditConst, Protected, NativeAccessSpecifierProtected
		TMap<EVanitySlot, struct FVanitySlotCharacter>             StoreItems;                                              // 0x0180(0x0050) Edit, Transient, EditConst, Protected, NativeAccessSpecifierProtected
		TMap<EVanitySlot, struct FVanitySlotCharacter>             TreassureItems;                                          // 0x01D0(0x0050) Edit, Transient, EditConst, Protected, NativeAccessSpecifierProtected

	public:
		bool HasNewVanityNotification(class UObject* WorldContextObject, EVanitySlot Slot, class UPlayerCharacterID* characterID);
		class UTexture2D* GetVanityCategoryIcon(EVanitySlot Slot);
		void GetUnlockedStoreVanityCount(class UObject* WorldContextObject, EVanitySlot Slot, class UPlayerCharacterID* characterID, int32_t* owned, int32_t* Total);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VanityTattoo
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UVanityTattoo : public UDataAsset
	{
	public:
		unsigned char                                              Texture[0x28];                                           // 0x0030(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FVector2D                                           Location;                                                // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RotationAngle;                                           // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScaleBase;                                               // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScaleStretch;                                            // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5DOD[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VeinResourceCreator
	 * Size -> 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
	 */
	class UVeinResourceCreator : public UResourceCreator
	{
	public:
		class UVeinResourceData*                                   Resource;                                                // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDebrisPositioning*                                  Positioning;                                             // 0x0038(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECarveFilterType                                           CarveType;                                               // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QT5T[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SegmentMaxDot;                                           // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VeinWorldHorizontalMaxDot;                               // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VeinWorldHorizontalMinDot;                               // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRandRange                                          VeinLength;                                              // 0x0050(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		class UFloodFillSettings*                                  Noise;                                                   // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      range;                                                   // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NoiseRange;                                              // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              Debris[0x10];                                            // 0x0068(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VeinResourceData
	 * Size -> 0x0018 (FullSize[0x0108] - InheritedSize[0x00F0])
	 */
	class UVeinResourceData : public UResourceData
	{
	public:
		class UTerrainMaterial*                                    TerrainMaterial;                                         // 0x00F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UnitsPerLenth;                                           // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ScaleToResourceDistribution;                             // 0x00FC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XLJK[0x3];                                   // 0x00FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UVeinResourceCreator*                                ResourceCreator;                                         // 0x0100(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UTerrainMaterial* GetTerrainMaterial();
		float GetDesiredAmount(class AProceduralSetup* pls);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VictoryPoseFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UVictoryPoseFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsRandomVictoryPose(class UVictoryPose* VictoryPose);
		TArray<class UVictoryPose*> GetOwnedVictoryPoses(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		class UVictoryPose* GetEquippedVictoryPose(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VictoryPose
	 * Size -> 0x0118 (FullSize[0x0178] - InheritedSize[0x0060])
	 */
	class UVictoryPose : public USavablePrimaryDataAsset
	{
	public:
		unsigned char                                              UnknownData_TOAW[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                Title;                                                   // 0x0068(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                Description;                                             // 0x0080(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UItemAquisitionBase*                                 Aquisition;                                              // 0x0098(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              Walks[0x10];                                             // 0x00A0(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              pose[0x28];                                              // 0x00B0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              Prop_Actor[0x28];                                        // 0x00D8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              Prop_Walk[0x28];                                         // 0x0100(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              Prop_Pose[0x28];                                         // 0x0128(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              Prop_Idle[0x28];                                         // 0x0150(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		void Unlock(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		void ResetUnlock(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		bool IsUnlockedNotFromStart(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		bool IsUnlocked(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		void Equip(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VictoryPoseSchematicBank
	 * Size -> 0x0058 (FullSize[0x0090] - InheritedSize[0x0038])
	 */
	class UVictoryPoseSchematicBank : public USchematicBankBase
	{
	public:
		class USchematicCategory*                                  SchematicCategory;                                       // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UVictoryPose*, struct FSchematicBankItem>       VictoryPoses;                                            // 0x0040(0x0050) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.VictoryPoseSettings
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UVictoryPoseSettings : public UDataAsset
	{
	public:
		class UTexture2D*                                          GenericVictoryPoseIcon;                                  // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UVictoryPose*>                                LoadedVictoryPoses;                                      // 0x0038(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UVictoryPose*                                        RandomVictoryPose;                                       // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      ModReferencesHack;                                       // 0x0050(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      ModProxyHack;                                            // 0x0060(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		TArray<class UVictoryPose*> GetVictoryPoses();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WalkingStateComponent
	 * Size -> 0x0060 (FullSize[0x0160] - InheritedSize[0x0100])
	 */
	class UWalkingStateComponent : public UCharacterStateComponent
	{
	public:
		bool                                                       SlidingEnabled;                                          // 0x0100(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowDebug;                                               // 0x0101(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VVRT[0x2];                                   // 0x0102(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SlideAngle;                                              // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SlideAcceleration;                                       // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxSlideSpeed;                                           // 0x010C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxClimbDistance;                                        // 0x0110(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8I49[0x4];                                   // 0x0114(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          AudioSliding;                                            // 0x0118(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          IceSliding;                                              // 0x0120(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     AudioComponentSliding;                                   // 0x0128(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     AudioComponentIceSliding;                                // 0x0130(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TC3U[0x28];                                  // 0x0138(0x0028) MISSED OFFSET (PADDING)

	public:
		void TrackGrindCallback(class APlayerCharacter* User, EInputKeys Key);
		void Server_StartTrackMovement(class UTrackBuilderMovement* InMovement);
		void Server_SetIsSliding(bool isSliding);
		void JumpPress();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WallSaw
	 * Size -> 0x0130 (FullSize[0x0350] - InheritedSize[0x0220])
	 */
	class AWallSaw : public AActor
	{
	public:
		class UCapsuleComponent*                                   HitCapsule;                                              // 0x0220(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpeedCof;                                                // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WFZW[0x4];                                   // 0x022C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         VelOverTime;                                             // 0x0230(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            GroundParticles;                                         // 0x0238(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFakeSawMover                                       FakeMover;                                               // 0x0240(0x0070) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSawFakeMoveState                                   PosVel;                                                  // 0x02B0(0x0028) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      PopWeakpointRadius;                                      // 0x02D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlayerHitRangeFromCenter;                                // 0x02DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MUNI[0x70];                                  // 0x02E0(0x0070) MISSED OFFSET (PADDING)

	public:
		void UpdateCheckForWeakpoints();
		void SetMovementDirection(const struct FVector& Direction);
		void PushEnemyAndCheckForWeakpoint(class AActor* Actor);
		void OnRep_PosVel(const struct FSawFakeMoveState& PosVel);
		void OnDurationEnd();
		void Initialize(const struct FVector& Direction);
		bool HasJustHit(class AActor* enemy);
		void GrazeOverlapCallback(class AActor* Actor, class UPrimitiveComponent* prim);
		void All_Initialize(const struct FTransform& Transform, const struct FVector& Direction);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeakpointGlowComponent
	 * Size -> 0x00C8 (FullSize[0x0178] - InheritedSize[0x00B0])
	 */
	class UWeakpointGlowComponent : public UActorComponent
	{
	public:
		class FName                                                EmissiveParam;                                           // 0x00B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FWeakpointChannel>                           Channels;                                                // 0x00B8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NEOV[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  WeakpointHitCurve;                                       // 0x00D0(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      CurveMultiplier;                                         // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWeakpointGlowMode                                         Mode;                                                    // 0x015C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G1I7[0xB];                                   // 0x015D(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFSDPhysicalMaterial*                                WeakPointMaterial;                                       // 0x0168(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AddFirstChannelAutomatically;                            // 0x0170(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EWYI[0x3];                                   // 0x0171(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ReplaceMatIndex;                                         // 0x0174(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool StopLoopingGlow(int32_t aGlowID, bool aFade);
		void ShowBodypartHit(float Amount, float BaseAmount, const struct FDamageData& DamageData);
		void SetUpWeakPointGlowOnMeshByBone(class USkeletalMeshComponent* Mesh, int32_t MaterialIndex, const class FName& Bone, class UHealthComponentBase* HealthComponent);
		int32_t SetUpWeakPointGlowOnMesh(class UMeshComponent* Mesh, int32_t MaterialIndex, class UFSDPhysicalMaterial* PhysicalMaterial, class UHealthComponentBase* HealthComponent);
		void SetChannelEnabled(bool Enabled, int32_t Channel);
		void EnableWeakpointRegistration(bool Enabled);
		void All_ShowWeakPointHit(unsigned char Channel);
		void AddWeakpointGlow(bool loopIndefinitely, float LoopTime, class UCurveFloat* GrowCurve, class UCurveFloat* FadeCurve, int32_t UniqueId, int32_t Channel);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponFireOwner
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UWeaponFireOwner : public UInterface
	{
	public:
		class APlayerCharacter* GetPlayerCharacter();
		struct FQuat GetMuzzleQuat();
		struct FVector GetMuzzleLocation();
		bool GetIsLocallyControlled();
		bool GetIsFirstPerson();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AssaultRifle
	 * Size -> 0x0020 (FullSize[0x0770] - InheritedSize[0x0750])
	 */
	class AAssaultRifle : public AAmmoDrivenWeapon
	{
	public:
		float                                                      KillsResetAccuracyDuration;                              // 0x0750(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       KillsTriggersStatusEffect;                               // 0x0754(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_35Q8[0x13];                                  // 0x0755(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              KillTriggeredStatusEffect;                               // 0x0768(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnTimerElapsed();
		void OnEnemyKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);
		void Client_ResetAccuracy();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.FlareGun
	 * Size -> 0x0000 (FullSize[0x0750] - InheritedSize[0x0750])
	 */
	class AFlareGun : public AAmmoDrivenWeapon
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.SawedOffShotgun
	 * Size -> 0x0050 (FullSize[0x07A0] - InheritedSize[0x0750])
	 */
	class ASawedOffShotgun : public AAmmoDrivenWeapon
	{
	public:
		class UDamageComponent*                                    DamageComponent;                                         // 0x0750(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageComponent*                                    ShockWaveDamageComponent;                                // 0x0758(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FearFactorOnFire;                                        // 0x0760(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FearFactorOnFireRadius;                                  // 0x0764(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShotgunJumpEnabled;                                      // 0x0768(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KO9A[0x3];                                   // 0x0769(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShotgunJumpForce;                                        // 0x076C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShockwaveEnabled;                                        // 0x0770(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5AOQ[0x3];                                   // 0x0771(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShockWaveDistance;                                       // 0x0774(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShockWaveRadius;                                         // 0x0778(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShockWaveLength;                                         // 0x077C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SMIH[0x20];                                  // 0x0780(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetShockWaveDamageComponent(class UDamageComponent* Component);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Revoler
	 * Size -> 0x0018 (FullSize[0x0768] - InheritedSize[0x0750])
	 */
	class ARevoler : public AAmmoDrivenWeapon
	{
	public:
		float                                                      OnKillFearFactor;                                        // 0x0750(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OnKillFearRange;                                         // 0x0754(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S0BU[0x10];                                  // 0x0758(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.BasicPistol
	 * Size -> 0x0028 (FullSize[0x0778] - InheritedSize[0x0750])
	 */
	class ABasicPistol : public AAmmoDrivenWeapon
	{
	public:
		class UDamageComponent*                                    DamageComponent;                                         // 0x0750(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurstArmorDamageMultiplier;                              // 0x0758(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SSH5[0x8];                                   // 0x075C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ConsecutiveHitsDamageBonus;                              // 0x0764(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DQ1P[0xC];                                   // 0x0768(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ConsecutiveHitsMaxBonus;                                 // 0x0774(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnTargetDamaged(class UHealthComponentBase* Health, float Amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial);
		void OnHit(const struct FHitResult& HitResult, bool isAlwaysPenetrated);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ElectricalSMG
	 * Size -> 0x0048 (FullSize[0x0798] - InheritedSize[0x0750])
	 */
	class AElectricalSMG : public AAmmoDrivenWeapon
	{
	public:
		class UClass*                                              SentryGunClass;                                          // 0x0750(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              AoEStatusEffect;                                         // 0x0758(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     AoEParticle;                                             // 0x0760(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           AoESound;                                                // 0x0768(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AoEStatusEffectChance;                                   // 0x0770(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AoEStatusEffectRange;                                    // 0x0774(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TurretPlasmaLineEnabled;                                 // 0x0778(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GT6P[0x7];                                   // 0x0779(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       TurretEMPDischargeEnabled;                               // 0x0780(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_48B3[0x17];                                  // 0x0781(0x0017) MISSED OFFSET (PADDING)

	public:
		void OnTargetDamaged(class UHealthComponentBase* Health, float Amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial);
		void OnStatusEffectPushed(class UHealthComponentBase* Health);
		void All_OnAoETriggered(const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& Normal);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AutoShotgun
	 * Size -> 0x0010 (FullSize[0x0760] - InheritedSize[0x0750])
	 */
	class AAutoShotgun : public AAmmoDrivenWeapon
	{
	public:
		unsigned char                                              UnknownData_BO4T[0x8];                                   // 0x0750(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CQCKillBuff;                                             // 0x0758(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysicalMaterial, bool wasDirectHit);
		void OnTargetDamaged(class UHealthComponentBase* Health, float Amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.LineCutter
	 * Size -> 0x0028 (FullSize[0x0778] - InheritedSize[0x0750])
	 */
	class ALineCutter : public AAmmoDrivenWeapon
	{
	public:
		bool                                                       StopUsingReversesProjectile;                             // 0x0750(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RotateProjectileUntillStop;                              // 0x0751(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ExplodeLastProjectileOnNextFireAttempt;                  // 0x0752(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HI2Q[0x5];                                   // 0x0753(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UItemUpgrade*>                                upgrades;                                                // 0x0758(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ALineCutterProjectile>                LastProjectile;                                          // 0x0768(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinExplosiveGoodbyeActivationTimme;                      // 0x0770(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J0EW[0x4];                                   // 0x0774(0x0004) MISSED OFFSET (PADDING)

	public:
		void Server_StopRotatingProjectile();
		void Server_ReverseLastProjectile();
		void Server_DestroyOldProjectile();
		void OnRep_LastProjectile();
		void OnProjectileLaunched(class AProjectileBase* Projectile);
		void OnFireWhileLastProjectileAlive(class ALineCutterProjectile* Projectile);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.Magazine
	 * Size -> 0x0018 (FullSize[0x0238] - InheritedSize[0x0220])
	 */
	class AMagazine : public AActor
	{
	public:
		unsigned char                                              UnknownData_7VAJ[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ImpactGroundSound;                                       // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WC3Y[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnItemSkinned(class USkinEffect* Skin);
		void ActorWasHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponHitCountEffect
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UWeaponHitCountEffect : public UObject
	{
	public:
		bool                                                       UsesDamageEffects;                                       // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LT50[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponHitCounterComponent
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UWeaponHitCounterComponent : public UActorComponent
	{
	public:
		class UWeaponHitCountEffect*                               HitEffect;                                               // 0x00B0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RequiresWeakpointHit;                                    // 0x00B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AFRJ[0x17];                                  // 0x00B9(0x0017) MISSED OFFSET (PADDING)

	public:
		void Server_OnReloading();
		void OnTargetDamaged(class UHealthComponentBase* Health, float Amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial);
		void OnStoppedUsing();
		void OnReloading();
		void All_ShowDamageEffects(TArray<TWeakObjectPtr<class AActor>> Targets);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.DamageHitCountEffect
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UDamageHitCountEffect : public UWeaponHitCountEffect
	{
	public:
		float                                                      DamagePerHit;                                            // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4VQ7[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageClass*                                        DamageClass;                                             // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     DamageParticle;                                          // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           DamageSound;                                             // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DeadBugWalkingTargetMarking;                             // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O68V[0x3];                                   // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExtraDamageForCalculatingDBW;                            // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              DeadBugWalkingSTE;                                       // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SXVJ[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.StatusHitCountEffect
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UStatusHitCountEffect : public UWeaponHitCountEffect
	{
	public:
		class UClass*                                              StatusEffect;                                            // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChancePerHit;                                            // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EZ7B[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.RicochetHitCountEffect
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class URicochetHitCountEffect : public UWeaponHitCountEffect
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ChargedHitCountEffect
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UChargedHitCountEffect : public UWeaponHitCountEffect
	{
	public:
		unsigned char                                              UnknownData_YRNN[0x4];                                   // 0x0030(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DamagePerHit;                                            // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageClass*                                        DamageClass;                                             // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     DamageParticle;                                          // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           DamageSound;                                             // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeaponHitEffectComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UWeaponHitEffectComponent : public UActorComponent
	{
	public:
		float                                                      EffectChance;                                            // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WF9J[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ActorToSpawn;                                            // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Server_SpawnEffect(const struct FVector_NetQuantize& Location, const struct FRotator& Rotation);
		void OnHit(const struct FHitResult& HitResult, bool isAlwaysPenetrated);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WeightRoomSelectorLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UWeightRoomSelectorLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetupWeightedRoomSelector(struct FWeightedRoomSelector* Target, TArray<class URoomGenerator*>* Rooms);
		class URoomGenerator* SelectRandomRoom(struct FWeightedRoomSelector* Target, struct FRandomStream* RandomStream);
		class URoomGenerator* GetRandomRoom(TArray<class URoomGenerator*>* Rooms, bool removeChosenRoom, struct FRandomStream* RandomStream);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WidgetToRenderTargetComponent
	 * Size -> 0x00E0 (FullSize[0x0190] - InheritedSize[0x00B0])
	 */
	class UWidgetToRenderTargetComponent : public UActorComponent
	{
	public:
		class UClass*                                              WidgetClass;                                             // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FIntPoint                                           DrawSize;                                                // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bManuallyRedraw;                                         // 0x00C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRedrawRequested;                                        // 0x00C1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TDE7[0x2];                                   // 0x00C2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RedrawTime;                                              // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastWidgetRenderTime;                                    // 0x00C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWindowFocusable;                                        // 0x00CC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BLYQ[0x3];                                   // 0x00CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FIntPoint                                           CurrentDrawSize;                                         // 0x00D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawAtDesiredSize;                                      // 0x00D8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FQDR[0x3];                                   // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           Pivot;                                                   // 0x00DC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7VX0[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  BaseMaterial;                                            // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULocalPlayer*                                        OwnerPlayer;                                             // 0x00F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        BackgroundColor;                                         // 0x00F8(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        TintColorAndOpacity;                                     // 0x0108(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OpacityFromTexture;                                      // 0x0118(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsTwoSided;                                             // 0x011C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       TickWhenOffscreen;                                       // 0x011D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VMPR[0x2];                                   // 0x011E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUserWidget*                                         Widget;                                                  // 0x0120(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TB7U[0x20];                                  // 0x0128(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureRenderTarget2D*                              RenderTarget;                                            // 0x0148(0x0008) ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic*                            MaterialInstance;                                        // 0x0150(0x0008) ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEditTimeUsable;                                         // 0x0158(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F177[0x37];                                  // 0x0159(0x0037) MISSED OFFSET (PADDING)

	public:
		void SetWidget(class UUserWidget* Widget);
		void SetOwnerPlayer(class ULocalPlayer* LocalPlayer);
		void SetBackgroundColor(const struct FLinearColor& NewBackgroundColor);
		void RequestRedraw();
		class UUserWidget* GetUserWidgetObject();
		class UTextureRenderTarget2D* GetRenderTarget();
		class ULocalPlayer* GetOwnerPlayer();
		class UMaterialInstanceDynamic* GetMaterialInstance();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WindowManager
	 * Size -> 0x00E0 (FullSize[0x0190] - InheritedSize[0x00B0])
	 */
	class UWindowManager : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnFirstWindowOpened;                                     // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLastWindowClosed;                                      // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USoundCue*                                           AudioWindowOpen;                                         // 0x00D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UWindowWidget*>                               WindowStack;                                             // 0x00D8(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<class UClass*, class UWindowWidget*>                  WindowList;                                              // 0x00E8(0x0050) ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<class UClass*, TWeakObjectPtr<class UUserWidget>>     WidgetSingletonCache;                                    // 0x0138(0x0050) ExportObject, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		bool                                                       ResolutionDownscaleActive;                               // 0x0188(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XF6G[0x7];                                   // 0x0189(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetSingletonWidgetVisibility(class UClass* WidgetClass, ESlateVisibility Visibility);
		void ReplaceWindow(class UWindowWidget* Window);
		class UWindowWidget* OpenWindowFromClass(class UClass* WindowClass, int32_t ZOrder, bool ShowCursor);
		void OpenWindow(class UWindowWidget* Window, bool PlayAudio, bool ShowCursor);
		class UWindowWidget* OpenSingleUseWindow(class UClass* WindowClass, int32_t ZOrder);
		bool IsWindowOpen(class UWindowWidget* Window);
		bool IsTopWindow(class UWindowWidget* Window);
		class UUserWidget* GetOrCreateSingletonWidget(class UClass* WidgetClass, bool* WidgetCreated);
		class UWindowWidget* GetCurrentWindow();
		void CloseWindow(class UWindowWidget* Window);
		void CloseTopWindow();
		void CloseAllWindows();
		void CenterCursor();
		bool AnyWindowsOpen();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WoodLouse
	 * Size -> 0x01E8 (FullSize[0x0598] - InheritedSize[0x03B0])
	 */
	class AWoodLouse : public AEnemyDeepPathfinderCharacter
	{
	public:
		class USceneComponent*                                     RollingCenter;                                           // 0x03B0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnSensingComponent*                               PawnSensing;                                             // 0x03B8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XRFE[0x1];                                   // 0x03C0(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EWoodLouseState                                            forceState;                                              // 0x03C1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FPNI[0x2];                                   // 0x03C2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RollingCenterOffsetOnStanding;                           // 0x03C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RollingCenterOffsetOnFold;                               // 0x03C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GDXW[0x4];                                   // 0x03CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChanceToWalk;                                            // 0x03D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DebugAngle;                                              // 0x03D4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YSWK[0x23];                                  // 0x03D5(0x0023) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFakeMoverSettings*                                  FakeMoverSettings;                                       // 0x03F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BurstProjectileClass;                                    // 0x0400(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurstTime;                                               // 0x0408(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GPAL[0x4];                                   // 0x040C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      StatusEffectsOnRoll;                                     // 0x0410(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		struct FBumpPlayerHit                                      LastHit;                                                 // 0x0420(0x0018) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      TiltModifier;                                            // 0x0438(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurstXOffset;                                            // 0x043C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurstYOffset;                                            // 0x0440(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurstZOffset;                                            // 0x0444(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HighDifficultyCustomProjectileGravity;                   // 0x0448(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BurstCount;                                              // 0x044C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_10K3[0x4];                                   // 0x0450(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       InvounerableOnRoll;                                      // 0x0454(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       LockToRollMode;                                          // 0x0455(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       LockToWalkMode;                                          // 0x0456(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K04X[0x1];                                   // 0x0457(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForgetRange;                                             // 0x0458(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ForgetTime;                                              // 0x045C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DYK0[0x4];                                   // 0x0460(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RefreshTimeMax;                                          // 0x0464(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RefreshTimeMin;                                          // 0x0468(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BumpPower;                                               // 0x046C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DirectionalBumpPower;                                    // 0x0470(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWoodLouseState                                            CurrentState;                                            // 0x0474(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_62W9[0x23];                                  // 0x0475(0x0023) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              CurrentTarget;                                           // 0x0498(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FoldedStateMaxTime;                                      // 0x04A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FoldedStateMinTime;                                      // 0x04A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UnfoldedStateMaxTime;                                    // 0x04A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UnflodedStateMinTime;                                    // 0x04AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D8F8[0x8];                                   // 0x04B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          BumpSound;                                               // 0x04B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenBumpingSamePlayer;                            // 0x04C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinBumpDamage;                                           // 0x04C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxBumpDamage;                                           // 0x04C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BumpDamage;                                              // 0x04CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDamageClass*                                        BumpDamageType;                                          // 0x04D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxBumpPower;                                            // 0x04D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BumpRange;                                               // 0x04DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FB1O[0x4];                                   // 0x04E0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AcceptableAngles;                                        // 0x04E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RollSpeedModifier;                                       // 0x04E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RollAlpha;                                               // 0x04EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TiltAlpha;                                               // 0x04F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S7YS[0x4];                                   // 0x04F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          RollingSound;                                            // 0x04F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                RollingSpeedParamName;                                   // 0x0500(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UAudioComponent>                      RollingSoundComponent;                                   // 0x0508(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFakeMoverSettings*                                  RollMoveSettings;                                        // 0x0510(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFakeMoverSettings*                                  StopRollMoveSettings;                                    // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   TargetQuery;                                             // 0x0520(0x0048) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GA8F[0x18];                                  // 0x0568(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       RotateTowardsTarget;                                     // 0x0580(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L1TG[0x3];                                   // 0x0581(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SeeTargetSafetyTime;                                     // 0x0584(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A3K6[0x4];                                   // 0x0588(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       WantsToStandUp;                                          // 0x058C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsShooting;                                              // 0x058D(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CanStandOnAnySurface;                                    // 0x058E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_S83V[0x9];                                   // 0x058F(0x0009) MISSED OFFSET (PADDING)

	public:
		void SwitchedState(EWoodLouseState CurrentState);
		void StopSpecial();
		void StartSpecial();
		void SetWantsToStandUp(bool aWantsToStandUp);
		void SetState(EWoodLouseState aState);
		void SetRotateToTarget(bool aRotateToTarget);
		void SeePawn(class APawn* aSenPawn);
		void OnRep_State();
		void OnRep_LastHit();
		EWoodLouseState GetRollerState();
		void BumpedTarget();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WoodLouseAnimInstance
	 * Size -> 0x0028 (FullSize[0x0480] - InheritedSize[0x0458])
	 */
	class UWoodLouseAnimInstance : public USpiderAnimInstance
	{
	public:
		unsigned char                                              UnknownData_3C2E[0x4];                                   // 0x0458(0x0004) Fix Super Size
		struct FVector2D                                           AngleToTarget;                                           // 0x045C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InterpSpeed;                                             // 0x0464(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BreakRollingWhenTimeLeft;                                // 0x0468(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWoodLouseState                                            RollerState;                                             // 0x046C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsWalking;                                               // 0x046D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsUpRight;                                               // 0x046E(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDoingSpecialAttack;                                    // 0x046F(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsUnFolded;                                              // 0x0470(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsGroundValid;                                           // 0x0471(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInRollState;                                           // 0x0472(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IdleToDownTurnLeftLock;                                  // 0x0473(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DownTurnLeftToIdleLock;                                  // 0x0474(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DownWalkToDownTurnLeftLock;                              // 0x0475(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       WoodlouseWalk;                                           // 0x0476(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IdleToDownWalkLock;                                      // 0x0477(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DownWalkToDownTurnRightLock;                             // 0x0478(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IdleToDownTurnRightLock;                                 // 0x0479(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VNQQ[0x6];                                   // 0x047A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.WormPod
	 * Size -> 0x0130 (FullSize[0x0378] - InheritedSize[0x0248])
	 */
	class AWormPod : public ATaggedActor
	{
	public:
		unsigned char                                              UnknownData_14LQ[0x8];                                   // 0x0248(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     Root;                                                    // 0x0250(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     ScalePoint;                                              // 0x0258(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              PodMesh;                                                 // 0x0260(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USimpleHealthComponent*                              Health;                                                  // 0x0268(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWormSpawned;                                           // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       Grown;                                                   // 0x0280(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ENHM[0x17];                                  // 0x0281(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        GrowthAnimation;                                         // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        PopAnimation;                                            // 0x02A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_12W3[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CarcasActor;                                             // 0x02B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  GrowthCurve;                                             // 0x02B8(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		class UEnemyDescriptor*                                    WormDescriptor;                                          // 0x0340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      PopParticles;                                            // 0x0348(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFXSystemAsset*                                      deathParticles;                                          // 0x0350(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           PopSound;                                                // 0x0358(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           deathSound;                                              // 0x0360(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ParentDeathDelay;                                        // 0x0368(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeathDelayVariance;                                      // 0x036C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WormCount;                                               // 0x0370(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IHKE[0x4];                                   // 0x0374(0x0004) MISSED OFFSET (PADDING)

	public:
		void SpawnWorms();
		void OnRep_Grown();
		void OnParentDeath(class UHealthComponentBase* ParentHealth);
		void OnDeath(class UHealthComponentBase* aHealth);
		void OnAnimEnded(class UAnimMontage* Montage, bool bInterrupted);
		void Kill();
		void All_ShowDeath(bool success);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.YesNoPromptWidget
	 * Size -> 0x0018 (FullSize[0x02B8] - InheritedSize[0x02A0])
	 */
	class UYesNoPromptWidget : public UWindowWidget
	{
	public:
		bool                                                       bDestroyOnClick;                                         // 0x02A0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCloseAllWindows;                                        // 0x02A1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1O4G[0x2];                                   // 0x02A2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      OnClickedCallback;                                       // 0x02A4(0x0010) ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I80B[0x4];                                   // 0x02B4(0x0004) MISSED OFFSET (PADDING)

	public:
		void Show(const class FText& Title, const class FText& Message, const class FScriptDelegate& OnYesNoClicked);
		void SetMappedResources(TMap<class UResourceData*, int32_t> Resources);
		void OnYesNoClickedDelegate__DelegateSignature(bool Yes);
		void OnShow(const class FText& Title, const class FText& Message);
		void OnClicked(bool Yes);
		void Clicked(bool YesClicked);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.YesNoPromptAction
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UYesNoPromptAction : public UBlueprintAsyncActionBase
	{
	public:
		class FScriptMulticastDelegate                             Yes;                                                     // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             No;                                                      // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptDelegate                                      YesNoDelegate;                                           // 0x0050(0x0010) ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UYesNoPromptWidget>                   ActivePrompt;                                            // 0x0060(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void YesNoOutputPin__DelegateSignature();
		class UYesNoPromptAction* PromptYesNo(class UObject* WorldContext, const struct FYesNoPromptSettings& Prompt);
		class UYesNoPromptAction* PromptPurchase(class UObject* WorldContext, const struct FYesNoPromptSettings& Prompt, TMap<class UResourceData*, int32_t> Resources);
		void PromptCallback(bool YesClicked);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ZipLineProjectile
	 * Size -> 0x0058 (FullSize[0x0278] - InheritedSize[0x0220])
	 */
	class AZipLineProjectile : public AActor
	{
	public:
		class UTimelineComponent*                                  Timeline;                                                // 0x0220(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LightIntensity;                                          // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaterialGlow;                                            // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptDelegate                                      Callback;                                                // 0x0230(0x0010) ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UCurveFloat*                                         LightCurve;                                              // 0x0240(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UPointLightComponent*>                        PointLights;                                             // 0x0248(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstances;                                       // 0x0258(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UClass*                                              OnUseStatusEffect;                                       // 0x0268(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              OnReleaseStatusEffect;                                   // 0x0270(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnTimelineTick(float NewValue);
		void OnShoot(const struct FVector& Origin, const struct FVector& EndLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ZiplineLauncherComponent
	 * Size -> 0x0010 (FullSize[0x0120] - InheritedSize[0x0110])
	 */
	class UZiplineLauncherComponent : public UWeaponFireComponent
	{
	public:
		ECollisionChannel                                          HitCollisionChannel;                                     // 0x0110(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I7JO[0x3];                                   // 0x0111(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ProjectileLocationOffset;                                // 0x0114(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ProjectileClass;                                         // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Server_Fire(const struct FVector_NetQuantize& Origin, const struct FVector_NetQuantize& Destination);
		void All_ShowHit();
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ZipLineItem
	 * Size -> 0x0058 (FullSize[0x07A8] - InheritedSize[0x0750])
	 */
	class AZipLineItem : public AAmmoDrivenWeapon
	{
	public:
		float                                                      MaxDistance;                                             // 0x0750(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDistance;                                             // 0x0754(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinAngle;                                                // 0x0758(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxAngle;                                                // 0x075C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagQuery                                   ExcludeSurfaceTags;                                      // 0x0760(0x0048) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		bool CanFireWeapon(class FText* FailMsg, class UDialogDataAsset** FailShout);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.AngleIndicatorWidget
	 * Size -> 0x0010 (FullSize[0x0290] - InheritedSize[0x0280])
	 */
	class UAngleIndicatorWidget : public UFSDUserWidget
	{
	public:
		float                                                      pixelsPerAngle;                                          // 0x0280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AlphaFade;                                               // 0x0284(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinAngle;                                                // 0x0288(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxAngle;                                                // 0x028C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ZipLineUsable
	 * Size -> 0x0000 (FullSize[0x0170] - InheritedSize[0x0170])
	 */
	class UZipLineUsable : public UInstantUsable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ZipLineConnector
	 * Size -> 0x0030 (FullSize[0x0250] - InheritedSize[0x0220])
	 */
	class AZipLineConnector : public AActor
	{
	public:
		TWeakObjectPtr<class APlayerCharacter>                     Character;                                               // 0x0220(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ZipLineLocation;                                         // 0x0228(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ZipLineDirection;                                        // 0x0234(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x0240(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bSpeeding;                                               // 0x024C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0ZYR[0x3];                                   // 0x024D(0x0003) MISSED OFFSET (PADDING)

	public:
		void ReceiveUpdateZipLinePoint(const struct FVector& WorldLocation, const struct FVector& Directioy, bool Speeding);
		void ReceiveDisconnected();
		void ReceiveConnected(const struct FVector& WorldLocation, const struct FVector& Direction);
		static UClass* StaticClass();
	};

	/**
	 * Class FSD.ZipLineStateComponent
	 * Size -> 0x0130 (FullSize[0x0230] - InheritedSize[0x0100])
	 */
	class UZipLineStateComponent : public UCharacterStateComponent
	{
	public:
		struct FZipLineConnectorHandler                            ZipLineConnector;                                        // 0x0100(0x0030) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      VerticalOffset;                                          // 0x0130(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HorizontalOffset;                                        // 0x0134(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TravelSpeed;                                             // 0x0138(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AccelAndDecelAlpha;                                      // 0x013C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      JumpForce;                                               // 0x0140(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpeedBoostActivationDuration;                            // 0x0144(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpeedBoostActivionMinAngle;                              // 0x0148(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BaseSpeedBoost;                                          // 0x014C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AdditionalSpeedBoostPerAngle;                            // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpeedBoostCoolDownDuration;                              // 0x0154(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AccelerationAlpha;                                       // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DecelerationAlpha;                                       // 0x015C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinStartDistanceToEnd;                                   // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReleaseDistance;                                         // 0x0164(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanActivateSpeedBoost;                                  // 0x0168(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowSpeedBoostActivator;                                // 0x0169(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R3T1[0x2];                                   // 0x016A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpeedBoostActivationProgress;                            // 0x016C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9B60[0x8];                                   // 0x0170(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          AudioOnStart;                                            // 0x0178(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          AudioOnDuring;                                           // 0x0180(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          AudioOnChangingDirection;                                // 0x0188(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          AudioOnStop;                                             // 0x0190(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundBase*                                          AudioOnSpeedBoostActivated;                              // 0x0198(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    ShoutStartUsing;                                         // 0x01A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDialogDataAsset*                                    ShoutSpeedBoostActivated;                                // 0x01A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AZipLineProjectile*                                  ZipLineProjectile;                                       // 0x01B0(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FZipLine                                            ZipLine;                                                 // 0x01B8(0x0038) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JAKT[0x14];                                  // 0x01F0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DamageBeforeFalling;                                     // 0x0204(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FriendlyFireModifier;                                    // 0x0208(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageResetTime;                                         // 0x020C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAudioComponent*                                     AudioComponent;                                          // 0x0210(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UVBL[0x18];                                  // 0x0218(0x0018) MISSED OFFSET (PADDING)

	public:
		void ServerSetSpeedBoostActivated(bool InBoostActivated);
		void ServerJumpPressed(bool JumpForward);
		void ServerForwardInputChanged(float Input);
		void ServerChangeDirection();
		void ReceiveSpeedBoostDeactivated();
		void ReceiveSpeedBoostActivated();
		void OnRep_ZipLine();
		void OnPlayerHit(float Damage, const struct FDamageData& DamageData, bool anyHealthLost);
		bool GetSpeedBoostActivated();
		struct FVector GetJumpVector(const struct FVector& LookVector, const struct FVector& CurrentVelocity);
		void All_SpeedBoostChanged(bool bActive);
		static UClass* StaticClass();
	};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
