#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Announcement_Controller

#include "Basic.hpp"

#include "Announcement_Controller_classes.hpp"
#include "Announcement_Controller_parameters.hpp"


namespace CG
{

// Function Announcement_Controller.Announcement_Controller_C.ExecuteUbergraph_Announcement_Controller
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::ExecuteUbergraph_Announcement_Controller(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "ExecuteUbergraph_Announcement_Controller");

	Params::Announcement_Controller_C_ExecuteUbergraph_Announcement_Controller Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.OnCollectedEverything_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InMessage                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void UAnnouncement_Controller_C::OnCollectedEverything_Event(const class FText& InMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "OnCollectedEverything_Event");

	Params::Announcement_Controller_C_OnCollectedEverything_Event Parms{};

	Parms.InMessage = std::move(InMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.OnCollectedVanityItem_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVanityItem*                      Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPlayerCharacterID*               CharacterID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::OnCollectedVanityItem_Event_0(class UVanityItem* Item, class UPlayerCharacterID* CharacterID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "OnCollectedVanityItem_Event_0");

	Params::Announcement_Controller_C_OnCollectedVanityItem_Event_0 Parms{};

	Parms.Item = Item;
	Parms.CharacterID = CharacterID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.OnCollectedPickaxePart_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPickaxePart*                     PickaxePart                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::OnCollectedPickaxePart_Event_0(class UPickaxePart* PickaxePart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "OnCollectedPickaxePart_Event_0");

	Params::Announcement_Controller_C_OnCollectedPickaxePart_Event_0 Parms{};

	Parms.PickaxePart = PickaxePart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.OnCollectedSchematic_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USchematic*                       Schematic                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::OnCollectedSchematic_Event(class USchematic* Schematic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "OnCollectedSchematic_Event");

	Params::Announcement_Controller_C_OnCollectedSchematic_Event Parms{};

	Parms.Schematic = Schematic;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.OnCollectedVictoryPose_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVictoryPose*                     Pose                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPlayerCharacterID*               CharacterID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::OnCollectedVictoryPose_Event_0(class UVictoryPose* Pose, class UPlayerCharacterID* CharacterID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "OnCollectedVictoryPose_Event_0");

	Params::Announcement_Controller_C_OnCollectedVictoryPose_Event_0 Parms{};

	Parms.Pose = Pose;
	Parms.CharacterID = CharacterID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.OnCollectedSkin
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UItemSkin*                        Skin                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UItemID*                          ItemID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::OnCollectedSkin(class UItemSkin* Skin, class UItemID* ItemID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "OnCollectedSkin");

	Params::Announcement_Controller_C_OnCollectedSkin Parms{};

	Parms.Skin = Skin;
	Parms.ItemID = ItemID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.OnResourceFullFinished
// (BlueprintCallable, BlueprintEvent)

void UAnnouncement_Controller_C::OnResourceFullFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "OnResourceFullFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Announcement_Controller.Announcement_Controller_C.OnResourceFullStarted
// (BlueprintCallable, BlueprintEvent)

void UAnnouncement_Controller_C::OnResourceFullStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "OnResourceFullStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Announcement_Controller.Announcement_Controller_C.OnFullHealthCannotHeal
// (BlueprintCallable, BlueprintEvent)

void UAnnouncement_Controller_C::OnFullHealthCannotHeal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "OnFullHealthCannotHeal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Announcement_Controller.Announcement_Controller_C.Do Resource Full
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UAnnouncement_Controller_C::Do_Resource_Full(const class FText& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "Do Resource Full");

	Params::Announcement_Controller_C_Do_Resource_Full Parms{};

	Parms.Param_Name = std::move(Param_Name);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.OnResourceIncreased
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCappedResource*                  Resource                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::OnResourceIncreased(class UCappedResource* Resource, float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "OnResourceIncreased");

	Params::Announcement_Controller_C_OnResourceIncreased Parms{};

	Parms.Resource = Resource;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.OnResourceFull
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCappedResource*                  Resource                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::OnResourceFull(class UCappedResource* Resource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "OnResourceFull");

	Params::Announcement_Controller_C_OnResourceFull Parms{};

	Parms.Resource = Resource;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.OnHealed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::OnHealed(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "OnHealed");

	Params::Announcement_Controller_C_OnHealed Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UAnnouncement_Controller_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Announcement_Controller.Announcement_Controller_C.CreateTextAnnouncement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Icon                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Icon_Tint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::CreateTextAnnouncement(const class FText& Text, const struct FLinearColor& Color, class UTexture2D* Icon, const struct FLinearColor& Icon_Tint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "CreateTextAnnouncement");

	Params::Announcement_Controller_C_CreateTextAnnouncement Parms{};

	Parms.Text = std::move(Text);
	Parms.Color = std::move(Color);
	Parms.Icon = Icon;
	Parms.Icon_Tint = std::move(Icon_Tint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.CreateValueAnnouncement
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FractionalDigits                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Icon                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Icon_Tint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::CreateValueAnnouncement(float Value, const class FText& Param_Name, const struct FLinearColor& Color, int32 FractionalDigits, class UTexture2D* Icon, const struct FLinearColor& Icon_Tint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "CreateValueAnnouncement");

	Params::Announcement_Controller_C_CreateValueAnnouncement Parms{};

	Parms.Value = Value;
	Parms.Param_Name = std::move(Param_Name);
	Parms.Color = std::move(Color);
	Parms.FractionalDigits = FractionalDigits;
	Parms.Icon = Icon;
	Parms.Icon_Tint = std::move(Icon_Tint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.CreateSkinAnnouncement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UItemSkin*                        Skin                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UItemID*                          SkinOwner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::CreateSkinAnnouncement(class UItemSkin* Skin, class UItemID* SkinOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "CreateSkinAnnouncement");

	Params::Announcement_Controller_C_CreateSkinAnnouncement Parms{};

	Parms.Skin = Skin;
	Parms.SkinOwner = SkinOwner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.GetStartDelay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UAnnouncement_Controller_C::GetStartDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "GetStartDelay");

	Params::Announcement_Controller_C_GetStartDelay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Announcement_Controller.Announcement_Controller_C.QueueWidget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      InWidget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::QueueWidget(class UUserWidget* InWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "QueueWidget");

	Params::Announcement_Controller_C_QueueWidget Parms{};

	Parms.InWidget = InWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.CreateVPAnnouncement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVictoryPose*                     VictoryPose                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPlayerCharacterID*               VPOwner                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::CreateVPAnnouncement(class UVictoryPose* VictoryPose, class UPlayerCharacterID* VPOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "CreateVPAnnouncement");

	Params::Announcement_Controller_C_CreateVPAnnouncement Parms{};

	Parms.VictoryPose = VictoryPose;
	Parms.VPOwner = VPOwner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.CreateSchematicAnnouncement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USchematic*                       InSchematic                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::CreateSchematicAnnouncement(class USchematic* InSchematic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "CreateSchematicAnnouncement");

	Params::Announcement_Controller_C_CreateSchematicAnnouncement Parms{};

	Parms.InSchematic = InSchematic;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.CreatePickaxeAnnouncement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPickaxePart*                     PickaxePart                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::CreatePickaxeAnnouncement(class UPickaxePart* PickaxePart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "CreatePickaxeAnnouncement");

	Params::Announcement_Controller_C_CreatePickaxeAnnouncement Parms{};

	Parms.PickaxePart = PickaxePart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.CreateVanityAnnouncement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVanityItem*                      VanityItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPlayerCharacterID*               VanityOwner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnnouncement_Controller_C::CreateVanityAnnouncement(class UVanityItem* VanityItem, class UPlayerCharacterID* VanityOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "CreateVanityAnnouncement");

	Params::Announcement_Controller_C_CreateVanityAnnouncement Parms{};

	Parms.VanityItem = VanityItem;
	Parms.VanityOwner = VanityOwner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Announcement_Controller.Announcement_Controller_C.CreateEverythingCollectedAnnouncement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UAnnouncement_Controller_C::CreateEverythingCollectedAnnouncement(const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Announcement_Controller_C", "CreateEverythingCollectedAnnouncement");

	Params::Announcement_Controller_C_CreateEverythingCollectedAnnouncement Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}

}

