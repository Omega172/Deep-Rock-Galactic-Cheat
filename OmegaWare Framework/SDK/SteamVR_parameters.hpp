#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamVR

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SteamVR_structs.hpp"
#include "InputCore_structs.hpp"


namespace CG::Params
{

// Function SteamVR.SteamVRChaperoneComponent.GetBounds
// 0x0010 (0x0010 - 0x0000)
struct SteamVRChaperoneComponent_GetBounds final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRChaperoneComponent_GetBounds) == 0x000008, "Wrong alignment on SteamVRChaperoneComponent_GetBounds");
static_assert(sizeof(SteamVRChaperoneComponent_GetBounds) == 0x000010, "Wrong size on SteamVRChaperoneComponent_GetBounds");
static_assert(offsetof(SteamVRChaperoneComponent_GetBounds, ReturnValue) == 0x000000, "Member 'SteamVRChaperoneComponent_GetBounds::ReturnValue' has a wrong offset!");

// Function SteamVR.SteamVRFunctionLibrary.GetHandPositionAndOrientation
// 0x0024 (0x0024 - 0x0000)
struct SteamVRFunctionLibrary_GetHandPositionAndOrientation final
{
public:
	int32                                         ControllerIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControllerHand                               Hand;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D7[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutPosition;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutOrientation;                                    // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D8[0x3];                                     // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamVRFunctionLibrary_GetHandPositionAndOrientation) == 0x000004, "Wrong alignment on SteamVRFunctionLibrary_GetHandPositionAndOrientation");
static_assert(sizeof(SteamVRFunctionLibrary_GetHandPositionAndOrientation) == 0x000024, "Wrong size on SteamVRFunctionLibrary_GetHandPositionAndOrientation");
static_assert(offsetof(SteamVRFunctionLibrary_GetHandPositionAndOrientation, ControllerIndex) == 0x000000, "Member 'SteamVRFunctionLibrary_GetHandPositionAndOrientation::ControllerIndex' has a wrong offset!");
static_assert(offsetof(SteamVRFunctionLibrary_GetHandPositionAndOrientation, Hand) == 0x000004, "Member 'SteamVRFunctionLibrary_GetHandPositionAndOrientation::Hand' has a wrong offset!");
static_assert(offsetof(SteamVRFunctionLibrary_GetHandPositionAndOrientation, OutPosition) == 0x000008, "Member 'SteamVRFunctionLibrary_GetHandPositionAndOrientation::OutPosition' has a wrong offset!");
static_assert(offsetof(SteamVRFunctionLibrary_GetHandPositionAndOrientation, OutOrientation) == 0x000014, "Member 'SteamVRFunctionLibrary_GetHandPositionAndOrientation::OutOrientation' has a wrong offset!");
static_assert(offsetof(SteamVRFunctionLibrary_GetHandPositionAndOrientation, ReturnValue) == 0x000020, "Member 'SteamVRFunctionLibrary_GetHandPositionAndOrientation::ReturnValue' has a wrong offset!");

// Function SteamVR.SteamVRFunctionLibrary.GetTrackedDevicePositionAndOrientation
// 0x0020 (0x0020 - 0x0000)
struct SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation final
{
public:
	int32                                         DeviceID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutOrientation;                                    // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D9[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation) == 0x000004, "Wrong alignment on SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation");
static_assert(sizeof(SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation) == 0x000020, "Wrong size on SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation");
static_assert(offsetof(SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation, DeviceID) == 0x000000, "Member 'SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation::DeviceID' has a wrong offset!");
static_assert(offsetof(SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation, OutPosition) == 0x000004, "Member 'SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation::OutPosition' has a wrong offset!");
static_assert(offsetof(SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation, OutOrientation) == 0x000010, "Member 'SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation::OutOrientation' has a wrong offset!");
static_assert(offsetof(SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation, ReturnValue) == 0x00001C, "Member 'SteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation::ReturnValue' has a wrong offset!");

// Function SteamVR.SteamVRFunctionLibrary.GetValidTrackedDeviceIds
// 0x0018 (0x0018 - 0x0000)
struct SteamVRFunctionLibrary_GetValidTrackedDeviceIds final
{
public:
	ESteamVRTrackedDeviceType                     DeviceType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10DA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OutTrackedDeviceIds;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRFunctionLibrary_GetValidTrackedDeviceIds) == 0x000008, "Wrong alignment on SteamVRFunctionLibrary_GetValidTrackedDeviceIds");
static_assert(sizeof(SteamVRFunctionLibrary_GetValidTrackedDeviceIds) == 0x000018, "Wrong size on SteamVRFunctionLibrary_GetValidTrackedDeviceIds");
static_assert(offsetof(SteamVRFunctionLibrary_GetValidTrackedDeviceIds, DeviceType) == 0x000000, "Member 'SteamVRFunctionLibrary_GetValidTrackedDeviceIds::DeviceType' has a wrong offset!");
static_assert(offsetof(SteamVRFunctionLibrary_GetValidTrackedDeviceIds, OutTrackedDeviceIds) == 0x000008, "Member 'SteamVRFunctionLibrary_GetValidTrackedDeviceIds::OutTrackedDeviceIds' has a wrong offset!");

// Function SteamVR.SteamVRHQStereoLayerShape.SetAntiAlias
// 0x0001 (0x0001 - 0x0000)
struct SteamVRHQStereoLayerShape_SetAntiAlias final
{
public:
	bool                                          InAntiAlias;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRHQStereoLayerShape_SetAntiAlias) == 0x000001, "Wrong alignment on SteamVRHQStereoLayerShape_SetAntiAlias");
static_assert(sizeof(SteamVRHQStereoLayerShape_SetAntiAlias) == 0x000001, "Wrong size on SteamVRHQStereoLayerShape_SetAntiAlias");
static_assert(offsetof(SteamVRHQStereoLayerShape_SetAntiAlias, InAntiAlias) == 0x000000, "Member 'SteamVRHQStereoLayerShape_SetAntiAlias::InAntiAlias' has a wrong offset!");

// Function SteamVR.SteamVRHQStereoLayerShape.SetAutoCurveMaxDistance
// 0x0004 (0x0004 - 0x0000)
struct SteamVRHQStereoLayerShape_SetAutoCurveMaxDistance final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRHQStereoLayerShape_SetAutoCurveMaxDistance) == 0x000004, "Wrong alignment on SteamVRHQStereoLayerShape_SetAutoCurveMaxDistance");
static_assert(sizeof(SteamVRHQStereoLayerShape_SetAutoCurveMaxDistance) == 0x000004, "Wrong size on SteamVRHQStereoLayerShape_SetAutoCurveMaxDistance");
static_assert(offsetof(SteamVRHQStereoLayerShape_SetAutoCurveMaxDistance, InDistance) == 0x000000, "Member 'SteamVRHQStereoLayerShape_SetAutoCurveMaxDistance::InDistance' has a wrong offset!");

// Function SteamVR.SteamVRHQStereoLayerShape.SetAutoCurveMinDistance
// 0x0004 (0x0004 - 0x0000)
struct SteamVRHQStereoLayerShape_SetAutoCurveMinDistance final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRHQStereoLayerShape_SetAutoCurveMinDistance) == 0x000004, "Wrong alignment on SteamVRHQStereoLayerShape_SetAutoCurveMinDistance");
static_assert(sizeof(SteamVRHQStereoLayerShape_SetAutoCurveMinDistance) == 0x000004, "Wrong size on SteamVRHQStereoLayerShape_SetAutoCurveMinDistance");
static_assert(offsetof(SteamVRHQStereoLayerShape_SetAutoCurveMinDistance, InDistance) == 0x000000, "Member 'SteamVRHQStereoLayerShape_SetAutoCurveMinDistance::InDistance' has a wrong offset!");

// Function SteamVR.SteamVRHQStereoLayerShape.SetCurved
// 0x0001 (0x0001 - 0x0000)
struct SteamVRHQStereoLayerShape_SetCurved final
{
public:
	bool                                          InCurved;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamVRHQStereoLayerShape_SetCurved) == 0x000001, "Wrong alignment on SteamVRHQStereoLayerShape_SetCurved");
static_assert(sizeof(SteamVRHQStereoLayerShape_SetCurved) == 0x000001, "Wrong size on SteamVRHQStereoLayerShape_SetCurved");
static_assert(offsetof(SteamVRHQStereoLayerShape_SetCurved, InCurved) == 0x000000, "Member 'SteamVRHQStereoLayerShape_SetCurved::InCurved' has a wrong offset!");

}

