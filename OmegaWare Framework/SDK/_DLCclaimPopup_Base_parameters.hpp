#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: _DLCclaimPopup_Base

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace CG::Params
{

// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.ExecuteUbergraph__DLCclaimPopup_Base
// 0x0028 (0x0028 - 0x0000)
struct _DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27A5[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_MenuColors_OutputColor;                   // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base) == 0x000008, "Wrong alignment on _DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base");
static_assert(sizeof(_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base) == 0x000028, "Wrong size on _DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base");
static_assert(offsetof(_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base, EntryPoint) == 0x000000, "Member '_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base, K2Node_Event_IsDesignTime) == 0x000004, "Member '_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base, CallFunc_MenuColors_OutputColor) == 0x000008, "Member '_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base::CallFunc_MenuColors_OutputColor' has a wrong offset!");
static_assert(offsetof(_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member '_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base, CallFunc_PlayAnimation_ReturnValue_1) == 0x000020, "Member '_DLCclaimPopup_Base_C_ExecuteUbergraph__DLCclaimPopup_Base::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct _DLCclaimPopup_Base_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(_DLCclaimPopup_Base_C_PreConstruct) == 0x000001, "Wrong alignment on _DLCclaimPopup_Base_C_PreConstruct");
static_assert(sizeof(_DLCclaimPopup_Base_C_PreConstruct) == 0x000001, "Wrong size on _DLCclaimPopup_Base_C_PreConstruct");
static_assert(offsetof(_DLCclaimPopup_Base_C_PreConstruct, IsDesignTime) == 0x000000, "Member '_DLCclaimPopup_Base_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.SetHeader
// 0x0030 (0x0030 - 0x0000)
struct _DLCclaimPopup_Base_C_SetHeader final
{
public:
	class FText                                   InHeader;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0018(0x0018)()
};
static_assert(alignof(_DLCclaimPopup_Base_C_SetHeader) == 0x000008, "Wrong alignment on _DLCclaimPopup_Base_C_SetHeader");
static_assert(sizeof(_DLCclaimPopup_Base_C_SetHeader) == 0x000030, "Wrong size on _DLCclaimPopup_Base_C_SetHeader");
static_assert(offsetof(_DLCclaimPopup_Base_C_SetHeader, InHeader) == 0x000000, "Member '_DLCclaimPopup_Base_C_SetHeader::InHeader' has a wrong offset!");
static_assert(offsetof(_DLCclaimPopup_Base_C_SetHeader, CallFunc_TextToUpper_ReturnValue) == 0x000018, "Member '_DLCclaimPopup_Base_C_SetHeader::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");

// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.SetBottomText
// 0x0018 (0x0018 - 0x0000)
struct _DLCclaimPopup_Base_C_SetBottomText final
{
public:
	class FText                                   Param_BottomText;                                  // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(_DLCclaimPopup_Base_C_SetBottomText) == 0x000008, "Wrong alignment on _DLCclaimPopup_Base_C_SetBottomText");
static_assert(sizeof(_DLCclaimPopup_Base_C_SetBottomText) == 0x000018, "Wrong size on _DLCclaimPopup_Base_C_SetBottomText");
static_assert(offsetof(_DLCclaimPopup_Base_C_SetBottomText, Param_BottomText) == 0x000000, "Member '_DLCclaimPopup_Base_C_SetBottomText::Param_BottomText' has a wrong offset!");

// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.SetHeaderTexture
// 0x0008 (0x0008 - 0x0000)
struct _DLCclaimPopup_Base_C_SetHeaderTexture final
{
public:
	class UTexture2D*                             Param_HeaderTexture;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(_DLCclaimPopup_Base_C_SetHeaderTexture) == 0x000008, "Wrong alignment on _DLCclaimPopup_Base_C_SetHeaderTexture");
static_assert(sizeof(_DLCclaimPopup_Base_C_SetHeaderTexture) == 0x000008, "Wrong size on _DLCclaimPopup_Base_C_SetHeaderTexture");
static_assert(offsetof(_DLCclaimPopup_Base_C_SetHeaderTexture, Param_HeaderTexture) == 0x000000, "Member '_DLCclaimPopup_Base_C_SetHeaderTexture::Param_HeaderTexture' has a wrong offset!");

// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.OnKeyUp
// 0x02A0 (0x02A0 - 0x0000)
struct _DLCclaimPopup_Base_C_OnKeyUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0070(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0128(0x00B8)()
	bool                                          CallFunc_IsCloseOrBackMenu_ReturnValue;            // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27A6[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x01E8(0x00B8)()
};
static_assert(alignof(_DLCclaimPopup_Base_C_OnKeyUp) == 0x000008, "Wrong alignment on _DLCclaimPopup_Base_C_OnKeyUp");
static_assert(sizeof(_DLCclaimPopup_Base_C_OnKeyUp) == 0x0002A0, "Wrong size on _DLCclaimPopup_Base_C_OnKeyUp");
static_assert(offsetof(_DLCclaimPopup_Base_C_OnKeyUp, MyGeometry) == 0x000000, "Member '_DLCclaimPopup_Base_C_OnKeyUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(_DLCclaimPopup_Base_C_OnKeyUp, InKeyEvent) == 0x000038, "Member '_DLCclaimPopup_Base_C_OnKeyUp::InKeyEvent' has a wrong offset!");
static_assert(offsetof(_DLCclaimPopup_Base_C_OnKeyUp, ReturnValue) == 0x000070, "Member '_DLCclaimPopup_Base_C_OnKeyUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(_DLCclaimPopup_Base_C_OnKeyUp, CallFunc_Unhandled_ReturnValue) == 0x000128, "Member '_DLCclaimPopup_Base_C_OnKeyUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(_DLCclaimPopup_Base_C_OnKeyUp, CallFunc_IsCloseOrBackMenu_ReturnValue) == 0x0001E0, "Member '_DLCclaimPopup_Base_C_OnKeyUp::CallFunc_IsCloseOrBackMenu_ReturnValue' has a wrong offset!");
static_assert(offsetof(_DLCclaimPopup_Base_C_OnKeyUp, CallFunc_Handled_ReturnValue) == 0x0001E8, "Member '_DLCclaimPopup_Base_C_OnKeyUp::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function _DLCclaimPopup_Base._DLCclaimPopup_Base_C.SetButtonText
// 0x0018 (0x0018 - 0x0000)
struct _DLCclaimPopup_Base_C_SetButtonText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(_DLCclaimPopup_Base_C_SetButtonText) == 0x000008, "Wrong alignment on _DLCclaimPopup_Base_C_SetButtonText");
static_assert(sizeof(_DLCclaimPopup_Base_C_SetButtonText) == 0x000018, "Wrong size on _DLCclaimPopup_Base_C_SetButtonText");
static_assert(offsetof(_DLCclaimPopup_Base_C_SetButtonText, InText) == 0x000000, "Member '_DLCclaimPopup_Base_C_SetButtonText::InText' has a wrong offset!");

}

