#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WND_ClaimableRewards

#include "Basic.hpp"

#include "FSD_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace CG::Params
{

// Function WND_ClaimableRewards.WND_ClaimableRewards_C.ExecuteUbergraph_WND_ClaimableRewards
// 0x0128 (0x0128 - 0x0000)
struct WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_316C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClaimableRewardView                   CallFunc_GetData_OutData;                          // 0x0010(0x0088)(ContainsInstancedReference)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_316D[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClaimableRewardView                   CallFunc_GetData_OutData_1;                        // 0x00A0(0x0088)(ContainsInstancedReference)
};
static_assert(alignof(WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards) == 0x000008, "Wrong alignment on WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards");
static_assert(sizeof(WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards) == 0x000128, "Wrong size on WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards");
static_assert(offsetof(WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards, EntryPoint) == 0x000000, "Member 'WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards::EntryPoint' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards, CallFunc_GetData_OutData) == 0x000010, "Member 'WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards::CallFunc_GetData_OutData' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards, K2Node_Event_IsDesignTime) == 0x000098, "Member 'WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards, CallFunc_GetData_OutData_1) == 0x0000A0, "Member 'WND_ClaimableRewards_C_ExecuteUbergraph_WND_ClaimableRewards::CallFunc_GetData_OutData_1' has a wrong offset!");

// Function WND_ClaimableRewards.WND_ClaimableRewards_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WND_ClaimableRewards_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WND_ClaimableRewards_C_PreConstruct) == 0x000001, "Wrong alignment on WND_ClaimableRewards_C_PreConstruct");
static_assert(sizeof(WND_ClaimableRewards_C_PreConstruct) == 0x000001, "Wrong size on WND_ClaimableRewards_C_PreConstruct");
static_assert(offsetof(WND_ClaimableRewards_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WND_ClaimableRewards_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WND_ClaimableRewards.WND_ClaimableRewards_C.OnKeyUp
// 0x02A0 (0x02A0 - 0x0000)
struct WND_ClaimableRewards_C_OnKeyUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0070(0x00B8)(Parm, OutParm, ReturnParm)
	bool                                          CallFunc_GetIsEnabled_ReturnValue;                 // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCloseOrBackMenu_ReturnValue;            // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x012B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_316E[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0130(0x00B8)()
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x01E8(0x00B8)()
};
static_assert(alignof(WND_ClaimableRewards_C_OnKeyUp) == 0x000008, "Wrong alignment on WND_ClaimableRewards_C_OnKeyUp");
static_assert(sizeof(WND_ClaimableRewards_C_OnKeyUp) == 0x0002A0, "Wrong size on WND_ClaimableRewards_C_OnKeyUp");
static_assert(offsetof(WND_ClaimableRewards_C_OnKeyUp, MyGeometry) == 0x000000, "Member 'WND_ClaimableRewards_C_OnKeyUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_OnKeyUp, InKeyEvent) == 0x000038, "Member 'WND_ClaimableRewards_C_OnKeyUp::InKeyEvent' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_OnKeyUp, ReturnValue) == 0x000070, "Member 'WND_ClaimableRewards_C_OnKeyUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_OnKeyUp, CallFunc_GetIsEnabled_ReturnValue) == 0x000128, "Member 'WND_ClaimableRewards_C_OnKeyUp::CallFunc_GetIsEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_OnKeyUp, CallFunc_IsCloseOrBackMenu_ReturnValue) == 0x000129, "Member 'WND_ClaimableRewards_C_OnKeyUp::CallFunc_IsCloseOrBackMenu_ReturnValue' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_OnKeyUp, CallFunc_IsVisible_ReturnValue) == 0x00012A, "Member 'WND_ClaimableRewards_C_OnKeyUp::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_OnKeyUp, CallFunc_BooleanAND_ReturnValue) == 0x00012B, "Member 'WND_ClaimableRewards_C_OnKeyUp::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_OnKeyUp, CallFunc_Handled_ReturnValue) == 0x000130, "Member 'WND_ClaimableRewards_C_OnKeyUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WND_ClaimableRewards_C_OnKeyUp, CallFunc_Unhandled_ReturnValue) == 0x0001E8, "Member 'WND_ClaimableRewards_C_OnKeyUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function WND_ClaimableRewards.WND_ClaimableRewards_C.GetData
// 0x0088 (0x0088 - 0x0000)
struct WND_ClaimableRewards_C_GetData final
{
public:
	struct FClaimableRewardView                   OutData;                                           // 0x0000(0x0088)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(WND_ClaimableRewards_C_GetData) == 0x000008, "Wrong alignment on WND_ClaimableRewards_C_GetData");
static_assert(sizeof(WND_ClaimableRewards_C_GetData) == 0x000088, "Wrong size on WND_ClaimableRewards_C_GetData");
static_assert(offsetof(WND_ClaimableRewards_C_GetData, OutData) == 0x000000, "Member 'WND_ClaimableRewards_C_GetData::OutData' has a wrong offset!");

}

