#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FSDCameraManager

#include "Basic.hpp"

#include "BP_FSDCameraManager_classes.hpp"
#include "BP_FSDCameraManager_parameters.hpp"


namespace CG
{

// Function BP_FSDCameraManager.BP_FSDCameraManager_C.HideHUDForPhotography__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_FSDCameraManager_C::HideHUDForPhotography__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "HideHUDForPhotography__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.ShowHUDForPhotography__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_FSDCameraManager_C::ShowHUDForPhotography__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "ShowHUDForPhotography__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.ExecuteUbergraph_BP_FSDCameraManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FSDCameraManager_C::ExecuteUbergraph_BP_FSDCameraManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "ExecuteUbergraph_BP_FSDCameraManager");

	Params::BP_FSDCameraManager_C_ExecuteUbergraph_BP_FSDCameraManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.LoaderStop
// (BlueprintCallable, BlueprintEvent)

void ABP_FSDCameraManager_C::LoaderStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "LoaderStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.LoaderStart
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   LoaderLevelSequence                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FSDCameraManager_C::LoaderStart(class ULevelSequence* LoaderLevelSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "LoaderStart");

	Params::BP_FSDCameraManager_C_LoaderStart Parms{};

	Parms.LoaderLevelSequence = LoaderLevelSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.Return Camera
// (BlueprintCallable, BlueprintEvent)

void ABP_FSDCameraManager_C::Return_Camera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "Return Camera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.TogglePhotographyMode
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_FSDCameraManager_C::TogglePhotographyMode(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "TogglePhotographyMode");

	Params::BP_FSDCameraManager_C_TogglePhotographyMode Parms{};

	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_FSDCameraManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FSDCameraManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "ReceiveTick");

	Params::BP_FSDCameraManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.OnPhotographySessionStart
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void ABP_FSDCameraManager_C::OnPhotographySessionStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "OnPhotographySessionStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.OnPhotographySessionEnd
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void ABP_FSDCameraManager_C::OnPhotographySessionEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "OnPhotographySessionEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_FSDCameraManager_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.PhotographyCameraModify
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewCameraLocation                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PreviousCameraLocation                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OriginalCameraLocation                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ResultCameraLocation                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FSDCameraManager_C::PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "PhotographyCameraModify");

	Params::BP_FSDCameraManager_C_PhotographyCameraModify Parms{};

	Parms.NewCameraLocation = std::move(NewCameraLocation);
	Parms.PreviousCameraLocation = std::move(PreviousCameraLocation);
	Parms.OriginalCameraLocation = std::move(OriginalCameraLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (ResultCameraLocation != nullptr)
		*ResultCameraLocation = std::move(Parms.ResultCameraLocation);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.ReturnCameraMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerCharacter*                 Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterCameraMode                    NewCameraMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FSDCameraManager_C::ReturnCameraMode(class APlayerCharacter* Target, ECharacterCameraMode NewCameraMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "ReturnCameraMode");

	Params::BP_FSDCameraManager_C_ReturnCameraMode Parms{};

	Parms.Target = Target;
	Parms.NewCameraMode = NewCameraMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.SetToThirdPersonCamera
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          New_Camera_Position                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FSDCameraManager_C::SetToThirdPersonCamera(struct FVector* New_Camera_Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "SetToThirdPersonCamera");

	Params::BP_FSDCameraManager_C_SetToThirdPersonCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (New_Camera_Position != nullptr)
		*New_Camera_Position = std::move(Parms.New_Camera_Position);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.SphereDirectionToPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FSDCameraManager_C::SphereDirectionToPlayer(struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "SphereDirectionToPlayer");

	Params::BP_FSDCameraManager_C_SphereDirectionToPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.SmoothReturnVelocity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          New_Camera_Location                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_FSDCameraManager_C::SmoothReturnVelocity(const struct FVector& New_Camera_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "SmoothReturnVelocity");

	Params::BP_FSDCameraManager_C_SmoothReturnVelocity Parms{};

	Parms.New_Camera_Location = std::move(New_Camera_Location);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.ChangeSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_MaxSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FSDCameraManager_C::ChangeSpeed(float Param_MaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "ChangeSpeed");

	Params::BP_FSDCameraManager_C_ChangeSpeed Parms{};

	Parms.Param_MaxSpeed = Param_MaxSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FSDCameraManager.BP_FSDCameraManager_C.ChangeMaxDistance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_MaxDistance                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FSDCameraManager_C::ChangeMaxDistance(float Param_MaxDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FSDCameraManager_C", "ChangeMaxDistance");

	Params::BP_FSDCameraManager_C_ChangeMaxDistance Parms{};

	Parms.Param_MaxDistance = Param_MaxDistance;

	UObject::ProcessEvent(Func, &Parms);
}

}

