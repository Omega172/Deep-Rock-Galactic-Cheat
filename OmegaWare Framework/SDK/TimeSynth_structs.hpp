#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TimeSynth

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace CG
{

// Enum TimeSynth.ETimeSynthEventQuantization
// NumValues: 0x0010
enum class ETimeSynthEventQuantization : uint8
{
	None                                     = 0,
	Bars8                                    = 1,
	Bars4                                    = 2,
	Bars2                                    = 3,
	Bar                                      = 4,
	HalfNote                                 = 5,
	HalfNoteTriplet                          = 6,
	QuarterNote                              = 7,
	QuarterNoteTriplet                       = 8,
	EighthNote                               = 9,
	EighthNoteTriplet                        = 10,
	SixteenthNote                            = 11,
	SixteenthNoteTriplet                     = 12,
	ThirtySecondNote                         = 13,
	Count                                    = 14,
	ETimeSynthEventQuantization_MAX          = 15,
};

// Enum TimeSynth.ETimeSynthEnvelopeFollowerPeakMode
// NumValues: 0x0005
enum class ETimeSynthEnvelopeFollowerPeakMode : uint8
{
	MeanSquared                              = 0,
	RootMeanSquared                          = 1,
	Peak                                     = 2,
	Count                                    = 3,
	ETimeSynthEnvelopeFollowerPeakMode_MAX   = 4,
};

// Enum TimeSynth.ETimeSynthFilterType
// NumValues: 0x0006
enum class ETimeSynthFilterType : uint8
{
	LowPass                                  = 0,
	HighPass                                 = 1,
	BandPass                                 = 2,
	BandStop                                 = 3,
	Count                                    = 4,
	ETimeSynthFilterType_MAX                 = 5,
};

// Enum TimeSynth.ETimeSynthFilter
// NumValues: 0x0004
enum class ETimeSynthFilter : uint8
{
	FilterA                                  = 0,
	FilterB                                  = 1,
	Count                                    = 2,
	ETimeSynthFilter_MAX                     = 3,
};

// Enum TimeSynth.ETimeSynthEventClipQuantization
// NumValues: 0x0011
enum class ETimeSynthEventClipQuantization : uint8
{
	Global                                   = 0,
	None                                     = 1,
	Bars8                                    = 2,
	Bars4                                    = 3,
	Bars2                                    = 4,
	Bar                                      = 5,
	HalfNote                                 = 6,
	HalfNoteTriplet                          = 7,
	QuarterNote                              = 8,
	QuarterNoteTriplet                       = 9,
	EighthNote                               = 10,
	EighthNoteTriplet                        = 11,
	SixteenthNote                            = 12,
	SixteenthNoteTriplet                     = 13,
	ThirtySecondNote                         = 14,
	Count                                    = 15,
	ETimeSynthEventClipQuantization_MAX      = 16,
};

// Enum TimeSynth.ETimeSynthFFTSize
// NumValues: 0x0005
enum class ETimeSynthFFTSize : uint8
{
	Min_64                                   = 0,
	Small_256                                = 1,
	Medium_512                               = 2,
	Large_1024                               = 3,
	ETimeSynthFFTSize_MAX                    = 4,
};

// Enum TimeSynth.ETimeSynthBeatDivision
// NumValues: 0x0007
enum class ETimeSynthBeatDivision : uint8
{
	One                                      = 0,
	Two                                      = 1,
	Four                                     = 2,
	Eight                                    = 3,
	Sixteen                                  = 4,
	Count                                    = 5,
	ETimeSynthBeatDivision_MAX               = 6,
};

// ScriptStruct TimeSynth.TimeSynthEnvelopeFollowerSettings
// 0x000C (0x000C - 0x0000)
struct FTimeSynthEnvelopeFollowerSettings final
{
public:
	float                                         AttackTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReleaseTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeSynthEnvelopeFollowerPeakMode            PeakMode;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAnalogMode;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8F[0x2];                                      // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeSynthEnvelopeFollowerSettings) == 0x000004, "Wrong alignment on FTimeSynthEnvelopeFollowerSettings");
static_assert(sizeof(FTimeSynthEnvelopeFollowerSettings) == 0x00000C, "Wrong size on FTimeSynthEnvelopeFollowerSettings");
static_assert(offsetof(FTimeSynthEnvelopeFollowerSettings, AttackTime) == 0x000000, "Member 'FTimeSynthEnvelopeFollowerSettings::AttackTime' has a wrong offset!");
static_assert(offsetof(FTimeSynthEnvelopeFollowerSettings, ReleaseTime) == 0x000004, "Member 'FTimeSynthEnvelopeFollowerSettings::ReleaseTime' has a wrong offset!");
static_assert(offsetof(FTimeSynthEnvelopeFollowerSettings, PeakMode) == 0x000008, "Member 'FTimeSynthEnvelopeFollowerSettings::PeakMode' has a wrong offset!");
static_assert(offsetof(FTimeSynthEnvelopeFollowerSettings, bIsAnalogMode) == 0x000009, "Member 'FTimeSynthEnvelopeFollowerSettings::bIsAnalogMode' has a wrong offset!");

// ScriptStruct TimeSynth.TimeSynthFilterSettings
// 0x000C (0x000C - 0x0000)
struct FTimeSynthFilterSettings final
{
public:
	ETimeSynthFilterType                          FilterType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E90[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CutoffFrequency;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilterQ;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeSynthFilterSettings) == 0x000004, "Wrong alignment on FTimeSynthFilterSettings");
static_assert(sizeof(FTimeSynthFilterSettings) == 0x00000C, "Wrong size on FTimeSynthFilterSettings");
static_assert(offsetof(FTimeSynthFilterSettings, FilterType) == 0x000000, "Member 'FTimeSynthFilterSettings::FilterType' has a wrong offset!");
static_assert(offsetof(FTimeSynthFilterSettings, CutoffFrequency) == 0x000004, "Member 'FTimeSynthFilterSettings::CutoffFrequency' has a wrong offset!");
static_assert(offsetof(FTimeSynthFilterSettings, FilterQ) == 0x000008, "Member 'FTimeSynthFilterSettings::FilterQ' has a wrong offset!");

// ScriptStruct TimeSynth.TimeSynthClipSound
// 0x0018 (0x0018 - 0x0000)
struct FTimeSynthClipSound final
{
public:
	class USoundWave*                             SoundWave;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomWeight;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DistanceRange;                                     // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E91[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeSynthClipSound) == 0x000008, "Wrong alignment on FTimeSynthClipSound");
static_assert(sizeof(FTimeSynthClipSound) == 0x000018, "Wrong size on FTimeSynthClipSound");
static_assert(offsetof(FTimeSynthClipSound, SoundWave) == 0x000000, "Member 'FTimeSynthClipSound::SoundWave' has a wrong offset!");
static_assert(offsetof(FTimeSynthClipSound, RandomWeight) == 0x000008, "Member 'FTimeSynthClipSound::RandomWeight' has a wrong offset!");
static_assert(offsetof(FTimeSynthClipSound, DistanceRange) == 0x00000C, "Member 'FTimeSynthClipSound::DistanceRange' has a wrong offset!");

// ScriptStruct TimeSynth.TimeSynthClipHandle
// 0x000C (0x000C - 0x0000)
struct FTimeSynthClipHandle final
{
public:
	class FName                                   ClipName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClipId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeSynthClipHandle) == 0x000004, "Wrong alignment on FTimeSynthClipHandle");
static_assert(sizeof(FTimeSynthClipHandle) == 0x00000C, "Wrong size on FTimeSynthClipHandle");
static_assert(offsetof(FTimeSynthClipHandle, ClipName) == 0x000000, "Member 'FTimeSynthClipHandle::ClipName' has a wrong offset!");
static_assert(offsetof(FTimeSynthClipHandle, ClipId) == 0x000008, "Member 'FTimeSynthClipHandle::ClipId' has a wrong offset!");

// ScriptStruct TimeSynth.TimeSynthTimeDef
// 0x0008 (0x0008 - 0x0000)
struct FTimeSynthTimeDef final
{
public:
	int32                                         NumBars;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBeats;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeSynthTimeDef) == 0x000004, "Wrong alignment on FTimeSynthTimeDef");
static_assert(sizeof(FTimeSynthTimeDef) == 0x000008, "Wrong size on FTimeSynthTimeDef");
static_assert(offsetof(FTimeSynthTimeDef, NumBars) == 0x000000, "Member 'FTimeSynthTimeDef::NumBars' has a wrong offset!");
static_assert(offsetof(FTimeSynthTimeDef, NumBeats) == 0x000004, "Member 'FTimeSynthTimeDef::NumBeats' has a wrong offset!");

// ScriptStruct TimeSynth.TimeSynthQuantizationSettings
// 0x0014 (0x0014 - 0x0000)
struct FTimeSynthQuantizationSettings final
{
public:
	float                                         BeatsPerMinute;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeatsPerBar;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeSynthBeatDivision                        BeatDivision;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E92[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EventDelaySeconds;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeSynthEventQuantization                   GlobalQuantization;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E93[0x3];                                      // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeSynthQuantizationSettings) == 0x000004, "Wrong alignment on FTimeSynthQuantizationSettings");
static_assert(sizeof(FTimeSynthQuantizationSettings) == 0x000014, "Wrong size on FTimeSynthQuantizationSettings");
static_assert(offsetof(FTimeSynthQuantizationSettings, BeatsPerMinute) == 0x000000, "Member 'FTimeSynthQuantizationSettings::BeatsPerMinute' has a wrong offset!");
static_assert(offsetof(FTimeSynthQuantizationSettings, BeatsPerBar) == 0x000004, "Member 'FTimeSynthQuantizationSettings::BeatsPerBar' has a wrong offset!");
static_assert(offsetof(FTimeSynthQuantizationSettings, BeatDivision) == 0x000008, "Member 'FTimeSynthQuantizationSettings::BeatDivision' has a wrong offset!");
static_assert(offsetof(FTimeSynthQuantizationSettings, EventDelaySeconds) == 0x00000C, "Member 'FTimeSynthQuantizationSettings::EventDelaySeconds' has a wrong offset!");
static_assert(offsetof(FTimeSynthQuantizationSettings, GlobalQuantization) == 0x000010, "Member 'FTimeSynthQuantizationSettings::GlobalQuantization' has a wrong offset!");

// ScriptStruct TimeSynth.TimeSynthSpectralData
// 0x0008 (0x0008 - 0x0000)
struct FTimeSynthSpectralData final
{
public:
	float                                         FrequencyHz;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeSynthSpectralData) == 0x000004, "Wrong alignment on FTimeSynthSpectralData");
static_assert(sizeof(FTimeSynthSpectralData) == 0x000008, "Wrong size on FTimeSynthSpectralData");
static_assert(offsetof(FTimeSynthSpectralData, FrequencyHz) == 0x000000, "Member 'FTimeSynthSpectralData::FrequencyHz' has a wrong offset!");
static_assert(offsetof(FTimeSynthSpectralData, Magnitude) == 0x000004, "Member 'FTimeSynthSpectralData::Magnitude' has a wrong offset!");

}

