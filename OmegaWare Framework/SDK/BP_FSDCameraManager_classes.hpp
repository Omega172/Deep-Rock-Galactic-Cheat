#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FSDCameraManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_structs.hpp"
#include "FSD_classes.hpp"


namespace CG
{

// BlueprintGeneratedClass BP_FSDCameraManager.BP_FSDCameraManager_C
// 0x0050 (0x2870 - 0x2820)
class ABP_FSDCameraManager_C final : public AFSDPlayerCameraManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x2820(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   PhysicalSphere;                                    // 0x2828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          SessionStarted;                                    // 0x2830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3063[0x3];                                     // 0x2831(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDistance;                                       // 0x2834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             HideHUDForPhotography;                             // 0x2838(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ShowHUDForPhotography;                             // 0x2848(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          UserVisibility;                                    // 0x2858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECharacterCameraMode                          PreviousCameraMode;                                // 0x2859(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PauseGame;                                         // 0x285A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3064[0x1];                                     // 0x285B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereReturnVelocity;                              // 0x285C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistanceTolerance;                              // 0x2860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KeyDebug;                                          // 0x2864(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3065[0x3];                                     // 0x2865(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSpeed;                                          // 0x2868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void HideHUDForPhotography__DelegateSignature();
	void ShowHUDForPhotography__DelegateSignature();
	void ExecuteUbergraph_BP_FSDCameraManager(int32 EntryPoint);
	void LoaderStop();
	void LoaderStart(class ULevelSequence* LoaderLevelSequence);
	void Return_Camera();
	void TogglePhotographyMode(bool Active);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnPhotographySessionStart();
	void OnPhotographySessionEnd();
	void ReceiveDestroyed();
	void PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation);
	void ReturnCameraMode(class APlayerCharacter* Target, ECharacterCameraMode NewCameraMode);
	void SetToThirdPersonCamera(struct FVector* New_Camera_Position);
	void SphereDirectionToPlayer(struct FVector* Direction);
	float SmoothReturnVelocity(const struct FVector& New_Camera_Location);
	void ChangeSpeed(float Param_MaxSpeed);
	void ChangeMaxDistance(float Param_MaxDistance);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FSDCameraManager_C">();
	}
	static class ABP_FSDCameraManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FSDCameraManager_C>();
	}
};
static_assert(alignof(ABP_FSDCameraManager_C) == 0x000010, "Wrong alignment on ABP_FSDCameraManager_C");
static_assert(sizeof(ABP_FSDCameraManager_C) == 0x002870, "Wrong size on ABP_FSDCameraManager_C");
static_assert(offsetof(ABP_FSDCameraManager_C, UberGraphFrame) == 0x002820, "Member 'ABP_FSDCameraManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FSDCameraManager_C, PhysicalSphere) == 0x002828, "Member 'ABP_FSDCameraManager_C::PhysicalSphere' has a wrong offset!");
static_assert(offsetof(ABP_FSDCameraManager_C, SessionStarted) == 0x002830, "Member 'ABP_FSDCameraManager_C::SessionStarted' has a wrong offset!");
static_assert(offsetof(ABP_FSDCameraManager_C, MaxDistance) == 0x002834, "Member 'ABP_FSDCameraManager_C::MaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_FSDCameraManager_C, HideHUDForPhotography) == 0x002838, "Member 'ABP_FSDCameraManager_C::HideHUDForPhotography' has a wrong offset!");
static_assert(offsetof(ABP_FSDCameraManager_C, ShowHUDForPhotography) == 0x002848, "Member 'ABP_FSDCameraManager_C::ShowHUDForPhotography' has a wrong offset!");
static_assert(offsetof(ABP_FSDCameraManager_C, UserVisibility) == 0x002858, "Member 'ABP_FSDCameraManager_C::UserVisibility' has a wrong offset!");
static_assert(offsetof(ABP_FSDCameraManager_C, PreviousCameraMode) == 0x002859, "Member 'ABP_FSDCameraManager_C::PreviousCameraMode' has a wrong offset!");
static_assert(offsetof(ABP_FSDCameraManager_C, PauseGame) == 0x00285A, "Member 'ABP_FSDCameraManager_C::PauseGame' has a wrong offset!");
static_assert(offsetof(ABP_FSDCameraManager_C, SphereReturnVelocity) == 0x00285C, "Member 'ABP_FSDCameraManager_C::SphereReturnVelocity' has a wrong offset!");
static_assert(offsetof(ABP_FSDCameraManager_C, MaxDistanceTolerance) == 0x002860, "Member 'ABP_FSDCameraManager_C::MaxDistanceTolerance' has a wrong offset!");
static_assert(offsetof(ABP_FSDCameraManager_C, KeyDebug) == 0x002864, "Member 'ABP_FSDCameraManager_C::KeyDebug' has a wrong offset!");
static_assert(offsetof(ABP_FSDCameraManager_C, MaxSpeed) == 0x002868, "Member 'ABP_FSDCameraManager_C::MaxSpeed' has a wrong offset!");

}

