#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ConsoleScreen_BGtemplate

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace CG::Params
{

// Function ConsoleScreen_BGtemplate.ConsoleScreen_BGtemplate_C.ExecuteUbergraph_ConsoleScreen_BGtemplate
// 0x0008 (0x0008 - 0x0000)
struct ConsoleScreen_BGtemplate_C_ExecuteUbergraph_ConsoleScreen_BGtemplate final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ConsoleScreen_BGtemplate_C_ExecuteUbergraph_ConsoleScreen_BGtemplate) == 0x000004, "Wrong alignment on ConsoleScreen_BGtemplate_C_ExecuteUbergraph_ConsoleScreen_BGtemplate");
static_assert(sizeof(ConsoleScreen_BGtemplate_C_ExecuteUbergraph_ConsoleScreen_BGtemplate) == 0x000008, "Wrong size on ConsoleScreen_BGtemplate_C_ExecuteUbergraph_ConsoleScreen_BGtemplate");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_ExecuteUbergraph_ConsoleScreen_BGtemplate, EntryPoint) == 0x000000, "Member 'ConsoleScreen_BGtemplate_C_ExecuteUbergraph_ConsoleScreen_BGtemplate::EntryPoint' has a wrong offset!");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_ExecuteUbergraph_ConsoleScreen_BGtemplate, K2Node_Event_IsDesignTime) == 0x000004, "Member 'ConsoleScreen_BGtemplate_C_ExecuteUbergraph_ConsoleScreen_BGtemplate::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function ConsoleScreen_BGtemplate.ConsoleScreen_BGtemplate_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ConsoleScreen_BGtemplate_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ConsoleScreen_BGtemplate_C_PreConstruct) == 0x000001, "Wrong alignment on ConsoleScreen_BGtemplate_C_PreConstruct");
static_assert(sizeof(ConsoleScreen_BGtemplate_C_PreConstruct) == 0x000001, "Wrong size on ConsoleScreen_BGtemplate_C_PreConstruct");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ConsoleScreen_BGtemplate_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ConsoleScreen_BGtemplate.ConsoleScreen_BGtemplate_C.SetText
// 0x0030 (0x0030 - 0x0000)
struct ConsoleScreen_BGtemplate_C_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0018(0x0018)()
};
static_assert(alignof(ConsoleScreen_BGtemplate_C_SetText) == 0x000008, "Wrong alignment on ConsoleScreen_BGtemplate_C_SetText");
static_assert(sizeof(ConsoleScreen_BGtemplate_C_SetText) == 0x000030, "Wrong size on ConsoleScreen_BGtemplate_C_SetText");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetText, InText) == 0x000000, "Member 'ConsoleScreen_BGtemplate_C_SetText::InText' has a wrong offset!");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetText, CallFunc_TextToUpper_ReturnValue) == 0x000018, "Member 'ConsoleScreen_BGtemplate_C_SetText::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");

// Function ConsoleScreen_BGtemplate.ConsoleScreen_BGtemplate_C.SetNotification
// 0x0020 (0x0020 - 0x0000)
struct ConsoleScreen_BGtemplate_C_SetNotification final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UTexture2D*                             InIcon;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ConsoleScreen_BGtemplate_C_SetNotification) == 0x000008, "Wrong alignment on ConsoleScreen_BGtemplate_C_SetNotification");
static_assert(sizeof(ConsoleScreen_BGtemplate_C_SetNotification) == 0x000020, "Wrong size on ConsoleScreen_BGtemplate_C_SetNotification");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetNotification, Text) == 0x000000, "Member 'ConsoleScreen_BGtemplate_C_SetNotification::Text' has a wrong offset!");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetNotification, InIcon) == 0x000018, "Member 'ConsoleScreen_BGtemplate_C_SetNotification::InIcon' has a wrong offset!");

// Function ConsoleScreen_BGtemplate.ConsoleScreen_BGtemplate_C.SetNotificationVisible
// 0x0004 (0x0004 - 0x0000)
struct ConsoleScreen_BGtemplate_C_SetNotificationVisible final
{
public:
	bool                                          Param_IsVisible;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_IsVisible;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_VisibilityChanged;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_SelectVisibility_New_Visibility;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ConsoleScreen_BGtemplate_C_SetNotificationVisible) == 0x000001, "Wrong alignment on ConsoleScreen_BGtemplate_C_SetNotificationVisible");
static_assert(sizeof(ConsoleScreen_BGtemplate_C_SetNotificationVisible) == 0x000004, "Wrong size on ConsoleScreen_BGtemplate_C_SetNotificationVisible");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetNotificationVisible, Param_IsVisible) == 0x000000, "Member 'ConsoleScreen_BGtemplate_C_SetNotificationVisible::Param_IsVisible' has a wrong offset!");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetNotificationVisible, CallFunc_SelectVisibility_IsVisible) == 0x000001, "Member 'ConsoleScreen_BGtemplate_C_SetNotificationVisible::CallFunc_SelectVisibility_IsVisible' has a wrong offset!");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetNotificationVisible, CallFunc_SelectVisibility_VisibilityChanged) == 0x000002, "Member 'ConsoleScreen_BGtemplate_C_SetNotificationVisible::CallFunc_SelectVisibility_VisibilityChanged' has a wrong offset!");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetNotificationVisible, CallFunc_SelectVisibility_New_Visibility) == 0x000003, "Member 'ConsoleScreen_BGtemplate_C_SetNotificationVisible::CallFunc_SelectVisibility_New_Visibility' has a wrong offset!");

// Function ConsoleScreen_BGtemplate.ConsoleScreen_BGtemplate_C.SetHeaderBars
// 0x0005 (0x0005 - 0x0000)
struct ConsoleScreen_BGtemplate_C_SetHeaderBars final
{
public:
	bool                                          Param_Toggle_Header_Bars;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ConsoleScreen_BGtemplate_C_SetHeaderBars) == 0x000001, "Wrong alignment on ConsoleScreen_BGtemplate_C_SetHeaderBars");
static_assert(sizeof(ConsoleScreen_BGtemplate_C_SetHeaderBars) == 0x000005, "Wrong size on ConsoleScreen_BGtemplate_C_SetHeaderBars");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetHeaderBars, Param_Toggle_Header_Bars) == 0x000000, "Member 'ConsoleScreen_BGtemplate_C_SetHeaderBars::Param_Toggle_Header_Bars' has a wrong offset!");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetHeaderBars, Temp_bool_Variable) == 0x000001, "Member 'ConsoleScreen_BGtemplate_C_SetHeaderBars::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetHeaderBars, Temp_byte_Variable) == 0x000002, "Member 'ConsoleScreen_BGtemplate_C_SetHeaderBars::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetHeaderBars, Temp_byte_Variable_1) == 0x000003, "Member 'ConsoleScreen_BGtemplate_C_SetHeaderBars::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetHeaderBars, K2Node_Select_Default) == 0x000004, "Member 'ConsoleScreen_BGtemplate_C_SetHeaderBars::K2Node_Select_Default' has a wrong offset!");

// Function ConsoleScreen_BGtemplate.ConsoleScreen_BGtemplate_C.SetTextSize
// 0x0004 (0x0004 - 0x0000)
struct ConsoleScreen_BGtemplate_C_SetTextSize final
{
public:
	int32                                         Param_TextSize;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ConsoleScreen_BGtemplate_C_SetTextSize) == 0x000004, "Wrong alignment on ConsoleScreen_BGtemplate_C_SetTextSize");
static_assert(sizeof(ConsoleScreen_BGtemplate_C_SetTextSize) == 0x000004, "Wrong size on ConsoleScreen_BGtemplate_C_SetTextSize");
static_assert(offsetof(ConsoleScreen_BGtemplate_C_SetTextSize, Param_TextSize) == 0x000000, "Member 'ConsoleScreen_BGtemplate_C_SetTextSize::Param_TextSize' has a wrong offset!");

}

