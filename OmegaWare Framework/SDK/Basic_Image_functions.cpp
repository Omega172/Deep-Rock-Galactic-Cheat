#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Basic_Image

#include "Basic.hpp"

#include "Basic_Image_classes.hpp"
#include "Basic_Image_parameters.hpp"


namespace CG
{

// Function Basic_Image.Basic_Image_C.ExecuteUbergraph_Basic_Image
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::ExecuteUbergraph_Basic_Image(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "ExecuteUbergraph_Basic_Image");

	Params::Basic_Image_C_ExecuteUbergraph_Basic_Image Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBasic_Image_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Basic_Image.Basic_Image_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBasic_Image_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "PreConstruct");

	Params::Basic_Image_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.GetBrush
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSlateBrush                      Param_Brush                                            (Parm, OutParm)

void UBasic_Image_C::GetBrush(struct FSlateBrush* Param_Brush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "GetBrush");

	Params::Basic_Image_C_GetBrush Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Brush != nullptr)
		*Param_Brush = std::move(Parms.Param_Brush);
}


// Function Basic_Image.Basic_Image_C.SetBrush
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateBrush                      InBrush                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBasic_Image_C::SetBrush(const struct FSlateBrush& InBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SetBrush");

	Params::Basic_Image_C_SetBrush Parms{};

	Parms.InBrush = std::move(InBrush);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.SetBrushFromTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bMatchSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBasic_Image_C::SetBrushFromTexture(class UTexture2D* Texture, bool bMatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SetBrushFromTexture");

	Params::Basic_Image_C_SetBrushFromTexture Parms{};

	Parms.Texture = Texture;
	Parms.bMatchSize = bMatchSize;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.SelectTint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_MenuColors                         FLASE                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_MenuColors                         TURR                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Condition                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// ENUM_MenuColors                         SelectedTint                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::SelectTint(ENUM_MenuColors FLASE, ENUM_MenuColors TURR, bool Condition, ENUM_MenuColors* SelectedTint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SelectTint");

	Params::Basic_Image_C_SelectTint Parms{};

	Parms.FLASE = FLASE;
	Parms.TURR = TURR;
	Parms.Condition = Condition;

	UObject::ProcessEvent(Func, &Parms);

	if (SelectedTint != nullptr)
		*SelectedTint = Parms.SelectedTint;
}


// Function Basic_Image.Basic_Image_C.SetTint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_MenuColors                         InTint                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::SetTint(ENUM_MenuColors InTint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SetTint");

	Params::Basic_Image_C_SetTint Parms{};

	Parms.InTint = InTint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.SetTintOpacity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InOpacity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::SetTintOpacity(float InOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SetTintOpacity");

	Params::Basic_Image_C_SetTintOpacity Parms{};

	Parms.InOpacity = InOpacity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.SetTintAndOpacity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_MenuColors                         InTint                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InTintOpacity                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::SetTintAndOpacity(ENUM_MenuColors InTint, float InTintOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SetTintAndOpacity");

	Params::Basic_Image_C_SetTintAndOpacity Parms{};

	Parms.InTint = InTint;
	Parms.InTintOpacity = InTintOpacity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.GetDynamicMaterial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UMaterialInstanceDynamic* UBasic_Image_C::GetDynamicMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "GetDynamicMaterial");

	Params::Basic_Image_C_GetDynamicMaterial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Basic_Image.Basic_Image_C.SetBrushFromSoftTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    bMatchSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBasic_Image_C::SetBrushFromSoftTexture(TSoftObjectPtr<class UTexture2D> Texture, bool bMatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SetBrushFromSoftTexture");

	Params::Basic_Image_C_SetBrushFromSoftTexture Parms{};

	Parms.Texture = Texture;
	Parms.bMatchSize = bMatchSize;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.SetBrushSize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        DesiredSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::SetBrushSize(const struct FVector2D& DesiredSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SetBrushSize");

	Params::Basic_Image_C_SetBrushSize Parms{};

	Parms.DesiredSize = std::move(DesiredSize);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.GetBrushSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        Brush_Image_Size                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::GetBrushSize(struct FVector2D* Brush_Image_Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "GetBrushSize");

	Params::Basic_Image_C_GetBrushSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Brush_Image_Size != nullptr)
		*Brush_Image_Size = std::move(Parms.Brush_Image_Size);
}


// Function Basic_Image.Basic_Image_C.FadeIn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InDuration                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::FadeIn(float InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "FadeIn");

	Params::Basic_Image_C_FadeIn Parms{};

	Parms.InDuration = InDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.FadeOut
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InDuration                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::FadeOut(float InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "FadeOut");

	Params::Basic_Image_C_FadeOut Parms{};

	Parms.InDuration = InDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.SetDynamicMaterialScalar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::SetDynamicMaterialScalar(class FName ParameterName, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SetDynamicMaterialScalar");

	Params::Basic_Image_C_SetDynamicMaterialScalar Parms{};

	Parms.ParameterName = ParameterName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.SetDynamicMaterialVector
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::SetDynamicMaterialVector(class FName ParameterName, const struct FLinearColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SetDynamicMaterialVector");

	Params::Basic_Image_C_SetDynamicMaterialVector Parms{};

	Parms.ParameterName = ParameterName;
	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.SetDynamicMaterialTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::SetDynamicMaterialTexture(class FName ParameterName, class UTexture* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SetDynamicMaterialTexture");

	Params::Basic_Image_C_SetDynamicMaterialTexture Parms{};

	Parms.ParameterName = ParameterName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.SetDynamicMaterialValues
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBasic_Image_C::SetDynamicMaterialValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SetDynamicMaterialValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Basic_Image.Basic_Image_C.GetBasicToolTip
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UWidget* UBasic_Image_C::GetBasicToolTip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "GetBasicToolTip");

	Params::Basic_Image_C_GetBasicToolTip Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Basic_Image.Basic_Image_C.SetBasicToolTip
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_BasicToolTipText                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FVector2D                        Param_BasicToolTipPosition                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Param_BasicToolTipAlignment                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::SetBasicToolTip(const class FText& Param_BasicToolTipText, const struct FVector2D& Param_BasicToolTipPosition, const struct FVector2D& Param_BasicToolTipAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "SetBasicToolTip");

	Params::Basic_Image_C_SetBasicToolTip Parms{};

	Parms.Param_BasicToolTipText = std::move(Param_BasicToolTipText);
	Parms.Param_BasicToolTipPosition = std::move(Param_BasicToolTipPosition);
	Parms.Param_BasicToolTipAlignment = std::move(Param_BasicToolTipAlignment);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.ScaleToFitX
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InWidth                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::ScaleToFitX(float InWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "ScaleToFitX");

	Params::Basic_Image_C_ScaleToFitX Parms{};

	Parms.InWidth = InWidth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_Image.Basic_Image_C.ScaleToFitY
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InHeight                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_Image_C::ScaleToFitY(float InHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_Image_C", "ScaleToFitY");

	Params::Basic_Image_C_ScaleToFitY Parms{};

	Parms.InHeight = InHeight;

	UObject::ProcessEvent(Func, &Parms);
}

}

