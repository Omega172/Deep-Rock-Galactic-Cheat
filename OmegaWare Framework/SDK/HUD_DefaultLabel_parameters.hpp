#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUD_DefaultLabel

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "ENUM_MenuColors_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_AcuminCondensedTypeface_structs.hpp"


namespace CG::Params
{

// Function HUD_DefaultLabel.HUD_DefaultLabel_C.ExecuteUbergraph_HUD_DefaultLabel
// 0x0008 (0x0008 - 0x0000)
struct HUD_DefaultLabel_C_ExecuteUbergraph_HUD_DefaultLabel final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_DefaultLabel_C_ExecuteUbergraph_HUD_DefaultLabel) == 0x000004, "Wrong alignment on HUD_DefaultLabel_C_ExecuteUbergraph_HUD_DefaultLabel");
static_assert(sizeof(HUD_DefaultLabel_C_ExecuteUbergraph_HUD_DefaultLabel) == 0x000008, "Wrong size on HUD_DefaultLabel_C_ExecuteUbergraph_HUD_DefaultLabel");
static_assert(offsetof(HUD_DefaultLabel_C_ExecuteUbergraph_HUD_DefaultLabel, EntryPoint) == 0x000000, "Member 'HUD_DefaultLabel_C_ExecuteUbergraph_HUD_DefaultLabel::EntryPoint' has a wrong offset!");
static_assert(offsetof(HUD_DefaultLabel_C_ExecuteUbergraph_HUD_DefaultLabel, K2Node_Event_IsDesignTime) == 0x000004, "Member 'HUD_DefaultLabel_C_ExecuteUbergraph_HUD_DefaultLabel::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function HUD_DefaultLabel.HUD_DefaultLabel_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct HUD_DefaultLabel_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_DefaultLabel_C_PreConstruct) == 0x000001, "Wrong alignment on HUD_DefaultLabel_C_PreConstruct");
static_assert(sizeof(HUD_DefaultLabel_C_PreConstruct) == 0x000001, "Wrong size on HUD_DefaultLabel_C_PreConstruct");
static_assert(offsetof(HUD_DefaultLabel_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'HUD_DefaultLabel_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function HUD_DefaultLabel.HUD_DefaultLabel_C.SetText
// 0x0018 (0x0018 - 0x0000)
struct HUD_DefaultLabel_C_SetText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(HUD_DefaultLabel_C_SetText) == 0x000008, "Wrong alignment on HUD_DefaultLabel_C_SetText");
static_assert(sizeof(HUD_DefaultLabel_C_SetText) == 0x000018, "Wrong size on HUD_DefaultLabel_C_SetText");
static_assert(offsetof(HUD_DefaultLabel_C_SetText, NewText) == 0x000000, "Member 'HUD_DefaultLabel_C_SetText::NewText' has a wrong offset!");

// Function HUD_DefaultLabel.HUD_DefaultLabel_C.SetFontSize
// 0x0060 (0x0060 - 0x0000)
struct HUD_DefaultLabel_C_SetFontSize final
{
public:
	int32                                         InFontSize;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DF2[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0008(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(HUD_DefaultLabel_C_SetFontSize) == 0x000008, "Wrong alignment on HUD_DefaultLabel_C_SetFontSize");
static_assert(sizeof(HUD_DefaultLabel_C_SetFontSize) == 0x000060, "Wrong size on HUD_DefaultLabel_C_SetFontSize");
static_assert(offsetof(HUD_DefaultLabel_C_SetFontSize, InFontSize) == 0x000000, "Member 'HUD_DefaultLabel_C_SetFontSize::InFontSize' has a wrong offset!");
static_assert(offsetof(HUD_DefaultLabel_C_SetFontSize, K2Node_MakeStruct_SlateFontInfo) == 0x000008, "Member 'HUD_DefaultLabel_C_SetFontSize::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function HUD_DefaultLabel.HUD_DefaultLabel_C.SetTypeFace
// 0x0078 (0x0078 - 0x0000)
struct HUD_DefaultLabel_C_SetTypeFace final
{
public:
	ENUM_AcuminCondensedTypeface                  Param_Typeface;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DF3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0020(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(HUD_DefaultLabel_C_SetTypeFace) == 0x000008, "Wrong alignment on HUD_DefaultLabel_C_SetTypeFace");
static_assert(sizeof(HUD_DefaultLabel_C_SetTypeFace) == 0x000078, "Wrong size on HUD_DefaultLabel_C_SetTypeFace");
static_assert(offsetof(HUD_DefaultLabel_C_SetTypeFace, Param_Typeface) == 0x000000, "Member 'HUD_DefaultLabel_C_SetTypeFace::Param_Typeface' has a wrong offset!");
static_assert(offsetof(HUD_DefaultLabel_C_SetTypeFace, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000008, "Member 'HUD_DefaultLabel_C_SetTypeFace::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_DefaultLabel_C_SetTypeFace, CallFunc_Conv_StringToName_ReturnValue) == 0x000018, "Member 'HUD_DefaultLabel_C_SetTypeFace::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_DefaultLabel_C_SetTypeFace, K2Node_MakeStruct_SlateFontInfo) == 0x000020, "Member 'HUD_DefaultLabel_C_SetTypeFace::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function HUD_DefaultLabel.HUD_DefaultLabel_C.SetJustification
// 0x0001 (0x0001 - 0x0000)
struct HUD_DefaultLabel_C_SetJustification final
{
public:
	ETextJustify                                  InJustification;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_DefaultLabel_C_SetJustification) == 0x000001, "Wrong alignment on HUD_DefaultLabel_C_SetJustification");
static_assert(sizeof(HUD_DefaultLabel_C_SetJustification) == 0x000001, "Wrong size on HUD_DefaultLabel_C_SetJustification");
static_assert(offsetof(HUD_DefaultLabel_C_SetJustification, InJustification) == 0x000000, "Member 'HUD_DefaultLabel_C_SetJustification::InJustification' has a wrong offset!");

// Function HUD_DefaultLabel.HUD_DefaultLabel_C.SetOutlineSettings
// 0x0078 (0x0078 - 0x0000)
struct HUD_DefaultLabel_C_SetOutlineSettings final
{
public:
	struct FFontOutlineSettings                   InFontInfo_OutlineSettings;                        // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0020(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(HUD_DefaultLabel_C_SetOutlineSettings) == 0x000008, "Wrong alignment on HUD_DefaultLabel_C_SetOutlineSettings");
static_assert(sizeof(HUD_DefaultLabel_C_SetOutlineSettings) == 0x000078, "Wrong size on HUD_DefaultLabel_C_SetOutlineSettings");
static_assert(offsetof(HUD_DefaultLabel_C_SetOutlineSettings, InFontInfo_OutlineSettings) == 0x000000, "Member 'HUD_DefaultLabel_C_SetOutlineSettings::InFontInfo_OutlineSettings' has a wrong offset!");
static_assert(offsetof(HUD_DefaultLabel_C_SetOutlineSettings, K2Node_MakeStruct_SlateFontInfo) == 0x000020, "Member 'HUD_DefaultLabel_C_SetOutlineSettings::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function HUD_DefaultLabel.HUD_DefaultLabel_C.SetTextColor
// 0x0040 (0x0040 - 0x0000)
struct HUD_DefaultLabel_C_SetTextColor final
{
public:
	ENUM_MenuColors                               ColorSelector;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DF4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_MenuColors_OutputColor;                   // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DF5[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0018(0x0028)()
};
static_assert(alignof(HUD_DefaultLabel_C_SetTextColor) == 0x000008, "Wrong alignment on HUD_DefaultLabel_C_SetTextColor");
static_assert(sizeof(HUD_DefaultLabel_C_SetTextColor) == 0x000040, "Wrong size on HUD_DefaultLabel_C_SetTextColor");
static_assert(offsetof(HUD_DefaultLabel_C_SetTextColor, ColorSelector) == 0x000000, "Member 'HUD_DefaultLabel_C_SetTextColor::ColorSelector' has a wrong offset!");
static_assert(offsetof(HUD_DefaultLabel_C_SetTextColor, CallFunc_MenuColors_OutputColor) == 0x000004, "Member 'HUD_DefaultLabel_C_SetTextColor::CallFunc_MenuColors_OutputColor' has a wrong offset!");
static_assert(offsetof(HUD_DefaultLabel_C_SetTextColor, K2Node_MakeStruct_SlateColor) == 0x000018, "Member 'HUD_DefaultLabel_C_SetTextColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");

}

