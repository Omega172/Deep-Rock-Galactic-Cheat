#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUD_Frozen

#include "Basic.hpp"

#include "HUD_Frozen_classes.hpp"
#include "HUD_Frozen_parameters.hpp"


namespace CG
{

// Function HUD_Frozen.HUD_Frozen_C.ExecuteUbergraph_HUD_Frozen
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UHUD_Frozen_C::ExecuteUbergraph_HUD_Frozen(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUD_Frozen_C", "ExecuteUbergraph_HUD_Frozen");

	Params::HUD_Frozen_C_ExecuteUbergraph_HUD_Frozen Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HUD_Frozen.HUD_Frozen_C.CustomEvent_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EThawInputDirection                     Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UHUD_Frozen_C::CustomEvent_0(EThawInputDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUD_Frozen_C", "CustomEvent_0");

	Params::HUD_Frozen_C_CustomEvent_0 Parms{};

	Parms.Direction = Direction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HUD_Frozen.HUD_Frozen_C.OnBreakOutInputSuccess_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EThawInputDirection                     Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UHUD_Frozen_C::OnBreakOutInputSuccess_Event_0(EThawInputDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUD_Frozen_C", "OnBreakOutInputSuccess_Event_0");

	Params::HUD_Frozen_C_OnBreakOutInputSuccess_Event_0 Parms{};

	Parms.Direction = Direction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HUD_Frozen.HUD_Frozen_C.ThawInputUpdated
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EThawInputDirection>             Inputs                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Initial                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UHUD_Frozen_C::ThawInputUpdated(const TArray<EThawInputDirection>& Inputs, bool Initial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUD_Frozen_C", "ThawInputUpdated");

	Params::HUD_Frozen_C_ThawInputUpdated Parms{};

	Parms.Inputs = std::move(Inputs);
	Parms.Initial = Initial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HUD_Frozen.HUD_Frozen_C.SetProgress
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_CurrentProgress                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UHUD_Frozen_C::SetProgress(float Param_CurrentProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUD_Frozen_C", "SetProgress");

	Params::HUD_Frozen_C_SetProgress Parms{};

	Parms.Param_CurrentProgress = Param_CurrentProgress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HUD_Frozen.HUD_Frozen_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UHUD_Frozen_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUD_Frozen_C", "Tick");

	Params::HUD_Frozen_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HUD_Frozen.HUD_Frozen_C.OnCharacterStateChanged_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterState                         NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UHUD_Frozen_C::OnCharacterStateChanged_Event(ECharacterState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUD_Frozen_C", "OnCharacterStateChanged_Event");

	Params::HUD_Frozen_C_OnCharacterStateChanged_Event Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HUD_Frozen.HUD_Frozen_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UHUD_Frozen_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUD_Frozen_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HUD_Frozen.HUD_Frozen_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UHUD_Frozen_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUD_Frozen_C", "PreConstruct");

	Params::HUD_Frozen_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}

}

